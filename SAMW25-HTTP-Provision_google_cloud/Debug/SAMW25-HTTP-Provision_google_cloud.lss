
SAMW25-HTTP-Provision_google_cloud.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001089c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000360  20000000  0001089c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001e08  20000360  00010c00  00030360  2**3
                  ALLOC
  3 .stack        00002000  20002168  00012a08  00030360  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY
  6 .debug_info   0009375c  00000000  00000000  000303e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000dd83  00000000  00000000  000c3b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00026f2b  00000000  00000000  000d18c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001ae8  00000000  00000000  000f87eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002638  00000000  00000000  000fa2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00029668  00000000  00000000  000fc90b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002d0f6  00000000  00000000  00125f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a2ba1  00000000  00000000  00153069  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005750  00000000  00000000  001f5c0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 41 00 20 0d 8f 00 00 09 8f 00 00 09 8f 00 00     hA. ............
	...
      2c:	09 8f 00 00 00 00 00 00 00 00 00 00 09 8f 00 00     ................
      3c:	9d 98 00 00 09 8f 00 00 09 8f 00 00 09 8f 00 00     ................
      4c:	55 27 00 00 f9 74 00 00 09 8f 00 00 09 8f 00 00     U'...t..........
      5c:	59 30 00 00 0d 0d 00 00 65 7a 00 00 75 7a 00 00     Y0......ez..uz..
      6c:	85 7a 00 00 95 7a 00 00 a5 7a 00 00 b5 7a 00 00     .z...z...z...z..
      7c:	d9 8e 00 00 e9 8e 00 00 f9 8e 00 00 9d 37 00 00     .............7..
      8c:	ad 37 00 00 bd 37 00 00 00 00 00 00 00 00 00 00     .7...7..........
      9c:	09 8f 00 00 09 8f 00 00 09 8f 00 00 09 8f 00 00     ................
      ac:	09 8f 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000360 	.word	0x20000360
      d4:	00000000 	.word	0x00000000
      d8:	0001089c 	.word	0x0001089c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000364 	.word	0x20000364
     108:	0001089c 	.word	0x0001089c
     10c:	0001089c 	.word	0x0001089c
     110:	00000000 	.word	0x00000000

00000114 <at25dfx_chip_check_presence>:

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     114:	b530      	push	{r4, r5, lr}
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     116:	b085      	sub	sp, #20
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     118:	0004      	movs	r4, r0
     11a:	2300      	movs	r3, #0
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     11c:	9303      	str	r3, [sp, #12]
     11e:	6805      	ldr	r5, [r0, #0]
     120:	4b30      	ldr	r3, [pc, #192]	; (1e4 <at25dfx_chip_check_presence+0xd0>)
     122:	4798      	blx	r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     124:	792b      	ldrb	r3, [r5, #4]
     126:	2b00      	cmp	r3, #0
     128:	d158      	bne.n	1dc <at25dfx_chip_check_presence+0xc8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     12a:	3301      	adds	r3, #1
     12c:	712b      	strb	r3, [r5, #4]
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     12e:	4b2e      	ldr	r3, [pc, #184]	; (1e8 <at25dfx_chip_check_presence+0xd4>)
     130:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     132:	229f      	movs	r2, #159	; 0x9f
     134:	ab01      	add	r3, sp, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     136:	701a      	strb	r2, [r3, #0]
		while (!spi_is_ready_to_write(chip->spi)) {
     138:	7962      	ldrb	r2, [r4, #5]
     13a:	09d1      	lsrs	r1, r2, #7
     13c:	2300      	movs	r3, #0
	if (!spi_is_ready_to_write(module)) {
     13e:	2900      	cmp	r1, #0
     140:	d104      	bne.n	14c <at25dfx_chip_check_presence+0x38>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     142:	0953      	lsrs	r3, r2, #5
		while (!spi_is_ready_to_read(chip->spi)) {
     144:	01db      	lsls	r3, r3, #7
	SercomSpi *const spi_module = &(module->hw->SPI);
     146:	4929      	ldr	r1, [pc, #164]	; (1ec <at25dfx_chip_check_presence+0xd8>)
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     148:	468c      	mov	ip, r1
     14a:	4463      	add	r3, ip
     14c:	211f      	movs	r1, #31
     14e:	4011      	ands	r1, r2
	if (!spi_is_ready_to_read(module)) {
     150:	2201      	movs	r2, #1
     152:	408a      	lsls	r2, r1
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     154:	615a      	str	r2, [r3, #20]
     156:	2201      	movs	r2, #1
     158:	a901      	add	r1, sp, #4
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     15a:	6820      	ldr	r0, [r4, #0]
     15c:	4b24      	ldr	r3, [pc, #144]	; (1f0 <at25dfx_chip_check_presence+0xdc>)
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     15e:	4798      	blx	r3
     160:	2300      	movs	r3, #0
     162:	2203      	movs	r2, #3
     164:	a903      	add	r1, sp, #12
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     166:	6820      	ldr	r0, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     168:	4d22      	ldr	r5, [pc, #136]	; (1f4 <at25dfx_chip_check_presence+0xe0>)
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     16a:	47a8      	blx	r5
	if (port_index < PORT_INST_NUM) {
     16c:	7962      	ldrb	r2, [r4, #5]
     16e:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
     170:	2300      	movs	r3, #0
     172:	2900      	cmp	r1, #0
     174:	d104      	bne.n	180 <at25dfx_chip_check_presence+0x6c>
     176:	0953      	lsrs	r3, r2, #5
     178:	01db      	lsls	r3, r3, #7
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     17a:	491c      	ldr	r1, [pc, #112]	; (1ec <at25dfx_chip_check_presence+0xd8>)
     17c:	468c      	mov	ip, r1
     17e:	4463      	add	r3, ip
     180:	211f      	movs	r1, #31

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     182:	4011      	ands	r1, r2

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     184:	2201      	movs	r2, #1
		return STATUS_ERR_IO;
	}
	return STATUS_OK;
     186:	408a      	lsls	r2, r1
     188:	619a      	str	r2, [r3, #24]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);
     18a:	2300      	movs	r3, #0
	module->locked = false;
     18c:	6822      	ldr	r2, [r4, #0]
     18e:	7113      	strb	r3, [r2, #4]

	return status;
     190:	7923      	ldrb	r3, [r4, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     192:	2b0a      	cmp	r3, #10
     194:	d817      	bhi.n	1c6 <at25dfx_chip_check_presence+0xb2>
		return status;
     196:	009b      	lsls	r3, r3, #2
}
     198:	4a17      	ldr	r2, [pc, #92]	; (1f8 <at25dfx_chip_check_presence+0xe4>)
     19a:	58d3      	ldr	r3, [r2, r3]
     19c:	469f      	mov	pc, r3
     19e:	4b17      	ldr	r3, [pc, #92]	; (1fc <at25dfx_chip_check_presence+0xe8>)
     1a0:	e014      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
     1a2:	4b17      	ldr	r3, [pc, #92]	; (200 <at25dfx_chip_check_presence+0xec>)
     1a4:	e012      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
     1a6:	4b17      	ldr	r3, [pc, #92]	; (204 <at25dfx_chip_check_presence+0xf0>)
     1a8:	e010      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
     1aa:	4b17      	ldr	r3, [pc, #92]	; (208 <at25dfx_chip_check_presence+0xf4>)
		return 0x02451f;
     1ac:	e00e      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x01451f;
     1ae:	4b17      	ldr	r3, [pc, #92]	; (20c <at25dfx_chip_check_presence+0xf8>)
     1b0:	e00c      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x02461f;
     1b2:	4b17      	ldr	r3, [pc, #92]	; (210 <at25dfx_chip_check_presence+0xfc>)
     1b4:	e00a      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x03461f;
     1b6:	4b17      	ldr	r3, [pc, #92]	; (214 <at25dfx_chip_check_presence+0x100>)
     1b8:	e008      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x00861f;
     1ba:	4b17      	ldr	r3, [pc, #92]	; (218 <at25dfx_chip_check_presence+0x104>)
     1bc:	e006      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x01471f;
     1be:	4b17      	ldr	r3, [pc, #92]	; (21c <at25dfx_chip_check_presence+0x108>)
     1c0:	e004      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x00481f;
     1c2:	4b17      	ldr	r3, [pc, #92]	; (220 <at25dfx_chip_check_presence+0x10c>)
     1c4:	e002      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0;
     1c6:	2300      	movs	r3, #0
     1c8:	e000      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x00651f;
     1ca:	4b16      	ldr	r3, [pc, #88]	; (224 <at25dfx_chip_check_presence+0x110>)
	if (id == _at25dfx_get_device_id(chip->type)) {
     1cc:	9a03      	ldr	r2, [sp, #12]
     1ce:	429a      	cmp	r2, r3
     1d0:	d002      	beq.n	1d8 <at25dfx_chip_check_presence+0xc4>
		return STATUS_ERR_NOT_FOUND;
     1d2:	2014      	movs	r0, #20
}
     1d4:	b005      	add	sp, #20
     1d6:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
     1d8:	2000      	movs	r0, #0
     1da:	e7fb      	b.n	1d4 <at25dfx_chip_check_presence+0xc0>
     1dc:	4b02      	ldr	r3, [pc, #8]	; (1e8 <at25dfx_chip_check_presence+0xd4>)
     1de:	4798      	blx	r3
		return status;
     1e0:	2005      	movs	r0, #5
     1e2:	e7f7      	b.n	1d4 <at25dfx_chip_check_presence+0xc0>
     1e4:	000073e5 	.word	0x000073e5
     1e8:	00007425 	.word	0x00007425
     1ec:	41004400 	.word	0x41004400
     1f0:	00007e65 	.word	0x00007e65
     1f4:	00007c9d 	.word	0x00007c9d
     1f8:	0000eaf0 	.word	0x0000eaf0
     1fc:	0000431f 	.word	0x0000431f
     200:	0001441f 	.word	0x0001441f
     204:	0002441f 	.word	0x0002441f
     208:	0002451f 	.word	0x0002451f
     20c:	0001451f 	.word	0x0001451f
     210:	0002461f 	.word	0x0002461f
     214:	0003461f 	.word	0x0003461f
     218:	0000861f 	.word	0x0000861f
     21c:	0001471f 	.word	0x0001471f
     220:	0000481f 	.word	0x0000481f
     224:	0000651f 	.word	0x0000651f

00000228 <at25dfx_chip_read_buffer>:
{
     228:	b5f0      	push	{r4, r5, r6, r7, lr}
     22a:	b085      	sub	sp, #20
     22c:	0004      	movs	r4, r0
     22e:	000e      	movs	r6, r1
     230:	9201      	str	r2, [sp, #4]
     232:	001f      	movs	r7, r3
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     234:	185a      	adds	r2, r3, r1
	switch (type) {
     236:	7903      	ldrb	r3, [r0, #4]
     238:	2b0a      	cmp	r3, #10
     23a:	d815      	bhi.n	268 <at25dfx_chip_read_buffer+0x40>
     23c:	009b      	lsls	r3, r3, #2
     23e:	4932      	ldr	r1, [pc, #200]	; (308 <at25dfx_chip_read_buffer+0xe0>)
     240:	58cb      	ldr	r3, [r1, r3]
     242:	469f      	mov	pc, r3
		return 256 * 1024UL;
     244:	2380      	movs	r3, #128	; 0x80
     246:	02db      	lsls	r3, r3, #11
     248:	e012      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 512 * 1024UL;
     24a:	2380      	movs	r3, #128	; 0x80
     24c:	031b      	lsls	r3, r3, #12
     24e:	e00f      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 1024 * 1024UL;
     250:	2380      	movs	r3, #128	; 0x80
     252:	035b      	lsls	r3, r3, #13
     254:	e00c      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 2048 * 1024UL;
     256:	2380      	movs	r3, #128	; 0x80
     258:	039b      	lsls	r3, r3, #14
     25a:	e009      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 4096 * 1024UL;
     25c:	2380      	movs	r3, #128	; 0x80
     25e:	03db      	lsls	r3, r3, #15
     260:	e006      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 8192 * 1024UL;
     262:	2380      	movs	r3, #128	; 0x80
     264:	041b      	lsls	r3, r3, #16
     266:	e003      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 0;
     268:	2300      	movs	r3, #0
     26a:	e001      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 64 * 1024UL;
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
     270:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     272:	429a      	cmp	r2, r3
     274:	d901      	bls.n	27a <at25dfx_chip_read_buffer+0x52>
}
     276:	b005      	add	sp, #20
     278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     27a:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     27c:	4b23      	ldr	r3, [pc, #140]	; (30c <at25dfx_chip_read_buffer+0xe4>)
     27e:	4798      	blx	r3
	if (module->locked) {
     280:	792b      	ldrb	r3, [r5, #4]
     282:	2b00      	cmp	r3, #0
     284:	d13c      	bne.n	300 <at25dfx_chip_read_buffer+0xd8>
		module->locked = true;
     286:	3301      	adds	r3, #1
     288:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     28a:	4b21      	ldr	r3, [pc, #132]	; (310 <at25dfx_chip_read_buffer+0xe8>)
     28c:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     28e:	230b      	movs	r3, #11
     290:	aa02      	add	r2, sp, #8
     292:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     294:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     296:	0a33      	lsrs	r3, r6, #8
     298:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     29a:	0c36      	lsrs	r6, r6, #16
     29c:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     29e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     2a0:	09d1      	lsrs	r1, r2, #7
		return NULL;
     2a2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2a4:	2900      	cmp	r1, #0
     2a6:	d104      	bne.n	2b2 <at25dfx_chip_read_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
     2a8:	0953      	lsrs	r3, r2, #5
     2aa:	01db      	lsls	r3, r3, #7
     2ac:	4919      	ldr	r1, [pc, #100]	; (314 <at25dfx_chip_read_buffer+0xec>)
     2ae:	468c      	mov	ip, r1
     2b0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2b2:	211f      	movs	r1, #31
     2b4:	4011      	ands	r1, r2
     2b6:	2201      	movs	r2, #1
     2b8:	408a      	lsls	r2, r1
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2ba:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     2bc:	2205      	movs	r2, #5
     2be:	a902      	add	r1, sp, #8
     2c0:	6820      	ldr	r0, [r4, #0]
     2c2:	4b15      	ldr	r3, [pc, #84]	; (318 <at25dfx_chip_read_buffer+0xf0>)
     2c4:	4798      	blx	r3
	if (cmd.length) {
     2c6:	2f00      	cmp	r7, #0
     2c8:	d113      	bne.n	2f2 <at25dfx_chip_read_buffer+0xca>
	port_pin_set_output_level(chip->cs_pin, true);
     2ca:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     2cc:	09d1      	lsrs	r1, r2, #7
		return NULL;
     2ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2d0:	2900      	cmp	r1, #0
     2d2:	d104      	bne.n	2de <at25dfx_chip_read_buffer+0xb6>
		return &(ports[port_index]->Group[group_index]);
     2d4:	0953      	lsrs	r3, r2, #5
     2d6:	01db      	lsls	r3, r3, #7
     2d8:	490e      	ldr	r1, [pc, #56]	; (314 <at25dfx_chip_read_buffer+0xec>)
     2da:	468c      	mov	ip, r1
     2dc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2de:	211f      	movs	r1, #31
     2e0:	4011      	ands	r1, r2
     2e2:	2201      	movs	r2, #1
     2e4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     2e6:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
     2e8:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     2ea:	2200      	movs	r2, #0
     2ec:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
     2ee:	2000      	movs	r0, #0
     2f0:	e7c1      	b.n	276 <at25dfx_chip_read_buffer+0x4e>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     2f2:	2300      	movs	r3, #0
     2f4:	003a      	movs	r2, r7
     2f6:	9901      	ldr	r1, [sp, #4]
     2f8:	6820      	ldr	r0, [r4, #0]
     2fa:	4d08      	ldr	r5, [pc, #32]	; (31c <at25dfx_chip_read_buffer+0xf4>)
     2fc:	47a8      	blx	r5
     2fe:	e7e4      	b.n	2ca <at25dfx_chip_read_buffer+0xa2>
     300:	4b03      	ldr	r3, [pc, #12]	; (310 <at25dfx_chip_read_buffer+0xe8>)
     302:	4798      	blx	r3
		return status;
     304:	2005      	movs	r0, #5
     306:	e7b6      	b.n	276 <at25dfx_chip_read_buffer+0x4e>
     308:	0000eb1c 	.word	0x0000eb1c
     30c:	000073e5 	.word	0x000073e5
     310:	00007425 	.word	0x00007425
     314:	41004400 	.word	0x41004400
     318:	00007e65 	.word	0x00007e65
     31c:	00007c9d 	.word	0x00007c9d

00000320 <at25dfx_chip_write_buffer>:
{
     320:	b5f0      	push	{r4, r5, r6, r7, lr}
     322:	46de      	mov	lr, fp
     324:	4657      	mov	r7, sl
     326:	464e      	mov	r6, r9
     328:	4645      	mov	r5, r8
     32a:	b5e0      	push	{r5, r6, r7, lr}
     32c:	b085      	sub	sp, #20
     32e:	0005      	movs	r5, r0
     330:	000e      	movs	r6, r1
     332:	9201      	str	r2, [sp, #4]
     334:	001f      	movs	r7, r3
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     336:	185a      	adds	r2, r3, r1
	switch (type) {
     338:	7903      	ldrb	r3, [r0, #4]
     33a:	2b0a      	cmp	r3, #10
     33c:	d815      	bhi.n	36a <at25dfx_chip_write_buffer+0x4a>
     33e:	009b      	lsls	r3, r3, #2
     340:	49ae      	ldr	r1, [pc, #696]	; (5fc <at25dfx_chip_write_buffer+0x2dc>)
     342:	58cb      	ldr	r3, [r1, r3]
     344:	469f      	mov	pc, r3
		return 256 * 1024UL;
     346:	2380      	movs	r3, #128	; 0x80
     348:	02db      	lsls	r3, r3, #11
     34a:	e012      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
     34c:	2380      	movs	r3, #128	; 0x80
     34e:	031b      	lsls	r3, r3, #12
     350:	e00f      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
     352:	2380      	movs	r3, #128	; 0x80
     354:	035b      	lsls	r3, r3, #13
     356:	e00c      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
     358:	2380      	movs	r3, #128	; 0x80
     35a:	039b      	lsls	r3, r3, #14
     35c:	e009      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
     35e:	2380      	movs	r3, #128	; 0x80
     360:	03db      	lsls	r3, r3, #15
     362:	e006      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
     364:	2380      	movs	r3, #128	; 0x80
     366:	041b      	lsls	r3, r3, #16
     368:	e003      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 0;
     36a:	2300      	movs	r3, #0
     36c:	e001      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
     36e:	2380      	movs	r3, #128	; 0x80
     370:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
     372:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     374:	429a      	cmp	r2, r3
     376:	d906      	bls.n	386 <at25dfx_chip_write_buffer+0x66>
}
     378:	b005      	add	sp, #20
     37a:	bc3c      	pop	{r2, r3, r4, r5}
     37c:	4690      	mov	r8, r2
     37e:	4699      	mov	r9, r3
     380:	46a2      	mov	sl, r4
     382:	46ab      	mov	fp, r5
     384:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     386:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
     388:	4b9d      	ldr	r3, [pc, #628]	; (600 <at25dfx_chip_write_buffer+0x2e0>)
     38a:	4798      	blx	r3
	if (module->locked) {
     38c:	7923      	ldrb	r3, [r4, #4]
     38e:	2b00      	cmp	r3, #0
     390:	d000      	beq.n	394 <at25dfx_chip_write_buffer+0x74>
     392:	e12e      	b.n	5f2 <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
     394:	3301      	adds	r3, #1
     396:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
     398:	4b9a      	ldr	r3, [pc, #616]	; (604 <at25dfx_chip_write_buffer+0x2e4>)
     39a:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     39c:	2306      	movs	r3, #6
     39e:	aa02      	add	r2, sp, #8
     3a0:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     3a2:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     3a4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     3a6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3a8:	2900      	cmp	r1, #0
     3aa:	d104      	bne.n	3b6 <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
     3ac:	0953      	lsrs	r3, r2, #5
     3ae:	01db      	lsls	r3, r3, #7
     3b0:	4995      	ldr	r1, [pc, #596]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     3b2:	468c      	mov	ip, r1
     3b4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3b6:	211f      	movs	r1, #31
     3b8:	4011      	ands	r1, r2
     3ba:	2201      	movs	r2, #1
     3bc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     3be:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     3c0:	2201      	movs	r2, #1
     3c2:	a902      	add	r1, sp, #8
     3c4:	6828      	ldr	r0, [r5, #0]
     3c6:	4b91      	ldr	r3, [pc, #580]	; (60c <at25dfx_chip_write_buffer+0x2ec>)
     3c8:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     3ca:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     3cc:	09d1      	lsrs	r1, r2, #7
		return NULL;
     3ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3d0:	2900      	cmp	r1, #0
     3d2:	d104      	bne.n	3de <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
     3d4:	0953      	lsrs	r3, r2, #5
     3d6:	01db      	lsls	r3, r3, #7
     3d8:	498b      	ldr	r1, [pc, #556]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     3da:	468c      	mov	ip, r1
     3dc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3de:	211f      	movs	r1, #31
     3e0:	4011      	ands	r1, r2
     3e2:	2201      	movs	r2, #1
     3e4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     3e6:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
     3e8:	22ff      	movs	r2, #255	; 0xff
     3ea:	4032      	ands	r2, r6
     3ec:	2380      	movs	r3, #128	; 0x80
     3ee:	005b      	lsls	r3, r3, #1
     3f0:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
     3f2:	1c1a      	adds	r2, r3, #0
     3f4:	b29b      	uxth	r3, r3
     3f6:	42bb      	cmp	r3, r7
     3f8:	d900      	bls.n	3fc <at25dfx_chip_write_buffer+0xdc>
     3fa:	1c3a      	adds	r2, r7, #0
     3fc:	b293      	uxth	r3, r2
     3fe:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
     400:	2302      	movs	r3, #2
     402:	aa02      	add	r2, sp, #8
     404:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     406:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     408:	0a33      	lsrs	r3, r6, #8
     40a:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     40c:	0c33      	lsrs	r3, r6, #16
     40e:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     410:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     412:	09d1      	lsrs	r1, r2, #7
		return NULL;
     414:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     416:	2900      	cmp	r1, #0
     418:	d104      	bne.n	424 <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
     41a:	0953      	lsrs	r3, r2, #5
     41c:	01db      	lsls	r3, r3, #7
     41e:	497a      	ldr	r1, [pc, #488]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     420:	468c      	mov	ip, r1
     422:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     424:	211f      	movs	r1, #31
     426:	4011      	ands	r1, r2
     428:	2201      	movs	r2, #1
     42a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     42c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     42e:	2204      	movs	r2, #4
     430:	a902      	add	r1, sp, #8
     432:	6828      	ldr	r0, [r5, #0]
     434:	4b75      	ldr	r3, [pc, #468]	; (60c <at25dfx_chip_write_buffer+0x2ec>)
     436:	4798      	blx	r3
	if (cmd.length) {
     438:	4653      	mov	r3, sl
     43a:	2b00      	cmp	r3, #0
     43c:	d145      	bne.n	4ca <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
     43e:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     440:	09d1      	lsrs	r1, r2, #7
		return NULL;
     442:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     444:	2900      	cmp	r1, #0
     446:	d104      	bne.n	452 <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
     448:	0953      	lsrs	r3, r2, #5
     44a:	01db      	lsls	r3, r3, #7
     44c:	496e      	ldr	r1, [pc, #440]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     44e:	468c      	mov	ip, r1
     450:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     452:	211f      	movs	r1, #31
     454:	4011      	ands	r1, r2
     456:	2201      	movs	r2, #1
     458:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     45a:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     45c:	682b      	ldr	r3, [r5, #0]
     45e:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
     460:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     462:	7e0b      	ldrb	r3, [r1, #24]
     464:	4213      	tst	r3, r2
     466:	d0fc      	beq.n	462 <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
     468:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     46a:	09d1      	lsrs	r1, r2, #7
		return NULL;
     46c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     46e:	2900      	cmp	r1, #0
     470:	d104      	bne.n	47c <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
     472:	0953      	lsrs	r3, r2, #5
     474:	01db      	lsls	r3, r3, #7
     476:	4964      	ldr	r1, [pc, #400]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     478:	468c      	mov	ip, r1
     47a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     47c:	211f      	movs	r1, #31
     47e:	4011      	ands	r1, r2
     480:	2201      	movs	r2, #1
     482:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     484:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     486:	682b      	ldr	r3, [r5, #0]
     488:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     48a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     48c:	07d2      	lsls	r2, r2, #31
     48e:	d501      	bpl.n	494 <at25dfx_chip_write_buffer+0x174>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     490:	2205      	movs	r2, #5
     492:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     494:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     496:	6802      	ldr	r2, [r0, #0]
     498:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     49a:	7e13      	ldrb	r3, [r2, #24]
     49c:	420b      	tst	r3, r1
     49e:	d0fc      	beq.n	49a <at25dfx_chip_write_buffer+0x17a>
     4a0:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     4a2:	2400      	movs	r4, #0
	if (!spi_is_ready_to_read(module)) {
     4a4:	075b      	lsls	r3, r3, #29
     4a6:	d509      	bpl.n	4bc <at25dfx_chip_write_buffer+0x19c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     4a8:	8b53      	ldrh	r3, [r2, #26]
     4aa:	075b      	lsls	r3, r3, #29
     4ac:	d501      	bpl.n	4b2 <at25dfx_chip_write_buffer+0x192>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     4ae:	2304      	movs	r3, #4
     4b0:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4b2:	7983      	ldrb	r3, [r0, #6]
     4b4:	2b01      	cmp	r3, #1
     4b6:	d00e      	beq.n	4d6 <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4b8:	6a94      	ldr	r4, [r2, #40]	; 0x28
     4ba:	b2e4      	uxtb	r4, r4
		while (!spi_is_ready_to_write(chip->spi)) {
     4bc:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4be:	2300      	movs	r3, #0
     4c0:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(chip->spi)) {
     4c2:	2004      	movs	r0, #4
     4c4:	46b4      	mov	ip, r6
     4c6:	002e      	movs	r6, r5
     4c8:	e010      	b.n	4ec <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     4ca:	4652      	mov	r2, sl
     4cc:	9901      	ldr	r1, [sp, #4]
     4ce:	6828      	ldr	r0, [r5, #0]
     4d0:	4b4e      	ldr	r3, [pc, #312]	; (60c <at25dfx_chip_write_buffer+0x2ec>)
     4d2:	4798      	blx	r3
     4d4:	e7b3      	b.n	43e <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     4d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
     4d8:	05db      	lsls	r3, r3, #23
     4da:	0ddc      	lsrs	r4, r3, #23
     4dc:	e7ee      	b.n	4bc <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4de:	79ab      	ldrb	r3, [r5, #6]
     4e0:	2b01      	cmp	r3, #1
     4e2:	d01a      	beq.n	51a <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4e4:	6a94      	ldr	r4, [r2, #40]	; 0x28
     4e6:	b2e4      	uxtb	r4, r4
	} while (status_reg & AT25DFX_STATUS_BUSY);
     4e8:	4221      	tst	r1, r4
     4ea:	d01a      	beq.n	522 <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
     4ec:	6833      	ldr	r3, [r6, #0]
     4ee:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     4f0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     4f2:	420b      	tst	r3, r1
     4f4:	d0fc      	beq.n	4f0 <at25dfx_chip_write_buffer+0x1d0>
     4f6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     4f8:	420b      	tst	r3, r1
     4fa:	d001      	beq.n	500 <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4fc:	4643      	mov	r3, r8
     4fe:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     500:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     502:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     504:	7e13      	ldrb	r3, [r2, #24]
     506:	4203      	tst	r3, r0
     508:	d0fc      	beq.n	504 <at25dfx_chip_write_buffer+0x1e4>
     50a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     50c:	4203      	tst	r3, r0
     50e:	d0eb      	beq.n	4e8 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     510:	8b53      	ldrh	r3, [r2, #26]
     512:	4203      	tst	r3, r0
     514:	d0e3      	beq.n	4de <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     516:	8350      	strh	r0, [r2, #26]
     518:	e7e1      	b.n	4de <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     51a:	6a94      	ldr	r4, [r2, #40]	; 0x28
     51c:	05e4      	lsls	r4, r4, #23
     51e:	0de4      	lsrs	r4, r4, #23
     520:	e7e2      	b.n	4e8 <at25dfx_chip_write_buffer+0x1c8>
     522:	0035      	movs	r5, r6
     524:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
     526:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     528:	09d1      	lsrs	r1, r2, #7
		return NULL;
     52a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     52c:	2900      	cmp	r1, #0
     52e:	d104      	bne.n	53a <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
     530:	0953      	lsrs	r3, r2, #5
     532:	01db      	lsls	r3, r3, #7
     534:	4934      	ldr	r1, [pc, #208]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     536:	468c      	mov	ip, r1
     538:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     53a:	211f      	movs	r1, #31
     53c:	4011      	ands	r1, r2
     53e:	2201      	movs	r2, #1
     540:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     542:	619a      	str	r2, [r3, #24]
		return STATUS_ERR_IO;
     544:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
     546:	06a3      	lsls	r3, r4, #26
     548:	d44f      	bmi.n	5ea <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
     54a:	4653      	mov	r3, sl
     54c:	1aff      	subs	r7, r7, r3
     54e:	b2bb      	uxth	r3, r7
     550:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
     552:	9a01      	ldr	r2, [sp, #4]
     554:	4691      	mov	r9, r2
	return STATUS_OK;
     556:	2000      	movs	r0, #0
     558:	2b00      	cmp	r3, #0
     55a:	d046      	beq.n	5ea <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     55c:	231f      	movs	r3, #31
     55e:	469b      	mov	fp, r3
     560:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     562:	4b2a      	ldr	r3, [pc, #168]	; (60c <at25dfx_chip_write_buffer+0x2ec>)
     564:	4698      	mov	r8, r3
     566:	4653      	mov	r3, sl
     568:	9301      	str	r3, [sp, #4]
     56a:	468a      	mov	sl, r1
     56c:	e058      	b.n	620 <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     56e:	001a      	movs	r2, r3
     570:	4649      	mov	r1, r9
     572:	6828      	ldr	r0, [r5, #0]
     574:	4b25      	ldr	r3, [pc, #148]	; (60c <at25dfx_chip_write_buffer+0x2ec>)
     576:	4798      	blx	r3
     578:	e0a4      	b.n	6c4 <at25dfx_chip_write_buffer+0x3a4>
     57a:	6a90      	ldr	r0, [r2, #40]	; 0x28
     57c:	05c0      	lsls	r0, r0, #23
     57e:	0dc0      	lsrs	r0, r0, #23
     580:	e0e1      	b.n	746 <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     582:	79bb      	ldrb	r3, [r7, #6]
     584:	2b01      	cmp	r3, #1
     586:	d01a      	beq.n	5be <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     588:	6a90      	ldr	r0, [r2, #40]	; 0x28
     58a:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
     58c:	4204      	tst	r4, r0
     58e:	d01a      	beq.n	5c6 <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
     590:	682b      	ldr	r3, [r5, #0]
     592:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     594:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     596:	4223      	tst	r3, r4
     598:	d0fc      	beq.n	594 <at25dfx_chip_write_buffer+0x274>
     59a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     59c:	4223      	tst	r3, r4
     59e:	d001      	beq.n	5a4 <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     5a0:	2300      	movs	r3, #0
     5a2:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     5a4:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     5a6:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     5a8:	7e13      	ldrb	r3, [r2, #24]
     5aa:	420b      	tst	r3, r1
     5ac:	d0fc      	beq.n	5a8 <at25dfx_chip_write_buffer+0x288>
     5ae:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     5b0:	420b      	tst	r3, r1
     5b2:	d0eb      	beq.n	58c <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     5b4:	8b53      	ldrh	r3, [r2, #26]
     5b6:	420b      	tst	r3, r1
     5b8:	d0e3      	beq.n	582 <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     5ba:	8351      	strh	r1, [r2, #26]
     5bc:	e7e1      	b.n	582 <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     5be:	6a90      	ldr	r0, [r2, #40]	; 0x28
     5c0:	05c0      	lsls	r0, r0, #23
     5c2:	0dc0      	lsrs	r0, r0, #23
     5c4:	e7e2      	b.n	58c <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
     5c6:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     5c8:	09d9      	lsrs	r1, r3, #7
		return NULL;
     5ca:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     5cc:	2900      	cmp	r1, #0
     5ce:	d104      	bne.n	5da <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
     5d0:	095a      	lsrs	r2, r3, #5
     5d2:	01d2      	lsls	r2, r2, #7
     5d4:	490c      	ldr	r1, [pc, #48]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     5d6:	468c      	mov	ip, r1
     5d8:	4462      	add	r2, ip
     5da:	4659      	mov	r1, fp
     5dc:	400b      	ands	r3, r1
     5de:	0021      	movs	r1, r4
     5e0:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     5e2:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
     5e4:	0683      	lsls	r3, r0, #26
     5e6:	d513      	bpl.n	610 <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
     5e8:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
     5ea:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
     5ec:	2200      	movs	r2, #0
     5ee:	711a      	strb	r2, [r3, #4]
	return status;
     5f0:	e6c2      	b.n	378 <at25dfx_chip_write_buffer+0x58>
     5f2:	4b04      	ldr	r3, [pc, #16]	; (604 <at25dfx_chip_write_buffer+0x2e4>)
     5f4:	4798      	blx	r3
		return status;
     5f6:	2005      	movs	r0, #5
     5f8:	e6be      	b.n	378 <at25dfx_chip_write_buffer+0x58>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	0000eb4c 	.word	0x0000eb4c
     600:	000073e5 	.word	0x000073e5
     604:	00007425 	.word	0x00007425
     608:	41004400 	.word	0x41004400
     60c:	00007e65 	.word	0x00007e65
		length -= cmd.length;
     610:	4653      	mov	r3, sl
     612:	9a01      	ldr	r2, [sp, #4]
     614:	1a9b      	subs	r3, r3, r2
     616:	b29b      	uxth	r3, r3
     618:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
     61a:	2b00      	cmp	r3, #0
     61c:	d100      	bne.n	620 <at25dfx_chip_write_buffer+0x300>
     61e:	e094      	b.n	74a <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
     620:	ab02      	add	r3, sp, #8
     622:	2206      	movs	r2, #6
     624:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     626:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     628:	09d9      	lsrs	r1, r3, #7
		return NULL;
     62a:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     62c:	2900      	cmp	r1, #0
     62e:	d104      	bne.n	63a <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
     630:	095a      	lsrs	r2, r3, #5
     632:	01d2      	lsls	r2, r2, #7
     634:	4946      	ldr	r1, [pc, #280]	; (750 <at25dfx_chip_write_buffer+0x430>)
     636:	468c      	mov	ip, r1
     638:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     63a:	4659      	mov	r1, fp
     63c:	400b      	ands	r3, r1
     63e:	0021      	movs	r1, r4
     640:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     642:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     644:	0022      	movs	r2, r4
     646:	a902      	add	r1, sp, #8
     648:	6828      	ldr	r0, [r5, #0]
     64a:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
     64c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     64e:	09d9      	lsrs	r1, r3, #7
		return NULL;
     650:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     652:	2900      	cmp	r1, #0
     654:	d104      	bne.n	660 <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
     656:	095a      	lsrs	r2, r3, #5
     658:	01d2      	lsls	r2, r2, #7
     65a:	493d      	ldr	r1, [pc, #244]	; (750 <at25dfx_chip_write_buffer+0x430>)
     65c:	468c      	mov	ip, r1
     65e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     660:	4659      	mov	r1, fp
     662:	400b      	ands	r3, r1
     664:	0021      	movs	r1, r4
     666:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     668:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
     66a:	9a01      	ldr	r2, [sp, #4]
     66c:	4694      	mov	ip, r2
     66e:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
     670:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     672:	4657      	mov	r7, sl
     674:	2380      	movs	r3, #128	; 0x80
     676:	005b      	lsls	r3, r3, #1
     678:	459a      	cmp	sl, r3
     67a:	d901      	bls.n	680 <at25dfx_chip_write_buffer+0x360>
     67c:	4b35      	ldr	r3, [pc, #212]	; (754 <at25dfx_chip_write_buffer+0x434>)
     67e:	881f      	ldrh	r7, [r3, #0]
     680:	b2bb      	uxth	r3, r7
     682:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
     684:	2302      	movs	r3, #2
     686:	aa02      	add	r2, sp, #8
     688:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     68a:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     68c:	0a33      	lsrs	r3, r6, #8
     68e:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     690:	0c33      	lsrs	r3, r6, #16
     692:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     694:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     696:	09d9      	lsrs	r1, r3, #7
		return NULL;
     698:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     69a:	2900      	cmp	r1, #0
     69c:	d104      	bne.n	6a8 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
     69e:	095a      	lsrs	r2, r3, #5
     6a0:	01d2      	lsls	r2, r2, #7
     6a2:	492b      	ldr	r1, [pc, #172]	; (750 <at25dfx_chip_write_buffer+0x430>)
     6a4:	468c      	mov	ip, r1
     6a6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6a8:	4659      	mov	r1, fp
     6aa:	400b      	ands	r3, r1
     6ac:	0021      	movs	r1, r4
     6ae:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     6b0:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     6b2:	2204      	movs	r2, #4
     6b4:	a902      	add	r1, sp, #8
     6b6:	6828      	ldr	r0, [r5, #0]
     6b8:	4b27      	ldr	r3, [pc, #156]	; (758 <at25dfx_chip_write_buffer+0x438>)
     6ba:	4798      	blx	r3
	if (cmd.length) {
     6bc:	9b01      	ldr	r3, [sp, #4]
     6be:	2b00      	cmp	r3, #0
     6c0:	d000      	beq.n	6c4 <at25dfx_chip_write_buffer+0x3a4>
     6c2:	e754      	b.n	56e <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
     6c4:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     6c6:	09d9      	lsrs	r1, r3, #7
		return NULL;
     6c8:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     6ca:	2900      	cmp	r1, #0
     6cc:	d104      	bne.n	6d8 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
     6ce:	095a      	lsrs	r2, r3, #5
     6d0:	01d2      	lsls	r2, r2, #7
     6d2:	491f      	ldr	r1, [pc, #124]	; (750 <at25dfx_chip_write_buffer+0x430>)
     6d4:	468c      	mov	ip, r1
     6d6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6d8:	4659      	mov	r1, fp
     6da:	400b      	ands	r3, r1
     6dc:	0021      	movs	r1, r4
     6de:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     6e0:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     6e2:	682b      	ldr	r3, [r5, #0]
     6e4:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     6e6:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
     6e8:	4223      	tst	r3, r4
     6ea:	d0fc      	beq.n	6e6 <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
     6ec:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     6ee:	09d9      	lsrs	r1, r3, #7
		return NULL;
     6f0:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     6f2:	2900      	cmp	r1, #0
     6f4:	d104      	bne.n	700 <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
     6f6:	095a      	lsrs	r2, r3, #5
     6f8:	01d2      	lsls	r2, r2, #7
     6fa:	4915      	ldr	r1, [pc, #84]	; (750 <at25dfx_chip_write_buffer+0x430>)
     6fc:	468c      	mov	ip, r1
     6fe:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     700:	4659      	mov	r1, fp
     702:	400b      	ands	r3, r1
     704:	0021      	movs	r1, r4
     706:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     708:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     70a:	682b      	ldr	r3, [r5, #0]
     70c:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     70e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     710:	4222      	tst	r2, r4
     712:	d001      	beq.n	718 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     714:	2205      	movs	r2, #5
     716:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     718:	682b      	ldr	r3, [r5, #0]
     71a:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     71c:	681a      	ldr	r2, [r3, #0]
     71e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     720:	7e13      	ldrb	r3, [r2, #24]
     722:	420b      	tst	r3, r1
     724:	d0fc      	beq.n	720 <at25dfx_chip_write_buffer+0x400>
     726:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     728:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
     72a:	075b      	lsls	r3, r3, #29
     72c:	d50b      	bpl.n	746 <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     72e:	8b53      	ldrh	r3, [r2, #26]
     730:	075b      	lsls	r3, r3, #29
     732:	d501      	bpl.n	738 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     734:	2304      	movs	r3, #4
     736:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     738:	4663      	mov	r3, ip
     73a:	799b      	ldrb	r3, [r3, #6]
     73c:	2b01      	cmp	r3, #1
     73e:	d100      	bne.n	742 <at25dfx_chip_write_buffer+0x422>
     740:	e71b      	b.n	57a <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     742:	6a90      	ldr	r0, [r2, #40]	; 0x28
     744:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
     746:	2104      	movs	r1, #4
     748:	e722      	b.n	590 <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
     74a:	2000      	movs	r0, #0
     74c:	e74d      	b.n	5ea <at25dfx_chip_write_buffer+0x2ca>
     74e:	46c0      	nop			; (mov r8, r8)
     750:	41004400 	.word	0x41004400
     754:	0000eb48 	.word	0x0000eb48
     758:	00007e65 	.word	0x00007e65

0000075c <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
     75c:	b5f0      	push	{r4, r5, r6, r7, lr}
     75e:	b083      	sub	sp, #12
     760:	0004      	movs	r4, r0
     762:	000e      	movs	r6, r1
     764:	0015      	movs	r5, r2
	switch (type) {
     766:	7903      	ldrb	r3, [r0, #4]
     768:	2b0a      	cmp	r3, #10
     76a:	d900      	bls.n	76e <at25dfx_chip_erase_block+0x12>
     76c:	e0f2      	b.n	954 <at25dfx_chip_erase_block+0x1f8>
     76e:	009b      	lsls	r3, r3, #2
     770:	4a7b      	ldr	r2, [pc, #492]	; (960 <at25dfx_chip_erase_block+0x204>)
     772:	58d3      	ldr	r3, [r2, r3]
     774:	469f      	mov	pc, r3
		return 256 * 1024UL;
     776:	2380      	movs	r3, #128	; 0x80
     778:	02db      	lsls	r3, r3, #11
     77a:	e010      	b.n	79e <at25dfx_chip_erase_block+0x42>
		return 512 * 1024UL;
     77c:	2380      	movs	r3, #128	; 0x80
     77e:	031b      	lsls	r3, r3, #12
     780:	e00d      	b.n	79e <at25dfx_chip_erase_block+0x42>
		return 1024 * 1024UL;
     782:	2380      	movs	r3, #128	; 0x80
     784:	035b      	lsls	r3, r3, #13
     786:	e00a      	b.n	79e <at25dfx_chip_erase_block+0x42>
		return 2048 * 1024UL;
     788:	2380      	movs	r3, #128	; 0x80
     78a:	039b      	lsls	r3, r3, #14
     78c:	e007      	b.n	79e <at25dfx_chip_erase_block+0x42>
		return 4096 * 1024UL;
     78e:	2380      	movs	r3, #128	; 0x80
     790:	03db      	lsls	r3, r3, #15
     792:	e004      	b.n	79e <at25dfx_chip_erase_block+0x42>
		return 8192 * 1024UL;
     794:	2380      	movs	r3, #128	; 0x80
     796:	041b      	lsls	r3, r3, #16
     798:	e001      	b.n	79e <at25dfx_chip_erase_block+0x42>
		return 64 * 1024UL;
     79a:	2380      	movs	r3, #128	; 0x80
     79c:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     79e:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
     7a0:	429e      	cmp	r6, r3
     7a2:	d301      	bcc.n	7a8 <at25dfx_chip_erase_block+0x4c>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
     7a4:	b003      	add	sp, #12
     7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     7a8:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
     7aa:	4b6e      	ldr	r3, [pc, #440]	; (964 <at25dfx_chip_erase_block+0x208>)
     7ac:	4798      	blx	r3
	if (module->locked) {
     7ae:	793b      	ldrb	r3, [r7, #4]
     7b0:	2b00      	cmp	r3, #0
     7b2:	d000      	beq.n	7b6 <at25dfx_chip_erase_block+0x5a>
     7b4:	e0d0      	b.n	958 <at25dfx_chip_erase_block+0x1fc>
		module->locked = true;
     7b6:	3301      	adds	r3, #1
     7b8:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
     7ba:	4b6b      	ldr	r3, [pc, #428]	; (968 <at25dfx_chip_erase_block+0x20c>)
     7bc:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     7be:	2306      	movs	r3, #6
     7c0:	466a      	mov	r2, sp
     7c2:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     7c4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     7c6:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7c8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7ca:	2900      	cmp	r1, #0
     7cc:	d104      	bne.n	7d8 <at25dfx_chip_erase_block+0x7c>
		return &(ports[port_index]->Group[group_index]);
     7ce:	0953      	lsrs	r3, r2, #5
     7d0:	01db      	lsls	r3, r3, #7
     7d2:	4966      	ldr	r1, [pc, #408]	; (96c <at25dfx_chip_erase_block+0x210>)
     7d4:	468c      	mov	ip, r1
     7d6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7d8:	211f      	movs	r1, #31
     7da:	4011      	ands	r1, r2
     7dc:	2201      	movs	r2, #1
     7de:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     7e0:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     7e2:	2201      	movs	r2, #1
     7e4:	4669      	mov	r1, sp
     7e6:	6820      	ldr	r0, [r4, #0]
     7e8:	4b61      	ldr	r3, [pc, #388]	; (970 <at25dfx_chip_erase_block+0x214>)
     7ea:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     7ec:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     7ee:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7f0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7f2:	2900      	cmp	r1, #0
     7f4:	d104      	bne.n	800 <at25dfx_chip_erase_block+0xa4>
		return &(ports[port_index]->Group[group_index]);
     7f6:	0953      	lsrs	r3, r2, #5
     7f8:	01db      	lsls	r3, r3, #7
     7fa:	495c      	ldr	r1, [pc, #368]	; (96c <at25dfx_chip_erase_block+0x210>)
     7fc:	468c      	mov	ip, r1
     7fe:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     800:	211f      	movs	r1, #31
     802:	4011      	ands	r1, r2
     804:	2201      	movs	r2, #1
     806:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     808:	619a      	str	r2, [r3, #24]
	switch (block_size) {
     80a:	2d01      	cmp	r5, #1
     80c:	d006      	beq.n	81c <at25dfx_chip_erase_block+0xc0>
     80e:	2d00      	cmp	r5, #0
     810:	d063      	beq.n	8da <at25dfx_chip_erase_block+0x17e>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
     812:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
     814:	2d02      	cmp	r5, #2
     816:	d002      	beq.n	81e <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = (enum at25dfx_command_opcode)0;
     818:	2300      	movs	r3, #0
     81a:	e000      	b.n	81e <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
     81c:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
     81e:	466a      	mov	r2, sp
     820:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     822:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     824:	0a33      	lsrs	r3, r6, #8
     826:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     828:	0c36      	lsrs	r6, r6, #16
     82a:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     82c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     82e:	09d1      	lsrs	r1, r2, #7
		return NULL;
     830:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     832:	2900      	cmp	r1, #0
     834:	d104      	bne.n	840 <at25dfx_chip_erase_block+0xe4>
		return &(ports[port_index]->Group[group_index]);
     836:	0953      	lsrs	r3, r2, #5
     838:	01db      	lsls	r3, r3, #7
     83a:	494c      	ldr	r1, [pc, #304]	; (96c <at25dfx_chip_erase_block+0x210>)
     83c:	468c      	mov	ip, r1
     83e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     840:	211f      	movs	r1, #31
     842:	4011      	ands	r1, r2
     844:	2201      	movs	r2, #1
     846:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     848:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     84a:	2204      	movs	r2, #4
     84c:	4669      	mov	r1, sp
     84e:	6820      	ldr	r0, [r4, #0]
     850:	4b47      	ldr	r3, [pc, #284]	; (970 <at25dfx_chip_erase_block+0x214>)
     852:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     854:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     856:	09d1      	lsrs	r1, r2, #7
		return NULL;
     858:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     85a:	2900      	cmp	r1, #0
     85c:	d104      	bne.n	868 <at25dfx_chip_erase_block+0x10c>
		return &(ports[port_index]->Group[group_index]);
     85e:	0953      	lsrs	r3, r2, #5
     860:	01db      	lsls	r3, r3, #7
     862:	4942      	ldr	r1, [pc, #264]	; (96c <at25dfx_chip_erase_block+0x210>)
     864:	468c      	mov	ip, r1
     866:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     868:	211f      	movs	r1, #31
     86a:	4011      	ands	r1, r2
     86c:	2201      	movs	r2, #1
     86e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     870:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     872:	6823      	ldr	r3, [r4, #0]
     874:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
     876:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     878:	7e0b      	ldrb	r3, [r1, #24]
     87a:	4213      	tst	r3, r2
     87c:	d0fc      	beq.n	878 <at25dfx_chip_erase_block+0x11c>
	port_pin_set_output_level(chip->cs_pin, false);
     87e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     880:	09d1      	lsrs	r1, r2, #7
		return NULL;
     882:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     884:	2900      	cmp	r1, #0
     886:	d104      	bne.n	892 <at25dfx_chip_erase_block+0x136>
		return &(ports[port_index]->Group[group_index]);
     888:	0953      	lsrs	r3, r2, #5
     88a:	01db      	lsls	r3, r3, #7
     88c:	4937      	ldr	r1, [pc, #220]	; (96c <at25dfx_chip_erase_block+0x210>)
     88e:	468c      	mov	ip, r1
     890:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     892:	211f      	movs	r1, #31
     894:	4011      	ands	r1, r2
     896:	2201      	movs	r2, #1
     898:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     89a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     89c:	6823      	ldr	r3, [r4, #0]
     89e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8a0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     8a2:	07d2      	lsls	r2, r2, #31
     8a4:	d501      	bpl.n	8aa <at25dfx_chip_erase_block+0x14e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8a6:	2205      	movs	r2, #5
     8a8:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     8aa:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     8ac:	6802      	ldr	r2, [r0, #0]
     8ae:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     8b0:	7e13      	ldrb	r3, [r2, #24]
     8b2:	420b      	tst	r3, r1
     8b4:	d0fc      	beq.n	8b0 <at25dfx_chip_erase_block+0x154>
     8b6:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     8b8:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
     8ba:	075b      	lsls	r3, r3, #29
     8bc:	d509      	bpl.n	8d2 <at25dfx_chip_erase_block+0x176>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8be:	8b53      	ldrh	r3, [r2, #26]
     8c0:	075b      	lsls	r3, r3, #29
     8c2:	d501      	bpl.n	8c8 <at25dfx_chip_erase_block+0x16c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     8c4:	2304      	movs	r3, #4
     8c6:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8c8:	7983      	ldrb	r3, [r0, #6]
     8ca:	2b01      	cmp	r3, #1
     8cc:	d007      	beq.n	8de <at25dfx_chip_erase_block+0x182>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8ce:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8d0:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
     8d2:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8d4:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
     8d6:	2004      	movs	r0, #4
     8d8:	e00c      	b.n	8f4 <at25dfx_chip_erase_block+0x198>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
     8da:	2320      	movs	r3, #32
     8dc:	e79f      	b.n	81e <at25dfx_chip_erase_block+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     8de:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8e0:	05ed      	lsls	r5, r5, #23
     8e2:	0ded      	lsrs	r5, r5, #23
     8e4:	e7f5      	b.n	8d2 <at25dfx_chip_erase_block+0x176>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8e6:	79b3      	ldrb	r3, [r6, #6]
     8e8:	2b01      	cmp	r3, #1
     8ea:	d019      	beq.n	920 <at25dfx_chip_erase_block+0x1c4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8ec:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8ee:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
     8f0:	4229      	tst	r1, r5
     8f2:	d019      	beq.n	928 <at25dfx_chip_erase_block+0x1cc>
	SercomSpi *const spi_module = &(module->hw->SPI);
     8f4:	6823      	ldr	r3, [r4, #0]
     8f6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8f8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     8fa:	420b      	tst	r3, r1
     8fc:	d0fc      	beq.n	8f8 <at25dfx_chip_erase_block+0x19c>
     8fe:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     900:	420b      	tst	r3, r1
     902:	d000      	beq.n	906 <at25dfx_chip_erase_block+0x1aa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     904:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     906:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     908:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     90a:	7e13      	ldrb	r3, [r2, #24]
     90c:	4203      	tst	r3, r0
     90e:	d0fc      	beq.n	90a <at25dfx_chip_erase_block+0x1ae>
     910:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     912:	4203      	tst	r3, r0
     914:	d0ec      	beq.n	8f0 <at25dfx_chip_erase_block+0x194>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     916:	8b53      	ldrh	r3, [r2, #26]
     918:	4203      	tst	r3, r0
     91a:	d0e4      	beq.n	8e6 <at25dfx_chip_erase_block+0x18a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     91c:	8350      	strh	r0, [r2, #26]
     91e:	e7e2      	b.n	8e6 <at25dfx_chip_erase_block+0x18a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     920:	6a95      	ldr	r5, [r2, #40]	; 0x28
     922:	05ed      	lsls	r5, r5, #23
     924:	0ded      	lsrs	r5, r5, #23
     926:	e7e3      	b.n	8f0 <at25dfx_chip_erase_block+0x194>
	port_pin_set_output_level(chip->cs_pin, true);
     928:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     92a:	09d1      	lsrs	r1, r2, #7
		return NULL;
     92c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     92e:	2900      	cmp	r1, #0
     930:	d104      	bne.n	93c <at25dfx_chip_erase_block+0x1e0>
		return &(ports[port_index]->Group[group_index]);
     932:	0953      	lsrs	r3, r2, #5
     934:	01db      	lsls	r3, r3, #7
     936:	490d      	ldr	r1, [pc, #52]	; (96c <at25dfx_chip_erase_block+0x210>)
     938:	468c      	mov	ip, r1
     93a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     93c:	211f      	movs	r1, #31
     93e:	4011      	ands	r1, r2
     940:	2201      	movs	r2, #1
     942:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     944:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
     946:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
     948:	0fc0      	lsrs	r0, r0, #31
     94a:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
     94c:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     94e:	2200      	movs	r2, #0
     950:	711a      	strb	r2, [r3, #4]
	return status;
     952:	e727      	b.n	7a4 <at25dfx_chip_erase_block+0x48>
		return STATUS_ERR_INVALID_ARG;
     954:	2017      	movs	r0, #23
     956:	e725      	b.n	7a4 <at25dfx_chip_erase_block+0x48>
     958:	4b03      	ldr	r3, [pc, #12]	; (968 <at25dfx_chip_erase_block+0x20c>)
     95a:	4798      	blx	r3
		return status;
     95c:	2005      	movs	r0, #5
     95e:	e721      	b.n	7a4 <at25dfx_chip_erase_block+0x48>
     960:	0000eb78 	.word	0x0000eb78
     964:	000073e5 	.word	0x000073e5
     968:	00007425 	.word	0x00007425
     96c:	41004400 	.word	0x41004400
     970:	00007e65 	.word	0x00007e65

00000974 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
     974:	b570      	push	{r4, r5, r6, lr}
     976:	b082      	sub	sp, #8
     978:	0004      	movs	r4, r0
     97a:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     97c:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
     97e:	4b35      	ldr	r3, [pc, #212]	; (a54 <at25dfx_chip_set_global_sector_protect+0xe0>)
     980:	4798      	blx	r3
	if (module->locked) {
     982:	7933      	ldrb	r3, [r6, #4]
     984:	2b00      	cmp	r3, #0
     986:	d160      	bne.n	a4a <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
     988:	3301      	adds	r3, #1
     98a:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
     98c:	4b32      	ldr	r3, [pc, #200]	; (a58 <at25dfx_chip_set_global_sector_protect+0xe4>)
     98e:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     990:	2306      	movs	r3, #6
     992:	466a      	mov	r2, sp
     994:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     996:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     998:	09d1      	lsrs	r1, r2, #7
		return NULL;
     99a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     99c:	2900      	cmp	r1, #0
     99e:	d104      	bne.n	9aa <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
     9a0:	0953      	lsrs	r3, r2, #5
     9a2:	01db      	lsls	r3, r3, #7
     9a4:	492d      	ldr	r1, [pc, #180]	; (a5c <at25dfx_chip_set_global_sector_protect+0xe8>)
     9a6:	468c      	mov	ip, r1
     9a8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9aa:	211f      	movs	r1, #31
     9ac:	4011      	ands	r1, r2
     9ae:	2201      	movs	r2, #1
     9b0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     9b2:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     9b4:	2201      	movs	r2, #1
     9b6:	4669      	mov	r1, sp
     9b8:	6820      	ldr	r0, [r4, #0]
     9ba:	4b29      	ldr	r3, [pc, #164]	; (a60 <at25dfx_chip_set_global_sector_protect+0xec>)
     9bc:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     9be:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     9c0:	09d1      	lsrs	r1, r2, #7
		return NULL;
     9c2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9c4:	2900      	cmp	r1, #0
     9c6:	d104      	bne.n	9d2 <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
     9c8:	0953      	lsrs	r3, r2, #5
     9ca:	01db      	lsls	r3, r3, #7
     9cc:	4923      	ldr	r1, [pc, #140]	; (a5c <at25dfx_chip_set_global_sector_protect+0xe8>)
     9ce:	468c      	mov	ip, r1
     9d0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9d2:	211f      	movs	r1, #31
     9d4:	4011      	ands	r1, r2
     9d6:	2201      	movs	r2, #1
     9d8:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     9da:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
     9dc:	233c      	movs	r3, #60	; 0x3c
     9de:	1e6a      	subs	r2, r5, #1
     9e0:	4195      	sbcs	r5, r2
     9e2:	426d      	negs	r5, r5
     9e4:	402b      	ands	r3, r5
     9e6:	466a      	mov	r2, sp
     9e8:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
     9ea:	2301      	movs	r3, #1
     9ec:	466a      	mov	r2, sp
     9ee:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     9f0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     9f2:	09d1      	lsrs	r1, r2, #7
		return NULL;
     9f4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9f6:	2900      	cmp	r1, #0
     9f8:	d104      	bne.n	a04 <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
     9fa:	0953      	lsrs	r3, r2, #5
     9fc:	01db      	lsls	r3, r3, #7
     9fe:	4917      	ldr	r1, [pc, #92]	; (a5c <at25dfx_chip_set_global_sector_protect+0xe8>)
     a00:	468c      	mov	ip, r1
     a02:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a04:	211f      	movs	r1, #31
     a06:	4011      	ands	r1, r2
     a08:	2201      	movs	r2, #1
     a0a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     a0c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     a0e:	2201      	movs	r2, #1
     a10:	4669      	mov	r1, sp
     a12:	6820      	ldr	r0, [r4, #0]
     a14:	4d12      	ldr	r5, [pc, #72]	; (a60 <at25dfx_chip_set_global_sector_protect+0xec>)
     a16:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     a18:	2201      	movs	r2, #1
     a1a:	466b      	mov	r3, sp
     a1c:	1dd9      	adds	r1, r3, #7
     a1e:	6820      	ldr	r0, [r4, #0]
     a20:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
     a22:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     a24:	09d1      	lsrs	r1, r2, #7
		return NULL;
     a26:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     a28:	2900      	cmp	r1, #0
     a2a:	d104      	bne.n	a36 <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
     a2c:	0953      	lsrs	r3, r2, #5
     a2e:	01db      	lsls	r3, r3, #7
     a30:	490a      	ldr	r1, [pc, #40]	; (a5c <at25dfx_chip_set_global_sector_protect+0xe8>)
     a32:	468c      	mov	ip, r1
     a34:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a36:	211f      	movs	r1, #31
     a38:	4011      	ands	r1, r2
     a3a:	2201      	movs	r2, #1
     a3c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     a3e:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     a40:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     a42:	2200      	movs	r2, #0
     a44:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     a46:	2000      	movs	r0, #0
     a48:	e002      	b.n	a50 <at25dfx_chip_set_global_sector_protect+0xdc>
     a4a:	4b03      	ldr	r3, [pc, #12]	; (a58 <at25dfx_chip_set_global_sector_protect+0xe4>)
     a4c:	4798      	blx	r3
		return status;
     a4e:	2005      	movs	r0, #5
}
     a50:	b002      	add	sp, #8
     a52:	bd70      	pop	{r4, r5, r6, pc}
     a54:	000073e5 	.word	0x000073e5
     a58:	00007425 	.word	0x00007425
     a5c:	41004400 	.word	0x41004400
     a60:	00007e65 	.word	0x00007e65

00000a64 <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
     a64:	b5f0      	push	{r4, r5, r6, r7, lr}
     a66:	b083      	sub	sp, #12
     a68:	0004      	movs	r4, r0
     a6a:	000e      	movs	r6, r1
     a6c:	0015      	movs	r5, r2
	switch (type) {
     a6e:	7903      	ldrb	r3, [r0, #4]
     a70:	2b0a      	cmp	r3, #10
     a72:	d900      	bls.n	a76 <at25dfx_chip_set_sector_protect+0x12>
     a74:	e07f      	b.n	b76 <at25dfx_chip_set_sector_protect+0x112>
     a76:	009b      	lsls	r3, r3, #2
     a78:	4a42      	ldr	r2, [pc, #264]	; (b84 <at25dfx_chip_set_sector_protect+0x120>)
     a7a:	58d3      	ldr	r3, [r2, r3]
     a7c:	469f      	mov	pc, r3
		return 256 * 1024UL;
     a7e:	2380      	movs	r3, #128	; 0x80
     a80:	02db      	lsls	r3, r3, #11
     a82:	e010      	b.n	aa6 <at25dfx_chip_set_sector_protect+0x42>
		return 512 * 1024UL;
     a84:	2380      	movs	r3, #128	; 0x80
     a86:	031b      	lsls	r3, r3, #12
     a88:	e00d      	b.n	aa6 <at25dfx_chip_set_sector_protect+0x42>
		return 1024 * 1024UL;
     a8a:	2380      	movs	r3, #128	; 0x80
     a8c:	035b      	lsls	r3, r3, #13
     a8e:	e00a      	b.n	aa6 <at25dfx_chip_set_sector_protect+0x42>
		return 2048 * 1024UL;
     a90:	2380      	movs	r3, #128	; 0x80
     a92:	039b      	lsls	r3, r3, #14
     a94:	e007      	b.n	aa6 <at25dfx_chip_set_sector_protect+0x42>
		return 4096 * 1024UL;
     a96:	2380      	movs	r3, #128	; 0x80
     a98:	03db      	lsls	r3, r3, #15
     a9a:	e004      	b.n	aa6 <at25dfx_chip_set_sector_protect+0x42>
		return 8192 * 1024UL;
     a9c:	2380      	movs	r3, #128	; 0x80
     a9e:	041b      	lsls	r3, r3, #16
     aa0:	e001      	b.n	aa6 <at25dfx_chip_set_sector_protect+0x42>
		return 64 * 1024UL;
     aa2:	2380      	movs	r3, #128	; 0x80
     aa4:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     aa6:	2017      	movs	r0, #23
	if ((address) >= _at25dfx_get_device_size(chip->type)) {
     aa8:	429e      	cmp	r6, r3
     aaa:	d301      	bcc.n	ab0 <at25dfx_chip_set_sector_protect+0x4c>
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
     aac:	b003      	add	sp, #12
     aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     ab0:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
     ab2:	4b35      	ldr	r3, [pc, #212]	; (b88 <at25dfx_chip_set_sector_protect+0x124>)
     ab4:	4798      	blx	r3
	if (module->locked) {
     ab6:	793b      	ldrb	r3, [r7, #4]
     ab8:	2b00      	cmp	r3, #0
     aba:	d15e      	bne.n	b7a <at25dfx_chip_set_sector_protect+0x116>
		module->locked = true;
     abc:	3301      	adds	r3, #1
     abe:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
     ac0:	4b32      	ldr	r3, [pc, #200]	; (b8c <at25dfx_chip_set_sector_protect+0x128>)
     ac2:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     ac4:	2306      	movs	r3, #6
     ac6:	466a      	mov	r2, sp
     ac8:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     aca:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     acc:	09d1      	lsrs	r1, r2, #7
		return NULL;
     ace:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     ad0:	2900      	cmp	r1, #0
     ad2:	d104      	bne.n	ade <at25dfx_chip_set_sector_protect+0x7a>
		return &(ports[port_index]->Group[group_index]);
     ad4:	0953      	lsrs	r3, r2, #5
     ad6:	01db      	lsls	r3, r3, #7
     ad8:	492d      	ldr	r1, [pc, #180]	; (b90 <at25dfx_chip_set_sector_protect+0x12c>)
     ada:	468c      	mov	ip, r1
     adc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ade:	211f      	movs	r1, #31
     ae0:	4011      	ands	r1, r2
     ae2:	2201      	movs	r2, #1
     ae4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     ae6:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     ae8:	2201      	movs	r2, #1
     aea:	4669      	mov	r1, sp
     aec:	6820      	ldr	r0, [r4, #0]
     aee:	4b29      	ldr	r3, [pc, #164]	; (b94 <at25dfx_chip_set_sector_protect+0x130>)
     af0:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     af2:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     af4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     af6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     af8:	2900      	cmp	r1, #0
     afa:	d104      	bne.n	b06 <at25dfx_chip_set_sector_protect+0xa2>
		return &(ports[port_index]->Group[group_index]);
     afc:	0953      	lsrs	r3, r2, #5
     afe:	01db      	lsls	r3, r3, #7
     b00:	4923      	ldr	r1, [pc, #140]	; (b90 <at25dfx_chip_set_sector_protect+0x12c>)
     b02:	468c      	mov	ip, r1
     b04:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b06:	211f      	movs	r1, #31
     b08:	4011      	ands	r1, r2
     b0a:	2201      	movs	r2, #1
     b0c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     b0e:	619a      	str	r2, [r3, #24]
			AT25DFX_COMMAND_PROTECT_SECTOR : AT25DFX_COMMAND_UNPROTECT_SECTOR;
     b10:	2336      	movs	r3, #54	; 0x36
     b12:	2d00      	cmp	r5, #0
     b14:	d100      	bne.n	b18 <at25dfx_chip_set_sector_protect+0xb4>
     b16:	3303      	adds	r3, #3
	cmd_buffer[0] = cmd.opcode;
     b18:	466a      	mov	r2, sp
     b1a:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     b1c:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     b1e:	0a33      	lsrs	r3, r6, #8
     b20:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     b22:	0c36      	lsrs	r6, r6, #16
     b24:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     b26:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     b28:	09d1      	lsrs	r1, r2, #7
		return NULL;
     b2a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     b2c:	2900      	cmp	r1, #0
     b2e:	d104      	bne.n	b3a <at25dfx_chip_set_sector_protect+0xd6>
		return &(ports[port_index]->Group[group_index]);
     b30:	0953      	lsrs	r3, r2, #5
     b32:	01db      	lsls	r3, r3, #7
     b34:	4916      	ldr	r1, [pc, #88]	; (b90 <at25dfx_chip_set_sector_protect+0x12c>)
     b36:	468c      	mov	ip, r1
     b38:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b3a:	211f      	movs	r1, #31
     b3c:	4011      	ands	r1, r2
     b3e:	2201      	movs	r2, #1
     b40:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     b42:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     b44:	2204      	movs	r2, #4
     b46:	4669      	mov	r1, sp
     b48:	6820      	ldr	r0, [r4, #0]
     b4a:	4b12      	ldr	r3, [pc, #72]	; (b94 <at25dfx_chip_set_sector_protect+0x130>)
     b4c:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     b4e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     b50:	09d1      	lsrs	r1, r2, #7
		return NULL;
     b52:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     b54:	2900      	cmp	r1, #0
     b56:	d104      	bne.n	b62 <at25dfx_chip_set_sector_protect+0xfe>
		return &(ports[port_index]->Group[group_index]);
     b58:	0953      	lsrs	r3, r2, #5
     b5a:	01db      	lsls	r3, r3, #7
     b5c:	490c      	ldr	r1, [pc, #48]	; (b90 <at25dfx_chip_set_sector_protect+0x12c>)
     b5e:	468c      	mov	ip, r1
     b60:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b62:	211f      	movs	r1, #31
     b64:	4011      	ands	r1, r2
     b66:	2201      	movs	r2, #1
     b68:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     b6a:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
     b6c:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     b6e:	2200      	movs	r2, #0
     b70:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
     b72:	2000      	movs	r0, #0
     b74:	e79a      	b.n	aac <at25dfx_chip_set_sector_protect+0x48>
		return STATUS_ERR_INVALID_ARG;
     b76:	2017      	movs	r0, #23
     b78:	e798      	b.n	aac <at25dfx_chip_set_sector_protect+0x48>
     b7a:	4b04      	ldr	r3, [pc, #16]	; (b8c <at25dfx_chip_set_sector_protect+0x128>)
     b7c:	4798      	blx	r3
		return status;
     b7e:	2005      	movs	r0, #5
     b80:	e794      	b.n	aac <at25dfx_chip_set_sector_protect+0x48>
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	0000eba4 	.word	0x0000eba4
     b88:	000073e5 	.word	0x000073e5
     b8c:	00007425 	.word	0x00007425
     b90:	41004400 	.word	0x41004400
     b94:	00007e65 	.word	0x00007e65

00000b98 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     b98:	b530      	push	{r4, r5, lr}
     b9a:	b083      	sub	sp, #12
     b9c:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     b9e:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
     ba0:	4b1c      	ldr	r3, [pc, #112]	; (c14 <at25dfx_chip_wake+0x7c>)
     ba2:	4798      	blx	r3
	if (module->locked) {
     ba4:	792b      	ldrb	r3, [r5, #4]
     ba6:	2b00      	cmp	r3, #0
     ba8:	d12e      	bne.n	c08 <at25dfx_chip_wake+0x70>
		module->locked = true;
     baa:	3301      	adds	r3, #1
     bac:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     bae:	4b1a      	ldr	r3, [pc, #104]	; (c18 <at25dfx_chip_wake+0x80>)
     bb0:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     bb2:	23ab      	movs	r3, #171	; 0xab
     bb4:	466a      	mov	r2, sp
     bb6:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     bb8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     bba:	09d1      	lsrs	r1, r2, #7
		return NULL;
     bbc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     bbe:	2900      	cmp	r1, #0
     bc0:	d104      	bne.n	bcc <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
     bc2:	0953      	lsrs	r3, r2, #5
     bc4:	01db      	lsls	r3, r3, #7
     bc6:	4915      	ldr	r1, [pc, #84]	; (c1c <at25dfx_chip_wake+0x84>)
     bc8:	468c      	mov	ip, r1
     bca:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bcc:	211f      	movs	r1, #31
     bce:	4011      	ands	r1, r2
     bd0:	2201      	movs	r2, #1
     bd2:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     bd4:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     bd6:	2201      	movs	r2, #1
     bd8:	4669      	mov	r1, sp
     bda:	6820      	ldr	r0, [r4, #0]
     bdc:	4b10      	ldr	r3, [pc, #64]	; (c20 <at25dfx_chip_wake+0x88>)
     bde:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     be0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     be2:	09d1      	lsrs	r1, r2, #7
		return NULL;
     be4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     be6:	2900      	cmp	r1, #0
     be8:	d104      	bne.n	bf4 <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
     bea:	0953      	lsrs	r3, r2, #5
     bec:	01db      	lsls	r3, r3, #7
     bee:	490b      	ldr	r1, [pc, #44]	; (c1c <at25dfx_chip_wake+0x84>)
     bf0:	468c      	mov	ip, r1
     bf2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bf4:	211f      	movs	r1, #31
     bf6:	4011      	ands	r1, r2
     bf8:	2201      	movs	r2, #1
     bfa:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     bfc:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     bfe:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     c00:	2200      	movs	r2, #0
     c02:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     c04:	2000      	movs	r0, #0
     c06:	e002      	b.n	c0e <at25dfx_chip_wake+0x76>
     c08:	4b03      	ldr	r3, [pc, #12]	; (c18 <at25dfx_chip_wake+0x80>)
     c0a:	4798      	blx	r3
		return status;
     c0c:	2005      	movs	r0, #5
     c0e:	b003      	add	sp, #12
     c10:	bd30      	pop	{r4, r5, pc}
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	000073e5 	.word	0x000073e5
     c18:	00007425 	.word	0x00007425
     c1c:	41004400 	.word	0x41004400
     c20:	00007e65 	.word	0x00007e65

00000c24 <events_create_hook>:
extern struct _events_module _events_inst;

enum status_code events_create_hook(struct events_hook *hook, events_interrupt_hook func)
{
	/* Initialize the hook struct members */
	hook->next      = NULL;
     c24:	2300      	movs	r3, #0
     c26:	6083      	str	r3, [r0, #8]
	hook->resource  = NULL;
     c28:	6003      	str	r3, [r0, #0]
	hook->hook_func = func;
     c2a:	6041      	str	r1, [r0, #4]

	return STATUS_OK;
}
     c2c:	2000      	movs	r0, #0
     c2e:	4770      	bx	lr

00000c30 <events_add_hook>:
enum status_code events_add_hook(struct events_resource *resource, struct events_hook *hook)
{
	struct events_hook *tmp_hook = NULL;

	/* Associate the hook with the resource */
	hook->resource = resource;
     c30:	6008      	str	r0, [r1, #0]

	/* Check if this is the first hook in the list */
	if (_events_inst.hook_list == NULL) {
     c32:	4b0a      	ldr	r3, [pc, #40]	; (c5c <events_add_hook+0x2c>)
     c34:	691a      	ldr	r2, [r3, #16]
     c36:	2a00      	cmp	r2, #0
     c38:	d102      	bne.n	c40 <events_add_hook+0x10>
		_events_inst.hook_list = hook;
     c3a:	6119      	str	r1, [r3, #16]
     c3c:	e004      	b.n	c48 <events_add_hook+0x18>
	} else {
		tmp_hook = _events_inst.hook_list;

		/* Find the first free place in the list */
		while (tmp_hook->next != NULL) {
			tmp_hook = tmp_hook->next;
     c3e:	001a      	movs	r2, r3
		while (tmp_hook->next != NULL) {
     c40:	6893      	ldr	r3, [r2, #8]
     c42:	2b00      	cmp	r3, #0
     c44:	d1fb      	bne.n	c3e <events_add_hook+0xe>
		}

		/* Put the hook into the next free place in the list */
		tmp_hook->next = hook;
     c46:	6091      	str	r1, [r2, #8]
 *
 */
static inline bool system_interrupt_is_enabled(
		const enum system_interrupt_vector vector)
{
	return (bool)((NVIC->ISER[0] >> (uint32_t)vector) & 0x00000001);
     c48:	4b05      	ldr	r3, [pc, #20]	; (c60 <events_add_hook+0x30>)
     c4a:	681b      	ldr	r3, [r3, #0]
	}

	/* Check if interrupts from the EVSYS module is enabled in the interrupt controller */
	if (!system_interrupt_is_enabled(SYSTEM_INTERRUPT_MODULE_EVSYS)) {
     c4c:	05db      	lsls	r3, r3, #23
     c4e:	d403      	bmi.n	c58 <events_add_hook+0x28>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c50:	2280      	movs	r2, #128	; 0x80
     c52:	0052      	lsls	r2, r2, #1
     c54:	4b02      	ldr	r3, [pc, #8]	; (c60 <events_add_hook+0x30>)
     c56:	601a      	str	r2, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EVSYS);
	}

	return STATUS_OK;
}
     c58:	2000      	movs	r0, #0
     c5a:	4770      	bx	lr
     c5c:	20000000 	.word	0x20000000
     c60:	e000e100 	.word	0xe000e100

00000c64 <events_enable_interrupt_source>:

	return STATUS_OK;
}

enum status_code events_enable_interrupt_source(struct events_resource *resource, enum events_interrupt_source source)
{
     c64:	b510      	push	{r4, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	if (source == EVENTS_INTERRUPT_DETECT) {
     c66:	2901      	cmp	r1, #1
     c68:	d004      	beq.n	c74 <events_enable_interrupt_source+0x10>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
     c6a:	2317      	movs	r3, #23
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     c6c:	2900      	cmp	r1, #0
     c6e:	d009      	beq.n	c84 <events_enable_interrupt_source+0x20>
	}

	return STATUS_OK;
}
     c70:	0018      	movs	r0, r3
     c72:	bd10      	pop	{r4, pc}
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     c74:	7800      	ldrb	r0, [r0, #0]
     c76:	3107      	adds	r1, #7
     c78:	4b06      	ldr	r3, [pc, #24]	; (c94 <events_enable_interrupt_source+0x30>)
     c7a:	4798      	blx	r3
     c7c:	4b06      	ldr	r3, [pc, #24]	; (c98 <events_enable_interrupt_source+0x34>)
     c7e:	6158      	str	r0, [r3, #20]
	return STATUS_OK;
     c80:	2300      	movs	r3, #0
     c82:	e7f5      	b.n	c70 <events_enable_interrupt_source+0xc>
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     c84:	7800      	ldrb	r0, [r0, #0]
     c86:	4b03      	ldr	r3, [pc, #12]	; (c94 <events_enable_interrupt_source+0x30>)
     c88:	4798      	blx	r3
     c8a:	4b03      	ldr	r3, [pc, #12]	; (c98 <events_enable_interrupt_source+0x34>)
     c8c:	6158      	str	r0, [r3, #20]
	return STATUS_OK;
     c8e:	2300      	movs	r3, #0
     c90:	e7ee      	b.n	c70 <events_enable_interrupt_source+0xc>
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	00000d49 	.word	0x00000d49
     c98:	42000400 	.word	0x42000400

00000c9c <events_is_interrupt_set>:
	return STATUS_OK;
}


bool events_is_interrupt_set(struct events_resource *resource, enum events_interrupt_source source)
{
     c9c:	b510      	push	{r4, lr}
     c9e:	0003      	movs	r3, r0
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
     ca0:	2901      	cmp	r1, #1
     ca2:	d003      	beq.n	cac <events_is_interrupt_set+0x10>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return false;
     ca4:	2000      	movs	r0, #0
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     ca6:	2900      	cmp	r1, #0
     ca8:	d006      	beq.n	cb8 <events_is_interrupt_set+0x1c>
	}

	return (bool)(_events_inst.interrupt_flag_buffer & bitpos);
}
     caa:	bd10      	pop	{r4, pc}
		bitpos = _events_find_bit_position(resource->channel,
     cac:	7800      	ldrb	r0, [r0, #0]
     cae:	3107      	adds	r1, #7
     cb0:	4b07      	ldr	r3, [pc, #28]	; (cd0 <events_is_interrupt_set+0x34>)
     cb2:	4798      	blx	r3
     cb4:	0003      	movs	r3, r0
     cb6:	e003      	b.n	cc0 <events_is_interrupt_set+0x24>
		bitpos = _events_find_bit_position(resource->channel,
     cb8:	7818      	ldrb	r0, [r3, #0]
     cba:	4b05      	ldr	r3, [pc, #20]	; (cd0 <events_is_interrupt_set+0x34>)
     cbc:	4798      	blx	r3
     cbe:	0003      	movs	r3, r0
	return (bool)(_events_inst.interrupt_flag_buffer & bitpos);
     cc0:	4a04      	ldr	r2, [pc, #16]	; (cd4 <events_is_interrupt_set+0x38>)
     cc2:	6890      	ldr	r0, [r2, #8]
     cc4:	4018      	ands	r0, r3
     cc6:	1e43      	subs	r3, r0, #1
     cc8:	4198      	sbcs	r0, r3
     cca:	b2c0      	uxtb	r0, r0
     ccc:	e7ed      	b.n	caa <events_is_interrupt_set+0xe>
     cce:	46c0      	nop			; (mov r8, r8)
     cd0:	00000d49 	.word	0x00000d49
     cd4:	20000000 	.word	0x20000000

00000cd8 <events_ack_interrupt>:

enum status_code events_ack_interrupt(struct events_resource *resource, enum events_interrupt_source source)
{
     cd8:	b510      	push	{r4, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
     cda:	2901      	cmp	r1, #1
     cdc:	d004      	beq.n	ce8 <events_ack_interrupt+0x10>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
     cde:	2317      	movs	r3, #23
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     ce0:	2900      	cmp	r1, #0
     ce2:	d006      	beq.n	cf2 <events_ack_interrupt+0x1a>
	}

	_events_inst.interrupt_flag_ack_buffer |= bitpos;

	return STATUS_OK;
}
     ce4:	0018      	movs	r0, r3
     ce6:	bd10      	pop	{r4, pc}
		bitpos = _events_find_bit_position(resource->channel,
     ce8:	7800      	ldrb	r0, [r0, #0]
     cea:	3107      	adds	r1, #7
     cec:	4b05      	ldr	r3, [pc, #20]	; (d04 <events_ack_interrupt+0x2c>)
     cee:	4798      	blx	r3
     cf0:	e002      	b.n	cf8 <events_ack_interrupt+0x20>
		bitpos = _events_find_bit_position(resource->channel,
     cf2:	7800      	ldrb	r0, [r0, #0]
     cf4:	4b03      	ldr	r3, [pc, #12]	; (d04 <events_ack_interrupt+0x2c>)
     cf6:	4798      	blx	r3
	_events_inst.interrupt_flag_ack_buffer |= bitpos;
     cf8:	4b03      	ldr	r3, [pc, #12]	; (d08 <events_ack_interrupt+0x30>)
     cfa:	68da      	ldr	r2, [r3, #12]
     cfc:	4310      	orrs	r0, r2
     cfe:	60d8      	str	r0, [r3, #12]
	return STATUS_OK;
     d00:	2300      	movs	r3, #0
     d02:	e7ef      	b.n	ce4 <events_ack_interrupt+0xc>
     d04:	00000d49 	.word	0x00000d49
     d08:	20000000 	.word	0x20000000

00000d0c <EVSYS_Handler>:

void EVSYS_Handler(void)
{
     d0c:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     d0e:	4b0b      	ldr	r3, [pc, #44]	; (d3c <EVSYS_Handler+0x30>)
     d10:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     d12:	490b      	ldr	r1, [pc, #44]	; (d40 <EVSYS_Handler+0x34>)
     d14:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     d16:	6898      	ldr	r0, [r3, #8]
     d18:	4302      	orrs	r2, r0
     d1a:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     d1c:	4b09      	ldr	r3, [pc, #36]	; (d44 <EVSYS_Handler+0x38>)
     d1e:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     d20:	2c00      	cmp	r4, #0
     d22:	d005      	beq.n	d30 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     d24:	6820      	ldr	r0, [r4, #0]
     d26:	6863      	ldr	r3, [r4, #4]
     d28:	4798      	blx	r3
		current_hook = current_hook->next;
     d2a:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     d2c:	2c00      	cmp	r4, #0
     d2e:	d1f9      	bne.n	d24 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     d30:	4b02      	ldr	r3, [pc, #8]	; (d3c <EVSYS_Handler+0x30>)
     d32:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     d34:	689a      	ldr	r2, [r3, #8]
     d36:	438a      	bics	r2, r1
     d38:	609a      	str	r2, [r3, #8]
}
     d3a:	bd10      	pop	{r4, pc}
     d3c:	20000000 	.word	0x20000000
     d40:	42000400 	.word	0x42000400
     d44:	0f0fffff 	.word	0x0f0fffff

00000d48 <_events_find_bit_position>:
 */
uint32_t _events_find_bit_position(uint8_t channel, uint8_t start_offset)
{
	uint32_t pos;

	if (channel < _EVENTS_START_OFFSET_BUSY_BITS) {
     d48:	2807      	cmp	r0, #7
     d4a:	d904      	bls.n	d56 <_events_find_bit_position+0xe>
		pos = 0x01UL << (start_offset + channel);
	} else {
		pos = 0x01UL << (start_offset + channel + _EVENTS_START_OFFSET_BUSY_BITS);
     d4c:	1809      	adds	r1, r1, r0
     d4e:	3108      	adds	r1, #8
     d50:	2001      	movs	r0, #1
     d52:	4088      	lsls	r0, r1
	}

	return pos;
}
     d54:	4770      	bx	lr
		pos = 0x01UL << (start_offset + channel);
     d56:	1809      	adds	r1, r1, r0
     d58:	2001      	movs	r0, #1
     d5a:	4088      	lsls	r0, r1
     d5c:	e7fa      	b.n	d54 <_events_find_bit_position+0xc>
	...

00000d60 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     d60:	4a06      	ldr	r2, [pc, #24]	; (d7c <_system_events_init+0x1c>)
     d62:	6a13      	ldr	r3, [r2, #32]
     d64:	2102      	movs	r1, #2
     d66:	430b      	orrs	r3, r1
     d68:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     d6a:	2201      	movs	r2, #1
     d6c:	4b04      	ldr	r3, [pc, #16]	; (d80 <_system_events_init+0x20>)
     d6e:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     d70:	0019      	movs	r1, r3
     d72:	780b      	ldrb	r3, [r1, #0]
     d74:	4213      	tst	r3, r2
     d76:	d1fc      	bne.n	d72 <_system_events_init+0x12>
	}
}
     d78:	4770      	bx	lr
     d7a:	46c0      	nop			; (mov r8, r8)
     d7c:	40000400 	.word	0x40000400
     d80:	42000400 	.word	0x42000400

00000d84 <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
     d84:	2301      	movs	r3, #1
     d86:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
     d88:	2300      	movs	r3, #0
     d8a:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
     d8c:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
     d8e:	70c3      	strb	r3, [r0, #3]
}
     d90:	4770      	bx	lr
	...

00000d94 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
     d94:	b5f0      	push	{r4, r5, r6, r7, lr}
     d96:	b083      	sub	sp, #12
     d98:	0005      	movs	r5, r0
     d9a:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     d9c:	4b24      	ldr	r3, [pc, #144]	; (e30 <events_allocate+0x9c>)
     d9e:	4798      	blx	r3
	tmp = _events_inst.allocated_channels;
     da0:	4b24      	ldr	r3, [pc, #144]	; (e34 <events_allocate+0xa0>)
     da2:	681b      	ldr	r3, [r3, #0]
		if(!(tmp & 0x00000001)) {
     da4:	07da      	lsls	r2, r3, #31
     da6:	d50e      	bpl.n	dc6 <events_allocate+0x32>
		tmp = tmp >> 1;
     da8:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     daa:	2401      	movs	r4, #1
		if(!(tmp & 0x00000001)) {
     dac:	2201      	movs	r2, #1
     dae:	421a      	tst	r2, r3
     db0:	d00a      	beq.n	dc8 <events_allocate+0x34>
		tmp = tmp >> 1;
     db2:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     db4:	3401      	adds	r4, #1
     db6:	b2e4      	uxtb	r4, r4
     db8:	2c0c      	cmp	r4, #12
     dba:	d1f8      	bne.n	dae <events_allocate+0x1a>
	cpu_irq_leave_critical();
     dbc:	4b1e      	ldr	r3, [pc, #120]	; (e38 <events_allocate+0xa4>)
     dbe:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     dc0:	2014      	movs	r0, #20
			     EVSYS_CHANNEL_PATH(config->path)         |
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);


	return STATUS_OK;
}
     dc2:	b003      	add	sp, #12
     dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     dc6:	2400      	movs	r4, #0
			_events_inst.allocated_channels |= 1 << count;
     dc8:	4a1a      	ldr	r2, [pc, #104]	; (e34 <events_allocate+0xa0>)
     dca:	6811      	ldr	r1, [r2, #0]
     dcc:	2301      	movs	r3, #1
     dce:	40a3      	lsls	r3, r4
     dd0:	430b      	orrs	r3, r1
     dd2:	6013      	str	r3, [r2, #0]
			_events_inst.free_channels--;
     dd4:	7913      	ldrb	r3, [r2, #4]
     dd6:	3b01      	subs	r3, #1
     dd8:	7113      	strb	r3, [r2, #4]
     dda:	4b17      	ldr	r3, [pc, #92]	; (e38 <events_allocate+0xa4>)
     ddc:	4798      	blx	r3
		return STATUS_ERR_NOT_FOUND;
     dde:	2014      	movs	r0, #20
	if(new_channel == EVENTS_INVALID_CHANNEL) {
     de0:	2cff      	cmp	r4, #255	; 0xff
     de2:	d0ee      	beq.n	dc2 <events_allocate+0x2e>
	resource->channel = new_channel;
     de4:	702c      	strb	r4, [r5, #0]
	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
     de6:	7873      	ldrb	r3, [r6, #1]
     de8:	2b02      	cmp	r3, #2
     dea:	d00a      	beq.n	e02 <events_allocate+0x6e>
		gclk_chan_conf.source_generator =
     dec:	a901      	add	r1, sp, #4
     dee:	78f3      	ldrb	r3, [r6, #3]
     df0:	700b      	strb	r3, [r1, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
     df2:	1de7      	adds	r7, r4, #7
     df4:	b2ff      	uxtb	r7, r7
     df6:	0038      	movs	r0, r7
     df8:	4b10      	ldr	r3, [pc, #64]	; (e3c <events_allocate+0xa8>)
     dfa:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
     dfc:	0038      	movs	r0, r7
     dfe:	4b10      	ldr	r3, [pc, #64]	; (e40 <events_allocate+0xac>)
     e00:	4798      	blx	r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
     e02:	78b3      	ldrb	r3, [r6, #2]
     e04:	041b      	lsls	r3, r3, #16
     e06:	22fe      	movs	r2, #254	; 0xfe
     e08:	03d2      	lsls	r2, r2, #15
     e0a:	4013      	ands	r3, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
     e0c:	7872      	ldrb	r2, [r6, #1]
     e0e:	0612      	lsls	r2, r2, #24
     e10:	21c0      	movs	r1, #192	; 0xc0
     e12:	0489      	lsls	r1, r1, #18
     e14:	400a      	ands	r2, r1
     e16:	4313      	orrs	r3, r2
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
     e18:	7832      	ldrb	r2, [r6, #0]
     e1a:	0692      	lsls	r2, r2, #26
     e1c:	21c0      	movs	r1, #192	; 0xc0
     e1e:	0509      	lsls	r1, r1, #20
     e20:	400a      	ands	r2, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
     e22:	4313      	orrs	r3, r2
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
     e24:	220f      	movs	r2, #15
     e26:	4014      	ands	r4, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
     e28:	431c      	orrs	r4, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
     e2a:	606c      	str	r4, [r5, #4]
	return STATUS_OK;
     e2c:	2000      	movs	r0, #0
     e2e:	e7c8      	b.n	dc2 <events_allocate+0x2e>
     e30:	000073e5 	.word	0x000073e5
     e34:	20000000 	.word	0x20000000
     e38:	00007425 	.word	0x00007425
     e3c:	00008d35 	.word	0x00008d35
     e40:	00008ca9 	.word	0x00008ca9

00000e44 <events_is_busy>:

	return STATUS_OK;
}

bool events_is_busy(struct events_resource *resource)
{
     e44:	b510      	push	{r4, lr}
	Assert(resource);

	return EVSYS->CHSTATUS.reg & (_events_find_bit_position(resource->channel,
     e46:	4b05      	ldr	r3, [pc, #20]	; (e5c <events_is_busy+0x18>)
     e48:	68dc      	ldr	r4, [r3, #12]
     e4a:	7800      	ldrb	r0, [r0, #0]
     e4c:	2108      	movs	r1, #8
     e4e:	4b04      	ldr	r3, [pc, #16]	; (e60 <events_is_busy+0x1c>)
     e50:	4798      	blx	r3
     e52:	4020      	ands	r0, r4
     e54:	1e43      	subs	r3, r0, #1
     e56:	4198      	sbcs	r0, r3
     e58:	b2c0      	uxtb	r0, r0
			_EVENTS_START_OFFSET_BUSY_BITS));
}
     e5a:	bd10      	pop	{r4, pc}
     e5c:	42000400 	.word	0x42000400
     e60:	00000d49 	.word	0x00000d49

00000e64 <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
     e64:	7803      	ldrb	r3, [r0, #0]
     e66:	3301      	adds	r3, #1
     e68:	021b      	lsls	r3, r3, #8
     e6a:	22f8      	movs	r2, #248	; 0xf8
     e6c:	0152      	lsls	r2, r2, #5
     e6e:	4013      	ands	r3, r2
			  EVSYS_USER_USER(user_id);
     e70:	221f      	movs	r2, #31
     e72:	4011      	ands	r1, r2
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
     e74:	430b      	orrs	r3, r1
     e76:	4a03      	ldr	r2, [pc, #12]	; (e84 <events_attach_user+0x20>)
     e78:	8113      	strh	r3, [r2, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
     e7a:	6843      	ldr	r3, [r0, #4]
     e7c:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
}
     e7e:	2000      	movs	r0, #0
     e80:	4770      	bx	lr
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	42000400 	.word	0x42000400

00000e88 <initATCACommand>:
 * \param[in] ca_cmd       Pre-allocated command structure to initialize.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCACommand(ATCADeviceType device_type, ATCACommand ca_cmd)
{
    if (ca_cmd == NULL)
     e88:	2900      	cmp	r1, #0
     e8a:	d004      	beq.n	e96 <initATCACommand+0xe>
    {
        return ATCA_BAD_PARAM;
    }

    ca_cmd->dt = device_type;
     e8c:	7008      	strb	r0, [r1, #0]
    ca_cmd->clock_divider = 0;
     e8e:	2300      	movs	r3, #0
     e90:	704b      	strb	r3, [r1, #1]

    return ATCA_SUCCESS;
     e92:	2000      	movs	r0, #0
}
     e94:	4770      	bx	lr
        return ATCA_BAD_PARAM;
     e96:	20e2      	movs	r0, #226	; 0xe2
     e98:	e7fc      	b.n	e94 <initATCACommand+0xc>
	...

00000e9c <deleteATCACommand>:
#ifndef ATCA_NO_HEAP
/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)
{
     e9c:	b510      	push	{r4, lr}
     e9e:	1e04      	subs	r4, r0, #0
    if (ca_cmd == NULL)
     ea0:	d004      	beq.n	eac <deleteATCACommand+0x10>
    {
        return;
    }

    free(*ca_cmd);
     ea2:	6800      	ldr	r0, [r0, #0]
     ea4:	4b02      	ldr	r3, [pc, #8]	; (eb0 <deleteATCACommand+0x14>)
     ea6:	4798      	blx	r3
    *ca_cmd = NULL;
     ea8:	2300      	movs	r3, #0
     eaa:	6023      	str	r3, [r4, #0]
}
     eac:	bd10      	pop	{r4, pc}
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	0000d30d 	.word	0x0000d30d

00000eb4 <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
     eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     eb6:	46d6      	mov	lr, sl
     eb8:	464f      	mov	r7, r9
     eba:	4646      	mov	r6, r8
     ebc:	b5c0      	push	{r6, r7, lr}
     ebe:	4694      	mov	ip, r2
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
     ec0:	2800      	cmp	r0, #0
     ec2:	d021      	beq.n	f08 <atCRC+0x54>
     ec4:	4689      	mov	r9, r1
     ec6:	4688      	mov	r8, r1
     ec8:	4480      	add	r8, r0
     eca:	2300      	movs	r3, #0
            data_bit = (data[counter] & shift_register) ? 1 : 0;
            crc_bit = crc_register >> 15;
            crc_register <<= 1;
            if (data_bit != crc_bit)
            {
                crc_register ^= polynom;
     ecc:	4813      	ldr	r0, [pc, #76]	; (f1c <atCRC+0x68>)
     ece:	e016      	b.n	efe <atCRC+0x4a>
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
     ed0:	006d      	lsls	r5, r5, #1
     ed2:	b2ed      	uxtb	r5, r5
     ed4:	3e01      	subs	r6, #1
     ed6:	2e00      	cmp	r6, #0
     ed8:	d00c      	beq.n	ef4 <atCRC+0x40>
            crc_bit = crc_register >> 15;
     eda:	0bdf      	lsrs	r7, r3, #15
            crc_register <<= 1;
     edc:	005b      	lsls	r3, r3, #1
     ede:	b29b      	uxth	r3, r3
            data_bit = (data[counter] & shift_register) ? 1 : 0;
     ee0:	002c      	movs	r4, r5
     ee2:	400c      	ands	r4, r1
     ee4:	1e62      	subs	r2, r4, #1
     ee6:	4194      	sbcs	r4, r2
            if (data_bit != crc_bit)
     ee8:	b2e4      	uxtb	r4, r4
     eea:	42bc      	cmp	r4, r7
     eec:	d0f0      	beq.n	ed0 <atCRC+0x1c>
                crc_register ^= polynom;
     eee:	4043      	eors	r3, r0
     ef0:	b29b      	uxth	r3, r3
     ef2:	e7ed      	b.n	ed0 <atCRC+0x1c>
     ef4:	2201      	movs	r2, #1
     ef6:	4692      	mov	sl, r2
     ef8:	44d1      	add	r9, sl
    for (counter = 0; counter < length; counter++)
     efa:	45c1      	cmp	r9, r8
     efc:	d005      	beq.n	f0a <atCRC+0x56>
            data_bit = (data[counter] & shift_register) ? 1 : 0;
     efe:	464a      	mov	r2, r9
     f00:	7811      	ldrb	r1, [r2, #0]
     f02:	2608      	movs	r6, #8
     f04:	2501      	movs	r5, #1
     f06:	e7e8      	b.n	eda <atCRC+0x26>
    uint16_t crc_register = 0;
     f08:	2300      	movs	r3, #0
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
     f0a:	4662      	mov	r2, ip
     f0c:	7013      	strb	r3, [r2, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
     f0e:	0a1b      	lsrs	r3, r3, #8
     f10:	7053      	strb	r3, [r2, #1]
}
     f12:	bc1c      	pop	{r2, r3, r4}
     f14:	4690      	mov	r8, r2
     f16:	4699      	mov	r9, r3
     f18:	46a2      	mov	sl, r4
     f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f1c:	ffff8005 	.word	0xffff8005

00000f20 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
     f20:	b510      	push	{r4, lr}
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
     f22:	1c41      	adds	r1, r0, #1
    length = packet->txsize - ATCA_CRC_SIZE;
     f24:	7840      	ldrb	r0, [r0, #1]
     f26:	3802      	subs	r0, #2
    crc = &(packet->txsize) + length;
     f28:	b2c0      	uxtb	r0, r0
     f2a:	180a      	adds	r2, r1, r0

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
     f2c:	4b01      	ldr	r3, [pc, #4]	; (f34 <atCalcCrc+0x14>)
     f2e:	4798      	blx	r3
}
     f30:	bd10      	pop	{r4, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	00000eb5 	.word	0x00000eb5

00000f38 <atNonce>:
{
     f38:	b510      	push	{r4, lr}
    uint8_t calc_mode = packet->param1 & NONCE_MODE_MASK;
     f3a:	78ca      	ldrb	r2, [r1, #3]
     f3c:	2303      	movs	r3, #3
     f3e:	4013      	ands	r3, r2
    packet->opcode = ATCA_NONCE;
     f40:	2016      	movs	r0, #22
     f42:	7088      	strb	r0, [r1, #2]
    if ((calc_mode == NONCE_MODE_SEED_UPDATE || calc_mode == NONCE_MODE_NO_SEED_UPDATE))
     f44:	2b01      	cmp	r3, #1
     f46:	d903      	bls.n	f50 <atNonce+0x18>
        return ATCA_BAD_PARAM;
     f48:	20e2      	movs	r0, #226	; 0xe2
    else if (calc_mode == NONCE_MODE_PASSTHROUGH)
     f4a:	2b03      	cmp	r3, #3
     f4c:	d007      	beq.n	f5e <atNonce+0x26>
}
     f4e:	bd10      	pop	{r4, pc}
        packet->txsize = NONCE_COUNT_SHORT;
     f50:	231b      	movs	r3, #27
     f52:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     f54:	0008      	movs	r0, r1
     f56:	4b06      	ldr	r3, [pc, #24]	; (f70 <atNonce+0x38>)
     f58:	4798      	blx	r3
    return ATCA_SUCCESS;
     f5a:	2000      	movs	r0, #0
     f5c:	e7f7      	b.n	f4e <atNonce+0x16>
        if ((packet->param1 & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
     f5e:	0693      	lsls	r3, r2, #26
     f60:	d502      	bpl.n	f68 <atNonce+0x30>
            packet->txsize = NONCE_COUNT_LONG_64;
     f62:	2347      	movs	r3, #71	; 0x47
     f64:	704b      	strb	r3, [r1, #1]
     f66:	e7f5      	b.n	f54 <atNonce+0x1c>
            packet->txsize = NONCE_COUNT_LONG;
     f68:	2327      	movs	r3, #39	; 0x27
     f6a:	704b      	strb	r3, [r1, #1]
     f6c:	e7f2      	b.n	f54 <atNonce+0x1c>
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	00000f21 	.word	0x00000f21

00000f74 <atRandom>:
{
     f74:	b510      	push	{r4, lr}
    packet->opcode = ATCA_RANDOM;
     f76:	231b      	movs	r3, #27
     f78:	708b      	strb	r3, [r1, #2]
    packet->txsize = RANDOM_COUNT;
     f7a:	3b14      	subs	r3, #20
     f7c:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     f7e:	0008      	movs	r0, r1
     f80:	4b01      	ldr	r3, [pc, #4]	; (f88 <atRandom+0x14>)
     f82:	4798      	blx	r3
}
     f84:	2000      	movs	r0, #0
     f86:	bd10      	pop	{r4, pc}
     f88:	00000f21 	.word	0x00000f21

00000f8c <atRead>:
{
     f8c:	b510      	push	{r4, lr}
    packet->opcode = ATCA_READ;
     f8e:	2302      	movs	r3, #2
     f90:	708b      	strb	r3, [r1, #2]
    packet->txsize = READ_COUNT;
     f92:	3305      	adds	r3, #5
     f94:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     f96:	0008      	movs	r0, r1
     f98:	4b01      	ldr	r3, [pc, #4]	; (fa0 <atRead+0x14>)
     f9a:	4798      	blx	r3
}
     f9c:	2000      	movs	r0, #0
     f9e:	bd10      	pop	{r4, pc}
     fa0:	00000f21 	.word	0x00000f21

00000fa4 <atSign>:
{
     fa4:	b510      	push	{r4, lr}
    packet->opcode = ATCA_SIGN;
     fa6:	2341      	movs	r3, #65	; 0x41
     fa8:	708b      	strb	r3, [r1, #2]
    packet->txsize = SIGN_COUNT;
     faa:	3b3a      	subs	r3, #58	; 0x3a
     fac:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     fae:	0008      	movs	r0, r1
     fb0:	4b01      	ldr	r3, [pc, #4]	; (fb8 <atSign+0x14>)
     fb2:	4798      	blx	r3
}
     fb4:	2000      	movs	r0, #0
     fb6:	bd10      	pop	{r4, pc}
     fb8:	00000f21 	.word	0x00000f21

00000fbc <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
     fbc:	b570      	push	{r4, r5, r6, lr}
     fbe:	b082      	sub	sp, #8
     fc0:	0005      	movs	r5, r0
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
     fc2:	7804      	ldrb	r4, [r0, #0]

    count -= ATCA_CRC_SIZE;
     fc4:	3c02      	subs	r4, #2
    atCRC(count, response, crc);
     fc6:	b2e4      	uxtb	r4, r4
     fc8:	ae01      	add	r6, sp, #4
     fca:	0032      	movs	r2, r6
     fcc:	0001      	movs	r1, r0
     fce:	0020      	movs	r0, r4
     fd0:	4b08      	ldr	r3, [pc, #32]	; (ff4 <atCheckCrc+0x38>)
     fd2:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     fd4:	7832      	ldrb	r2, [r6, #0]
     fd6:	5d2b      	ldrb	r3, [r5, r4]
     fd8:	20e5      	movs	r0, #229	; 0xe5
     fda:	429a      	cmp	r2, r3
     fdc:	d001      	beq.n	fe2 <atCheckCrc+0x26>
}
     fde:	b002      	add	sp, #8
     fe0:	bd70      	pop	{r4, r5, r6, pc}
    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     fe2:	192c      	adds	r4, r5, r4
     fe4:	ab01      	add	r3, sp, #4
     fe6:	785a      	ldrb	r2, [r3, #1]
     fe8:	7863      	ldrb	r3, [r4, #1]
     fea:	429a      	cmp	r2, r3
     fec:	d1f7      	bne.n	fde <atCheckCrc+0x22>
     fee:	2000      	movs	r0, #0
     ff0:	e7f5      	b.n	fde <atCheckCrc+0x22>
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	00000eb5 	.word	0x00000eb5

00000ff8 <isATCAError>:
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    if (data[0] == 0x04)        // error packets are always 4 bytes long
     ff8:	7802      	ldrb	r2, [r0, #0]
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
     ffa:	2300      	movs	r3, #0
    if (data[0] == 0x04)        // error packets are always 4 bytes long
     ffc:	2a04      	cmp	r2, #4
     ffe:	d001      	beq.n	1004 <isATCAError+0xc>
    }
}
    1000:	0018      	movs	r0, r3
    1002:	4770      	bx	lr
        switch (data[1])
    1004:	7842      	ldrb	r2, [r0, #1]
    1006:	2a07      	cmp	r2, #7
    1008:	d021      	beq.n	104e <isATCAError+0x56>
    100a:	b2d3      	uxtb	r3, r2
    100c:	2b07      	cmp	r3, #7
    100e:	d80b      	bhi.n	1028 <isATCAError+0x30>
    1010:	2a01      	cmp	r2, #1
    1012:	d01a      	beq.n	104a <isATCAError+0x52>
    1014:	2a00      	cmp	r2, #0
    1016:	d01e      	beq.n	1056 <isATCAError+0x5e>
            return ATCA_PARSE_ERROR;
    1018:	23d2      	movs	r3, #210	; 0xd2
        switch (data[1])
    101a:	2a03      	cmp	r2, #3
    101c:	d0f0      	beq.n	1000 <isATCAError+0x8>
            return ATCA_STATUS_ECC;
    101e:	3304      	adds	r3, #4
        switch (data[1])
    1020:	2a05      	cmp	r2, #5
    1022:	d0ed      	beq.n	1000 <isATCAError+0x8>
            return ATCA_GEN_FAIL;
    1024:	23e1      	movs	r3, #225	; 0xe1
    1026:	e7eb      	b.n	1000 <isATCAError+0x8>
        switch (data[1])
    1028:	2a0f      	cmp	r2, #15
    102a:	d012      	beq.n	1052 <isATCAError+0x5a>
    102c:	b2d3      	uxtb	r3, r2
    102e:	2b0f      	cmp	r3, #15
    1030:	d907      	bls.n	1042 <isATCAError+0x4a>
            return ATCA_WAKE_SUCCESS;
    1032:	23f3      	movs	r3, #243	; 0xf3
        switch (data[1])
    1034:	2a11      	cmp	r2, #17
    1036:	d0e3      	beq.n	1000 <isATCAError+0x8>
    1038:	b2d2      	uxtb	r2, r2
            return ATCA_STATUS_CRC;
    103a:	3b1f      	subs	r3, #31
        switch (data[1])
    103c:	2aff      	cmp	r2, #255	; 0xff
    103e:	d0df      	beq.n	1000 <isATCAError+0x8>
    1040:	e7f0      	b.n	1024 <isATCAError+0x2c>
            return ATCA_HEALTH_TEST_ERROR;
    1042:	23fa      	movs	r3, #250	; 0xfa
        switch (data[1])
    1044:	2a08      	cmp	r2, #8
    1046:	d0db      	beq.n	1000 <isATCAError+0x8>
    1048:	e7ec      	b.n	1024 <isATCAError+0x2c>
            return ATCA_CHECKMAC_VERIFY_FAILED;
    104a:	23d1      	movs	r3, #209	; 0xd1
    104c:	e7d8      	b.n	1000 <isATCAError+0x8>
            return ATCA_STATUS_SELFTEST_ERROR;
    104e:	23d7      	movs	r3, #215	; 0xd7
    1050:	e7d6      	b.n	1000 <isATCAError+0x8>
            return ATCA_EXECUTION_ERROR;
    1052:	23f4      	movs	r3, #244	; 0xf4
    1054:	e7d4      	b.n	1000 <isATCAError+0x8>
            return ATCA_SUCCESS;
    1056:	2300      	movs	r3, #0
    1058:	e7d2      	b.n	1000 <isATCAError+0x8>
	...

0000105c <initATCADevice>:
 *                       mCommands and mIface members should point to existing
 *                       structures to be initialized.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCADevice(ATCAIfaceCfg *cfg, ATCADevice ca_dev)
{
    105c:	b570      	push	{r4, r5, r6, lr}
    105e:	0005      	movs	r5, r0
    1060:	000c      	movs	r4, r1
    ATCA_STATUS status;

    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
    1062:	2800      	cmp	r0, #0
    1064:	d012      	beq.n	108c <initATCADevice+0x30>
    1066:	2900      	cmp	r1, #0
    1068:	d012      	beq.n	1090 <initATCADevice+0x34>
    106a:	6809      	ldr	r1, [r1, #0]
    106c:	2900      	cmp	r1, #0
    106e:	d011      	beq.n	1094 <initATCADevice+0x38>
    {
        return ATCA_BAD_PARAM;
    1070:	20e2      	movs	r0, #226	; 0xe2
    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
    1072:	6863      	ldr	r3, [r4, #4]
    1074:	2b00      	cmp	r3, #0
    1076:	d00a      	beq.n	108e <initATCADevice+0x32>
    }

    status = initATCACommand(cfg->devtype, ca_dev->mCommands);
    1078:	7868      	ldrb	r0, [r5, #1]
    107a:	4b07      	ldr	r3, [pc, #28]	; (1098 <initATCADevice+0x3c>)
    107c:	4798      	blx	r3
    if (status != ATCA_SUCCESS)
    107e:	2800      	cmp	r0, #0
    1080:	d105      	bne.n	108e <initATCADevice+0x32>
    {
        return status;
    }

    status = initATCAIface(cfg, ca_dev->mIface);
    1082:	6861      	ldr	r1, [r4, #4]
    1084:	0028      	movs	r0, r5
    1086:	4b05      	ldr	r3, [pc, #20]	; (109c <initATCADevice+0x40>)
    1088:	4798      	blx	r3
    108a:	e000      	b.n	108e <initATCADevice+0x32>
        return ATCA_BAD_PARAM;
    108c:	20e2      	movs	r0, #226	; 0xe2
    {
        return status;
    }

    return ATCA_SUCCESS;
}
    108e:	bd70      	pop	{r4, r5, r6, pc}
        return ATCA_BAD_PARAM;
    1090:	20e2      	movs	r0, #226	; 0xe2
    1092:	e7fc      	b.n	108e <initATCADevice+0x32>
    1094:	20e2      	movs	r0, #226	; 0xe2
    1096:	e7fa      	b.n	108e <initATCADevice+0x32>
    1098:	00000e89 	.word	0x00000e89
    109c:	000012fd 	.word	0x000012fd

000010a0 <newATCADevice>:
{
    10a0:	b570      	push	{r4, r5, r6, lr}
    10a2:	1e05      	subs	r5, r0, #0
    if (cfg == NULL)
    10a4:	d02d      	beq.n	1102 <newATCADevice+0x62>
    ca_dev = (ATCADevice)malloc(sizeof(*ca_dev));
    10a6:	2008      	movs	r0, #8
    10a8:	4b17      	ldr	r3, [pc, #92]	; (1108 <newATCADevice+0x68>)
    10aa:	4798      	blx	r3
    10ac:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
    10ae:	d011      	beq.n	10d4 <newATCADevice+0x34>
    ca_dev->mCommands = (ATCACommand)malloc(sizeof(*(ca_dev->mCommands)));
    10b0:	2004      	movs	r0, #4
    10b2:	4b15      	ldr	r3, [pc, #84]	; (1108 <newATCADevice+0x68>)
    10b4:	4798      	blx	r3
    10b6:	1e06      	subs	r6, r0, #0
    10b8:	6020      	str	r0, [r4, #0]
    if (ca_dev->mCommands == NULL)
    10ba:	d00d      	beq.n	10d8 <newATCADevice+0x38>
    ca_dev->mIface = (ATCAIface)malloc(sizeof(*(ca_dev->mIface)));
    10bc:	2028      	movs	r0, #40	; 0x28
    10be:	4b12      	ldr	r3, [pc, #72]	; (1108 <newATCADevice+0x68>)
    10c0:	4798      	blx	r3
    10c2:	6060      	str	r0, [r4, #4]
    if (ca_dev->mIface == NULL)
    10c4:	2800      	cmp	r0, #0
    10c6:	d00c      	beq.n	10e2 <newATCADevice+0x42>
    status = initATCADevice(cfg, ca_dev);
    10c8:	0021      	movs	r1, r4
    10ca:	0028      	movs	r0, r5
    10cc:	4b0f      	ldr	r3, [pc, #60]	; (110c <newATCADevice+0x6c>)
    10ce:	4798      	blx	r3
    if (status != ATCA_SUCCESS)
    10d0:	2800      	cmp	r0, #0
    10d2:	d10d      	bne.n	10f0 <newATCADevice+0x50>
}
    10d4:	0020      	movs	r0, r4
    10d6:	bd70      	pop	{r4, r5, r6, pc}
        free(ca_dev);
    10d8:	0020      	movs	r0, r4
    10da:	4b0d      	ldr	r3, [pc, #52]	; (1110 <newATCADevice+0x70>)
    10dc:	4798      	blx	r3
        return NULL;
    10de:	2400      	movs	r4, #0
    10e0:	e7f8      	b.n	10d4 <newATCADevice+0x34>
        free(ca_dev->mCommands);
    10e2:	0030      	movs	r0, r6
    10e4:	4d0a      	ldr	r5, [pc, #40]	; (1110 <newATCADevice+0x70>)
    10e6:	47a8      	blx	r5
        free(ca_dev);
    10e8:	0020      	movs	r0, r4
    10ea:	47a8      	blx	r5
        return NULL;
    10ec:	2400      	movs	r4, #0
    10ee:	e7f1      	b.n	10d4 <newATCADevice+0x34>
        free(ca_dev->mIface);
    10f0:	6860      	ldr	r0, [r4, #4]
    10f2:	4d07      	ldr	r5, [pc, #28]	; (1110 <newATCADevice+0x70>)
    10f4:	47a8      	blx	r5
        free(ca_dev->mCommands);
    10f6:	6820      	ldr	r0, [r4, #0]
    10f8:	47a8      	blx	r5
        free(ca_dev);
    10fa:	0020      	movs	r0, r4
    10fc:	47a8      	blx	r5
        return NULL;
    10fe:	2400      	movs	r4, #0
    1100:	e7e8      	b.n	10d4 <newATCADevice+0x34>
        return NULL;
    1102:	2400      	movs	r4, #0
    1104:	e7e6      	b.n	10d4 <newATCADevice+0x34>
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	0000d2f9 	.word	0x0000d2f9
    110c:	0000105d 	.word	0x0000105d
    1110:	0000d30d 	.word	0x0000d30d

00001114 <releaseATCADevice>:
/** \brief Release any resources associated with the device.
 *  \param[in] ca_dev  Device to release
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCADevice(ATCADevice ca_dev)
{
    1114:	b510      	push	{r4, lr}
    if (ca_dev == NULL)
    {
        return ATCA_BAD_PARAM;
    1116:	23e2      	movs	r3, #226	; 0xe2
    if (ca_dev == NULL)
    1118:	2800      	cmp	r0, #0
    111a:	d003      	beq.n	1124 <releaseATCADevice+0x10>
    }

    return releaseATCAIface(ca_dev->mIface);
    111c:	6840      	ldr	r0, [r0, #4]
    111e:	4b02      	ldr	r3, [pc, #8]	; (1128 <releaseATCADevice+0x14>)
    1120:	4798      	blx	r3
    1122:	0003      	movs	r3, r0
}
    1124:	0018      	movs	r0, r3
    1126:	bd10      	pop	{r4, pc}
    1128:	00001281 	.word	0x00001281

0000112c <deleteATCADevice>:
{
    112c:	b510      	push	{r4, lr}
    112e:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
    1130:	d013      	beq.n	115a <deleteATCADevice+0x2e>
    releaseATCADevice(*ca_dev);
    1132:	6800      	ldr	r0, [r0, #0]
    1134:	4b09      	ldr	r3, [pc, #36]	; (115c <deleteATCADevice+0x30>)
    1136:	4798      	blx	r3
    deleteATCACommand(&(*ca_dev)->mCommands);
    1138:	6820      	ldr	r0, [r4, #0]
    113a:	4b09      	ldr	r3, [pc, #36]	; (1160 <deleteATCADevice+0x34>)
    113c:	4798      	blx	r3
    if ((*ca_dev)->mIface)
    113e:	6823      	ldr	r3, [r4, #0]
    1140:	6858      	ldr	r0, [r3, #4]
    1142:	2800      	cmp	r0, #0
    1144:	d004      	beq.n	1150 <deleteATCADevice+0x24>
        free((*ca_dev)->mIface);
    1146:	4b07      	ldr	r3, [pc, #28]	; (1164 <deleteATCADevice+0x38>)
    1148:	4798      	blx	r3
        (*ca_dev)->mIface = NULL;
    114a:	6823      	ldr	r3, [r4, #0]
    114c:	2200      	movs	r2, #0
    114e:	605a      	str	r2, [r3, #4]
    free(*ca_dev);
    1150:	6820      	ldr	r0, [r4, #0]
    1152:	4b04      	ldr	r3, [pc, #16]	; (1164 <deleteATCADevice+0x38>)
    1154:	4798      	blx	r3
    *ca_dev = NULL;
    1156:	2300      	movs	r3, #0
    1158:	6023      	str	r3, [r4, #0]
}
    115a:	bd10      	pop	{r4, pc}
    115c:	00001115 	.word	0x00001115
    1160:	00000e9d 	.word	0x00000e9d
    1164:	0000d30d 	.word	0x0000d30d

00001168 <atca_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atca_execute_command(ATCAPacket* packet, ATCADevice device)
{
    1168:	b5f0      	push	{r4, r5, r6, r7, lr}
    116a:	46de      	mov	lr, fp
    116c:	4657      	mov	r7, sl
    116e:	464e      	mov	r6, r9
    1170:	4645      	mov	r5, r8
    1172:	b5e0      	push	{r5, r6, r7, lr}
    1174:	b083      	sub	sp, #12
    1176:	4681      	mov	r9, r0
    1178:	000f      	movs	r7, r1
#else
        execution_or_wait_time = ATCA_POLLING_INIT_TIME_MSEC;
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
    117a:	6848      	ldr	r0, [r1, #4]
    117c:	4b24      	ldr	r3, [pc, #144]	; (1210 <atca_execute_command+0xa8>)
    117e:	4798      	blx	r3
    1180:	1e04      	subs	r4, r0, #0
    1182:	d00a      	beq.n	119a <atca_execute_command+0x32>
            break;
        }
    }
    while (0);

    atidle(device->mIface);
    1184:	6878      	ldr	r0, [r7, #4]
    1186:	4b23      	ldr	r3, [pc, #140]	; (1214 <atca_execute_command+0xac>)
    1188:	4798      	blx	r3
    return status;
}
    118a:	0020      	movs	r0, r4
    118c:	b003      	add	sp, #12
    118e:	bc3c      	pop	{r2, r3, r4, r5}
    1190:	4690      	mov	r8, r2
    1192:	4699      	mov	r9, r3
    1194:	46a2      	mov	sl, r4
    1196:	46ab      	mov	fp, r5
    1198:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((status = atsend(device->mIface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
    119a:	464b      	mov	r3, r9
    119c:	785a      	ldrb	r2, [r3, #1]
    119e:	4649      	mov	r1, r9
    11a0:	6878      	ldr	r0, [r7, #4]
    11a2:	4b1d      	ldr	r3, [pc, #116]	; (1218 <atca_execute_command+0xb0>)
    11a4:	4798      	blx	r3
    11a6:	1e04      	subs	r4, r0, #0
    11a8:	d1ec      	bne.n	1184 <atca_execute_command+0x1c>
        atca_delay_ms(execution_or_wait_time);
    11aa:	2001      	movs	r0, #1
    11ac:	4b1b      	ldr	r3, [pc, #108]	; (121c <atca_execute_command+0xb4>)
    11ae:	4798      	blx	r3
    11b0:	4e1b      	ldr	r6, [pc, #108]	; (1220 <atca_execute_command+0xb8>)
            memset(packet->data, 0, sizeof(packet->data));
    11b2:	23c0      	movs	r3, #192	; 0xc0
    11b4:	4698      	mov	r8, r3
    11b6:	4b1b      	ldr	r3, [pc, #108]	; (1224 <atca_execute_command+0xbc>)
    11b8:	469b      	mov	fp, r3
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
    11ba:	4b1b      	ldr	r3, [pc, #108]	; (1228 <atca_execute_command+0xc0>)
    11bc:	469a      	mov	sl, r3
            memset(packet->data, 0, sizeof(packet->data));
    11be:	464b      	mov	r3, r9
    11c0:	1d9d      	adds	r5, r3, #6
    11c2:	4642      	mov	r2, r8
    11c4:	2100      	movs	r1, #0
    11c6:	0028      	movs	r0, r5
    11c8:	47d8      	blx	fp
            rxsize = sizeof(packet->data);
    11ca:	466b      	mov	r3, sp
    11cc:	1d9a      	adds	r2, r3, #6
    11ce:	4643      	mov	r3, r8
    11d0:	8013      	strh	r3, [r2, #0]
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
    11d2:	0029      	movs	r1, r5
    11d4:	6878      	ldr	r0, [r7, #4]
    11d6:	47d0      	blx	sl
    11d8:	1e04      	subs	r4, r0, #0
    11da:	d010      	beq.n	11fe <atca_execute_command+0x96>
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
    11dc:	2002      	movs	r0, #2
    11de:	4b0f      	ldr	r3, [pc, #60]	; (121c <atca_execute_command+0xb4>)
    11e0:	4798      	blx	r3
    11e2:	3e01      	subs	r6, #1
        while (max_delay_count-- > 0);
    11e4:	2e00      	cmp	r6, #0
    11e6:	d1ea      	bne.n	11be <atca_execute_command+0x56>
    11e8:	e7cc      	b.n	1184 <atca_execute_command+0x1c>
        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
    11ea:	0028      	movs	r0, r5
    11ec:	4b0f      	ldr	r3, [pc, #60]	; (122c <atca_execute_command+0xc4>)
    11ee:	4798      	blx	r3
    11f0:	1e04      	subs	r4, r0, #0
    11f2:	d1c7      	bne.n	1184 <atca_execute_command+0x1c>
        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
    11f4:	0028      	movs	r0, r5
    11f6:	4b0e      	ldr	r3, [pc, #56]	; (1230 <atca_execute_command+0xc8>)
    11f8:	4798      	blx	r3
    11fa:	0004      	movs	r4, r0
    11fc:	e7c2      	b.n	1184 <atca_execute_command+0x1c>
        if (rxsize < 4)
    11fe:	466b      	mov	r3, sp
    1200:	88dc      	ldrh	r4, [r3, #6]
    1202:	2c03      	cmp	r4, #3
    1204:	d8f1      	bhi.n	11ea <atca_execute_command+0x82>
                status = ATCA_RX_NO_RESPONSE;
    1206:	4260      	negs	r0, r4
    1208:	4160      	adcs	r0, r4
    120a:	30e6      	adds	r0, #230	; 0xe6
    120c:	0004      	movs	r4, r0
    120e:	e7b9      	b.n	1184 <atca_execute_command+0x1c>
    1210:	00001245 	.word	0x00001245
    1214:	00001265 	.word	0x00001265
    1218:	00001235 	.word	0x00001235
    121c:	000023e5 	.word	0x000023e5
    1220:	000004e3 	.word	0x000004e3
    1224:	0000d375 	.word	0x0000d375
    1228:	0000123d 	.word	0x0000123d
    122c:	00000fbd 	.word	0x00000fbd
    1230:	00000ff9 	.word	0x00000ff9

00001234 <atsend>:
 * \param[in] txdata    Data to be transmitted to the device.
 * \param[in] txlength  Number of bytes to be transmitted to the device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t *txdata, int txlength)
{
    1234:	b510      	push	{r4, lr}
    return ca_iface->atsend(ca_iface, txdata, txlength);
    1236:	6903      	ldr	r3, [r0, #16]
    1238:	4798      	blx	r3
}
    123a:	bd10      	pop	{r4, pc}

0000123c <atreceive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t *rxdata, uint16_t *rxlength)
{
    123c:	b510      	push	{r4, lr}
    return ca_iface->atreceive(ca_iface, rxdata, rxlength);
    123e:	6943      	ldr	r3, [r0, #20]
    1240:	4798      	blx	r3
}
    1242:	bd10      	pop	{r4, pc}

00001244 <atwake>:
 *         instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
    1244:	b510      	push	{r4, lr}
    1246:	0004      	movs	r4, r0
    ATCA_STATUS status = ca_iface->atwake(ca_iface);
    1248:	6983      	ldr	r3, [r0, #24]
    124a:	4798      	blx	r3

    if (status == ATCA_WAKE_FAILED)
    124c:	28d0      	cmp	r0, #208	; 0xd0
    124e:	d000      	beq.n	1252 <atwake+0xe>

        status = ca_iface->atwake(ca_iface);
    }

    return status;
}
    1250:	bd10      	pop	{r4, pc}
        atca_delay_ms(ATCA_POST_DELAY_MSEC);
    1252:	38b7      	subs	r0, #183	; 0xb7
    1254:	4b02      	ldr	r3, [pc, #8]	; (1260 <atwake+0x1c>)
    1256:	4798      	blx	r3
        status = ca_iface->atwake(ca_iface);
    1258:	69a3      	ldr	r3, [r4, #24]
    125a:	0020      	movs	r0, r4
    125c:	4798      	blx	r3
    125e:	e7f7      	b.n	1250 <atwake+0xc>
    1260:	000023e5 	.word	0x000023e5

00001264 <atidle>:
 *         be used instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
    1264:	b510      	push	{r4, lr}
    ATCA_STATUS status;

    status = ca_iface->atidle(ca_iface);
    1266:	69c3      	ldr	r3, [r0, #28]
    1268:	4798      	blx	r3
    126a:	0004      	movs	r4, r0
    atca_delay_ms(1);
    126c:	2001      	movs	r0, #1
    126e:	4b02      	ldr	r3, [pc, #8]	; (1278 <atidle+0x14>)
    1270:	4798      	blx	r3
    return status;
}
    1272:	0020      	movs	r0, r4
    1274:	bd10      	pop	{r4, pc}
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	000023e5 	.word	0x000023e5

0000127c <atgetifacecfg>:
 * \param[in] ca_iface  Device interface.
 * \return Logical interface configuration.
 */
ATCAIfaceCfg * atgetifacecfg(ATCAIface ca_iface)
{
    return ca_iface->mIfaceCFG;
    127c:	6840      	ldr	r0, [r0, #4]
}
    127e:	4770      	bx	lr

00001280 <releaseATCAIface>:
 *         this interface.
 *  \param[in] ca_iface  Device interface.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCAIface(ATCAIface ca_iface)
{
    1280:	b510      	push	{r4, lr}
    if (ca_iface == NULL)
    {
        return ATCA_BAD_PARAM;
    1282:	23e2      	movs	r3, #226	; 0xe2
    if (ca_iface == NULL)
    1284:	2800      	cmp	r0, #0
    1286:	d004      	beq.n	1292 <releaseATCAIface+0x12>
    }

    return hal_iface_release(ca_iface->mType, ca_iface->hal_data);
    1288:	6a41      	ldr	r1, [r0, #36]	; 0x24
    128a:	7800      	ldrb	r0, [r0, #0]
    128c:	4b02      	ldr	r3, [pc, #8]	; (1298 <releaseATCAIface+0x18>)
    128e:	4798      	blx	r3
    1290:	0003      	movs	r3, r0
}
    1292:	0018      	movs	r0, r3
    1294:	bd10      	pop	{r4, pc}
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	00001e09 	.word	0x00001e09

0000129c <_atinit>:
    *ca_iface = NULL;
}
#endif

ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
    129c:	b570      	push	{r4, r5, r6, lr}
    129e:	0004      	movs	r4, r0
    12a0:	000d      	movs	r5, r1
    // get method mapping to HAL methods for this interface
    hal_iface_init(ca_iface->mIfaceCFG, hal);
    12a2:	6840      	ldr	r0, [r0, #4]
    12a4:	4b09      	ldr	r3, [pc, #36]	; (12cc <_atinit+0x30>)
    12a6:	4798      	blx	r3
    ca_iface->atinit     = hal->halinit;
    12a8:	682b      	ldr	r3, [r5, #0]
    12aa:	60a3      	str	r3, [r4, #8]
    ca_iface->atpostinit = hal->halpostinit;
    12ac:	686b      	ldr	r3, [r5, #4]
    12ae:	60e3      	str	r3, [r4, #12]
    ca_iface->atsend     = hal->halsend;
    12b0:	68ab      	ldr	r3, [r5, #8]
    12b2:	6123      	str	r3, [r4, #16]
    ca_iface->atreceive  = hal->halreceive;
    12b4:	68eb      	ldr	r3, [r5, #12]
    12b6:	6163      	str	r3, [r4, #20]
    ca_iface->atwake     = hal->halwake;
    12b8:	692b      	ldr	r3, [r5, #16]
    12ba:	61a3      	str	r3, [r4, #24]
    ca_iface->atsleep    = hal->halsleep;
    12bc:	69ab      	ldr	r3, [r5, #24]
    12be:	6223      	str	r3, [r4, #32]
    ca_iface->atidle     = hal->halidle;
    12c0:	696b      	ldr	r3, [r5, #20]
    12c2:	61e3      	str	r3, [r4, #28]
    ca_iface->hal_data   = hal->hal_data;
    12c4:	6a2b      	ldr	r3, [r5, #32]
    12c6:	6263      	str	r3, [r4, #36]	; 0x24

    return ATCA_SUCCESS;
}
    12c8:	2000      	movs	r0, #0
    12ca:	bd70      	pop	{r4, r5, r6, pc}
    12cc:	00001db5 	.word	0x00001db5

000012d0 <atinit>:
{
    12d0:	b510      	push	{r4, lr}
    12d2:	b08a      	sub	sp, #40	; 0x28
    12d4:	0004      	movs	r4, r0
    _atinit(ca_iface, &hal);
    12d6:	a901      	add	r1, sp, #4
    12d8:	4b07      	ldr	r3, [pc, #28]	; (12f8 <atinit+0x28>)
    12da:	4798      	blx	r3
    status = ca_iface->atinit(&hal, ca_iface->mIfaceCFG);
    12dc:	6861      	ldr	r1, [r4, #4]
    12de:	a801      	add	r0, sp, #4
    12e0:	68a3      	ldr	r3, [r4, #8]
    12e2:	4798      	blx	r3
    if (status == ATCA_SUCCESS)
    12e4:	2800      	cmp	r0, #0
    12e6:	d001      	beq.n	12ec <atinit+0x1c>
}
    12e8:	b00a      	add	sp, #40	; 0x28
    12ea:	bd10      	pop	{r4, pc}
        ca_iface->hal_data = hal.hal_data;
    12ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    12ee:	6263      	str	r3, [r4, #36]	; 0x24
        status = ca_iface->atpostinit(ca_iface);
    12f0:	68e3      	ldr	r3, [r4, #12]
    12f2:	0020      	movs	r0, r4
    12f4:	4798      	blx	r3
    12f6:	e7f7      	b.n	12e8 <atinit+0x18>
    12f8:	0000129d 	.word	0x0000129d

000012fc <initATCAIface>:
{
    12fc:	b510      	push	{r4, lr}
    if (cfg == NULL || ca_iface == NULL)
    12fe:	2800      	cmp	r0, #0
    1300:	d00b      	beq.n	131a <initATCAIface+0x1e>
        return ATCA_BAD_PARAM;
    1302:	23e2      	movs	r3, #226	; 0xe2
    if (cfg == NULL || ca_iface == NULL)
    1304:	2900      	cmp	r1, #0
    1306:	d006      	beq.n	1316 <initATCAIface+0x1a>
    ca_iface->mType = cfg->iface_type;
    1308:	7803      	ldrb	r3, [r0, #0]
    130a:	700b      	strb	r3, [r1, #0]
    ca_iface->mIfaceCFG = cfg;
    130c:	6048      	str	r0, [r1, #4]
    status = atinit(ca_iface);
    130e:	0008      	movs	r0, r1
    1310:	4b03      	ldr	r3, [pc, #12]	; (1320 <initATCAIface+0x24>)
    1312:	4798      	blx	r3
    1314:	0003      	movs	r3, r0
}
    1316:	0018      	movs	r0, r3
    1318:	bd10      	pop	{r4, pc}
        return ATCA_BAD_PARAM;
    131a:	23e2      	movs	r3, #226	; 0xe2
    131c:	e7fb      	b.n	1316 <initATCAIface+0x1a>
    131e:	46c0      	nop			; (mov r8, r8)
    1320:	000012d1 	.word	0x000012d1

00001324 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return Returns ATCA_SUCCESS .
 */
ATCA_STATUS atcab_release(void)
{
    1324:	b510      	push	{r4, lr}
    {
        return status;
    }
    _gDevice = NULL;
#else
    deleteATCADevice(&_gDevice);
    1326:	4802      	ldr	r0, [pc, #8]	; (1330 <atcab_release+0xc>)
    1328:	4b02      	ldr	r3, [pc, #8]	; (1334 <atcab_release+0x10>)
    132a:	4798      	blx	r3
#endif
    return ATCA_SUCCESS;
}
    132c:	2000      	movs	r0, #0
    132e:	bd10      	pop	{r4, pc}
    1330:	2000037c 	.word	0x2000037c
    1334:	0000112d 	.word	0x0000112d

00001338 <atcab_init>:
{
    1338:	b510      	push	{r4, lr}
    133a:	b082      	sub	sp, #8
    133c:	0004      	movs	r4, r0
    if (_gDevice)
    133e:	4b14      	ldr	r3, [pc, #80]	; (1390 <atcab_init+0x58>)
    1340:	681b      	ldr	r3, [r3, #0]
    1342:	2b00      	cmp	r3, #0
    1344:	d001      	beq.n	134a <atcab_init+0x12>
        atcab_release();
    1346:	4b13      	ldr	r3, [pc, #76]	; (1394 <atcab_init+0x5c>)
    1348:	4798      	blx	r3
    _gDevice = newATCADevice(cfg);
    134a:	0020      	movs	r0, r4
    134c:	4b12      	ldr	r3, [pc, #72]	; (1398 <atcab_init+0x60>)
    134e:	4798      	blx	r3
    1350:	4b0f      	ldr	r3, [pc, #60]	; (1390 <atcab_init+0x58>)
    1352:	6018      	str	r0, [r3, #0]
    if (_gDevice == NULL)
    1354:	2800      	cmp	r0, #0
    1356:	d019      	beq.n	138c <atcab_init+0x54>
    if (cfg->devtype == ATECC608A)
    1358:	7862      	ldrb	r2, [r4, #1]
    return ATCA_SUCCESS;
    135a:	2300      	movs	r3, #0
    if (cfg->devtype == ATECC608A)
    135c:	2a03      	cmp	r2, #3
    135e:	d002      	beq.n	1366 <atcab_init+0x2e>
}
    1360:	0018      	movs	r0, r3
    1362:	b002      	add	sp, #8
    1364:	bd10      	pop	{r4, pc}
        if ((status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &_gDevice->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
    1366:	6803      	ldr	r3, [r0, #0]
    1368:	3301      	adds	r3, #1
    136a:	3a02      	subs	r2, #2
    136c:	9200      	str	r2, [sp, #0]
    136e:	3212      	adds	r2, #18
    1370:	2100      	movs	r1, #0
    1372:	2000      	movs	r0, #0
    1374:	4c09      	ldr	r4, [pc, #36]	; (139c <atcab_init+0x64>)
    1376:	47a0      	blx	r4
    1378:	1e03      	subs	r3, r0, #0
    137a:	d1f1      	bne.n	1360 <atcab_init+0x28>
        _gDevice->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
    137c:	4a04      	ldr	r2, [pc, #16]	; (1390 <atcab_init+0x58>)
    137e:	6812      	ldr	r2, [r2, #0]
    1380:	6811      	ldr	r1, [r2, #0]
    1382:	784a      	ldrb	r2, [r1, #1]
    1384:	2007      	movs	r0, #7
    1386:	4382      	bics	r2, r0
    1388:	704a      	strb	r2, [r1, #1]
    138a:	e7e9      	b.n	1360 <atcab_init+0x28>
        return ATCA_GEN_FAIL;
    138c:	23e1      	movs	r3, #225	; 0xe1
    138e:	e7e7      	b.n	1360 <atcab_init+0x28>
    1390:	2000037c 	.word	0x2000037c
    1394:	00001325 	.word	0x00001325
    1398:	000010a1 	.word	0x000010a1
    139c:	00001665 	.word	0x00001665

000013a0 <atcab_wakeup>:

/** \brief wakeup the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_wakeup(void)
{
    13a0:	b510      	push	{r4, lr}
    if (_gDevice == NULL)
    13a2:	4b04      	ldr	r3, [pc, #16]	; (13b4 <atcab_wakeup+0x14>)
    13a4:	681b      	ldr	r3, [r3, #0]
    {
        return ATCA_GEN_FAIL;
    13a6:	20e1      	movs	r0, #225	; 0xe1
    if (_gDevice == NULL)
    13a8:	2b00      	cmp	r3, #0
    13aa:	d002      	beq.n	13b2 <atcab_wakeup+0x12>
    }

    return atwake(_gDevice->mIface);
    13ac:	6858      	ldr	r0, [r3, #4]
    13ae:	4b02      	ldr	r3, [pc, #8]	; (13b8 <atcab_wakeup+0x18>)
    13b0:	4798      	blx	r3
}
    13b2:	bd10      	pop	{r4, pc}
    13b4:	2000037c 	.word	0x2000037c
    13b8:	00001245 	.word	0x00001245

000013bc <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    13bc:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;

    if (addr == NULL)
    13be:	9c02      	ldr	r4, [sp, #8]
    13c0:	2c00      	cmp	r4, #0
    13c2:	d008      	beq.n	13d6 <atcab_get_addr+0x1a>
    uint8_t mem_zone = zone & 0x03;
    13c4:	2403      	movs	r4, #3
    13c6:	4020      	ands	r0, r4
    {
        return ATCA_BAD_PARAM;
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
    13c8:	d007      	beq.n	13da <atcab_get_addr+0x1e>
    13ca:	2802      	cmp	r0, #2
    13cc:	d00d      	beq.n	13ea <atcab_get_addr+0x2e>
    13ce:	2801      	cmp	r0, #1
    13d0:	d003      	beq.n	13da <atcab_get_addr+0x1e>
    {
        return ATCA_BAD_PARAM;
    13d2:	20e2      	movs	r0, #226	; 0xe2
    13d4:	e012      	b.n	13fc <atcab_get_addr+0x40>
        return ATCA_BAD_PARAM;
    13d6:	20e2      	movs	r0, #226	; 0xe2
    13d8:	e010      	b.n	13fc <atcab_get_addr+0x40>
        *addr = 0;
        // Mask the offset
        offset = offset & (uint8_t)0x07;
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
        {
            *addr = block << 3;
    13da:	00d2      	lsls	r2, r2, #3
            *addr |= offset;
    13dc:	2007      	movs	r0, #7
    13de:	4003      	ands	r3, r0
    13e0:	431a      	orrs	r2, r3
    13e2:	9b02      	ldr	r3, [sp, #8]
    13e4:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
        }
    }
    while (0);

    return status;
    13e6:	2000      	movs	r0, #0
    13e8:	e008      	b.n	13fc <atcab_get_addr+0x40>
            *addr = slot << 3;
    13ea:	00c9      	lsls	r1, r1, #3
            *addr  |= offset;
    13ec:	2007      	movs	r0, #7
    13ee:	4003      	ands	r3, r0
    13f0:	430b      	orrs	r3, r1
            *addr |= block << 8;
    13f2:	0212      	lsls	r2, r2, #8
    13f4:	431a      	orrs	r2, r3
    13f6:	9b02      	ldr	r3, [sp, #8]
    13f8:	801a      	strh	r2, [r3, #0]
    return status;
    13fa:	2000      	movs	r0, #0
}
    13fc:	bd10      	pop	{r4, pc}
	...

00001400 <atcab_get_zone_size>:
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    ATCA_STATUS status = ATCA_SUCCESS;

    if (size == NULL)
    1400:	2a00      	cmp	r2, #0
    1402:	d03e      	beq.n	1482 <atcab_get_zone_size+0x82>
    {
        return ATCA_BAD_PARAM;
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
    1404:	4b20      	ldr	r3, [pc, #128]	; (1488 <atcab_get_zone_size+0x88>)
    1406:	681b      	ldr	r3, [r3, #0]
    1408:	685b      	ldr	r3, [r3, #4]
    140a:	685b      	ldr	r3, [r3, #4]
    140c:	785b      	ldrb	r3, [r3, #1]
    140e:	2b00      	cmp	r3, #0
    1410:	d113      	bne.n	143a <atcab_get_zone_size+0x3a>
    {
        switch (zone)
    1412:	2801      	cmp	r0, #1
    1414:	d009      	beq.n	142a <atcab_get_zone_size+0x2a>
    1416:	2800      	cmp	r0, #0
    1418:	d003      	beq.n	1422 <atcab_get_zone_size+0x22>
    141a:	2802      	cmp	r0, #2
    141c:	d009      	beq.n	1432 <atcab_get_zone_size+0x32>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
        default: status = ATCA_BAD_PARAM; break;
    141e:	20e2      	movs	r0, #226	; 0xe2
    1420:	e030      	b.n	1484 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 88; break;
    1422:	2358      	movs	r3, #88	; 0x58
    1424:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    1426:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 88; break;
    1428:	e02c      	b.n	1484 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
    142a:	2340      	movs	r3, #64	; 0x40
    142c:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    142e:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
    1430:	e028      	b.n	1484 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_DATA:   *size = 32; break;
    1432:	2320      	movs	r3, #32
    1434:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    1436:	2000      	movs	r0, #0
        case ATCA_ZONE_DATA:   *size = 32; break;
    1438:	e024      	b.n	1484 <atcab_get_zone_size+0x84>
        }
    }
    else
    {
        switch (zone)
    143a:	2801      	cmp	r0, #1
    143c:	d009      	beq.n	1452 <atcab_get_zone_size+0x52>
    143e:	2800      	cmp	r0, #0
    1440:	d003      	beq.n	144a <atcab_get_zone_size+0x4a>
    1442:	2802      	cmp	r0, #2
    1444:	d009      	beq.n	145a <atcab_get_zone_size+0x5a>
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
        default: status = ATCA_BAD_PARAM; break;
    1446:	20e2      	movs	r0, #226	; 0xe2
    1448:	e01c      	b.n	1484 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 128; break;
    144a:	2380      	movs	r3, #128	; 0x80
    144c:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    144e:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 128; break;
    1450:	e018      	b.n	1484 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
    1452:	2340      	movs	r3, #64	; 0x40
    1454:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    1456:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
    1458:	e014      	b.n	1484 <atcab_get_zone_size+0x84>
            if (slot < 8)
    145a:	2907      	cmp	r1, #7
    145c:	d908      	bls.n	1470 <atcab_get_zone_size+0x70>
            else if (slot == 8)
    145e:	2908      	cmp	r1, #8
    1460:	d00a      	beq.n	1478 <atcab_get_zone_size+0x78>
                status = ATCA_BAD_PARAM;
    1462:	20e2      	movs	r0, #226	; 0xe2
            else if (slot < 16)
    1464:	290f      	cmp	r1, #15
    1466:	d80d      	bhi.n	1484 <atcab_get_zone_size+0x84>
                *size = 72;
    1468:	2348      	movs	r3, #72	; 0x48
    146a:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    146c:	2000      	movs	r0, #0
    146e:	e009      	b.n	1484 <atcab_get_zone_size+0x84>
                *size = 36;
    1470:	2324      	movs	r3, #36	; 0x24
    1472:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    1474:	2000      	movs	r0, #0
    1476:	e005      	b.n	1484 <atcab_get_zone_size+0x84>
                *size = 416;
    1478:	23d0      	movs	r3, #208	; 0xd0
    147a:	005b      	lsls	r3, r3, #1
    147c:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    147e:	2000      	movs	r0, #0
    1480:	e000      	b.n	1484 <atcab_get_zone_size+0x84>
        return ATCA_BAD_PARAM;
    1482:	20e2      	movs	r0, #226	; 0xe2
        }
    }

    return status;
}
    1484:	4770      	bx	lr
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	2000037c 	.word	0x2000037c

0000148c <atcab_nonce_base>:
 *                          needed.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_base(uint8_t mode, uint16_t zero, const uint8_t *num_in, uint8_t* rand_out)
{
    148c:	b5f0      	push	{r4, r5, r6, r7, lr}
    148e:	b0b3      	sub	sp, #204	; 0xcc
    1490:	0016      	movs	r6, r2
    1492:	001d      	movs	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    1494:	4b1f      	ldr	r3, [pc, #124]	; (1514 <atcab_nonce_base+0x88>)
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	681f      	ldr	r7, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_mode = mode & NONCE_MODE_MASK;
    149a:	2303      	movs	r3, #3
    149c:	4003      	ands	r3, r0

    do
    {
        // build a nonce command
        packet.param1 = mode;
    149e:	466a      	mov	r2, sp
    14a0:	70d0      	strb	r0, [r2, #3]
        packet.param2 = zero;
    14a2:	8091      	strh	r1, [r2, #4]

        // Copy the right amount of NumIn data
        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
    14a4:	2b01      	cmp	r3, #1
    14a6:	d905      	bls.n	14b4 <atcab_nonce_base+0x28>
                memcpy(packet.data, num_in, 32);
            }
        }
        else
        {
            return ATCA_BAD_PARAM;
    14a8:	24e2      	movs	r4, #226	; 0xe2
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
    14aa:	2b03      	cmp	r3, #3
    14ac:	d022      	beq.n	14f4 <atcab_nonce_base+0x68>

    }
    while (0);

    return status;
}
    14ae:	0020      	movs	r0, r4
    14b0:	b033      	add	sp, #204	; 0xcc
    14b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
    14b4:	2214      	movs	r2, #20
    14b6:	0031      	movs	r1, r6
    14b8:	466b      	mov	r3, sp
    14ba:	1d98      	adds	r0, r3, #6
    14bc:	4b16      	ldr	r3, [pc, #88]	; (1518 <atcab_nonce_base+0x8c>)
    14be:	4798      	blx	r3
        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
    14c0:	4669      	mov	r1, sp
    14c2:	0038      	movs	r0, r7
    14c4:	4b15      	ldr	r3, [pc, #84]	; (151c <atcab_nonce_base+0x90>)
    14c6:	4798      	blx	r3
    14c8:	1e04      	subs	r4, r0, #0
    14ca:	d1f0      	bne.n	14ae <atcab_nonce_base+0x22>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    14cc:	4b11      	ldr	r3, [pc, #68]	; (1514 <atcab_nonce_base+0x88>)
    14ce:	6819      	ldr	r1, [r3, #0]
    14d0:	4668      	mov	r0, sp
    14d2:	4b13      	ldr	r3, [pc, #76]	; (1520 <atcab_nonce_base+0x94>)
    14d4:	4798      	blx	r3
    14d6:	1e04      	subs	r4, r0, #0
    14d8:	d1e9      	bne.n	14ae <atcab_nonce_base+0x22>
        if ((rand_out != NULL) && (packet.data[ATCA_COUNT_IDX] >= 35))
    14da:	2d00      	cmp	r5, #0
    14dc:	d0e7      	beq.n	14ae <atcab_nonce_base+0x22>
    14de:	466b      	mov	r3, sp
    14e0:	799b      	ldrb	r3, [r3, #6]
    14e2:	2b22      	cmp	r3, #34	; 0x22
    14e4:	d9e3      	bls.n	14ae <atcab_nonce_base+0x22>
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
    14e6:	2220      	movs	r2, #32
    14e8:	466b      	mov	r3, sp
    14ea:	1dd9      	adds	r1, r3, #7
    14ec:	0028      	movs	r0, r5
    14ee:	4b0a      	ldr	r3, [pc, #40]	; (1518 <atcab_nonce_base+0x8c>)
    14f0:	4798      	blx	r3
    14f2:	e7dc      	b.n	14ae <atcab_nonce_base+0x22>
            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
    14f4:	0683      	lsls	r3, r0, #26
    14f6:	d506      	bpl.n	1506 <atcab_nonce_base+0x7a>
                memcpy(packet.data, num_in, 64);
    14f8:	2240      	movs	r2, #64	; 0x40
    14fa:	0031      	movs	r1, r6
    14fc:	466b      	mov	r3, sp
    14fe:	1d98      	adds	r0, r3, #6
    1500:	4b05      	ldr	r3, [pc, #20]	; (1518 <atcab_nonce_base+0x8c>)
    1502:	4798      	blx	r3
    1504:	e7dc      	b.n	14c0 <atcab_nonce_base+0x34>
                memcpy(packet.data, num_in, 32);
    1506:	2220      	movs	r2, #32
    1508:	0031      	movs	r1, r6
    150a:	466b      	mov	r3, sp
    150c:	1d98      	adds	r0, r3, #6
    150e:	4b02      	ldr	r3, [pc, #8]	; (1518 <atcab_nonce_base+0x8c>)
    1510:	4798      	blx	r3
    1512:	e7d5      	b.n	14c0 <atcab_nonce_base+0x34>
    1514:	2000037c 	.word	0x2000037c
    1518:	0000d33f 	.word	0x0000d33f
    151c:	00000f39 	.word	0x00000f39
    1520:	00001169 	.word	0x00001169

00001524 <atcab_nonce_load>:
 *                          depending on device and target.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_load(uint8_t target, const uint8_t *num_in, uint16_t num_in_size)
{
    1524:	b510      	push	{r4, lr}
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
    1526:	233f      	movs	r3, #63	; 0x3f
    1528:	4398      	bics	r0, r3

    if (num_in_size == 32)
    152a:	2a20      	cmp	r2, #32
    152c:	d004      	beq.n	1538 <atcab_nonce_load+0x14>
    {
        mode |= NONCE_MODE_INPUT_LEN_64;
    }
    else
    {
        return ATCA_BAD_PARAM;
    152e:	23e2      	movs	r3, #226	; 0xe2
    else if (num_in_size == 64)
    1530:	2a40      	cmp	r2, #64	; 0x40
    1532:	d004      	beq.n	153e <atcab_nonce_load+0x1a>
    }

    return atcab_nonce_base(mode, 0, num_in, NULL);
}
    1534:	0018      	movs	r0, r3
    1536:	bd10      	pop	{r4, pc}
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
    1538:	3b3c      	subs	r3, #60	; 0x3c
    153a:	4318      	orrs	r0, r3
    153c:	e001      	b.n	1542 <atcab_nonce_load+0x1e>
        mode |= NONCE_MODE_INPUT_LEN_64;
    153e:	3bbf      	subs	r3, #191	; 0xbf
    1540:	4318      	orrs	r0, r3
    return atcab_nonce_base(mode, 0, num_in, NULL);
    1542:	2300      	movs	r3, #0
    1544:	000a      	movs	r2, r1
    1546:	2100      	movs	r1, #0
    1548:	4c01      	ldr	r4, [pc, #4]	; (1550 <atcab_nonce_load+0x2c>)
    154a:	47a0      	blx	r4
    154c:	0003      	movs	r3, r0
    154e:	e7f1      	b.n	1534 <atcab_nonce_load+0x10>
    1550:	0000148d 	.word	0x0000148d

00001554 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
    1554:	b530      	push	{r4, r5, lr}
    1556:	b0b3      	sub	sp, #204	; 0xcc
    1558:	0005      	movs	r5, r0
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    155a:	4b12      	ldr	r3, [pc, #72]	; (15a4 <atcab_random+0x50>)
    155c:	681b      	ldr	r3, [r3, #0]
    155e:	6818      	ldr	r0, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
    1560:	2300      	movs	r3, #0
    1562:	466a      	mov	r2, sp
    1564:	70d3      	strb	r3, [r2, #3]
        packet.param2 = 0x0000;
    1566:	8093      	strh	r3, [r2, #4]

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
    1568:	4669      	mov	r1, sp
    156a:	4b0f      	ldr	r3, [pc, #60]	; (15a8 <atcab_random+0x54>)
    156c:	4798      	blx	r3
    156e:	1e04      	subs	r4, r0, #0
    1570:	d002      	beq.n	1578 <atcab_random+0x24>
    }
    while (0);


    return status;
}
    1572:	0020      	movs	r0, r4
    1574:	b033      	add	sp, #204	; 0xcc
    1576:	bd30      	pop	{r4, r5, pc}
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    1578:	4b0a      	ldr	r3, [pc, #40]	; (15a4 <atcab_random+0x50>)
    157a:	6819      	ldr	r1, [r3, #0]
    157c:	4668      	mov	r0, sp
    157e:	4b0b      	ldr	r3, [pc, #44]	; (15ac <atcab_random+0x58>)
    1580:	4798      	blx	r3
    1582:	1e04      	subs	r4, r0, #0
    1584:	d1f5      	bne.n	1572 <atcab_random+0x1e>
        if (packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
    1586:	466b      	mov	r3, sp
    1588:	799b      	ldrb	r3, [r3, #6]
    158a:	2b23      	cmp	r3, #35	; 0x23
    158c:	d001      	beq.n	1592 <atcab_random+0x3e>
            status = ATCA_RX_FAIL;
    158e:	24e6      	movs	r4, #230	; 0xe6
    1590:	e7ef      	b.n	1572 <atcab_random+0x1e>
        if (rand_out)
    1592:	2d00      	cmp	r5, #0
    1594:	d0ed      	beq.n	1572 <atcab_random+0x1e>
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
    1596:	2220      	movs	r2, #32
    1598:	466b      	mov	r3, sp
    159a:	1dd9      	adds	r1, r3, #7
    159c:	0028      	movs	r0, r5
    159e:	4b04      	ldr	r3, [pc, #16]	; (15b0 <atcab_random+0x5c>)
    15a0:	4798      	blx	r3
    15a2:	e7e6      	b.n	1572 <atcab_random+0x1e>
    15a4:	2000037c 	.word	0x2000037c
    15a8:	00000f75 	.word	0x00000f75
    15ac:	00001169 	.word	0x00001169
    15b0:	0000d33f 	.word	0x0000d33f

000015b4 <atcab_read_zone>:
 *  \param[in]  len     Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
    15b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15b6:	b0b9      	sub	sp, #228	; 0xe4
    15b8:	9003      	str	r0, [sp, #12]
    15ba:	a83e      	add	r0, sp, #248	; 0xf8
    15bc:	c880      	ldmia	r0!, {r7}
    15be:	7805      	ldrb	r5, [r0, #0]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if (data == NULL)
    15c0:	2f00      	cmp	r7, #0
    15c2:	d00a      	beq.n	15da <atcab_read_zone+0x26>
    ATCACommand ca_cmd = _gDevice->mCommands;
    15c4:	4822      	ldr	r0, [pc, #136]	; (1650 <atcab_read_zone+0x9c>)
    15c6:	6800      	ldr	r0, [r0, #0]
    15c8:	6806      	ldr	r6, [r0, #0]
        {
            return ATCA_BAD_PARAM;
        }

        if (len != 4 && len != 32)
    15ca:	2d04      	cmp	r5, #4
    15cc:	d016      	beq.n	15fc <atcab_read_zone+0x48>
        {
            return ATCA_BAD_PARAM;
    15ce:	24e2      	movs	r4, #226	; 0xe2
        if (len != 4 && len != 32)
    15d0:	2d20      	cmp	r5, #32
    15d2:	d004      	beq.n	15de <atcab_read_zone+0x2a>
        memcpy(data, &packet.data[1], len);
    }
    while (0);

    return status;
}
    15d4:	0020      	movs	r0, r4
    15d6:	b039      	add	sp, #228	; 0xe4
    15d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ATCA_BAD_PARAM;
    15da:	24e2      	movs	r4, #226	; 0xe2
    15dc:	e7fa      	b.n	15d4 <atcab_read_zone+0x20>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
    15de:	200e      	movs	r0, #14
    15e0:	ac02      	add	r4, sp, #8
    15e2:	46a4      	mov	ip, r4
    15e4:	4460      	add	r0, ip
    15e6:	9000      	str	r0, [sp, #0]
    15e8:	9803      	ldr	r0, [sp, #12]
    15ea:	4c1a      	ldr	r4, [pc, #104]	; (1654 <atcab_read_zone+0xa0>)
    15ec:	47a0      	blx	r4
    15ee:	1e04      	subs	r4, r0, #0
    15f0:	d1f0      	bne.n	15d4 <atcab_read_zone+0x20>
            zone = zone | ATCA_ZONE_READWRITE_32;
    15f2:	2380      	movs	r3, #128	; 0x80
    15f4:	9a03      	ldr	r2, [sp, #12]
    15f6:	431a      	orrs	r2, r3
    15f8:	9203      	str	r2, [sp, #12]
    15fa:	e009      	b.n	1610 <atcab_read_zone+0x5c>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
    15fc:	200e      	movs	r0, #14
    15fe:	ac02      	add	r4, sp, #8
    1600:	46a4      	mov	ip, r4
    1602:	4460      	add	r0, ip
    1604:	9000      	str	r0, [sp, #0]
    1606:	9803      	ldr	r0, [sp, #12]
    1608:	4c12      	ldr	r4, [pc, #72]	; (1654 <atcab_read_zone+0xa0>)
    160a:	47a0      	blx	r4
    160c:	1e04      	subs	r4, r0, #0
    160e:	d1e1      	bne.n	15d4 <atcab_read_zone+0x20>
        packet.param1 = zone;
    1610:	a906      	add	r1, sp, #24
    1612:	466b      	mov	r3, sp
    1614:	7b1b      	ldrb	r3, [r3, #12]
    1616:	70cb      	strb	r3, [r1, #3]
        packet.param2 = addr;
    1618:	230e      	movs	r3, #14
    161a:	aa02      	add	r2, sp, #8
    161c:	4694      	mov	ip, r2
    161e:	4463      	add	r3, ip
    1620:	881b      	ldrh	r3, [r3, #0]
    1622:	808b      	strh	r3, [r1, #4]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
    1624:	0030      	movs	r0, r6
    1626:	4b0c      	ldr	r3, [pc, #48]	; (1658 <atcab_read_zone+0xa4>)
    1628:	4798      	blx	r3
    162a:	1e04      	subs	r4, r0, #0
    162c:	d1d2      	bne.n	15d4 <atcab_read_zone+0x20>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    162e:	4b08      	ldr	r3, [pc, #32]	; (1650 <atcab_read_zone+0x9c>)
    1630:	6819      	ldr	r1, [r3, #0]
    1632:	a806      	add	r0, sp, #24
    1634:	4b09      	ldr	r3, [pc, #36]	; (165c <atcab_read_zone+0xa8>)
    1636:	4798      	blx	r3
    1638:	1e04      	subs	r4, r0, #0
    163a:	d1cb      	bne.n	15d4 <atcab_read_zone+0x20>
        memcpy(data, &packet.data[1], len);
    163c:	002a      	movs	r2, r5
    163e:	2117      	movs	r1, #23
    1640:	ab02      	add	r3, sp, #8
    1642:	469c      	mov	ip, r3
    1644:	4461      	add	r1, ip
    1646:	0038      	movs	r0, r7
    1648:	4b05      	ldr	r3, [pc, #20]	; (1660 <atcab_read_zone+0xac>)
    164a:	4798      	blx	r3
    164c:	e7c2      	b.n	15d4 <atcab_read_zone+0x20>
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	2000037c 	.word	0x2000037c
    1654:	000013bd 	.word	0x000013bd
    1658:	00000f8d 	.word	0x00000f8d
    165c:	00001169 	.word	0x00001169
    1660:	0000d33f 	.word	0x0000d33f

00001664 <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
    1664:	b5f0      	push	{r4, r5, r6, r7, lr}
    1666:	46de      	mov	lr, fp
    1668:	4657      	mov	r7, sl
    166a:	464e      	mov	r6, r9
    166c:	4645      	mov	r5, r8
    166e:	b5e0      	push	{r5, r6, r7, lr}
    1670:	b091      	sub	sp, #68	; 0x44
    1672:	0005      	movs	r5, r0
    1674:	9102      	str	r1, [sp, #8]
    1676:	0017      	movs	r7, r2
    1678:	9303      	str	r3, [sp, #12]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
    167a:	2300      	movs	r3, #0
    167c:	930f      	str	r3, [sp, #60]	; 0x3c
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    {
        return ATCA_BAD_PARAM;
    167e:	24e2      	movs	r4, #226	; 0xe2
    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    1680:	2802      	cmp	r0, #2
    1682:	d907      	bls.n	1694 <atcab_read_bytes_zone+0x30>
        }
    }
    while (false);

    return status;
}
    1684:	0020      	movs	r0, r4
    1686:	b011      	add	sp, #68	; 0x44
    1688:	bc3c      	pop	{r2, r3, r4, r5}
    168a:	4690      	mov	r8, r2
    168c:	4699      	mov	r9, r3
    168e:	46a2      	mov	sl, r4
    1690:	46ab      	mov	fp, r5
    1692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (zone == ATCA_ZONE_DATA && slot > 15)
    1694:	2802      	cmp	r0, #2
    1696:	d01f      	beq.n	16d8 <atcab_read_bytes_zone+0x74>
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
    1698:	2400      	movs	r4, #0
    if (length == 0)
    169a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    169c:	2b00      	cmp	r3, #0
    169e:	d0f1      	beq.n	1684 <atcab_read_bytes_zone+0x20>
        return ATCA_BAD_PARAM;
    16a0:	34e2      	adds	r4, #226	; 0xe2
    if (data == NULL)
    16a2:	9b03      	ldr	r3, [sp, #12]
    16a4:	2b00      	cmp	r3, #0
    16a6:	d0ed      	beq.n	1684 <atcab_read_bytes_zone+0x20>
        status = atcab_get_zone_size(zone, slot, &zone_size);
    16a8:	aa0f      	add	r2, sp, #60	; 0x3c
    16aa:	9902      	ldr	r1, [sp, #8]
    16ac:	0028      	movs	r0, r5
    16ae:	4b2e      	ldr	r3, [pc, #184]	; (1768 <atcab_read_bytes_zone+0x104>)
    16b0:	4798      	blx	r3
    16b2:	1e04      	subs	r4, r0, #0
        if (status != ATCA_SUCCESS)
    16b4:	d1e6      	bne.n	1684 <atcab_read_bytes_zone+0x20>
        if (offset + length > zone_size)
    16b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    16b8:	19db      	adds	r3, r3, r7
            return ATCA_BAD_PARAM; // Can't read past the end of a zone
    16ba:	34e2      	adds	r4, #226	; 0xe2
        if (offset + length > zone_size)
    16bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    16be:	4293      	cmp	r3, r2
    16c0:	d8e0      	bhi.n	1684 <atcab_read_bytes_zone+0x20>
        cur_block = offset / ATCA_BLOCK_SIZE;
    16c2:	097b      	lsrs	r3, r7, #5
    16c4:	4698      	mov	r8, r3
    16c6:	2320      	movs	r3, #32
    16c8:	469a      	mov	sl, r3
    16ca:	2300      	movs	r3, #0
    16cc:	2600      	movs	r6, #0
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
    16ce:	46a9      	mov	r9, r5
    16d0:	001d      	movs	r5, r3
    16d2:	9705      	str	r7, [sp, #20]
    16d4:	4657      	mov	r7, sl
    16d6:	e01e      	b.n	1716 <atcab_read_bytes_zone+0xb2>
    if (zone == ATCA_ZONE_DATA && slot > 15)
    16d8:	290f      	cmp	r1, #15
    16da:	d8d3      	bhi.n	1684 <atcab_read_bytes_zone+0x20>
    16dc:	e7dc      	b.n	1698 <atcab_read_bytes_zone+0x34>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
    16de:	4643      	mov	r3, r8
    16e0:	015b      	lsls	r3, r3, #5
    16e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    16e4:	1ad3      	subs	r3, r2, r3
    16e6:	2b1f      	cmp	r3, #31
    16e8:	d817      	bhi.n	171a <atcab_read_bytes_zone+0xb6>
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
    16ea:	9b05      	ldr	r3, [sp, #20]
    16ec:	199b      	adds	r3, r3, r6
    16ee:	089b      	lsrs	r3, r3, #2
    16f0:	2507      	movs	r5, #7
    16f2:	401d      	ands	r5, r3
                read_size = ATCA_WORD_SIZE;
    16f4:	3f1c      	subs	r7, #28
    16f6:	e010      	b.n	171a <atcab_read_bytes_zone+0xb6>
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
    16f8:	9b03      	ldr	r3, [sp, #12]
    16fa:	1998      	adds	r0, r3, r6
    16fc:	ab07      	add	r3, sp, #28
    16fe:	469c      	mov	ip, r3
    1700:	4461      	add	r1, ip
    1702:	0022      	movs	r2, r4
    1704:	4b19      	ldr	r3, [pc, #100]	; (176c <atcab_read_bytes_zone+0x108>)
    1706:	4798      	blx	r3
            data_idx += copy_length;
    1708:	1936      	adds	r6, r6, r4
            if (read_size == ATCA_BLOCK_SIZE)
    170a:	2f20      	cmp	r7, #32
    170c:	d024      	beq.n	1758 <atcab_read_bytes_zone+0xf4>
                cur_offset += 1;
    170e:	3501      	adds	r5, #1
        while (data_idx < length)
    1710:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    1712:	42b3      	cmp	r3, r6
    1714:	d924      	bls.n	1760 <atcab_read_bytes_zone+0xfc>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
    1716:	2f20      	cmp	r7, #32
    1718:	d0e1      	beq.n	16de <atcab_read_bytes_zone+0x7a>
            status = atcab_read_zone(
    171a:	b2eb      	uxtb	r3, r5
    171c:	4642      	mov	r2, r8
    171e:	4669      	mov	r1, sp
    1720:	740a      	strb	r2, [r1, #16]
    1722:	7c0a      	ldrb	r2, [r1, #16]
    1724:	9701      	str	r7, [sp, #4]
    1726:	a907      	add	r1, sp, #28
    1728:	9100      	str	r1, [sp, #0]
    172a:	9902      	ldr	r1, [sp, #8]
    172c:	4648      	mov	r0, r9
    172e:	4c10      	ldr	r4, [pc, #64]	; (1770 <atcab_read_bytes_zone+0x10c>)
    1730:	47a0      	blx	r4
    1732:	9004      	str	r0, [sp, #16]
            if (status != ATCA_SUCCESS)
    1734:	2800      	cmp	r0, #0
    1736:	d115      	bne.n	1764 <atcab_read_bytes_zone+0x100>
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
    1738:	4643      	mov	r3, r8
    173a:	00db      	lsls	r3, r3, #3
    173c:	195b      	adds	r3, r3, r5
    173e:	009b      	lsls	r3, r3, #2
                read_buf_idx = 0;                     // Read data is within the requested chunk
    1740:	2100      	movs	r1, #0
            if (read_offset < offset)
    1742:	9805      	ldr	r0, [sp, #20]
    1744:	4298      	cmp	r0, r3
    1746:	d900      	bls.n	174a <atcab_read_bytes_zone+0xe6>
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
    1748:	1ac1      	subs	r1, r0, r3
            if (length - data_idx < read_size - read_buf_idx)
    174a:	1a7b      	subs	r3, r7, r1
    174c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    174e:	1b94      	subs	r4, r2, r6
    1750:	429c      	cmp	r4, r3
    1752:	d9d1      	bls.n	16f8 <atcab_read_bytes_zone+0x94>
    1754:	001c      	movs	r4, r3
    1756:	e7cf      	b.n	16f8 <atcab_read_bytes_zone+0x94>
                cur_block += 1;
    1758:	2301      	movs	r3, #1
    175a:	469c      	mov	ip, r3
    175c:	44e0      	add	r8, ip
    175e:	e7d7      	b.n	1710 <atcab_read_bytes_zone+0xac>
    1760:	9c04      	ldr	r4, [sp, #16]
    1762:	e78f      	b.n	1684 <atcab_read_bytes_zone+0x20>
    1764:	9c04      	ldr	r4, [sp, #16]
    1766:	e78d      	b.n	1684 <atcab_read_bytes_zone+0x20>
    1768:	00001401 	.word	0x00001401
    176c:	0000d33f 	.word	0x0000d33f
    1770:	000015b5 	.word	0x000015b5

00001774 <atcab_sign_base>:
 *                        curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
    1774:	b530      	push	{r4, r5, lr}
    1776:	b0b3      	sub	sp, #204	; 0xcc
    1778:	0003      	movs	r3, r0
    177a:	0015      	movs	r5, r2
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (signature == NULL)
    {
        return ATCA_BAD_PARAM;
    177c:	24e2      	movs	r4, #226	; 0xe2
    if (signature == NULL)
    177e:	2a00      	cmp	r2, #0
    1780:	d00a      	beq.n	1798 <atcab_sign_base+0x24>
    ATCACommand ca_cmd = _gDevice->mCommands;
    1782:	4a0f      	ldr	r2, [pc, #60]	; (17c0 <atcab_sign_base+0x4c>)
    1784:	6812      	ldr	r2, [r2, #0]
    1786:	6810      	ldr	r0, [r2, #0]
    }

    do
    {
        // Build sign command
        packet.param1 = mode;
    1788:	466a      	mov	r2, sp
    178a:	70d3      	strb	r3, [r2, #3]
        packet.param2 = key_id;
    178c:	8091      	strh	r1, [r2, #4]
        if ((status = atSign(ca_cmd, &packet)) != ATCA_SUCCESS)
    178e:	4669      	mov	r1, sp
    1790:	4b0c      	ldr	r3, [pc, #48]	; (17c4 <atcab_sign_base+0x50>)
    1792:	4798      	blx	r3
    1794:	1e04      	subs	r4, r0, #0
    1796:	d002      	beq.n	179e <atcab_sign_base+0x2a>

    }
    while (0);

    return status;
}
    1798:	0020      	movs	r0, r4
    179a:	b033      	add	sp, #204	; 0xcc
    179c:	bd30      	pop	{r4, r5, pc}
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    179e:	4b08      	ldr	r3, [pc, #32]	; (17c0 <atcab_sign_base+0x4c>)
    17a0:	6819      	ldr	r1, [r3, #0]
    17a2:	4668      	mov	r0, sp
    17a4:	4b08      	ldr	r3, [pc, #32]	; (17c8 <atcab_sign_base+0x54>)
    17a6:	4798      	blx	r3
    17a8:	1e04      	subs	r4, r0, #0
    17aa:	d1f5      	bne.n	1798 <atcab_sign_base+0x24>
        if (packet.data[ATCA_COUNT_IDX] > 4)
    17ac:	466b      	mov	r3, sp
    17ae:	799a      	ldrb	r2, [r3, #6]
    17b0:	2a04      	cmp	r2, #4
    17b2:	d9f1      	bls.n	1798 <atcab_sign_base+0x24>
            memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - ATCA_PACKET_OVERHEAD);
    17b4:	3a03      	subs	r2, #3
    17b6:	1dd9      	adds	r1, r3, #7
    17b8:	0028      	movs	r0, r5
    17ba:	4b04      	ldr	r3, [pc, #16]	; (17cc <atcab_sign_base+0x58>)
    17bc:	4798      	blx	r3
    17be:	e7eb      	b.n	1798 <atcab_sign_base+0x24>
    17c0:	2000037c 	.word	0x2000037c
    17c4:	00000fa5 	.word	0x00000fa5
    17c8:	00001169 	.word	0x00001169
    17cc:	0000d33f 	.word	0x0000d33f

000017d0 <atcab_sign>:
 *                         curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
    17d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17d2:	0005      	movs	r5, r0
    17d4:	000c      	movs	r4, r1
    17d6:	0016      	movs	r6, r2
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;

    do
    {
        // Make sure RNG has updated its seed
        if ((status = atcab_random(NULL)) != ATCA_SUCCESS)
    17d8:	2000      	movs	r0, #0
    17da:	4b0e      	ldr	r3, [pc, #56]	; (1814 <atcab_sign+0x44>)
    17dc:	4798      	blx	r3
    17de:	2800      	cmp	r0, #0
    17e0:	d10d      	bne.n	17fe <atcab_sign+0x2e>
        {
            break;
        }

        // Load message into device
        if (_gDevice->mCommands->dt == ATECC608A)
    17e2:	4b0d      	ldr	r3, [pc, #52]	; (1818 <atcab_sign+0x48>)
    17e4:	681b      	ldr	r3, [r3, #0]
    17e6:	681b      	ldr	r3, [r3, #0]
    17e8:	781b      	ldrb	r3, [r3, #0]
    17ea:	2b03      	cmp	r3, #3
    17ec:	d008      	beq.n	1800 <atcab_sign+0x30>
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;
    17ee:	2700      	movs	r7, #0
    uint8_t nonce_target = NONCE_MODE_TARGET_TEMPKEY;
    17f0:	2000      	movs	r0, #0
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
        }
        if ((status = atcab_nonce_load(nonce_target, msg, 32)) != ATCA_SUCCESS)
    17f2:	2220      	movs	r2, #32
    17f4:	0021      	movs	r1, r4
    17f6:	4b09      	ldr	r3, [pc, #36]	; (181c <atcab_sign+0x4c>)
    17f8:	4798      	blx	r3
    17fa:	2800      	cmp	r0, #0
    17fc:	d003      	beq.n	1806 <atcab_sign+0x36>
        }
    }
    while (0);

    return status;
}
    17fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
    1800:	2720      	movs	r7, #32
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
    1802:	3040      	adds	r0, #64	; 0x40
    1804:	e7f5      	b.n	17f2 <atcab_sign+0x22>
        if ((status = atcab_sign_base(SIGN_MODE_EXTERNAL | sign_source, key_id, signature)) != ATCA_SUCCESS)
    1806:	3080      	adds	r0, #128	; 0x80
    1808:	4338      	orrs	r0, r7
    180a:	0032      	movs	r2, r6
    180c:	0029      	movs	r1, r5
    180e:	4b04      	ldr	r3, [pc, #16]	; (1820 <atcab_sign+0x50>)
    1810:	4798      	blx	r3
    1812:	e7f4      	b.n	17fe <atcab_sign+0x2e>
    1814:	00001555 	.word	0x00001555
    1818:	2000037c 	.word	0x2000037c
    181c:	00001525 	.word	0x00001525
    1820:	00001775 	.word	0x00001775

00001824 <base64Char>:
 * \param[in] rules  base64 ruleset to use
 * \return the base 64 character of the given index
 */
char base64Char(uint8_t id, const uint8_t * rules)
{
    if (id >= 0 && (id < 26))
    1824:	2819      	cmp	r0, #25
    1826:	d910      	bls.n	184a <base64Char+0x26>
    {
        return (char)('A' + id);
    }
    if ((id >= 26) && (id < 52))
    1828:	0003      	movs	r3, r0
    182a:	3b1a      	subs	r3, #26
    182c:	2b19      	cmp	r3, #25
    182e:	d910      	bls.n	1852 <base64Char+0x2e>
    {
        return (char)('a' + id - 26);
    }
    if ((id >= 52) && (id < 62))
    1830:	0003      	movs	r3, r0
    1832:	3b34      	subs	r3, #52	; 0x34
    1834:	2b09      	cmp	r3, #9
    1836:	d90f      	bls.n	1858 <base64Char+0x34>
    {
        return (char)('0' + id - 52);
    }
    if (id == 62)
    1838:	283e      	cmp	r0, #62	; 0x3e
    183a:	d010      	beq.n	185e <base64Char+0x3a>
    {
        return rules[0];
    }
    if (id == 63)
    183c:	283f      	cmp	r0, #63	; 0x3f
    183e:	d010      	beq.n	1862 <base64Char+0x3e>

    if (id == B64_IS_EQUAL)
    {
        return rules[2];
    }
    return B64_IS_INVALID;
    1840:	23ff      	movs	r3, #255	; 0xff
    if (id == B64_IS_EQUAL)
    1842:	2840      	cmp	r0, #64	; 0x40
    1844:	d103      	bne.n	184e <base64Char+0x2a>
        return rules[2];
    1846:	788b      	ldrb	r3, [r1, #2]
    1848:	e001      	b.n	184e <base64Char+0x2a>
        return (char)('A' + id);
    184a:	3041      	adds	r0, #65	; 0x41
    184c:	b2c3      	uxtb	r3, r0
}
    184e:	0018      	movs	r0, r3
    1850:	4770      	bx	lr
        return (char)('a' + id - 26);
    1852:	3047      	adds	r0, #71	; 0x47
    1854:	b2c3      	uxtb	r3, r0
    1856:	e7fa      	b.n	184e <base64Char+0x2a>
        return (char)('0' + id - 52);
    1858:	3804      	subs	r0, #4
    185a:	b2c3      	uxtb	r3, r0
    185c:	e7f7      	b.n	184e <base64Char+0x2a>
        return rules[0];
    185e:	780b      	ldrb	r3, [r1, #0]
    1860:	e7f5      	b.n	184e <base64Char+0x2a>
        return rules[1];
    1862:	784b      	ldrb	r3, [r1, #1]
    1864:	e7f3      	b.n	184e <base64Char+0x2a>
	...

00001868 <atcab_base64encode_>:
    size_t          data_size,    /**< [in] The length of the byte array */
    char*           encoded,      /**< [in] The output converted to base 64 encoded characters. */
    size_t*         encoded_size, /**< [inout] Input: The size of the encoded buffer, Output: The length of the encoded base 64 character string */
    const uint8_t * rules         /**< [in] ruleset to use during encoding */
    )
{
    1868:	b5f0      	push	{r4, r5, r6, r7, lr}
    186a:	46de      	mov	lr, fp
    186c:	4657      	mov	r7, sl
    186e:	464e      	mov	r6, r9
    1870:	4645      	mov	r5, r8
    1872:	b5e0      	push	{r5, r6, r7, lr}
    1874:	b085      	sub	sp, #20
    1876:	0004      	movs	r4, r0
    1878:	468a      	mov	sl, r1
    187a:	1e16      	subs	r6, r2, #0
    187c:	9302      	str	r3, [sp, #8]
    size_t b64_len;

    do
    {
        // Check the input parameters
        if (encoded == NULL || data == NULL || encoded_size == NULL || !rules)
    187e:	d033      	beq.n	18e8 <atcab_base64encode_+0x80>
    1880:	2800      	cmp	r0, #0
    1882:	d031      	beq.n	18e8 <atcab_base64encode_+0x80>
    1884:	2b00      	cmp	r3, #0
    1886:	d02f      	beq.n	18e8 <atcab_base64encode_+0x80>
    1888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    188a:	2b00      	cmp	r3, #0
    188c:	d02c      	beq.n	18e8 <atcab_base64encode_+0x80>
            status = ATCA_BAD_PARAM;
            BREAK(status, "Null input parameter");
        }

        // Calculate output length for buffer size check
        b64_len = (data_size / 3 + (data_size % 3 != 0)) * 4; // ceil(size/3)*4
    188e:	2103      	movs	r1, #3
    1890:	4650      	mov	r0, sl
    1892:	4b6c      	ldr	r3, [pc, #432]	; (1a44 <atcab_base64encode_+0x1dc>)
    1894:	4798      	blx	r3
    1896:	000d      	movs	r5, r1
    1898:	1e69      	subs	r1, r5, #1
    189a:	418d      	sbcs	r5, r1
    189c:	2103      	movs	r1, #3
    189e:	4650      	mov	r0, sl
    18a0:	4b69      	ldr	r3, [pc, #420]	; (1a48 <atcab_base64encode_+0x1e0>)
    18a2:	4798      	blx	r3
    18a4:	182d      	adds	r5, r5, r0
    18a6:	00ad      	lsls	r5, r5, #2
        if (rules[3])
    18a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    18aa:	78d9      	ldrb	r1, [r3, #3]
    18ac:	2900      	cmp	r1, #0
    18ae:	d006      	beq.n	18be <atcab_base64encode_+0x56>
        {
            // We add newlines to the output
            if (rules[3] % 4 != 0)
    18b0:	078b      	lsls	r3, r1, #30
    18b2:	d125      	bne.n	1900 <atcab_base64encode_+0x98>
            {
                status = ATCA_BAD_PARAM;
                BREAK(status, "newline rules[3] must be multiple of 4");
            }
            b64_len += (b64_len / rules[3]) * 2;
    18b4:	0028      	movs	r0, r5
    18b6:	4b64      	ldr	r3, [pc, #400]	; (1a48 <atcab_base64encode_+0x1e0>)
    18b8:	4798      	blx	r3
    18ba:	0040      	lsls	r0, r0, #1
    18bc:	182d      	adds	r5, r5, r0
        }
        b64_len += 1; // terminating null
    18be:	3501      	adds	r5, #1
        if (*encoded_size < b64_len)
    18c0:	9b02      	ldr	r3, [sp, #8]
    18c2:	681b      	ldr	r3, [r3, #0]
    18c4:	9301      	str	r3, [sp, #4]
    18c6:	429d      	cmp	r5, r3
    18c8:	d820      	bhi.n	190c <atcab_base64encode_+0xa4>
        {
            status = ATCA_SMALL_BUFFER;
            BREAK(status, "Length of encoded buffer too small");
        }
        // Initialize the return length to 0
        *encoded_size = 0;
    18ca:	2300      	movs	r3, #0
    18cc:	9a02      	ldr	r2, [sp, #8]
    18ce:	6013      	str	r3, [r2, #0]

        // Loop through the byte array by 3 then map to 4 base 64 encoded characters
        for (data_idx = 0; data_idx < data_size; data_idx += 3)
    18d0:	4653      	mov	r3, sl
    18d2:	2b00      	cmp	r3, #0
    18d4:	d100      	bne.n	18d8 <atcab_base64encode_+0x70>
    18d6:	e0ac      	b.n	1a32 <atcab_base64encode_+0x1ca>
    18d8:	2300      	movs	r3, #0
    18da:	9303      	str	r3, [sp, #12]
    18dc:	2500      	movs	r5, #0
    18de:	4698      	mov	r8, r3
                encoded[b64_idx++] = base64Char(id, rules);
                id = (data[data_idx + 1] & 0x0F) << 2;
                if (data_idx + 2 < data_size)
                {
                    id |= (data[data_idx + 2] & 0xC0) >> 6;
                    encoded[b64_idx++] = base64Char(id, rules);
    18e0:	0033      	movs	r3, r6
    18e2:	4646      	mov	r6, r8
    18e4:	4698      	mov	r8, r3
    18e6:	e054      	b.n	1992 <atcab_base64encode_+0x12a>
            BREAK(status, "Null input parameter");
    18e8:	21e2      	movs	r1, #226	; 0xe2
    18ea:	4858      	ldr	r0, [pc, #352]	; (1a4c <atcab_base64encode_+0x1e4>)
    18ec:	4b58      	ldr	r3, [pc, #352]	; (1a50 <atcab_base64encode_+0x1e8>)
    18ee:	4798      	blx	r3
            status = ATCA_BAD_PARAM;
    18f0:	20e2      	movs	r0, #226	; 0xe2
        // Set the final encoded length (excluding terminating null)
        *encoded_size = b64_idx - 1;
    }
    while (false);
    return status;
}
    18f2:	b005      	add	sp, #20
    18f4:	bc3c      	pop	{r2, r3, r4, r5}
    18f6:	4690      	mov	r8, r2
    18f8:	4699      	mov	r9, r3
    18fa:	46a2      	mov	sl, r4
    18fc:	46ab      	mov	fp, r5
    18fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
                BREAK(status, "newline rules[3] must be multiple of 4");
    1900:	21e2      	movs	r1, #226	; 0xe2
    1902:	4854      	ldr	r0, [pc, #336]	; (1a54 <atcab_base64encode_+0x1ec>)
    1904:	4b52      	ldr	r3, [pc, #328]	; (1a50 <atcab_base64encode_+0x1e8>)
    1906:	4798      	blx	r3
                status = ATCA_BAD_PARAM;
    1908:	20e2      	movs	r0, #226	; 0xe2
                BREAK(status, "newline rules[3] must be multiple of 4");
    190a:	e7f2      	b.n	18f2 <atcab_base64encode_+0x8a>
            BREAK(status, "Length of encoded buffer too small");
    190c:	21ed      	movs	r1, #237	; 0xed
    190e:	4852      	ldr	r0, [pc, #328]	; (1a58 <atcab_base64encode_+0x1f0>)
    1910:	4b4f      	ldr	r3, [pc, #316]	; (1a50 <atcab_base64encode_+0x1e8>)
    1912:	4798      	blx	r3
            status = ATCA_SMALL_BUFFER;
    1914:	20ed      	movs	r0, #237	; 0xed
            BREAK(status, "Length of encoded buffer too small");
    1916:	e7ec      	b.n	18f2 <atcab_base64encode_+0x8a>
    1918:	9401      	str	r4, [sp, #4]
            encoded[b64_idx++] = base64Char(id, rules);
    191a:	1c6a      	adds	r2, r5, #1
    191c:	4693      	mov	fp, r2
    191e:	4642      	mov	r2, r8
    1920:	1957      	adds	r7, r2, r5
            id = (data[data_idx] & 0xFC) >> 2;
    1922:	7820      	ldrb	r0, [r4, #0]
            encoded[b64_idx++] = base64Char(id, rules);
    1924:	0880      	lsrs	r0, r0, #2
    1926:	990e      	ldr	r1, [sp, #56]	; 0x38
    1928:	4a4c      	ldr	r2, [pc, #304]	; (1a5c <atcab_base64encode_+0x1f4>)
    192a:	4790      	blx	r2
    192c:	7038      	strb	r0, [r7, #0]
            id = (data[data_idx] & 0x03) << 4;
    192e:	7820      	ldrb	r0, [r4, #0]
    1930:	0100      	lsls	r0, r0, #4
    1932:	2230      	movs	r2, #48	; 0x30
    1934:	4010      	ands	r0, r2
            if (data_idx + 1 < data_size)
    1936:	1c73      	adds	r3, r6, #1
    1938:	459a      	cmp	sl, r3
    193a:	d951      	bls.n	19e0 <atcab_base64encode_+0x178>
                encoded[b64_idx++] = base64Char(id, rules);
    193c:	1caa      	adds	r2, r5, #2
    193e:	4691      	mov	r9, r2
    1940:	465f      	mov	r7, fp
    1942:	4447      	add	r7, r8
                id |= (data[data_idx + 1] & 0xF0) >> 4;
    1944:	7863      	ldrb	r3, [r4, #1]
    1946:	091b      	lsrs	r3, r3, #4
                encoded[b64_idx++] = base64Char(id, rules);
    1948:	4318      	orrs	r0, r3
    194a:	990e      	ldr	r1, [sp, #56]	; 0x38
    194c:	4a43      	ldr	r2, [pc, #268]	; (1a5c <atcab_base64encode_+0x1f4>)
    194e:	4790      	blx	r2
    1950:	7038      	strb	r0, [r7, #0]
                id = (data[data_idx + 1] & 0x0F) << 2;
    1952:	7863      	ldrb	r3, [r4, #1]
    1954:	009b      	lsls	r3, r3, #2
    1956:	203c      	movs	r0, #60	; 0x3c
    1958:	4018      	ands	r0, r3
                if (data_idx + 2 < data_size)
    195a:	1cb3      	adds	r3, r6, #2
    195c:	459a      	cmp	sl, r3
    195e:	d92f      	bls.n	19c0 <atcab_base64encode_+0x158>
                    encoded[b64_idx++] = base64Char(id, rules);
    1960:	1cef      	adds	r7, r5, #3
    1962:	44c1      	add	r9, r8
                    id |= (data[data_idx + 2] & 0xC0) >> 6;
    1964:	9b01      	ldr	r3, [sp, #4]
    1966:	789b      	ldrb	r3, [r3, #2]
    1968:	099b      	lsrs	r3, r3, #6
                    encoded[b64_idx++] = base64Char(id, rules);
    196a:	4318      	orrs	r0, r3
    196c:	990e      	ldr	r1, [sp, #56]	; 0x38
    196e:	4a3b      	ldr	r2, [pc, #236]	; (1a5c <atcab_base64encode_+0x1f4>)
    1970:	4790      	blx	r2
    1972:	464a      	mov	r2, r9
    1974:	7010      	strb	r0, [r2, #0]
                    encoded[b64_idx++] = base64Char(id, rules);
    1976:	4447      	add	r7, r8
    1978:	3504      	adds	r5, #4
                    id = data[data_idx + 2] & 0x3F;
    197a:	9b01      	ldr	r3, [sp, #4]
    197c:	789b      	ldrb	r3, [r3, #2]
                    encoded[b64_idx++] = base64Char(id, rules);
    197e:	203f      	movs	r0, #63	; 0x3f
    1980:	4018      	ands	r0, r3
    1982:	990e      	ldr	r1, [sp, #56]	; 0x38
    1984:	4b35      	ldr	r3, [pc, #212]	; (1a5c <atcab_base64encode_+0x1f4>)
    1986:	4798      	blx	r3
    1988:	7038      	strb	r0, [r7, #0]
        for (data_idx = 0; data_idx < data_size; data_idx += 3)
    198a:	3603      	adds	r6, #3
    198c:	3403      	adds	r4, #3
    198e:	45b2      	cmp	sl, r6
    1990:	d93e      	bls.n	1a10 <atcab_base64encode_+0x1a8>
            if (rules[3] && data_idx > 0 && (b64_idx - offset) % rules[3] == 0)
    1992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1994:	78d9      	ldrb	r1, [r3, #3]
    1996:	2900      	cmp	r1, #0
    1998:	d0be      	beq.n	1918 <atcab_base64encode_+0xb0>
    199a:	2e00      	cmp	r6, #0
    199c:	d0bc      	beq.n	1918 <atcab_base64encode_+0xb0>
    199e:	9f03      	ldr	r7, [sp, #12]
    19a0:	1be8      	subs	r0, r5, r7
    19a2:	4b28      	ldr	r3, [pc, #160]	; (1a44 <atcab_base64encode_+0x1dc>)
    19a4:	4798      	blx	r3
    19a6:	2900      	cmp	r1, #0
    19a8:	d1b6      	bne.n	1918 <atcab_base64encode_+0xb0>
                encoded[b64_idx++] = '\r';
    19aa:	1c6b      	adds	r3, r5, #1
    19ac:	4642      	mov	r2, r8
    19ae:	310d      	adds	r1, #13
    19b0:	5551      	strb	r1, [r2, r5]
                encoded[b64_idx++] = '\n';
    19b2:	210a      	movs	r1, #10
    19b4:	54d1      	strb	r1, [r2, r3]
    19b6:	3502      	adds	r5, #2
                offset += 2;
    19b8:	003b      	movs	r3, r7
    19ba:	3302      	adds	r3, #2
    19bc:	9303      	str	r3, [sp, #12]
    19be:	e7ab      	b.n	1918 <atcab_base64encode_+0xb0>
                    encoded[b64_idx++] = base64Char(id, rules);
    19c0:	1cef      	adds	r7, r5, #3
    19c2:	44c1      	add	r9, r8
    19c4:	46cb      	mov	fp, r9
    19c6:	990e      	ldr	r1, [sp, #56]	; 0x38
    19c8:	4b24      	ldr	r3, [pc, #144]	; (1a5c <atcab_base64encode_+0x1f4>)
    19ca:	4699      	mov	r9, r3
    19cc:	4798      	blx	r3
    19ce:	465b      	mov	r3, fp
    19d0:	7018      	strb	r0, [r3, #0]
                    encoded[b64_idx++] = base64Char(B64_IS_EQUAL, rules);
    19d2:	4447      	add	r7, r8
    19d4:	3504      	adds	r5, #4
    19d6:	990e      	ldr	r1, [sp, #56]	; 0x38
    19d8:	2040      	movs	r0, #64	; 0x40
    19da:	47c8      	blx	r9
    19dc:	7038      	strb	r0, [r7, #0]
    19de:	e7d4      	b.n	198a <atcab_base64encode_+0x122>
                encoded[b64_idx++] = base64Char(id, rules);
    19e0:	465f      	mov	r7, fp
    19e2:	4447      	add	r7, r8
    19e4:	990e      	ldr	r1, [sp, #56]	; 0x38
    19e6:	4b1d      	ldr	r3, [pc, #116]	; (1a5c <atcab_base64encode_+0x1f4>)
    19e8:	4798      	blx	r3
    19ea:	7038      	strb	r0, [r7, #0]
                encoded[b64_idx++] = base64Char(B64_IS_EQUAL, rules);
    19ec:	1cef      	adds	r7, r5, #3
                encoded[b64_idx++] = base64Char(id, rules);
    19ee:	1cab      	adds	r3, r5, #2
                encoded[b64_idx++] = base64Char(B64_IS_EQUAL, rules);
    19f0:	4443      	add	r3, r8
    19f2:	4699      	mov	r9, r3
    19f4:	990e      	ldr	r1, [sp, #56]	; 0x38
    19f6:	2040      	movs	r0, #64	; 0x40
    19f8:	4b18      	ldr	r3, [pc, #96]	; (1a5c <atcab_base64encode_+0x1f4>)
    19fa:	4798      	blx	r3
    19fc:	464b      	mov	r3, r9
    19fe:	7018      	strb	r0, [r3, #0]
                encoded[b64_idx++] = base64Char(B64_IS_EQUAL, rules);
    1a00:	4447      	add	r7, r8
    1a02:	3504      	adds	r5, #4
    1a04:	990e      	ldr	r1, [sp, #56]	; 0x38
    1a06:	2040      	movs	r0, #64	; 0x40
    1a08:	4b14      	ldr	r3, [pc, #80]	; (1a5c <atcab_base64encode_+0x1f4>)
    1a0a:	4798      	blx	r3
    1a0c:	7038      	strb	r0, [r7, #0]
    1a0e:	e7bc      	b.n	198a <atcab_base64encode_+0x122>
    1a10:	4646      	mov	r6, r8
        while (b64_idx > 1 && encoded[b64_idx - 1] == 0)
    1a12:	46aa      	mov	sl, r5
    1a14:	2d01      	cmp	r5, #1
    1a16:	d90c      	bls.n	1a32 <atcab_base64encode_+0x1ca>
    1a18:	1e6b      	subs	r3, r5, #1
    1a1a:	5cf2      	ldrb	r2, [r6, r3]
    1a1c:	2a00      	cmp	r2, #0
    1a1e:	d108      	bne.n	1a32 <atcab_base64encode_+0x1ca>
    1a20:	2b01      	cmp	r3, #1
    1a22:	d005      	beq.n	1a30 <atcab_base64encode_+0x1c8>
    1a24:	1e5a      	subs	r2, r3, #1
    1a26:	5cb1      	ldrb	r1, [r6, r2]
    1a28:	2900      	cmp	r1, #0
    1a2a:	d109      	bne.n	1a40 <atcab_base64encode_+0x1d8>
    1a2c:	0013      	movs	r3, r2
    1a2e:	e7f7      	b.n	1a20 <atcab_base64encode_+0x1b8>
    1a30:	469a      	mov	sl, r3
        encoded[b64_idx++] = 0;
    1a32:	2300      	movs	r3, #0
    1a34:	4652      	mov	r2, sl
    1a36:	54b3      	strb	r3, [r6, r2]
        *encoded_size = b64_idx - 1;
    1a38:	9b02      	ldr	r3, [sp, #8]
    1a3a:	601a      	str	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    1a3c:	2000      	movs	r0, #0
    1a3e:	e758      	b.n	18f2 <atcab_base64encode_+0x8a>
    1a40:	469a      	mov	sl, r3
    1a42:	e7f6      	b.n	1a32 <atcab_base64encode_+0x1ca>
    1a44:	0000b769 	.word	0x0000b769
    1a48:	0000b65d 	.word	0x0000b65d
    1a4c:	0000ebd0 	.word	0x0000ebd0
    1a50:	0000d4d5 	.word	0x0000d4d5
    1a54:	0000ec60 	.word	0x0000ec60
    1a58:	0000ec9c 	.word	0x0000ec9c
    1a5c:	00001825 	.word	0x00001825

00001a60 <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
    1a60:	b570      	push	{r4, r5, r6, lr}
    1a62:	b0b0      	sub	sp, #192	; 0xc0
    1a64:	0005      	movs	r5, r0
    1a66:	000e      	movs	r6, r1
    1a68:	0014      	movs	r4, r2
    sw_sha256_init((sw_sha256_ctx*)ctx);
    1a6a:	4668      	mov	r0, sp
    1a6c:	4b06      	ldr	r3, [pc, #24]	; (1a88 <atcac_sw_sha2_256+0x28>)
    1a6e:	4798      	blx	r3
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
    1a70:	0032      	movs	r2, r6
    1a72:	0029      	movs	r1, r5
    1a74:	4668      	mov	r0, sp
    1a76:	4b05      	ldr	r3, [pc, #20]	; (1a8c <atcac_sw_sha2_256+0x2c>)
    1a78:	4798      	blx	r3
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
    1a7a:	0021      	movs	r1, r4
    1a7c:	4668      	mov	r0, sp
    1a7e:	4b04      	ldr	r3, [pc, #16]	; (1a90 <atcac_sw_sha2_256+0x30>)
    1a80:	4798      	blx	r3
    {
        return ret;
    }

    return ATCA_SUCCESS;
    1a82:	2000      	movs	r0, #0
    1a84:	b030      	add	sp, #192	; 0xc0
    1a86:	bd70      	pop	{r4, r5, r6, pc}
    1a88:	00001c41 	.word	0x00001c41
    1a8c:	00001ca5 	.word	0x00001ca5
    1a90:	00001d31 	.word	0x00001d31

00001a94 <sw_sha256_process>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
    1a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a96:	46de      	mov	lr, fp
    1a98:	4657      	mov	r7, sl
    1a9a:	464e      	mov	r6, r9
    1a9c:	4645      	mov	r5, r8
    1a9e:	b5e0      	push	{r5, r6, r7, lr}
    1aa0:	b0d5      	sub	sp, #340	; 0x154
    1aa2:	900b      	str	r0, [sp, #44]	; 0x2c
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
    1aa4:	2a00      	cmp	r2, #0
    1aa6:	d100      	bne.n	1aaa <sw_sha256_process+0x16>
    1aa8:	e0c0      	b.n	1c2c <sw_sha256_process+0x198>
    1aaa:	000b      	movs	r3, r1
    1aac:	0192      	lsls	r2, r2, #6
    1aae:	1889      	adds	r1, r1, r2
    1ab0:	910a      	str	r1, [sp, #40]	; 0x28
    1ab2:	0002      	movs	r2, r0
    1ab4:	32a8      	adds	r2, #168	; 0xa8
    1ab6:	9209      	str	r2, [sp, #36]	; 0x24
            s1 = rotate_right(rotate_register[4], 6)
                 ^ rotate_right(rotate_register[4], 11)
                 ^ rotate_right(rotate_register[4], 25);
            ch = (rotate_register[4] & rotate_register[5])
                 ^ (~rotate_register[4] & rotate_register[6]);
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1ab8:	4a60      	ldr	r2, [pc, #384]	; (1c3c <sw_sha256_process+0x1a8>)
    1aba:	4691      	mov	r9, r2
    1abc:	e05c      	b.n	1b78 <sw_sha256_process+0xe4>

            rotate_register[7] = rotate_register[6];
            rotate_register[6] = rotate_register[5];
    1abe:	9d02      	ldr	r5, [sp, #8]
    1ac0:	9501      	str	r5, [sp, #4]
            rotate_register[5] = rotate_register[4];
    1ac2:	9002      	str	r0, [sp, #8]
            rotate_register[4] = rotate_register[3] + t1;
    1ac4:	4658      	mov	r0, fp
            rotate_register[3] = rotate_register[2];
            rotate_register[2] = rotate_register[1];
    1ac6:	46bc      	mov	ip, r7
            rotate_register[1] = rotate_register[0];
    1ac8:	0027      	movs	r7, r4
            rotate_register[0] = t1 + t2;
    1aca:	0014      	movs	r4, r2
                 ^ rotate_right(rotate_register[4], 11)
    1acc:	0002      	movs	r2, r0
    1ace:	250b      	movs	r5, #11
    1ad0:	41ea      	rors	r2, r5
    1ad2:	0005      	movs	r5, r0
    1ad4:	2606      	movs	r6, #6
    1ad6:	41f5      	rors	r5, r6
    1ad8:	4055      	eors	r5, r2
                 ^ rotate_right(rotate_register[4], 25);
    1ada:	0002      	movs	r2, r0
    1adc:	3613      	adds	r6, #19
    1ade:	41f2      	rors	r2, r6
            s1 = rotate_right(rotate_register[4], 6)
    1ae0:	4055      	eors	r5, r2
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1ae2:	464a      	mov	r2, r9
    1ae4:	588a      	ldr	r2, [r1, r2]
    1ae6:	9e04      	ldr	r6, [sp, #16]
    1ae8:	598e      	ldr	r6, [r1, r6]
    1aea:	46b0      	mov	r8, r6
    1aec:	4442      	add	r2, r8
    1aee:	18ad      	adds	r5, r5, r2
            ch = (rotate_register[4] & rotate_register[5])
    1af0:	9a02      	ldr	r2, [sp, #8]
    1af2:	4002      	ands	r2, r0
    1af4:	4690      	mov	r8, r2
    1af6:	9a01      	ldr	r2, [sp, #4]
    1af8:	4382      	bics	r2, r0
    1afa:	4646      	mov	r6, r8
    1afc:	4072      	eors	r2, r6
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1afe:	18aa      	adds	r2, r5, r2
    1b00:	18d3      	adds	r3, r2, r3
            rotate_register[4] = rotate_register[3] + t1;
    1b02:	9d03      	ldr	r5, [sp, #12]
    1b04:	46ab      	mov	fp, r5
    1b06:	449b      	add	fp, r3
                 ^ rotate_right(rotate_register[0], 13)
    1b08:	0025      	movs	r5, r4
    1b0a:	260d      	movs	r6, #13
    1b0c:	41f5      	rors	r5, r6
    1b0e:	0022      	movs	r2, r4
    1b10:	3e0b      	subs	r6, #11
    1b12:	41f2      	rors	r2, r6
    1b14:	406a      	eors	r2, r5
                 ^ rotate_right(rotate_register[0], 22);
    1b16:	0025      	movs	r5, r4
    1b18:	4656      	mov	r6, sl
    1b1a:	41f5      	rors	r5, r6
            s0 = rotate_right(rotate_register[0], 2)
    1b1c:	406a      	eors	r2, r5
                  ^ (rotate_register[0] & rotate_register[2])
    1b1e:	4665      	mov	r5, ip
    1b20:	407d      	eors	r5, r7
    1b22:	4025      	ands	r5, r4
                  ^ (rotate_register[1] & rotate_register[2]);
    1b24:	4666      	mov	r6, ip
    1b26:	403e      	ands	r6, r7
            maj = (rotate_register[0] & rotate_register[1])
    1b28:	4075      	eors	r5, r6
            t2 = s0 + maj;
    1b2a:	1952      	adds	r2, r2, r5
            rotate_register[0] = t1 + t2;
    1b2c:	18d2      	adds	r2, r2, r3
    1b2e:	3104      	adds	r1, #4
            rotate_register[7] = rotate_register[6];
    1b30:	9b01      	ldr	r3, [sp, #4]
            rotate_register[3] = rotate_register[2];
    1b32:	4665      	mov	r5, ip
    1b34:	9503      	str	r5, [sp, #12]
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
    1b36:	2580      	movs	r5, #128	; 0x80
    1b38:	006d      	lsls	r5, r5, #1
    1b3a:	42a9      	cmp	r1, r5
    1b3c:	d1bf      	bne.n	1abe <sw_sha256_process+0x2a>
    1b3e:	003d      	movs	r5, r7
    1b40:	4667      	mov	r7, ip
    1b42:	9b08      	ldr	r3, [sp, #32]
    1b44:	469c      	mov	ip, r3
    1b46:	4659      	mov	r1, fp
    1b48:	920c      	str	r2, [sp, #48]	; 0x30
    1b4a:	940d      	str	r4, [sp, #52]	; 0x34
    1b4c:	950e      	str	r5, [sp, #56]	; 0x38
    1b4e:	9110      	str	r1, [sp, #64]	; 0x40
    1b50:	9011      	str	r0, [sp, #68]	; 0x44
    1b52:	9b02      	ldr	r3, [sp, #8]
    1b54:	9312      	str	r3, [sp, #72]	; 0x48
    1b56:	9b01      	ldr	r3, [sp, #4]
    1b58:	9313      	str	r3, [sp, #76]	; 0x4c
    1b5a:	970f      	str	r7, [sp, #60]	; 0x3c
    1b5c:	4663      	mov	r3, ip
    1b5e:	9905      	ldr	r1, [sp, #20]
    1b60:	9807      	ldr	r0, [sp, #28]
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
        {
            ctx->hash[i] += rotate_register[i];
    1b62:	c904      	ldmia	r1!, {r2}
    1b64:	681c      	ldr	r4, [r3, #0]
    1b66:	46a4      	mov	ip, r4
    1b68:	4462      	add	r2, ip
    1b6a:	c304      	stmia	r3!, {r2}
        for (i = 0; i < 8; i++)
    1b6c:	4283      	cmp	r3, r0
    1b6e:	d1f8      	bne.n	1b62 <sw_sha256_process+0xce>
    1b70:	9b06      	ldr	r3, [sp, #24]
    for (block = 0; block < block_count; block++)
    1b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1b74:	429a      	cmp	r2, r3
    1b76:	d059      	beq.n	1c2c <sw_sha256_process+0x198>
    1b78:	a814      	add	r0, sp, #80	; 0x50
    1b7a:	2240      	movs	r2, #64	; 0x40
    1b7c:	4694      	mov	ip, r2
    1b7e:	449c      	add	ip, r3
    1b80:	4662      	mov	r2, ip
    1b82:	4664      	mov	r4, ip
    1b84:	9206      	str	r2, [sp, #24]
{
    1b86:	0002      	movs	r2, r0
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
    1b88:	7819      	ldrb	r1, [r3, #0]
    1b8a:	70d1      	strb	r1, [r2, #3]
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
    1b8c:	7859      	ldrb	r1, [r3, #1]
    1b8e:	7091      	strb	r1, [r2, #2]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
    1b90:	7899      	ldrb	r1, [r3, #2]
    1b92:	7051      	strb	r1, [r2, #1]
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
    1b94:	78d9      	ldrb	r1, [r3, #3]
    1b96:	7011      	strb	r1, [r2, #0]
    1b98:	3304      	adds	r3, #4
    1b9a:	3204      	adds	r2, #4
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
    1b9c:	42a3      	cmp	r3, r4
    1b9e:	d1f3      	bne.n	1b88 <sw_sha256_process+0xf4>
            word_value = w_union.w_word[w_index - 15];
    1ba0:	6842      	ldr	r2, [r0, #4]
            word_value = w_union.w_word[w_index - 2];
    1ba2:	6b81      	ldr	r1, [r0, #56]	; 0x38
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
    1ba4:	0013      	movs	r3, r2
    1ba6:	2407      	movs	r4, #7
    1ba8:	41e3      	rors	r3, r4
    1baa:	0014      	movs	r4, r2
    1bac:	2512      	movs	r5, #18
    1bae:	41ec      	rors	r4, r5
    1bb0:	4063      	eors	r3, r4
    1bb2:	08d2      	lsrs	r2, r2, #3
    1bb4:	4053      	eors	r3, r2
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    1bb6:	6802      	ldr	r2, [r0, #0]
    1bb8:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1bba:	46a4      	mov	ip, r4
    1bbc:	4462      	add	r2, ip
    1bbe:	189b      	adds	r3, r3, r2
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
    1bc0:	000a      	movs	r2, r1
    1bc2:	2411      	movs	r4, #17
    1bc4:	41e2      	rors	r2, r4
    1bc6:	000c      	movs	r4, r1
    1bc8:	3501      	adds	r5, #1
    1bca:	41ec      	rors	r4, r5
    1bcc:	4062      	eors	r2, r4
    1bce:	0a89      	lsrs	r1, r1, #10
    1bd0:	404a      	eors	r2, r1
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    1bd2:	189b      	adds	r3, r3, r2
    1bd4:	6403      	str	r3, [r0, #64]	; 0x40
    1bd6:	3004      	adds	r0, #4
        while (w_index < SHA256_BLOCK_SIZE)
    1bd8:	ab44      	add	r3, sp, #272	; 0x110
    1bda:	4298      	cmp	r0, r3
    1bdc:	d1e0      	bne.n	1ba0 <sw_sha256_process+0x10c>
    1bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1be0:	2288      	movs	r2, #136	; 0x88
    1be2:	4690      	mov	r8, r2
    1be4:	4443      	add	r3, r8
    1be6:	469c      	mov	ip, r3
    1be8:	ab0c      	add	r3, sp, #48	; 0x30
    1bea:	9305      	str	r3, [sp, #20]
    1bec:	4662      	mov	r2, ip
    1bee:	9809      	ldr	r0, [sp, #36]	; 0x24
            rotate_register[i] = ctx->hash[i];
    1bf0:	ca02      	ldmia	r2!, {r1}
    1bf2:	c302      	stmia	r3!, {r1}
        for (i = 0; i < 8; i++)
    1bf4:	4282      	cmp	r2, r0
    1bf6:	d1fb      	bne.n	1bf0 <sw_sha256_process+0x15c>
    1bf8:	9207      	str	r2, [sp, #28]
    1bfa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    1bfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1bfe:	9301      	str	r3, [sp, #4]
    1c00:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1c02:	9302      	str	r3, [sp, #8]
    1c04:	9810      	ldr	r0, [sp, #64]	; 0x40
    1c06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c08:	4698      	mov	r8, r3
    1c0a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    1c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    1c10:	2500      	movs	r5, #0
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1c12:	a914      	add	r1, sp, #80	; 0x50
    1c14:	9104      	str	r1, [sp, #16]
                 ^ rotate_right(rotate_register[0], 22);
    1c16:	2116      	movs	r1, #22
    1c18:	468a      	mov	sl, r1
    1c1a:	4661      	mov	r1, ip
    1c1c:	9108      	str	r1, [sp, #32]
    1c1e:	46bc      	mov	ip, r7
    1c20:	001f      	movs	r7, r3
    1c22:	0013      	movs	r3, r2
    1c24:	0029      	movs	r1, r5
    1c26:	4642      	mov	r2, r8
    1c28:	9203      	str	r2, [sp, #12]
    1c2a:	e74f      	b.n	1acc <sw_sha256_process+0x38>
        }
    }
}
    1c2c:	b055      	add	sp, #340	; 0x154
    1c2e:	bc3c      	pop	{r2, r3, r4, r5}
    1c30:	4690      	mov	r8, r2
    1c32:	4699      	mov	r9, r3
    1c34:	46a2      	mov	sl, r4
    1c36:	46ab      	mov	fp, r5
    1c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	0000ecd4 	.word	0x0000ecd4

00001c40 <sw_sha256_init>:
 *
 * \param[in] ctx          SHA256 hash context
 */

void sw_sha256_init(sw_sha256_ctx* ctx)
{
    1c40:	b510      	push	{r4, lr}
    1c42:	0004      	movs	r4, r0
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    1c44:	22a8      	movs	r2, #168	; 0xa8
    1c46:	2100      	movs	r1, #0
    1c48:	4b0d      	ldr	r3, [pc, #52]	; (1c80 <sw_sha256_init+0x40>)
    1c4a:	4798      	blx	r3
    for (i = 0; i < 8; i++)
    {
        ctx->hash[i] = hash_init[i];
    1c4c:	4a0d      	ldr	r2, [pc, #52]	; (1c84 <sw_sha256_init+0x44>)
    1c4e:	2388      	movs	r3, #136	; 0x88
    1c50:	50e2      	str	r2, [r4, r3]
    1c52:	4a0d      	ldr	r2, [pc, #52]	; (1c88 <sw_sha256_init+0x48>)
    1c54:	3304      	adds	r3, #4
    1c56:	50e2      	str	r2, [r4, r3]
    1c58:	4a0c      	ldr	r2, [pc, #48]	; (1c8c <sw_sha256_init+0x4c>)
    1c5a:	3304      	adds	r3, #4
    1c5c:	50e2      	str	r2, [r4, r3]
    1c5e:	4a0c      	ldr	r2, [pc, #48]	; (1c90 <sw_sha256_init+0x50>)
    1c60:	3304      	adds	r3, #4
    1c62:	50e2      	str	r2, [r4, r3]
    1c64:	4a0b      	ldr	r2, [pc, #44]	; (1c94 <sw_sha256_init+0x54>)
    1c66:	3304      	adds	r3, #4
    1c68:	50e2      	str	r2, [r4, r3]
    1c6a:	4a0b      	ldr	r2, [pc, #44]	; (1c98 <sw_sha256_init+0x58>)
    1c6c:	3304      	adds	r3, #4
    1c6e:	50e2      	str	r2, [r4, r3]
    1c70:	4a0a      	ldr	r2, [pc, #40]	; (1c9c <sw_sha256_init+0x5c>)
    1c72:	3304      	adds	r3, #4
    1c74:	50e2      	str	r2, [r4, r3]
    1c76:	4a0a      	ldr	r2, [pc, #40]	; (1ca0 <sw_sha256_init+0x60>)
    1c78:	3304      	adds	r3, #4
    1c7a:	50e2      	str	r2, [r4, r3]
    }
}
    1c7c:	bd10      	pop	{r4, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	0000d375 	.word	0x0000d375
    1c84:	6a09e667 	.word	0x6a09e667
    1c88:	bb67ae85 	.word	0xbb67ae85
    1c8c:	3c6ef372 	.word	0x3c6ef372
    1c90:	a54ff53a 	.word	0xa54ff53a
    1c94:	510e527f 	.word	0x510e527f
    1c98:	9b05688c 	.word	0x9b05688c
    1c9c:	1f83d9ab 	.word	0x1f83d9ab
    1ca0:	5be0cd19 	.word	0x5be0cd19

00001ca4 <sw_sha256_update>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] msg          Raw blocks to be processed
 * \param[in] msg_size     The size of the message passed
 */
void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
    1ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ca6:	46d6      	mov	lr, sl
    1ca8:	464f      	mov	r7, r9
    1caa:	b580      	push	{r7, lr}
    1cac:	b083      	sub	sp, #12
    1cae:	0006      	movs	r6, r0
    1cb0:	000d      	movs	r5, r1
    1cb2:	0014      	movs	r4, r2
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
    1cb4:	6840      	ldr	r0, [r0, #4]
    1cb6:	2740      	movs	r7, #64	; 0x40
    1cb8:	1a3f      	subs	r7, r7, r0
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
    1cba:	4297      	cmp	r7, r2
    1cbc:	d900      	bls.n	1cc0 <sw_sha256_update+0x1c>
    1cbe:	0017      	movs	r7, r2

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
    1cc0:	3008      	adds	r0, #8
    1cc2:	1830      	adds	r0, r6, r0
    1cc4:	003a      	movs	r2, r7
    1cc6:	0029      	movs	r1, r5
    1cc8:	4b17      	ldr	r3, [pc, #92]	; (1d28 <sw_sha256_update+0x84>)
    1cca:	4798      	blx	r3

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
    1ccc:	6873      	ldr	r3, [r6, #4]
    1cce:	18e3      	adds	r3, r4, r3
    1cd0:	2b3f      	cmp	r3, #63	; 0x3f
    1cd2:	d805      	bhi.n	1ce0 <sw_sha256_update+0x3c>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
    1cd4:	6073      	str	r3, [r6, #4]

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
}
    1cd6:	b003      	add	sp, #12
    1cd8:	bc0c      	pop	{r2, r3}
    1cda:	4691      	mov	r9, r2
    1cdc:	469a      	mov	sl, r3
    1cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sw_sha256_process(ctx, ctx->block, 1);
    1ce0:	2308      	movs	r3, #8
    1ce2:	469c      	mov	ip, r3
    1ce4:	44b4      	add	ip, r6
    1ce6:	4663      	mov	r3, ip
    1ce8:	2201      	movs	r2, #1
    1cea:	9301      	str	r3, [sp, #4]
    1cec:	4661      	mov	r1, ip
    1cee:	0030      	movs	r0, r6
    1cf0:	4b0e      	ldr	r3, [pc, #56]	; (1d2c <sw_sha256_update+0x88>)
    1cf2:	469a      	mov	sl, r3
    1cf4:	4798      	blx	r3
    msg_size -= copy_size; // Adjust to the remaining message bytes
    1cf6:	1be4      	subs	r4, r4, r7
    block_count = msg_size / SHA256_BLOCK_SIZE;
    1cf8:	09a2      	lsrs	r2, r4, #6
    1cfa:	4691      	mov	r9, r2
    sw_sha256_process(ctx, &msg[copy_size], block_count);
    1cfc:	19e9      	adds	r1, r5, r7
    1cfe:	0030      	movs	r0, r6
    1d00:	47d0      	blx	sl
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    1d02:	464a      	mov	r2, r9
    1d04:	1c53      	adds	r3, r2, #1
    1d06:	019b      	lsls	r3, r3, #6
    1d08:	6832      	ldr	r2, [r6, #0]
    1d0a:	4694      	mov	ip, r2
    1d0c:	4463      	add	r3, ip
    1d0e:	6033      	str	r3, [r6, #0]
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    1d10:	233f      	movs	r3, #63	; 0x3f
    1d12:	001a      	movs	r2, r3
    1d14:	4022      	ands	r2, r4
    1d16:	6072      	str	r2, [r6, #4]
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    1d18:	0021      	movs	r1, r4
    1d1a:	4399      	bics	r1, r3
    1d1c:	19c9      	adds	r1, r1, r7
    1d1e:	1869      	adds	r1, r5, r1
    1d20:	9801      	ldr	r0, [sp, #4]
    1d22:	4b01      	ldr	r3, [pc, #4]	; (1d28 <sw_sha256_update+0x84>)
    1d24:	4798      	blx	r3
    1d26:	e7d6      	b.n	1cd6 <sw_sha256_update+0x32>
    1d28:	0000d33f 	.word	0x0000d33f
    1d2c:	00001a95 	.word	0x00001a95

00001d30 <sw_sha256_final>:
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    1d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d32:	0005      	movs	r5, r0
    1d34:	000c      	movs	r4, r1
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
    1d36:	6840      	ldr	r0, [r0, #4]
    1d38:	682b      	ldr	r3, [r5, #0]
    1d3a:	18c7      	adds	r7, r0, r3
    1d3c:	602f      	str	r7, [r5, #0]
    msg_size_bits = ctx->total_msg_size * 8;
    1d3e:	00ff      	lsls	r7, r7, #3

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
    1d40:	2309      	movs	r3, #9
    1d42:	425b      	negs	r3, r3
    1d44:	1a1b      	subs	r3, r3, r0
    1d46:	263f      	movs	r6, #63	; 0x3f
    1d48:	401e      	ands	r6, r3

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
    1d4a:	1c43      	adds	r3, r0, #1
    1d4c:	606b      	str	r3, [r5, #4]
    1d4e:	182b      	adds	r3, r5, r0
    1d50:	2280      	movs	r2, #128	; 0x80
    1d52:	721a      	strb	r2, [r3, #8]

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
    1d54:	1d32      	adds	r2, r6, #4
    1d56:	3009      	adds	r0, #9
    1d58:	1828      	adds	r0, r5, r0
    1d5a:	2100      	movs	r1, #0
    1d5c:	4b13      	ldr	r3, [pc, #76]	; (1dac <sw_sha256_final+0x7c>)
    1d5e:	4798      	blx	r3
    ctx->block_size += pad_zero_count + 4;
    1d60:	686b      	ldr	r3, [r5, #4]
    1d62:	469c      	mov	ip, r3
    1d64:	4466      	add	r6, ip

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
    1d66:	19ab      	adds	r3, r5, r6
    1d68:	0e3a      	lsrs	r2, r7, #24
    1d6a:	731a      	strb	r2, [r3, #12]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
    1d6c:	0c3a      	lsrs	r2, r7, #16
    1d6e:	735a      	strb	r2, [r3, #13]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
    1d70:	0a3a      	lsrs	r2, r7, #8
    1d72:	739a      	strb	r2, [r3, #14]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
    1d74:	0032      	movs	r2, r6
    1d76:	3208      	adds	r2, #8
    1d78:	606a      	str	r2, [r5, #4]
    1d7a:	73df      	strb	r7, [r3, #15]

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
    1d7c:	0992      	lsrs	r2, r2, #6
    1d7e:	0029      	movs	r1, r5
    1d80:	3108      	adds	r1, #8
    1d82:	0028      	movs	r0, r5
    1d84:	4b0a      	ldr	r3, [pc, #40]	; (1db0 <sw_sha256_final+0x80>)
    1d86:	4798      	blx	r3
    1d88:	0028      	movs	r0, r5
    1d8a:	3088      	adds	r0, #136	; 0x88
    1d8c:	35a8      	adds	r5, #168	; 0xa8
    1d8e:	e003      	b.n	1d98 <sw_sha256_final+0x68>
    1d90:	3004      	adds	r0, #4
    1d92:	3404      	adds	r4, #4

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    1d94:	42a8      	cmp	r0, r5
    1d96:	d008      	beq.n	1daa <sw_sha256_final+0x7a>
{
    1d98:	2303      	movs	r3, #3
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
    1d9a:	7802      	ldrb	r2, [r0, #0]
    1d9c:	54e2      	strb	r2, [r4, r3]
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    1d9e:	6802      	ldr	r2, [r0, #0]
    1da0:	0a12      	lsrs	r2, r2, #8
    1da2:	6002      	str	r2, [r0, #0]
    1da4:	3b01      	subs	r3, #1
    1da6:	d2f8      	bcs.n	1d9a <sw_sha256_final+0x6a>
    1da8:	e7f2      	b.n	1d90 <sw_sha256_final+0x60>
        }
    }
}
    1daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dac:	0000d375 	.word	0x0000d375
    1db0:	00001a95 	.word	0x00001a95

00001db4 <hal_iface_init>:
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;

    switch (cfg->iface_type)
    1db4:	7803      	ldrb	r3, [r0, #0]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    1db6:	20f0      	movs	r0, #240	; 0xf0
    switch (cfg->iface_type)
    1db8:	2b00      	cmp	r3, #0
    1dba:	d000      	beq.n	1dbe <hal_iface_init+0xa>
        break;
    default:
        break;
    }
    return status;
}
    1dbc:	4770      	bx	lr
        hal->halinit = &hal_i2c_init;
    1dbe:	4b0a      	ldr	r3, [pc, #40]	; (1de8 <hal_iface_init+0x34>)
    1dc0:	600b      	str	r3, [r1, #0]
        hal->halpostinit = &hal_i2c_post_init;
    1dc2:	4b0a      	ldr	r3, [pc, #40]	; (1dec <hal_iface_init+0x38>)
    1dc4:	604b      	str	r3, [r1, #4]
        hal->halreceive = &hal_i2c_receive;
    1dc6:	4b0a      	ldr	r3, [pc, #40]	; (1df0 <hal_iface_init+0x3c>)
    1dc8:	60cb      	str	r3, [r1, #12]
        hal->halsend = &hal_i2c_send;
    1dca:	4b0a      	ldr	r3, [pc, #40]	; (1df4 <hal_iface_init+0x40>)
    1dcc:	608b      	str	r3, [r1, #8]
        hal->halsleep = &hal_i2c_sleep;
    1dce:	4b0a      	ldr	r3, [pc, #40]	; (1df8 <hal_iface_init+0x44>)
    1dd0:	618b      	str	r3, [r1, #24]
        hal->halwake = &hal_i2c_wake;
    1dd2:	4b0a      	ldr	r3, [pc, #40]	; (1dfc <hal_iface_init+0x48>)
    1dd4:	610b      	str	r3, [r1, #16]
        hal->halidle = &hal_i2c_idle;
    1dd6:	4b0a      	ldr	r3, [pc, #40]	; (1e00 <hal_iface_init+0x4c>)
    1dd8:	614b      	str	r3, [r1, #20]
        hal->halrelease = &hal_i2c_release;
    1dda:	4b0a      	ldr	r3, [pc, #40]	; (1e04 <hal_iface_init+0x50>)
    1ddc:	61cb      	str	r3, [r1, #28]
        hal->hal_data = NULL;
    1dde:	2300      	movs	r3, #0
    1de0:	620b      	str	r3, [r1, #32]
        status = ATCA_SUCCESS;
    1de2:	2000      	movs	r0, #0
        break;
    1de4:	e7ea      	b.n	1dbc <hal_iface_init+0x8>
    1de6:	46c0      	nop			; (mov r8, r8)
    1de8:	00001e79 	.word	0x00001e79
    1dec:	00002029 	.word	0x00002029
    1df0:	00002081 	.word	0x00002081
    1df4:	0000202d 	.word	0x0000202d
    1df8:	00002355 	.word	0x00002355
    1dfc:	00002219 	.word	0x00002219
    1e00:	00002301 	.word	0x00002301
    1e04:	000023a9 	.word	0x000023a9

00001e08 <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
    1e08:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_GEN_FAIL;

    switch (iface_type)
    1e0a:	2800      	cmp	r0, #0
    1e0c:	d001      	beq.n	1e12 <hal_iface_release+0xa>
    ATCA_STATUS status = ATCA_GEN_FAIL;
    1e0e:	20e1      	movs	r0, #225	; 0xe1
    default:
        break;
    }

    return status;
}
    1e10:	bd10      	pop	{r4, pc}
        status = hal_i2c_release(hal_data);
    1e12:	0008      	movs	r0, r1
    1e14:	4b01      	ldr	r3, [pc, #4]	; (1e1c <hal_iface_release+0x14>)
    1e16:	4798      	blx	r3
        break;
    1e18:	e7fa      	b.n	1e10 <hal_iface_release+0x8>
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	000023a9 	.word	0x000023a9

00001e20 <hal_check_wake>:
 * \param[in] response_size  Size of the response to check.
 * \return ATCA_SUCCESS for expected wake, ATCA_STATUS_SELFTEST_ERROR if the
 *         power on self test failed, ATCA_WAKE_FAILED for other failures.
 */
ATCA_STATUS hal_check_wake(const uint8_t* response, int response_size)
{
    1e20:	b510      	push	{r4, lr}
    1e22:	b082      	sub	sp, #8
    1e24:	0004      	movs	r4, r0
    const uint8_t expected_response[4] = { 0x04, 0x11, 0x33, 0x43 };
    1e26:	4b0f      	ldr	r3, [pc, #60]	; (1e64 <hal_check_wake+0x44>)
    1e28:	681a      	ldr	r2, [r3, #0]
    1e2a:	9201      	str	r2, [sp, #4]
    uint8_t selftest_fail_resp[4] = { 0x04, 0x07, 0xC4, 0x40 };
    1e2c:	685b      	ldr	r3, [r3, #4]
    1e2e:	9300      	str	r3, [sp, #0]

    if (response_size != 4)
    {
        return ATCA_WAKE_FAILED;
    1e30:	20d0      	movs	r0, #208	; 0xd0
    if (response_size != 4)
    1e32:	2904      	cmp	r1, #4
    1e34:	d001      	beq.n	1e3a <hal_check_wake+0x1a>
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    {
        return ATCA_STATUS_SELFTEST_ERROR;
    }
    return ATCA_WAKE_FAILED;
    1e36:	b002      	add	sp, #8
    1e38:	bd10      	pop	{r4, pc}
    if (memcmp(response, expected_response, 4) == 0)
    1e3a:	2204      	movs	r2, #4
    1e3c:	a901      	add	r1, sp, #4
    1e3e:	0020      	movs	r0, r4
    1e40:	4b09      	ldr	r3, [pc, #36]	; (1e68 <hal_check_wake+0x48>)
    1e42:	4798      	blx	r3
    1e44:	0003      	movs	r3, r0
        return ATCA_SUCCESS;
    1e46:	2000      	movs	r0, #0
    if (memcmp(response, expected_response, 4) == 0)
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d0f4      	beq.n	1e36 <hal_check_wake+0x16>
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    1e4c:	2204      	movs	r2, #4
    1e4e:	4669      	mov	r1, sp
    1e50:	0020      	movs	r0, r4
    1e52:	4b05      	ldr	r3, [pc, #20]	; (1e68 <hal_check_wake+0x48>)
    1e54:	4798      	blx	r3
    1e56:	0003      	movs	r3, r0
        return ATCA_STATUS_SELFTEST_ERROR;
    1e58:	20d7      	movs	r0, #215	; 0xd7
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d0eb      	beq.n	1e36 <hal_check_wake+0x16>
    return ATCA_WAKE_FAILED;
    1e5e:	3807      	subs	r0, #7
    1e60:	e7e9      	b.n	1e36 <hal_check_wake+0x16>
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	0000edd4 	.word	0x0000edd4
    1e68:	0000d321 	.word	0x0000d321

00001e6c <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1e6c:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1e6e:	2207      	movs	r2, #7
    1e70:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1e72:	421a      	tst	r2, r3
    1e74:	d1fc      	bne.n	1e70 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    1e76:	4770      	bx	lr

00001e78 <hal_i2c_init>:
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
    1e78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e7a:	46d6      	mov	lr, sl
    1e7c:	464f      	mov	r7, r9
    1e7e:	4646      	mov	r6, r8
    1e80:	b5c0      	push	{r6, r7, lr}
    1e82:	b082      	sub	sp, #8
    1e84:	4680      	mov	r8, r0
    1e86:	000d      	movs	r5, r1
    if (cfg->atcai2c.bus >= MAX_I2C_BUSES)
    1e88:	794c      	ldrb	r4, [r1, #5]
    {
        return ATCA_COMM_FAIL;
    1e8a:	20f0      	movs	r0, #240	; 0xf0
    if (cfg->atcai2c.bus >= MAX_I2C_BUSES)
    1e8c:	2c05      	cmp	r4, #5
    1e8e:	d905      	bls.n	1e9c <hal_i2c_init+0x24>
    }

    ((ATCAHAL_t*)hal)->hal_data = data;

    return ATCA_SUCCESS;
}
    1e90:	b002      	add	sp, #8
    1e92:	bc1c      	pop	{r2, r3, r4}
    1e94:	4690      	mov	r8, r2
    1e96:	4699      	mov	r9, r3
    1e98:	46a2      	mov	sl, r4
    1e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ATCAI2CMaster_t* data = &i2c_hal_data[cfg->atcai2c.bus];
    1e9c:	9401      	str	r4, [sp, #4]
    1e9e:	0063      	lsls	r3, r4, #1
    1ea0:	191f      	adds	r7, r3, r4
    1ea2:	00ff      	lsls	r7, r7, #3
    1ea4:	4a51      	ldr	r2, [pc, #324]	; (1fec <hal_i2c_init+0x174>)
    1ea6:	19d1      	adds	r1, r2, r7
    1ea8:	4689      	mov	r9, r1
    if (data->ref_ct <= 0)
    1eaa:	690a      	ldr	r2, [r1, #16]
    1eac:	2a00      	cmp	r2, #0
    1eae:	dd0b      	ble.n	1ec8 <hal_i2c_init+0x50>
        data->ref_ct++;
    1eb0:	0063      	lsls	r3, r4, #1
    1eb2:	191c      	adds	r4, r3, r4
    1eb4:	00e4      	lsls	r4, r4, #3
    1eb6:	4b4d      	ldr	r3, [pc, #308]	; (1fec <hal_i2c_init+0x174>)
    1eb8:	191c      	adds	r4, r3, r4
    1eba:	3201      	adds	r2, #1
    1ebc:	6122      	str	r2, [r4, #16]
    ((ATCAHAL_t*)hal)->hal_data = data;
    1ebe:	4643      	mov	r3, r8
    1ec0:	464a      	mov	r2, r9
    1ec2:	621a      	str	r2, [r3, #32]
    return ATCA_SUCCESS;
    1ec4:	2000      	movs	r0, #0
    1ec6:	e7e3      	b.n	1e90 <hal_i2c_init+0x18>
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1ec8:	4e49      	ldr	r6, [pc, #292]	; (1ff0 <hal_i2c_init+0x178>)
    1eca:	4b4a      	ldr	r3, [pc, #296]	; (1ff4 <hal_i2c_init+0x17c>)
    1ecc:	6073      	str	r3, [r6, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1ece:	2300      	movs	r3, #0
    1ed0:	60b3      	str	r3, [r6, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1ed2:	7333      	strb	r3, [r6, #12]
	config->run_in_standby   = false;
    1ed4:	7633      	strb	r3, [r6, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1ed6:	2280      	movs	r2, #128	; 0x80
    1ed8:	0392      	lsls	r2, r2, #14
    1eda:	6132      	str	r2, [r6, #16]
	config->buffer_timeout   = 65535;
    1edc:	2201      	movs	r2, #1
    1ede:	4252      	negs	r2, r2
    1ee0:	82f2      	strh	r2, [r6, #22]
	config->unknown_bus_state_timeout = 65535;
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1ee2:	61f3      	str	r3, [r6, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1ee4:	6233      	str	r3, [r6, #32]
	config->scl_low_timeout  = false;
    1ee6:	3225      	adds	r2, #37	; 0x25
    1ee8:	54b3      	strb	r3, [r6, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1eea:	62b3      	str	r3, [r6, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1eec:	3208      	adds	r2, #8
    1eee:	54b3      	strb	r3, [r6, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1ef0:	3201      	adds	r2, #1
    1ef2:	54b3      	strb	r3, [r6, r2]
	config->master_scl_low_extend_timeout  = false;
    1ef4:	3201      	adds	r2, #1
    1ef6:	54b3      	strb	r3, [r6, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1ef8:	33d7      	adds	r3, #215	; 0xd7
    1efa:	8633      	strh	r3, [r6, #48]	; 0x30
        config_i2c_master.unknown_bus_state_timeout = 500;
    1efc:	331e      	adds	r3, #30
    1efe:	33ff      	adds	r3, #255	; 0xff
    1f00:	82b3      	strh	r3, [r6, #20]
        config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    1f02:	21fa      	movs	r1, #250	; 0xfa
    1f04:	0089      	lsls	r1, r1, #2
    1f06:	68a8      	ldr	r0, [r5, #8]
    1f08:	4b3b      	ldr	r3, [pc, #236]	; (1ff8 <hal_i2c_init+0x180>)
    1f0a:	4798      	blx	r3
    1f0c:	6030      	str	r0, [r6, #0]
        switch (cfg->atcai2c.bus)
    1f0e:	796b      	ldrb	r3, [r5, #5]
    1f10:	2b05      	cmp	r3, #5
    1f12:	d868      	bhi.n	1fe6 <hal_i2c_init+0x16e>
    1f14:	009b      	lsls	r3, r3, #2
    1f16:	4a39      	ldr	r2, [pc, #228]	; (1ffc <hal_i2c_init+0x184>)
    1f18:	58d3      	ldr	r3, [r2, r3]
    1f1a:	469f      	mov	pc, r3
            data->i2c_sercom = SERCOM0;
    1f1c:	0063      	lsls	r3, r4, #1
    1f1e:	191b      	adds	r3, r3, r4
    1f20:	00db      	lsls	r3, r3, #3
    1f22:	4937      	ldr	r1, [pc, #220]	; (2000 <STACK_SIZE>)
    1f24:	4a31      	ldr	r2, [pc, #196]	; (1fec <hal_i2c_init+0x174>)
    1f26:	5099      	str	r1, [r3, r2]
            config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    1f28:	4b31      	ldr	r3, [pc, #196]	; (1ff0 <hal_i2c_init+0x178>)
    1f2a:	4a36      	ldr	r2, [pc, #216]	; (2004 <STACK_SIZE+0x4>)
    1f2c:	61da      	str	r2, [r3, #28]
            config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    1f2e:	4a36      	ldr	r2, [pc, #216]	; (2008 <STACK_SIZE+0x8>)
    1f30:	621a      	str	r2, [r3, #32]
        i2c_master_init(&data->i2c_master_instance, data->i2c_sercom, &config_i2c_master);
    1f32:	4b2e      	ldr	r3, [pc, #184]	; (1fec <hal_i2c_init+0x174>)
    1f34:	469a      	mov	sl, r3
    1f36:	3704      	adds	r7, #4
    1f38:	003e      	movs	r6, r7
    1f3a:	4456      	add	r6, sl
    1f3c:	0067      	lsls	r7, r4, #1
    1f3e:	193b      	adds	r3, r7, r4
    1f40:	00db      	lsls	r3, r3, #3
    1f42:	4652      	mov	r2, sl
    1f44:	5899      	ldr	r1, [r3, r2]
    1f46:	4a2a      	ldr	r2, [pc, #168]	; (1ff0 <hal_i2c_init+0x178>)
    1f48:	0030      	movs	r0, r6
    1f4a:	4b30      	ldr	r3, [pc, #192]	; (200c <STACK_SIZE+0xc>)
    1f4c:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1f4e:	193b      	adds	r3, r7, r4
    1f50:	00db      	lsls	r3, r3, #3
    1f52:	4453      	add	r3, sl
    1f54:	685f      	ldr	r7, [r3, #4]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    1f56:	0030      	movs	r0, r6
    1f58:	4b2d      	ldr	r3, [pc, #180]	; (2010 <STACK_SIZE+0x10>)
    1f5a:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1f5c:	683b      	ldr	r3, [r7, #0]
    1f5e:	2202      	movs	r2, #2
    1f60:	4313      	orrs	r3, r2
    1f62:	603b      	str	r3, [r7, #0]
	uint32_t timeout_counter = 0;
    1f64:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1f66:	2110      	movs	r1, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1f68:	9801      	ldr	r0, [sp, #4]
    1f6a:	0042      	lsls	r2, r0, #1
    1f6c:	1816      	adds	r6, r2, r0
    1f6e:	00f6      	lsls	r6, r6, #3
    1f70:	4a1e      	ldr	r2, [pc, #120]	; (1fec <hal_i2c_init+0x174>)
    1f72:	4694      	mov	ip, r2
    1f74:	4466      	add	r6, ip
    1f76:	360a      	adds	r6, #10
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1f78:	8b7a      	ldrh	r2, [r7, #26]
    1f7a:	420a      	tst	r2, r1
    1f7c:	d105      	bne.n	1f8a <hal_i2c_init+0x112>
		timeout_counter++;
    1f7e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1f80:	8832      	ldrh	r2, [r6, #0]
    1f82:	4293      	cmp	r3, r2
    1f84:	d3f8      	bcc.n	1f78 <hal_i2c_init+0x100>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1f86:	2310      	movs	r3, #16
    1f88:	837b      	strh	r3, [r7, #26]
        data->bus_index = cfg->atcai2c.bus;
    1f8a:	4918      	ldr	r1, [pc, #96]	; (1fec <hal_i2c_init+0x174>)
    1f8c:	0063      	lsls	r3, r4, #1
    1f8e:	191a      	adds	r2, r3, r4
    1f90:	00d2      	lsls	r2, r2, #3
    1f92:	188a      	adds	r2, r1, r2
    1f94:	7968      	ldrb	r0, [r5, #5]
    1f96:	6150      	str	r0, [r2, #20]
        data->ref_ct = 1;
    1f98:	0013      	movs	r3, r2
    1f9a:	2201      	movs	r2, #1
    1f9c:	611a      	str	r2, [r3, #16]
    1f9e:	e78e      	b.n	1ebe <hal_i2c_init+0x46>
            data->i2c_sercom = SERCOM1;
    1fa0:	0063      	lsls	r3, r4, #1
    1fa2:	191b      	adds	r3, r3, r4
    1fa4:	00db      	lsls	r3, r3, #3
    1fa6:	491b      	ldr	r1, [pc, #108]	; (2014 <STACK_SIZE+0x14>)
    1fa8:	4a10      	ldr	r2, [pc, #64]	; (1fec <hal_i2c_init+0x174>)
    1faa:	5099      	str	r1, [r3, r2]
            break;
    1fac:	e7c1      	b.n	1f32 <hal_i2c_init+0xba>
            data->i2c_sercom = SERCOM2;
    1fae:	0063      	lsls	r3, r4, #1
    1fb0:	191b      	adds	r3, r3, r4
    1fb2:	00db      	lsls	r3, r3, #3
    1fb4:	4918      	ldr	r1, [pc, #96]	; (2018 <STACK_SIZE+0x18>)
    1fb6:	4a0d      	ldr	r2, [pc, #52]	; (1fec <hal_i2c_init+0x174>)
    1fb8:	5099      	str	r1, [r3, r2]
            break;
    1fba:	e7ba      	b.n	1f32 <hal_i2c_init+0xba>
            data->i2c_sercom = SERCOM3;
    1fbc:	0063      	lsls	r3, r4, #1
    1fbe:	191b      	adds	r3, r3, r4
    1fc0:	00db      	lsls	r3, r3, #3
    1fc2:	4916      	ldr	r1, [pc, #88]	; (201c <STACK_SIZE+0x1c>)
    1fc4:	4a09      	ldr	r2, [pc, #36]	; (1fec <hal_i2c_init+0x174>)
    1fc6:	5099      	str	r1, [r3, r2]
            break;
    1fc8:	e7b3      	b.n	1f32 <hal_i2c_init+0xba>
            data->i2c_sercom = SERCOM4;
    1fca:	0063      	lsls	r3, r4, #1
    1fcc:	191b      	adds	r3, r3, r4
    1fce:	00db      	lsls	r3, r3, #3
    1fd0:	4913      	ldr	r1, [pc, #76]	; (2020 <STACK_SIZE+0x20>)
    1fd2:	4a06      	ldr	r2, [pc, #24]	; (1fec <hal_i2c_init+0x174>)
    1fd4:	5099      	str	r1, [r3, r2]
            break;
    1fd6:	e7ac      	b.n	1f32 <hal_i2c_init+0xba>
            data->i2c_sercom = SERCOM5;
    1fd8:	0063      	lsls	r3, r4, #1
    1fda:	191b      	adds	r3, r3, r4
    1fdc:	00db      	lsls	r3, r3, #3
    1fde:	4911      	ldr	r1, [pc, #68]	; (2024 <STACK_SIZE+0x24>)
    1fe0:	4a02      	ldr	r2, [pc, #8]	; (1fec <hal_i2c_init+0x174>)
    1fe2:	5099      	str	r1, [r3, r2]
            break;
    1fe4:	e7a5      	b.n	1f32 <hal_i2c_init+0xba>
            return ATCA_COMM_FAIL;
    1fe6:	20f0      	movs	r0, #240	; 0xf0
    1fe8:	e752      	b.n	1e90 <hal_i2c_init+0x18>
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	200003b4 	.word	0x200003b4
    1ff0:	20000380 	.word	0x20000380
    1ff4:	00000d48 	.word	0x00000d48
    1ff8:	0000b65d 	.word	0x0000b65d
    1ffc:	0000eddc 	.word	0x0000eddc
    2000:	42000800 	.word	0x42000800
    2004:	00080002 	.word	0x00080002
    2008:	00090002 	.word	0x00090002
    200c:	000027b9 	.word	0x000027b9
    2010:	00001e6d 	.word	0x00001e6d
    2014:	42000c00 	.word	0x42000c00
    2018:	42001000 	.word	0x42001000
    201c:	42001400 	.word	0x42001400
    2020:	42001800 	.word	0x42001800
    2024:	42001c00 	.word	0x42001c00

00002028 <hal_i2c_post_init>:
 * \return ATCA_SUCCESS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
    return ATCA_SUCCESS;
}
    2028:	2000      	movs	r0, #0
    202a:	4770      	bx	lr

0000202c <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    202c:	b530      	push	{r4, r5, lr}
    202e:	b085      	sub	sp, #20
    2030:	000d      	movs	r5, r1
    2032:	0014      	movs	r4, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    2034:	4b0f      	ldr	r3, [pc, #60]	; (2074 <hal_i2c_send+0x48>)
    2036:	4798      	blx	r3

    struct i2c_master_packet packet = {
    2038:	a901      	add	r1, sp, #4
    203a:	7903      	ldrb	r3, [r0, #4]
    203c:	085b      	lsrs	r3, r3, #1
    203e:	800b      	strh	r3, [r1, #0]
    2040:	604d      	str	r5, [r1, #4]
    2042:	2300      	movs	r3, #0
    2044:	720b      	strb	r3, [r1, #8]
    2046:	724b      	strb	r3, [r1, #9]
    2048:	728b      	strb	r3, [r1, #10]

    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format
    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
    204a:	3303      	adds	r3, #3
    204c:	702b      	strb	r3, [r5, #0]
    txlength++;         // account for word address value byte.
    204e:	3401      	adds	r4, #1
    packet.data_length = txlength;
    2050:	804c      	strh	r4, [r1, #2]

    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    2052:	7943      	ldrb	r3, [r0, #5]
    2054:	0058      	lsls	r0, r3, #1
    2056:	18c0      	adds	r0, r0, r3
    2058:	00c0      	lsls	r0, r0, #3
    205a:	3004      	adds	r0, #4
    205c:	4b06      	ldr	r3, [pc, #24]	; (2078 <hal_i2c_send+0x4c>)
    205e:	1818      	adds	r0, r3, r0
    2060:	4b06      	ldr	r3, [pc, #24]	; (207c <hal_i2c_send+0x50>)
    2062:	4798      	blx	r3
    2064:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    2066:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    2068:	1e5a      	subs	r2, r3, #1
    206a:	4193      	sbcs	r3, r2
    206c:	425b      	negs	r3, r3
    206e:	4018      	ands	r0, r3
}
    2070:	b005      	add	sp, #20
    2072:	bd30      	pop	{r4, r5, pc}
    2074:	0000127d 	.word	0x0000127d
    2078:	200003b4 	.word	0x200003b4
    207c:	00002dd1 	.word	0x00002dd1

00002080 <hal_i2c_receive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    2080:	b5f0      	push	{r4, r5, r6, r7, lr}
    2082:	46d6      	mov	lr, sl
    2084:	464f      	mov	r7, r9
    2086:	4646      	mov	r6, r8
    2088:	b5c0      	push	{r6, r7, lr}
    208a:	b084      	sub	sp, #16
    208c:	4689      	mov	r9, r1
    208e:	4690      	mov	r8, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    2090:	4b2d      	ldr	r3, [pc, #180]	; (2148 <hal_i2c_receive+0xc8>)
    2092:	4798      	blx	r3
    2094:	0005      	movs	r5, r0
    int retries = cfg->rx_retries;
    2096:	6a84      	ldr	r4, [r0, #40]	; 0x28
    int status = !ATCA_SUCCESS;
    uint16_t rxdata_max_size = *rxlength;
    2098:	4643      	mov	r3, r8
    209a:	881b      	ldrh	r3, [r3, #0]
    209c:	469a      	mov	sl, r3

    struct i2c_master_packet packet = {
    209e:	ab01      	add	r3, sp, #4
    20a0:	7902      	ldrb	r2, [r0, #4]
    20a2:	0852      	lsrs	r2, r2, #1
    20a4:	801a      	strh	r2, [r3, #0]
    20a6:	2201      	movs	r2, #1
    20a8:	805a      	strh	r2, [r3, #2]
    20aa:	464a      	mov	r2, r9
    20ac:	9202      	str	r2, [sp, #8]
    20ae:	2200      	movs	r2, #0
    20b0:	721a      	strb	r2, [r3, #8]
    20b2:	725a      	strb	r2, [r3, #9]
    20b4:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    *rxlength = 0;
    20b6:	4643      	mov	r3, r8
    20b8:	801a      	strh	r2, [r3, #0]
    if (rxdata_max_size < 1)
    {
        return ATCA_SMALL_BUFFER;
    20ba:	20ed      	movs	r0, #237	; 0xed
    if (rxdata_max_size < 1)
    20bc:	4653      	mov	r3, sl
    20be:	2b00      	cmp	r3, #0
    20c0:	d105      	bne.n	20ce <hal_i2c_receive+0x4e>
    }

    *rxlength = rxdata[0];

    return ATCA_SUCCESS;
}
    20c2:	b004      	add	sp, #16
    20c4:	bc1c      	pop	{r2, r3, r4}
    20c6:	4690      	mov	r8, r2
    20c8:	4699      	mov	r9, r3
    20ca:	46a2      	mov	sl, r4
    20cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rxdata_max_size < 1)
    20ce:	2301      	movs	r3, #1
        if (i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    20d0:	4f1e      	ldr	r7, [pc, #120]	; (214c <hal_i2c_receive+0xcc>)
    20d2:	4e1f      	ldr	r6, [pc, #124]	; (2150 <hal_i2c_receive+0xd0>)
    20d4:	e00d      	b.n	20f2 <hal_i2c_receive+0x72>
    20d6:	796b      	ldrb	r3, [r5, #5]
    20d8:	0058      	lsls	r0, r3, #1
    20da:	18c0      	adds	r0, r0, r3
    20dc:	00c0      	lsls	r0, r0, #3
    20de:	3004      	adds	r0, #4
    20e0:	1838      	adds	r0, r7, r0
    20e2:	a901      	add	r1, sp, #4
    20e4:	47b0      	blx	r6
            status = ATCA_COMM_FAIL;
    20e6:	23f0      	movs	r3, #240	; 0xf0
            status = ATCA_SUCCESS;
    20e8:	1e42      	subs	r2, r0, #1
    20ea:	4190      	sbcs	r0, r2
    20ec:	4240      	negs	r0, r0
    20ee:	4003      	ands	r3, r0
    20f0:	3c01      	subs	r4, #1
    while (retries-- > 0 && status != ATCA_SUCCESS)
    20f2:	2c00      	cmp	r4, #0
    20f4:	dd1d      	ble.n	2132 <hal_i2c_receive+0xb2>
    20f6:	2b00      	cmp	r3, #0
    20f8:	d1ed      	bne.n	20d6 <hal_i2c_receive+0x56>
    if (rxdata[0] < ATCA_RSP_SIZE_MIN)
    20fa:	464b      	mov	r3, r9
    20fc:	781b      	ldrb	r3, [r3, #0]
        return ATCA_INVALID_SIZE;
    20fe:	20e4      	movs	r0, #228	; 0xe4
    if (rxdata[0] < ATCA_RSP_SIZE_MIN)
    2100:	2b03      	cmp	r3, #3
    2102:	d9de      	bls.n	20c2 <hal_i2c_receive+0x42>
    if (rxdata[0] > rxdata_max_size)
    2104:	b29b      	uxth	r3, r3
        return ATCA_SMALL_BUFFER;
    2106:	3009      	adds	r0, #9
    if (rxdata[0] > rxdata_max_size)
    2108:	459a      	cmp	sl, r3
    210a:	d3da      	bcc.n	20c2 <hal_i2c_receive+0x42>
    packet.data_length = rxdata[0] - 1;
    210c:	a901      	add	r1, sp, #4
    210e:	3b01      	subs	r3, #1
    2110:	804b      	strh	r3, [r1, #2]
    packet.data = &rxdata[1];
    2112:	464b      	mov	r3, r9
    2114:	3301      	adds	r3, #1
    2116:	604b      	str	r3, [r1, #4]
    if (i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    2118:	796b      	ldrb	r3, [r5, #5]
    211a:	0058      	lsls	r0, r3, #1
    211c:	18c0      	adds	r0, r0, r3
    211e:	00c0      	lsls	r0, r0, #3
    2120:	3004      	adds	r0, #4
    2122:	4b0a      	ldr	r3, [pc, #40]	; (214c <hal_i2c_receive+0xcc>)
    2124:	1818      	adds	r0, r3, r0
    2126:	4b0a      	ldr	r3, [pc, #40]	; (2150 <hal_i2c_receive+0xd0>)
    2128:	4798      	blx	r3
    212a:	2800      	cmp	r0, #0
    212c:	d005      	beq.n	213a <hal_i2c_receive+0xba>
        return status;
    212e:	20f0      	movs	r0, #240	; 0xf0
    2130:	e7c7      	b.n	20c2 <hal_i2c_receive+0x42>
    if (status != ATCA_SUCCESS)
    2132:	2b00      	cmp	r3, #0
    2134:	d0e1      	beq.n	20fa <hal_i2c_receive+0x7a>
        return status;
    2136:	b2d8      	uxtb	r0, r3
    2138:	e7c3      	b.n	20c2 <hal_i2c_receive+0x42>
    *rxlength = rxdata[0];
    213a:	464b      	mov	r3, r9
    213c:	781b      	ldrb	r3, [r3, #0]
    213e:	4642      	mov	r2, r8
    2140:	8013      	strh	r3, [r2, #0]
    return ATCA_SUCCESS;
    2142:	2000      	movs	r0, #0
    2144:	e7bd      	b.n	20c2 <hal_i2c_receive+0x42>
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	0000127d 	.word	0x0000127d
    214c:	200003b4 	.word	0x200003b4
    2150:	00002dbd 	.word	0x00002dbd

00002154 <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
    2154:	b5f0      	push	{r4, r5, r6, r7, lr}
    2156:	46de      	mov	lr, fp
    2158:	4657      	mov	r7, sl
    215a:	464e      	mov	r6, r9
    215c:	b5c0      	push	{r6, r7, lr}
    215e:	b082      	sub	sp, #8
    2160:	9101      	str	r1, [sp, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    2162:	4b26      	ldr	r3, [pc, #152]	; (21fc <change_i2c_speed+0xa8>)
    2164:	4798      	blx	r3
    ATCAI2CMaster_t* data = &i2c_hal_data[cfg->atcai2c.bus];
    2166:	7946      	ldrb	r6, [r0, #5]

    i2c_master_disable(&data->i2c_master_instance);
    2168:	4b25      	ldr	r3, [pc, #148]	; (2200 <change_i2c_speed+0xac>)
    216a:	4699      	mov	r9, r3
    216c:	0075      	lsls	r5, r6, #1
    216e:	19ac      	adds	r4, r5, r6
    2170:	00e4      	lsls	r4, r4, #3
    2172:	3404      	adds	r4, #4
    2174:	0023      	movs	r3, r4
    2176:	444b      	add	r3, r9
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2178:	19af      	adds	r7, r5, r6
    217a:	00ff      	lsls	r7, r7, #3
    217c:	444f      	add	r7, r9
    217e:	687c      	ldr	r4, [r7, #4]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    2180:	9300      	str	r3, [sp, #0]
    2182:	0018      	movs	r0, r3
    2184:	4a1f      	ldr	r2, [pc, #124]	; (2204 <change_i2c_speed+0xb0>)
    2186:	4693      	mov	fp, r2
    2188:	4790      	blx	r2

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    218a:	2383      	movs	r3, #131	; 0x83
    218c:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    218e:	7623      	strb	r3, [r4, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    2190:	6823      	ldr	r3, [r4, #0]
    2192:	2202      	movs	r2, #2
    2194:	4692      	mov	sl, r2
    2196:	4393      	bics	r3, r2
    2198:	6023      	str	r3, [r4, #0]
    config_i2c_master.buffer_timeout = 10000;
    219a:	4c1b      	ldr	r4, [pc, #108]	; (2208 <change_i2c_speed+0xb4>)
    219c:	4b1b      	ldr	r3, [pc, #108]	; (220c <change_i2c_speed+0xb8>)
    219e:	82e3      	strh	r3, [r4, #22]
    config_i2c_master.baud_rate = speed / 1000;
    21a0:	21fa      	movs	r1, #250	; 0xfa
    21a2:	0089      	lsls	r1, r1, #2
    21a4:	9801      	ldr	r0, [sp, #4]
    21a6:	4b1a      	ldr	r3, [pc, #104]	; (2210 <change_i2c_speed+0xbc>)
    21a8:	4798      	blx	r3
    21aa:	6020      	str	r0, [r4, #0]
    i2c_master_init(&data->i2c_master_instance, data->i2c_sercom, &config_i2c_master);
    21ac:	19ad      	adds	r5, r5, r6
    21ae:	00ed      	lsls	r5, r5, #3
    21b0:	464a      	mov	r2, r9
    21b2:	58a9      	ldr	r1, [r5, r2]
    21b4:	0022      	movs	r2, r4
    21b6:	9c00      	ldr	r4, [sp, #0]
    21b8:	0020      	movs	r0, r4
    21ba:	4b16      	ldr	r3, [pc, #88]	; (2214 <change_i2c_speed+0xc0>)
    21bc:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    21be:	687d      	ldr	r5, [r7, #4]
	_i2c_master_wait_for_sync(module);
    21c0:	0020      	movs	r0, r4
    21c2:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    21c4:	682b      	ldr	r3, [r5, #0]
    21c6:	4652      	mov	r2, sl
    21c8:	4313      	orrs	r3, r2
    21ca:	602b      	str	r3, [r5, #0]
	uint32_t timeout_counter = 0;
    21cc:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    21ce:	2110      	movs	r1, #16
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    21d0:	0072      	lsls	r2, r6, #1
    21d2:	1996      	adds	r6, r2, r6
    21d4:	00f6      	lsls	r6, r6, #3
    21d6:	4a0a      	ldr	r2, [pc, #40]	; (2200 <change_i2c_speed+0xac>)
    21d8:	4694      	mov	ip, r2
    21da:	4466      	add	r6, ip
    21dc:	360a      	adds	r6, #10
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    21de:	8b6a      	ldrh	r2, [r5, #26]
    21e0:	420a      	tst	r2, r1
    21e2:	d105      	bne.n	21f0 <change_i2c_speed+0x9c>
		timeout_counter++;
    21e4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    21e6:	8832      	ldrh	r2, [r6, #0]
    21e8:	4293      	cmp	r3, r2
    21ea:	d3f8      	bcc.n	21de <change_i2c_speed+0x8a>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    21ec:	2310      	movs	r3, #16
    21ee:	836b      	strh	r3, [r5, #26]
    i2c_master_enable(&data->i2c_master_instance);
}
    21f0:	b002      	add	sp, #8
    21f2:	bc1c      	pop	{r2, r3, r4}
    21f4:	4691      	mov	r9, r2
    21f6:	469a      	mov	sl, r3
    21f8:	46a3      	mov	fp, r4
    21fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21fc:	0000127d 	.word	0x0000127d
    2200:	200003b4 	.word	0x200003b4
    2204:	00001e6d 	.word	0x00001e6d
    2208:	20000380 	.word	0x20000380
    220c:	00002710 	.word	0x00002710
    2210:	0000b65d 	.word	0x0000b65d
    2214:	000027b9 	.word	0x000027b9

00002218 <hal_i2c_wake>:
 * \param[in] iface  interface to logical device to wakeup
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    2218:	b5f0      	push	{r4, r5, r6, r7, lr}
    221a:	46ce      	mov	lr, r9
    221c:	4647      	mov	r7, r8
    221e:	b580      	push	{r7, lr}
    2220:	b087      	sub	sp, #28
    2222:	0004      	movs	r4, r0
    2224:	9001      	str	r0, [sp, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    2226:	4b2e      	ldr	r3, [pc, #184]	; (22e0 <hal_i2c_wake+0xc8>)
    2228:	4798      	blx	r3
    222a:	0006      	movs	r6, r0
    int retries = cfg->rx_retries;
    222c:	6a87      	ldr	r7, [r0, #40]	; 0x28
    uint32_t bdrt = cfg->atcai2c.baud;
    222e:	6883      	ldr	r3, [r0, #8]
    2230:	4699      	mov	r9, r3
    int status = !STATUS_OK;
    uint8_t data[4];

    if (bdrt != 100000)    // if not already at 100KHz, change it
    2232:	4b2c      	ldr	r3, [pc, #176]	; (22e4 <hal_i2c_wake+0xcc>)
    2234:	4599      	cmp	r9, r3
    2236:	d003      	beq.n	2240 <hal_i2c_wake+0x28>
    {
        change_i2c_speed(iface, 100000);
    2238:	0019      	movs	r1, r3
    223a:	0020      	movs	r0, r4
    223c:	4b2a      	ldr	r3, [pc, #168]	; (22e8 <hal_i2c_wake+0xd0>)
    223e:	4798      	blx	r3
    }

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
    2240:	2200      	movs	r2, #0
    2242:	2300      	movs	r3, #0
    2244:	a902      	add	r1, sp, #8
    2246:	800a      	strh	r2, [r1, #0]
    2248:	804a      	strh	r2, [r1, #2]
    224a:	ac05      	add	r4, sp, #20
    224c:	9403      	str	r4, [sp, #12]
    224e:	720b      	strb	r3, [r1, #8]
    2250:	724b      	strb	r3, [r1, #9]
    2252:	728b      	strb	r3, [r1, #10]
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    // part will NACK, so don't check for status
    i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    2254:	7973      	ldrb	r3, [r6, #5]
    2256:	0058      	lsls	r0, r3, #1
    2258:	18c0      	adds	r0, r0, r3
    225a:	00c0      	lsls	r0, r0, #3
    225c:	3004      	adds	r0, #4
    225e:	4b23      	ldr	r3, [pc, #140]	; (22ec <hal_i2c_wake+0xd4>)
    2260:	1818      	adds	r0, r3, r0
    2262:	4b23      	ldr	r3, [pc, #140]	; (22f0 <hal_i2c_wake+0xd8>)
    2264:	4798      	blx	r3

    // wait tWHI + tWLO which is configured based on device type and configuration structure
    atca_delay_us(cfg->wake_delay);
    2266:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
    2268:	4b22      	ldr	r3, [pc, #136]	; (22f4 <hal_i2c_wake+0xdc>)
    226a:	4798      	blx	r3

    packet.address = cfg->atcai2c.slave_address >> 1;
    226c:	7933      	ldrb	r3, [r6, #4]
    226e:	085b      	lsrs	r3, r3, #1
    2270:	aa02      	add	r2, sp, #8
    2272:	8013      	strh	r3, [r2, #0]
    packet.data_length = 4;
    2274:	2304      	movs	r3, #4
    2276:	8053      	strh	r3, [r2, #2]
    packet.data = data;
    2278:	9403      	str	r4, [sp, #12]

    while (retries-- > 0 && status != STATUS_OK)
    227a:	1e7c      	subs	r4, r7, #1
    227c:	2f00      	cmp	r7, #0
    227e:	dd29      	ble.n	22d4 <hal_i2c_wake+0xbc>
    {
        status = i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    2280:	4b1a      	ldr	r3, [pc, #104]	; (22ec <hal_i2c_wake+0xd4>)
    2282:	4698      	mov	r8, r3
    2284:	4f1c      	ldr	r7, [pc, #112]	; (22f8 <hal_i2c_wake+0xe0>)
    2286:	7973      	ldrb	r3, [r6, #5]
    2288:	0058      	lsls	r0, r3, #1
    228a:	18c0      	adds	r0, r0, r3
    228c:	00c0      	lsls	r0, r0, #3
    228e:	3004      	adds	r0, #4
    2290:	4440      	add	r0, r8
    2292:	a902      	add	r1, sp, #8
    2294:	47b8      	blx	r7
    2296:	0005      	movs	r5, r0
    while (retries-- > 0 && status != STATUS_OK)
    2298:	3c01      	subs	r4, #1
    229a:	d310      	bcc.n	22be <hal_i2c_wake+0xa6>
    229c:	2800      	cmp	r0, #0
    229e:	d1f2      	bne.n	2286 <hal_i2c_wake+0x6e>
    }

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
    22a0:	4b10      	ldr	r3, [pc, #64]	; (22e4 <hal_i2c_wake+0xcc>)
    22a2:	4599      	cmp	r9, r3
    22a4:	d011      	beq.n	22ca <hal_i2c_wake+0xb2>
    {
        change_i2c_speed(iface, bdrt);
    22a6:	4649      	mov	r1, r9
    22a8:	9801      	ldr	r0, [sp, #4]
    22aa:	4b0f      	ldr	r3, [pc, #60]	; (22e8 <hal_i2c_wake+0xd0>)
    22ac:	4798      	blx	r3
    }

    if (status != STATUS_OK)
    {
        return ATCA_COMM_FAIL;
    22ae:	20f0      	movs	r0, #240	; 0xf0
    if (status != STATUS_OK)
    22b0:	2d00      	cmp	r5, #0
    22b2:	d00a      	beq.n	22ca <hal_i2c_wake+0xb2>
    }

    return hal_check_wake(data, 4);
}
    22b4:	b007      	add	sp, #28
    22b6:	bc0c      	pop	{r2, r3}
    22b8:	4690      	mov	r8, r2
    22ba:	4699      	mov	r9, r3
    22bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (bdrt != 100000)
    22be:	4b09      	ldr	r3, [pc, #36]	; (22e4 <hal_i2c_wake+0xcc>)
    22c0:	4599      	cmp	r9, r3
    22c2:	d0f4      	beq.n	22ae <hal_i2c_wake+0x96>
    22c4:	e7ef      	b.n	22a6 <hal_i2c_wake+0x8e>
    int status = !STATUS_OK;
    22c6:	2501      	movs	r5, #1
    22c8:	e7ed      	b.n	22a6 <hal_i2c_wake+0x8e>
    return hal_check_wake(data, 4);
    22ca:	2104      	movs	r1, #4
    22cc:	a805      	add	r0, sp, #20
    22ce:	4b0b      	ldr	r3, [pc, #44]	; (22fc <hal_i2c_wake+0xe4>)
    22d0:	4798      	blx	r3
    22d2:	e7ef      	b.n	22b4 <hal_i2c_wake+0x9c>
    if (bdrt != 100000)
    22d4:	4b03      	ldr	r3, [pc, #12]	; (22e4 <hal_i2c_wake+0xcc>)
    22d6:	4599      	cmp	r9, r3
    22d8:	d1f5      	bne.n	22c6 <hal_i2c_wake+0xae>
        return ATCA_COMM_FAIL;
    22da:	20f0      	movs	r0, #240	; 0xf0
    22dc:	e7ea      	b.n	22b4 <hal_i2c_wake+0x9c>
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	0000127d 	.word	0x0000127d
    22e4:	000186a0 	.word	0x000186a0
    22e8:	00002155 	.word	0x00002155
    22ec:	200003b4 	.word	0x200003b4
    22f0:	00002dd1 	.word	0x00002dd1
    22f4:	000023cd 	.word	0x000023cd
    22f8:	00002dbd 	.word	0x00002dbd
    22fc:	00001e21 	.word	0x00001e21

00002300 <hal_i2c_idle>:
 * \param[in] iface  interface to logical device to idle
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    2300:	b500      	push	{lr}
    2302:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    2304:	4b10      	ldr	r3, [pc, #64]	; (2348 <hal_i2c_idle+0x48>)
    2306:	4798      	blx	r3
    uint8_t data[4];

    struct i2c_master_packet packet = {
    2308:	7903      	ldrb	r3, [r0, #4]
    230a:	085b      	lsrs	r3, r3, #1
    230c:	466a      	mov	r2, sp
    230e:	8013      	strh	r3, [r2, #0]
    2310:	2301      	movs	r3, #1
    2312:	8053      	strh	r3, [r2, #2]
    2314:	aa03      	add	r2, sp, #12
    2316:	9201      	str	r2, [sp, #4]
    2318:	2300      	movs	r3, #0
    231a:	4669      	mov	r1, sp
    231c:	720b      	strb	r3, [r1, #8]
    231e:	724b      	strb	r3, [r1, #9]
    2320:	728b      	strb	r3, [r1, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
    2322:	3302      	adds	r3, #2
    2324:	7013      	strb	r3, [r2, #0]
    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    2326:	7943      	ldrb	r3, [r0, #5]
    2328:	0058      	lsls	r0, r3, #1
    232a:	18c0      	adds	r0, r0, r3
    232c:	00c0      	lsls	r0, r0, #3
    232e:	3004      	adds	r0, #4
    2330:	4b06      	ldr	r3, [pc, #24]	; (234c <hal_i2c_idle+0x4c>)
    2332:	1818      	adds	r0, r3, r0
    2334:	4b06      	ldr	r3, [pc, #24]	; (2350 <hal_i2c_idle+0x50>)
    2336:	4798      	blx	r3
    2338:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    233a:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    233c:	1e5a      	subs	r2, r3, #1
    233e:	4193      	sbcs	r3, r2
    2340:	425b      	negs	r3, r3
    2342:	4018      	ands	r0, r3

}
    2344:	b005      	add	sp, #20
    2346:	bd00      	pop	{pc}
    2348:	0000127d 	.word	0x0000127d
    234c:	200003b4 	.word	0x200003b4
    2350:	00002dd1 	.word	0x00002dd1

00002354 <hal_i2c_sleep>:
 * \param[in] iface  interface to logical device to sleep
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    2354:	b500      	push	{lr}
    2356:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    2358:	4b10      	ldr	r3, [pc, #64]	; (239c <hal_i2c_sleep+0x48>)
    235a:	4798      	blx	r3
    uint8_t data[4];

    struct i2c_master_packet packet = {
    235c:	7903      	ldrb	r3, [r0, #4]
    235e:	085b      	lsrs	r3, r3, #1
    2360:	466a      	mov	r2, sp
    2362:	8013      	strh	r3, [r2, #0]
    2364:	2301      	movs	r3, #1
    2366:	8053      	strh	r3, [r2, #2]
    2368:	aa03      	add	r2, sp, #12
    236a:	9201      	str	r2, [sp, #4]
    236c:	2300      	movs	r3, #0
    236e:	4669      	mov	r1, sp
    2370:	720b      	strb	r3, [r1, #8]
    2372:	724b      	strb	r3, [r1, #9]
    2374:	728b      	strb	r3, [r1, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
    2376:	2301      	movs	r3, #1
    2378:	7013      	strb	r3, [r2, #0]
    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    237a:	7943      	ldrb	r3, [r0, #5]
    237c:	0058      	lsls	r0, r3, #1
    237e:	18c0      	adds	r0, r0, r3
    2380:	00c0      	lsls	r0, r0, #3
    2382:	3004      	adds	r0, #4
    2384:	4b06      	ldr	r3, [pc, #24]	; (23a0 <hal_i2c_sleep+0x4c>)
    2386:	1818      	adds	r0, r3, r0
    2388:	4b06      	ldr	r3, [pc, #24]	; (23a4 <hal_i2c_sleep+0x50>)
    238a:	4798      	blx	r3
    238c:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    238e:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    2390:	1e5a      	subs	r2, r3, #1
    2392:	4193      	sbcs	r3, r2
    2394:	425b      	negs	r3, r3
    2396:	4018      	ands	r0, r3
}
    2398:	b005      	add	sp, #20
    239a:	bd00      	pop	{pc}
    239c:	0000127d 	.word	0x0000127d
    23a0:	200003b4 	.word	0x200003b4
    23a4:	00002dd1 	.word	0x00002dd1

000023a8 <hal_i2c_release>:
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 * return ATCA_SUCCESS
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
    23a8:	b510      	push	{r4, lr}
    23aa:	1e04      	subs	r4, r0, #0
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0)
    23ac:	d004      	beq.n	23b8 <hal_i2c_release+0x10>
    23ae:	6903      	ldr	r3, [r0, #16]
    23b0:	3b01      	subs	r3, #1
    23b2:	6103      	str	r3, [r0, #16]
    23b4:	2b00      	cmp	r3, #0
    23b6:	dd01      	ble.n	23bc <hal_i2c_release+0x14>
        i2c_master_reset(&(hal->i2c_master_instance));
        hal->ref_ct = 0;
    }

    return ATCA_SUCCESS;
}
    23b8:	2000      	movs	r0, #0
    23ba:	bd10      	pop	{r4, pc}
        i2c_master_reset(&(hal->i2c_master_instance));
    23bc:	3004      	adds	r0, #4
    23be:	4b02      	ldr	r3, [pc, #8]	; (23c8 <hal_i2c_release+0x20>)
    23c0:	4798      	blx	r3
        hal->ref_ct = 0;
    23c2:	2300      	movs	r3, #0
    23c4:	6123      	str	r3, [r4, #16]
    23c6:	e7f7      	b.n	23b8 <hal_i2c_release+0x10>
    23c8:	00002a81 	.word	0x00002a81

000023cc <atca_delay_us>:
/** \brief This function delays for a number of microseconds.
 *
 * \param[in] delay number of 0.001 milliseconds to delay
 */
void atca_delay_us(uint32_t delay)
{
    23cc:	b510      	push	{r4, lr}
    // use ASF supplied delay
    delay_us(delay);
    23ce:	2800      	cmp	r0, #0
    23d0:	d103      	bne.n	23da <atca_delay_us+0xe>
    23d2:	2001      	movs	r0, #1
    23d4:	4b02      	ldr	r3, [pc, #8]	; (23e0 <atca_delay_us+0x14>)
    23d6:	4798      	blx	r3
}
    23d8:	bd10      	pop	{r4, pc}
    delay_us(delay);
    23da:	4b01      	ldr	r3, [pc, #4]	; (23e0 <atca_delay_us+0x14>)
    23dc:	4798      	blx	r3
    23de:	e7fb      	b.n	23d8 <atca_delay_us+0xc>
    23e0:	0000380d 	.word	0x0000380d

000023e4 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    23e4:	b510      	push	{r4, lr}
    // use ASF supplied delay
    delay_ms(delay);
    23e6:	2800      	cmp	r0, #0
    23e8:	d103      	bne.n	23f2 <atca_delay_ms+0xe>
    23ea:	2001      	movs	r0, #1
    23ec:	4b02      	ldr	r3, [pc, #8]	; (23f8 <atca_delay_ms+0x14>)
    23ee:	4798      	blx	r3
}
    23f0:	bd10      	pop	{r4, pc}
    delay_ms(delay);
    23f2:	4b02      	ldr	r3, [pc, #8]	; (23fc <atca_delay_ms+0x18>)
    23f4:	4798      	blx	r3
    23f6:	e7fb      	b.n	23f0 <atca_delay_ms+0xc>
    23f8:	0000380d 	.word	0x0000380d
    23fc:	00003839 	.word	0x00003839

00002400 <atca_jwt_check_payload_start>:
void atca_jwt_check_payload_start(
    atca_jwt_t* jwt     /**< [in] JWT Context to use */
    )
{
    /* Rationality checks: a) must be valid, b) buf must be valid, c) must not be at the start, d) must have room */
    if (jwt && jwt->buf && jwt->cur && (jwt->cur < jwt->buflen - 1))
    2400:	2800      	cmp	r0, #0
    2402:	d014      	beq.n	242e <atca_jwt_check_payload_start+0x2e>
    2404:	6802      	ldr	r2, [r0, #0]
    2406:	2a00      	cmp	r2, #0
    2408:	d011      	beq.n	242e <atca_jwt_check_payload_start+0x2e>
    240a:	88c3      	ldrh	r3, [r0, #6]
    240c:	2b00      	cmp	r3, #0
    240e:	d00e      	beq.n	242e <atca_jwt_check_payload_start+0x2e>
    2410:	8881      	ldrh	r1, [r0, #4]
    2412:	3901      	subs	r1, #1
    2414:	428b      	cmp	r3, r1
    2416:	da0a      	bge.n	242e <atca_jwt_check_payload_start+0x2e>
    {
        /* Check the previous */
        char c = jwt->buf[jwt->cur - 1];
    2418:	18d1      	adds	r1, r2, r3
    241a:	3901      	subs	r1, #1
    241c:	7809      	ldrb	r1, [r1, #0]
        if ('.' == c)
    241e:	292e      	cmp	r1, #46	; 0x2e
    2420:	d006      	beq.n	2430 <atca_jwt_check_payload_start+0x30>
        {
            jwt->buf[jwt->cur++] = '{';
        }
        else if ('{' != c)
    2422:	297b      	cmp	r1, #123	; 0x7b
    2424:	d003      	beq.n	242e <atca_jwt_check_payload_start+0x2e>
        {
            jwt->buf[jwt->cur++] = ',';
    2426:	1c59      	adds	r1, r3, #1
    2428:	80c1      	strh	r1, [r0, #6]
    242a:	212c      	movs	r1, #44	; 0x2c
    242c:	54d1      	strb	r1, [r2, r3]
        }
    }
}
    242e:	4770      	bx	lr
            jwt->buf[jwt->cur++] = '{';
    2430:	1c59      	adds	r1, r3, #1
    2432:	80c1      	strh	r1, [r0, #6]
    2434:	217b      	movs	r1, #123	; 0x7b
    2436:	54d1      	strb	r1, [r2, r3]
    2438:	e7f9      	b.n	242e <atca_jwt_check_payload_start+0x2e>
	...

0000243c <atca_jwt_init>:
ATCA_STATUS atca_jwt_init(
    atca_jwt_t* jwt,    /**< [in] JWT Context to initialize */
    char*       buf,    /**< [inout] Pointer to a buffer to store the token */
    uint16_t    buflen  /**< [in] Length of the buffer */
    )
{
    243c:	b530      	push	{r4, r5, lr}
    243e:	b085      	sub	sp, #20
    2440:	1e04      	subs	r4, r0, #0
    ATCA_STATUS ret = ATCA_BAD_PARAM;
    size_t tSize;

    if (jwt && buf && buflen)
    2442:	d027      	beq.n	2494 <atca_jwt_init+0x58>
    2444:	2900      	cmp	r1, #0
    2446:	d027      	beq.n	2498 <atca_jwt_init+0x5c>
    ATCA_STATUS ret = ATCA_BAD_PARAM;
    2448:	20e2      	movs	r0, #226	; 0xe2
    if (jwt && buf && buflen)
    244a:	2a00      	cmp	r2, #0
    244c:	d101      	bne.n	2452 <atca_jwt_init+0x16>
                ret = ATCA_INVALID_SIZE;
            }
        }
    }
    return ret;
}
    244e:	b005      	add	sp, #20
    2450:	bd30      	pop	{r4, r5, pc}
        jwt->buf = buf;
    2452:	6021      	str	r1, [r4, #0]
        jwt->buflen = buflen;
    2454:	80a2      	strh	r2, [r4, #4]
        jwt->cur = 0;
    2456:	2300      	movs	r3, #0
    2458:	80e3      	strh	r3, [r4, #6]
        tSize = jwt->buflen;
    245a:	9203      	str	r2, [sp, #12]
        ret = atcab_base64encode_((const uint8_t*)g_jwt_header, strlen(g_jwt_header), jwt->buf,
    245c:	4b0f      	ldr	r3, [pc, #60]	; (249c <atca_jwt_init+0x60>)
    245e:	9300      	str	r3, [sp, #0]
    2460:	ab03      	add	r3, sp, #12
    2462:	000a      	movs	r2, r1
    2464:	211b      	movs	r1, #27
    2466:	480e      	ldr	r0, [pc, #56]	; (24a0 <atca_jwt_init+0x64>)
    2468:	4d0e      	ldr	r5, [pc, #56]	; (24a4 <atca_jwt_init+0x68>)
    246a:	47a8      	blx	r5
        if (ATCA_SUCCESS == ret)
    246c:	2800      	cmp	r0, #0
    246e:	d1ee      	bne.n	244e <atca_jwt_init+0x12>
            jwt->cur += (uint16_t)tSize;
    2470:	88e3      	ldrh	r3, [r4, #6]
    2472:	9a03      	ldr	r2, [sp, #12]
    2474:	4694      	mov	ip, r2
    2476:	4463      	add	r3, ip
    2478:	b29b      	uxth	r3, r3
    247a:	80e3      	strh	r3, [r4, #6]
            if (jwt->cur < jwt->buflen - 1)
    247c:	88a2      	ldrh	r2, [r4, #4]
    247e:	3a01      	subs	r2, #1
    2480:	4293      	cmp	r3, r2
    2482:	db01      	blt.n	2488 <atca_jwt_init+0x4c>
                ret = ATCA_INVALID_SIZE;
    2484:	20e4      	movs	r0, #228	; 0xe4
    2486:	e7e2      	b.n	244e <atca_jwt_init+0x12>
                jwt->buf[jwt->cur++] = '.';
    2488:	6822      	ldr	r2, [r4, #0]
    248a:	1c59      	adds	r1, r3, #1
    248c:	80e1      	strh	r1, [r4, #6]
    248e:	212e      	movs	r1, #46	; 0x2e
    2490:	54d1      	strb	r1, [r2, r3]
    2492:	e7dc      	b.n	244e <atca_jwt_init+0x12>
    ATCA_STATUS ret = ATCA_BAD_PARAM;
    2494:	20e2      	movs	r0, #226	; 0xe2
    2496:	e7da      	b.n	244e <atca_jwt_init+0x12>
    2498:	20e2      	movs	r0, #226	; 0xe2
    249a:	e7d8      	b.n	244e <atca_jwt_init+0x12>
    249c:	20000014 	.word	0x20000014
    24a0:	0000ee0c 	.word	0x0000ee0c
    24a4:	00001869 	.word	0x00001869

000024a8 <atca_jwt_finalize>:
 */
ATCA_STATUS atca_jwt_finalize(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    uint16_t    key_id  /**< [in] Key Id (Slot number) used to sign */
    )
{
    24a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24aa:	46ce      	mov	lr, r9
    24ac:	b500      	push	{lr}
    24ae:	b086      	sub	sp, #24
    24b0:	1e04      	subs	r4, r0, #0
    24b2:	9103      	str	r1, [sp, #12]
    ATCA_STATUS status;
    uint16_t i;
    size_t rem;
    size_t tSize;

    if (!jwt || !jwt->buf || !jwt->buflen || !jwt->cur)
    24b4:	d100      	bne.n	24b8 <atca_jwt_finalize+0x10>
    24b6:	e097      	b.n	25e8 <atca_jwt_finalize+0x140>
    24b8:	6803      	ldr	r3, [r0, #0]
    24ba:	2b00      	cmp	r3, #0
    24bc:	d100      	bne.n	24c0 <atca_jwt_finalize+0x18>
    24be:	e095      	b.n	25ec <atca_jwt_finalize+0x144>
    24c0:	8882      	ldrh	r2, [r0, #4]
    {
        return ATCA_BAD_PARAM;
    24c2:	26e2      	movs	r6, #226	; 0xe2
    if (!jwt || !jwt->buf || !jwt->buflen || !jwt->cur)
    24c4:	2a00      	cmp	r2, #0
    24c6:	d104      	bne.n	24d2 <atca_jwt_finalize+0x2a>

    /* Make sure resulting buffer is null terminated */
    jwt->buf[jwt->cur] = 0;

    return status;
}
    24c8:	0030      	movs	r0, r6
    24ca:	b006      	add	sp, #24
    24cc:	bc04      	pop	{r2}
    24ce:	4691      	mov	r9, r2
    24d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!jwt || !jwt->buf || !jwt->buflen || !jwt->cur)
    24d2:	88c7      	ldrh	r7, [r0, #6]
    24d4:	2f00      	cmp	r7, #0
    24d6:	d0f7      	beq.n	24c8 <atca_jwt_finalize+0x20>
    if ('}' != jwt->buf[jwt->cur - 1])
    24d8:	19da      	adds	r2, r3, r7
    24da:	3a01      	subs	r2, #1
    24dc:	7812      	ldrb	r2, [r2, #0]
    24de:	2a7d      	cmp	r2, #125	; 0x7d
    24e0:	d007      	beq.n	24f2 <atca_jwt_finalize+0x4a>
        jwt->buf[jwt->cur++] = '}';
    24e2:	1c7a      	adds	r2, r7, #1
    24e4:	80c2      	strh	r2, [r0, #6]
    24e6:	227d      	movs	r2, #125	; 0x7d
    24e8:	55da      	strb	r2, [r3, r7]
    for (i = 0; i < jwt->cur; i++)
    24ea:	88c7      	ldrh	r7, [r0, #6]
    24ec:	2f00      	cmp	r7, #0
    24ee:	d100      	bne.n	24f2 <atca_jwt_finalize+0x4a>
    24f0:	e078      	b.n	25e4 <atca_jwt_finalize+0x13c>
        if ('.' == jwt->buf[i])
    24f2:	6823      	ldr	r3, [r4, #0]
    24f4:	781a      	ldrb	r2, [r3, #0]
    24f6:	3301      	adds	r3, #1
    24f8:	2500      	movs	r5, #0
    24fa:	2a2e      	cmp	r2, #46	; 0x2e
    24fc:	d070      	beq.n	25e0 <atca_jwt_finalize+0x138>
    for (i = 0; i < jwt->cur; i++)
    24fe:	3501      	adds	r5, #1
    2500:	b2ad      	uxth	r5, r5
    2502:	42bd      	cmp	r5, r7
    2504:	d206      	bcs.n	2514 <atca_jwt_finalize+0x6c>
    2506:	3301      	adds	r3, #1
        if ('.' == jwt->buf[i])
    2508:	1e5a      	subs	r2, r3, #1
    250a:	7812      	ldrb	r2, [r2, #0]
    250c:	2a2e      	cmp	r2, #46	; 0x2e
    250e:	d1f6      	bne.n	24fe <atca_jwt_finalize+0x56>
            i++;
    2510:	3501      	adds	r5, #1
    2512:	b2ad      	uxth	r5, r5
    rem = (jwt->cur - i + ATCA_SIG_SIZE) * 4;
    2514:	1b7b      	subs	r3, r7, r5
    2516:	4699      	mov	r9, r3
    2518:	0018      	movs	r0, r3
    251a:	3040      	adds	r0, #64	; 0x40
    251c:	0080      	lsls	r0, r0, #2
    rem /= 3;
    251e:	2103      	movs	r1, #3
    2520:	4b34      	ldr	r3, [pc, #208]	; (25f4 <atca_jwt_finalize+0x14c>)
    2522:	4798      	blx	r3
    if (rem > (size_t)(jwt->buflen - jwt->cur))
    2524:	88a3      	ldrh	r3, [r4, #4]
    rem += 3;
    2526:	3003      	adds	r0, #3
    if (rem > (size_t)(jwt->buflen - jwt->cur))
    2528:	1bda      	subs	r2, r3, r7
        return ATCA_INVALID_SIZE;
    252a:	26e4      	movs	r6, #228	; 0xe4
    if (rem > (size_t)(jwt->buflen - jwt->cur))
    252c:	4290      	cmp	r0, r2
    252e:	d8cb      	bhi.n	24c8 <atca_jwt_finalize+0x20>
    memmove(jwt->buf + jwt->buflen - jwt->cur, &jwt->buf[i], rem);
    2530:	6822      	ldr	r2, [r4, #0]
    2532:	1951      	adds	r1, r2, r5
    2534:	1bd8      	subs	r0, r3, r7
    2536:	1810      	adds	r0, r2, r0
    2538:	464a      	mov	r2, r9
    253a:	4b2f      	ldr	r3, [pc, #188]	; (25f8 <atca_jwt_finalize+0x150>)
    253c:	4798      	blx	r3
    tSize = jwt->buflen;
    253e:	88a3      	ldrh	r3, [r4, #4]
    2540:	9305      	str	r3, [sp, #20]
    status = atcab_base64encode_((uint8_t*)(jwt->buf + jwt->buflen - jwt->cur), rem,
    2542:	6820      	ldr	r0, [r4, #0]
    2544:	1942      	adds	r2, r0, r5
    2546:	88e1      	ldrh	r1, [r4, #6]
    2548:	1a5b      	subs	r3, r3, r1
    254a:	18c0      	adds	r0, r0, r3
    254c:	4b2b      	ldr	r3, [pc, #172]	; (25fc <atca_jwt_finalize+0x154>)
    254e:	9300      	str	r3, [sp, #0]
    2550:	ab05      	add	r3, sp, #20
    2552:	4649      	mov	r1, r9
    2554:	4e2a      	ldr	r6, [pc, #168]	; (2600 <atca_jwt_finalize+0x158>)
    2556:	47b0      	blx	r6
    2558:	1e06      	subs	r6, r0, #0
    if (ATCA_SUCCESS != status)
    255a:	d1b5      	bne.n	24c8 <atca_jwt_finalize+0x20>
    jwt->cur = (uint16_t)(i + tSize);
    255c:	9b05      	ldr	r3, [sp, #20]
    255e:	469c      	mov	ip, r3
    2560:	4465      	add	r5, ip
    2562:	b2a9      	uxth	r1, r5
    2564:	80e1      	strh	r1, [r4, #6]
    if (jwt->cur >= jwt->buflen - 88)
    2566:	88a3      	ldrh	r3, [r4, #4]
    2568:	001a      	movs	r2, r3
    256a:	3a58      	subs	r2, #88	; 0x58
        return ATCA_INVALID_SIZE;
    256c:	36e4      	adds	r6, #228	; 0xe4
    if (jwt->cur >= jwt->buflen - 88)
    256e:	4291      	cmp	r1, r2
    2570:	daaa      	bge.n	24c8 <atca_jwt_finalize+0x20>
    status = atcac_sw_sha2_256((const uint8_t*)jwt->buf, jwt->cur, (uint8_t*)(jwt->buf + jwt->buflen - 32));
    2572:	3b20      	subs	r3, #32
    2574:	6822      	ldr	r2, [r4, #0]
    2576:	18d2      	adds	r2, r2, r3
    2578:	6820      	ldr	r0, [r4, #0]
    257a:	4b22      	ldr	r3, [pc, #136]	; (2604 <atca_jwt_finalize+0x15c>)
    257c:	4798      	blx	r3
    257e:	b2c6      	uxtb	r6, r0
    if (ATCA_SUCCESS != status)
    2580:	2e00      	cmp	r6, #0
    2582:	d1a1      	bne.n	24c8 <atca_jwt_finalize+0x20>
    status = atcab_sign(key_id, (const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SHA_DIGEST_SIZE),
    2584:	6823      	ldr	r3, [r4, #0]
    2586:	88a1      	ldrh	r1, [r4, #4]
                        (uint8_t*)(jwt->buf + jwt->buflen - 64));
    2588:	000a      	movs	r2, r1
    258a:	3a40      	subs	r2, #64	; 0x40
    258c:	189a      	adds	r2, r3, r2
    status = atcab_sign(key_id, (const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SHA_DIGEST_SIZE),
    258e:	3920      	subs	r1, #32
    2590:	1859      	adds	r1, r3, r1
    2592:	9803      	ldr	r0, [sp, #12]
    2594:	4b1c      	ldr	r3, [pc, #112]	; (2608 <atca_jwt_finalize+0x160>)
    2596:	4798      	blx	r3
    2598:	1e06      	subs	r6, r0, #0
    if (ATCA_SUCCESS != status)
    259a:	d000      	beq.n	259e <atca_jwt_finalize+0xf6>
    259c:	e794      	b.n	24c8 <atca_jwt_finalize+0x20>
    jwt->buf[jwt->cur++] = '.';
    259e:	88e3      	ldrh	r3, [r4, #6]
    25a0:	1c5a      	adds	r2, r3, #1
    25a2:	80e2      	strh	r2, [r4, #6]
    25a4:	222e      	movs	r2, #46	; 0x2e
    25a6:	6821      	ldr	r1, [r4, #0]
    25a8:	54ca      	strb	r2, [r1, r3]
    tSize = jwt->buflen - jwt->cur;
    25aa:	88a0      	ldrh	r0, [r4, #4]
    25ac:	88e2      	ldrh	r2, [r4, #6]
    25ae:	1a83      	subs	r3, r0, r2
    25b0:	9305      	str	r3, [sp, #20]
    atcab_base64encode_((const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SIG_SIZE), ATCA_SIG_SIZE,
    25b2:	6823      	ldr	r3, [r4, #0]
    25b4:	189a      	adds	r2, r3, r2
    25b6:	3840      	subs	r0, #64	; 0x40
    25b8:	1818      	adds	r0, r3, r0
    25ba:	4b10      	ldr	r3, [pc, #64]	; (25fc <atca_jwt_finalize+0x154>)
    25bc:	9300      	str	r3, [sp, #0]
    25be:	ab05      	add	r3, sp, #20
    25c0:	2140      	movs	r1, #64	; 0x40
    25c2:	4d0f      	ldr	r5, [pc, #60]	; (2600 <atca_jwt_finalize+0x158>)
    25c4:	47a8      	blx	r5
    jwt->cur += (uint16_t)tSize;
    25c6:	88e3      	ldrh	r3, [r4, #6]
    25c8:	9a05      	ldr	r2, [sp, #20]
    25ca:	4694      	mov	ip, r2
    25cc:	4463      	add	r3, ip
    25ce:	b29b      	uxth	r3, r3
    25d0:	80e3      	strh	r3, [r4, #6]
    if (jwt->cur >= jwt->buflen)
    25d2:	88a2      	ldrh	r2, [r4, #4]
    25d4:	429a      	cmp	r2, r3
    25d6:	d90b      	bls.n	25f0 <atca_jwt_finalize+0x148>
    jwt->buf[jwt->cur] = 0;
    25d8:	6822      	ldr	r2, [r4, #0]
    25da:	2100      	movs	r1, #0
    25dc:	54d1      	strb	r1, [r2, r3]
    return status;
    25de:	e773      	b.n	24c8 <atca_jwt_finalize+0x20>
    for (i = 0; i < jwt->cur; i++)
    25e0:	2500      	movs	r5, #0
    25e2:	e795      	b.n	2510 <atca_jwt_finalize+0x68>
    25e4:	003d      	movs	r5, r7
    25e6:	e795      	b.n	2514 <atca_jwt_finalize+0x6c>
        return ATCA_BAD_PARAM;
    25e8:	26e2      	movs	r6, #226	; 0xe2
    25ea:	e76d      	b.n	24c8 <atca_jwt_finalize+0x20>
    25ec:	26e2      	movs	r6, #226	; 0xe2
    25ee:	e76b      	b.n	24c8 <atca_jwt_finalize+0x20>
        return ATCA_INVALID_SIZE;
    25f0:	26e4      	movs	r6, #228	; 0xe4
    25f2:	e769      	b.n	24c8 <atca_jwt_finalize+0x20>
    25f4:	0000b65d 	.word	0x0000b65d
    25f8:	0000d351 	.word	0x0000d351
    25fc:	20000014 	.word	0x20000014
    2600:	00001869 	.word	0x00001869
    2604:	00001a61 	.word	0x00001a61
    2608:	000017d1 	.word	0x000017d1

0000260c <atca_jwt_add_claim_string>:
ATCA_STATUS atca_jwt_add_claim_string(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    const char* claim,  /**< [in] Name of the claim to be inserted */
    const char* value   /**< [in] Null terminated string to be insterted */
    )
{
    260c:	b5f0      	push	{r4, r5, r6, r7, lr}
    260e:	b083      	sub	sp, #12
    2610:	0004      	movs	r4, r0
    2612:	000d      	movs	r5, r1
    2614:	0016      	movs	r6, r2
    int32_t written;
    int32_t remaining;

    if (jwt && jwt->buf && jwt->buflen && claim && value)
    2616:	2800      	cmp	r0, #0
    2618:	d026      	beq.n	2668 <atca_jwt_add_claim_string+0x5c>
    261a:	6803      	ldr	r3, [r0, #0]
    261c:	2b00      	cmp	r3, #0
    261e:	d025      	beq.n	266c <atca_jwt_add_claim_string+0x60>
    2620:	8883      	ldrh	r3, [r0, #4]
            return ATCA_GEN_FAIL;
        }
    }
    else
    {
        return ATCA_BAD_PARAM;
    2622:	20e2      	movs	r0, #226	; 0xe2
    if (jwt && jwt->buf && jwt->buflen && claim && value)
    2624:	2b00      	cmp	r3, #0
    2626:	d101      	bne.n	262c <atca_jwt_add_claim_string+0x20>
    }
}
    2628:	b003      	add	sp, #12
    262a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (jwt && jwt->buf && jwt->buflen && claim && value)
    262c:	2900      	cmp	r1, #0
    262e:	d01f      	beq.n	2670 <atca_jwt_add_claim_string+0x64>
    2630:	2a00      	cmp	r2, #0
    2632:	d0f9      	beq.n	2628 <atca_jwt_add_claim_string+0x1c>
        atca_jwt_check_payload_start(jwt);
    2634:	0020      	movs	r0, r4
    2636:	4b0f      	ldr	r3, [pc, #60]	; (2674 <atca_jwt_add_claim_string+0x68>)
    2638:	4798      	blx	r3
        remaining = jwt->buflen - jwt->cur;
    263a:	88e0      	ldrh	r0, [r4, #6]
    263c:	88a7      	ldrh	r7, [r4, #4]
    263e:	1a3f      	subs	r7, r7, r0
        written = snprintf(&jwt->buf[jwt->cur], remaining, "\"%s\":\"%s\"", claim, value);
    2640:	6823      	ldr	r3, [r4, #0]
    2642:	469c      	mov	ip, r3
    2644:	4460      	add	r0, ip
    2646:	9600      	str	r6, [sp, #0]
    2648:	002b      	movs	r3, r5
    264a:	4a0b      	ldr	r2, [pc, #44]	; (2678 <atca_jwt_add_claim_string+0x6c>)
    264c:	0039      	movs	r1, r7
    264e:	4d0b      	ldr	r5, [pc, #44]	; (267c <atca_jwt_add_claim_string+0x70>)
    2650:	47a8      	blx	r5
    2652:	0003      	movs	r3, r0
            return ATCA_GEN_FAIL;
    2654:	20e1      	movs	r0, #225	; 0xe1
        if (0 < written && written < remaining)
    2656:	2b00      	cmp	r3, #0
    2658:	dde6      	ble.n	2628 <atca_jwt_add_claim_string+0x1c>
    265a:	429f      	cmp	r7, r3
    265c:	dde4      	ble.n	2628 <atca_jwt_add_claim_string+0x1c>
            jwt->cur += written;
    265e:	88e0      	ldrh	r0, [r4, #6]
    2660:	18c3      	adds	r3, r0, r3
    2662:	80e3      	strh	r3, [r4, #6]
            return ATCA_SUCCESS;
    2664:	2000      	movs	r0, #0
    2666:	e7df      	b.n	2628 <atca_jwt_add_claim_string+0x1c>
        return ATCA_BAD_PARAM;
    2668:	20e2      	movs	r0, #226	; 0xe2
    266a:	e7dd      	b.n	2628 <atca_jwt_add_claim_string+0x1c>
    266c:	20e2      	movs	r0, #226	; 0xe2
    266e:	e7db      	b.n	2628 <atca_jwt_add_claim_string+0x1c>
    2670:	20e2      	movs	r0, #226	; 0xe2
    2672:	e7d9      	b.n	2628 <atca_jwt_add_claim_string+0x1c>
    2674:	00002401 	.word	0x00002401
    2678:	0000ee00 	.word	0x0000ee00
    267c:	0000d795 	.word	0x0000d795

00002680 <atca_jwt_add_claim_numeric>:
ATCA_STATUS atca_jwt_add_claim_numeric(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    const char* claim,  /**< [in] Name of the claim to be inserted */
    int32_t     value   /**< [in] integer value to be inserted */
    )
{
    2680:	b5f0      	push	{r4, r5, r6, r7, lr}
    2682:	b083      	sub	sp, #12
    2684:	0004      	movs	r4, r0
    2686:	000d      	movs	r5, r1
    2688:	0016      	movs	r6, r2
    int32_t written;
    int32_t remaining;

    if (jwt && jwt->buf && jwt->buflen && claim)
    268a:	2800      	cmp	r0, #0
    268c:	d024      	beq.n	26d8 <atca_jwt_add_claim_numeric+0x58>
    268e:	6803      	ldr	r3, [r0, #0]
    2690:	2b00      	cmp	r3, #0
    2692:	d023      	beq.n	26dc <atca_jwt_add_claim_numeric+0x5c>
    2694:	8883      	ldrh	r3, [r0, #4]
            return ATCA_GEN_FAIL;
        }
    }
    else
    {
        return ATCA_BAD_PARAM;
    2696:	20e2      	movs	r0, #226	; 0xe2
    if (jwt && jwt->buf && jwt->buflen && claim)
    2698:	2b00      	cmp	r3, #0
    269a:	d101      	bne.n	26a0 <atca_jwt_add_claim_numeric+0x20>
    }
}
    269c:	b003      	add	sp, #12
    269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (jwt && jwt->buf && jwt->buflen && claim)
    26a0:	2900      	cmp	r1, #0
    26a2:	d0fb      	beq.n	269c <atca_jwt_add_claim_numeric+0x1c>
        atca_jwt_check_payload_start(jwt);
    26a4:	0020      	movs	r0, r4
    26a6:	4b0e      	ldr	r3, [pc, #56]	; (26e0 <atca_jwt_add_claim_numeric+0x60>)
    26a8:	4798      	blx	r3
        remaining = jwt->buflen - jwt->cur;
    26aa:	88e0      	ldrh	r0, [r4, #6]
    26ac:	88a7      	ldrh	r7, [r4, #4]
    26ae:	1a3f      	subs	r7, r7, r0
        written = snprintf(&jwt->buf[jwt->cur], remaining, "\"%s\":%ld", claim, (long)value);
    26b0:	6823      	ldr	r3, [r4, #0]
    26b2:	469c      	mov	ip, r3
    26b4:	4460      	add	r0, ip
    26b6:	9600      	str	r6, [sp, #0]
    26b8:	002b      	movs	r3, r5
    26ba:	4a0a      	ldr	r2, [pc, #40]	; (26e4 <atca_jwt_add_claim_numeric+0x64>)
    26bc:	0039      	movs	r1, r7
    26be:	4d0a      	ldr	r5, [pc, #40]	; (26e8 <atca_jwt_add_claim_numeric+0x68>)
    26c0:	47a8      	blx	r5
    26c2:	0003      	movs	r3, r0
            return ATCA_GEN_FAIL;
    26c4:	20e1      	movs	r0, #225	; 0xe1
        if (0 < written && written < remaining)
    26c6:	2b00      	cmp	r3, #0
    26c8:	dde8      	ble.n	269c <atca_jwt_add_claim_numeric+0x1c>
    26ca:	429f      	cmp	r7, r3
    26cc:	dde6      	ble.n	269c <atca_jwt_add_claim_numeric+0x1c>
            jwt->cur += written;
    26ce:	88e0      	ldrh	r0, [r4, #6]
    26d0:	18c3      	adds	r3, r0, r3
    26d2:	80e3      	strh	r3, [r4, #6]
            return 0;
    26d4:	2000      	movs	r0, #0
    26d6:	e7e1      	b.n	269c <atca_jwt_add_claim_numeric+0x1c>
        return ATCA_BAD_PARAM;
    26d8:	20e2      	movs	r0, #226	; 0xe2
    26da:	e7df      	b.n	269c <atca_jwt_add_claim_numeric+0x1c>
    26dc:	20e2      	movs	r0, #226	; 0xe2
    26de:	e7dd      	b.n	269c <atca_jwt_add_claim_numeric+0x1c>
    26e0:	00002401 	.word	0x00002401
    26e4:	0000edf4 	.word	0x0000edf4
    26e8:	0000d795 	.word	0x0000d795

000026ec <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    26ec:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    26ee:	7a98      	ldrb	r0, [r3, #10]
    26f0:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
    26f2:	4770      	bx	lr

000026f4 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    26f4:	b570      	push	{r4, r5, r6, lr}
    26f6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    26f8:	6806      	ldr	r6, [r0, #0]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
    26fa:	7943      	ldrb	r3, [r0, #5]
    26fc:	2b00      	cmp	r3, #0
    26fe:	d10e      	bne.n	271e <rtc_count_get_count+0x2a>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
    2700:	4b12      	ldr	r3, [pc, #72]	; (274c <rtc_count_get_count+0x58>)
    2702:	8073      	strh	r3, [r6, #2]

		while (rtc_count_is_syncing(module)) {
    2704:	4d12      	ldr	r5, [pc, #72]	; (2750 <rtc_count_get_count+0x5c>)
    2706:	0020      	movs	r0, r4
    2708:	47a8      	blx	r5
    270a:	2800      	cmp	r0, #0
    270c:	d1fb      	bne.n	2706 <rtc_count_get_count+0x12>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
    270e:	7923      	ldrb	r3, [r4, #4]
    2710:	2b00      	cmp	r3, #0
    2712:	d017      	beq.n	2744 <rtc_count_get_count+0x50>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    2714:	2000      	movs	r0, #0
	switch (module->mode) {
    2716:	2b01      	cmp	r3, #1
    2718:	d100      	bne.n	271c <rtc_count_get_count+0x28>
			ret_val = rtc_module->MODE0.COUNT.reg;
    271a:	6930      	ldr	r0, [r6, #16]
			break;
	}

	return ret_val;
}
    271c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!(rtc_module->MODE0.READREQ.reg & RTC_READREQ_RCONT)){
    271e:	8873      	ldrh	r3, [r6, #2]
    2720:	045b      	lsls	r3, r3, #17
    2722:	d4f4      	bmi.n	270e <rtc_count_get_count+0x1a>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    2724:	8873      	ldrh	r3, [r6, #2]
    2726:	2280      	movs	r2, #128	; 0x80
    2728:	01d2      	lsls	r2, r2, #7
    272a:	4313      	orrs	r3, r2
    272c:	8073      	strh	r3, [r6, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
    272e:	8873      	ldrh	r3, [r6, #2]
    2730:	2280      	movs	r2, #128	; 0x80
    2732:	0212      	lsls	r2, r2, #8
    2734:	4313      	orrs	r3, r2
    2736:	8073      	strh	r3, [r6, #2]
		while (rtc_count_is_syncing(module)) {
    2738:	4d05      	ldr	r5, [pc, #20]	; (2750 <rtc_count_get_count+0x5c>)
    273a:	0020      	movs	r0, r4
    273c:	47a8      	blx	r5
    273e:	2800      	cmp	r0, #0
    2740:	d1fb      	bne.n	273a <rtc_count_get_count+0x46>
    2742:	e7e4      	b.n	270e <rtc_count_get_count+0x1a>
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    2744:	8a30      	ldrh	r0, [r6, #16]
    2746:	b280      	uxth	r0, r0
			break;
    2748:	e7e8      	b.n	271c <rtc_count_get_count+0x28>
    274a:	46c0      	nop			; (mov r8, r8)
    274c:	ffff8000 	.word	0xffff8000
    2750:	000026ed 	.word	0x000026ed

00002754 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    2754:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    2756:	4b14      	ldr	r3, [pc, #80]	; (27a8 <RTC_Handler+0x54>)
    2758:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    275a:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    275c:	8ad1      	ldrh	r1, [r2, #22]
	callback_mask &= module->registered_callback;
    275e:	8a93      	ldrh	r3, [r2, #20]
    2760:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    2762:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    2764:	79e3      	ldrb	r3, [r4, #7]
    2766:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    2768:	b258      	sxtb	r0, r3
    276a:	2800      	cmp	r0, #0
    276c:	db06      	blt.n	277c <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    276e:	07d8      	lsls	r0, r3, #31
    2770:	d50f      	bpl.n	2792 <RTC_Handler+0x3e>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    2772:	07cb      	lsls	r3, r1, #31
    2774:	d40a      	bmi.n	278c <RTC_Handler+0x38>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    2776:	2301      	movs	r3, #1
    2778:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    277a:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    277c:	074b      	lsls	r3, r1, #29
    277e:	d402      	bmi.n	2786 <RTC_Handler+0x32>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    2780:	2380      	movs	r3, #128	; 0x80
    2782:	7223      	strb	r3, [r4, #8]
    2784:	e7f9      	b.n	277a <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    2786:	6913      	ldr	r3, [r2, #16]
    2788:	4798      	blx	r3
    278a:	e7f9      	b.n	2780 <RTC_Handler+0x2c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    278c:	6893      	ldr	r3, [r2, #8]
    278e:	4798      	blx	r3
    2790:	e7f1      	b.n	2776 <RTC_Handler+0x22>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    2792:	079b      	lsls	r3, r3, #30
    2794:	d5f1      	bpl.n	277a <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    2796:	078b      	lsls	r3, r1, #30
    2798:	d402      	bmi.n	27a0 <RTC_Handler+0x4c>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    279a:	2302      	movs	r3, #2
    279c:	7223      	strb	r3, [r4, #8]
}
    279e:	e7ec      	b.n	277a <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    27a0:	68d3      	ldr	r3, [r2, #12]
    27a2:	4798      	blx	r3
    27a4:	e7f9      	b.n	279a <RTC_Handler+0x46>
    27a6:	46c0      	nop			; (mov r8, r8)
    27a8:	200013ec 	.word	0x200013ec

000027ac <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    27ac:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    27ae:	2207      	movs	r2, #7
    27b0:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    27b2:	421a      	tst	r2, r3
    27b4:	d1fc      	bne.n	27b0 <_i2c_master_wait_for_sync+0x4>
}
    27b6:	4770      	bx	lr

000027b8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    27b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ba:	46d6      	mov	lr, sl
    27bc:	464f      	mov	r7, r9
    27be:	4646      	mov	r6, r8
    27c0:	b5c0      	push	{r6, r7, lr}
    27c2:	b08a      	sub	sp, #40	; 0x28
    27c4:	0006      	movs	r6, r0
    27c6:	000f      	movs	r7, r1
    27c8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    27ca:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    27cc:	0008      	movs	r0, r1
    27ce:	4b97      	ldr	r3, [pc, #604]	; (2a2c <i2c_master_init+0x274>)
    27d0:	4798      	blx	r3
    27d2:	4a97      	ldr	r2, [pc, #604]	; (2a30 <i2c_master_init+0x278>)
    27d4:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    27d6:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    27d8:	2301      	movs	r3, #1
    27da:	40ab      	lsls	r3, r5
    27dc:	430b      	orrs	r3, r1
    27de:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    27e0:	a909      	add	r1, sp, #36	; 0x24
    27e2:	7b23      	ldrb	r3, [r4, #12]
    27e4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    27e6:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    27e8:	b2c5      	uxtb	r5, r0
    27ea:	0028      	movs	r0, r5
    27ec:	4b91      	ldr	r3, [pc, #580]	; (2a34 <i2c_master_init+0x27c>)
    27ee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    27f0:	0028      	movs	r0, r5
    27f2:	4b91      	ldr	r3, [pc, #580]	; (2a38 <i2c_master_init+0x280>)
    27f4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    27f6:	7b20      	ldrb	r0, [r4, #12]
    27f8:	2100      	movs	r1, #0
    27fa:	4b90      	ldr	r3, [pc, #576]	; (2a3c <i2c_master_init+0x284>)
    27fc:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    27fe:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    2800:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    2802:	079b      	lsls	r3, r3, #30
    2804:	d505      	bpl.n	2812 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    2806:	b00a      	add	sp, #40	; 0x28
    2808:	bc1c      	pop	{r2, r3, r4}
    280a:	4690      	mov	r8, r2
    280c:	4699      	mov	r9, r3
    280e:	46a2      	mov	sl, r4
    2810:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    2812:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    2814:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    2816:	07db      	lsls	r3, r3, #31
    2818:	d4f5      	bmi.n	2806 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    281a:	2314      	movs	r3, #20
    281c:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    281e:	6833      	ldr	r3, [r6, #0]
    2820:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    2822:	0018      	movs	r0, r3
    2824:	4b81      	ldr	r3, [pc, #516]	; (2a2c <i2c_master_init+0x274>)
    2826:	4798      	blx	r3
    2828:	0005      	movs	r5, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    282a:	2380      	movs	r3, #128	; 0x80
    282c:	aa08      	add	r2, sp, #32
    282e:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2830:	2300      	movs	r3, #0
    2832:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2834:	2201      	movs	r2, #1
    2836:	a908      	add	r1, sp, #32
    2838:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    283a:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    283c:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    283e:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    2840:	2800      	cmp	r0, #0
    2842:	d100      	bne.n	2846 <i2c_master_init+0x8e>
    2844:	e0af      	b.n	29a6 <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
    2846:	ab08      	add	r3, sp, #32
    2848:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    284a:	2302      	movs	r3, #2
    284c:	aa08      	add	r2, sp, #32
    284e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    2850:	0c00      	lsrs	r0, r0, #16
    2852:	b2c0      	uxtb	r0, r0
    2854:	0011      	movs	r1, r2
    2856:	4b7a      	ldr	r3, [pc, #488]	; (2a40 <i2c_master_init+0x288>)
    2858:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    285a:	2f00      	cmp	r7, #0
    285c:	d100      	bne.n	2860 <i2c_master_init+0xa8>
    285e:	e0a7      	b.n	29b0 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
    2860:	ab08      	add	r3, sp, #32
    2862:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    2864:	2302      	movs	r3, #2
    2866:	aa08      	add	r2, sp, #32
    2868:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    286a:	0c3f      	lsrs	r7, r7, #16
    286c:	b2f8      	uxtb	r0, r7
    286e:	0011      	movs	r1, r2
    2870:	4b73      	ldr	r3, [pc, #460]	; (2a40 <i2c_master_init+0x288>)
    2872:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    2874:	8aa3      	ldrh	r3, [r4, #20]
    2876:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    2878:	8ae3      	ldrh	r3, [r4, #22]
    287a:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    287c:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    287e:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    2880:	2b00      	cmp	r3, #0
    2882:	d104      	bne.n	288e <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2884:	4b6f      	ldr	r3, [pc, #444]	; (2a44 <i2c_master_init+0x28c>)
    2886:	789b      	ldrb	r3, [r3, #2]
    2888:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    288a:	0fdb      	lsrs	r3, r3, #31
    288c:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    288e:	68a1      	ldr	r1, [r4, #8]
    2890:	6923      	ldr	r3, [r4, #16]
    2892:	430b      	orrs	r3, r1
    2894:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    2896:	2224      	movs	r2, #36	; 0x24
    2898:	5ca2      	ldrb	r2, [r4, r2]
    289a:	2a00      	cmp	r2, #0
    289c:	d002      	beq.n	28a4 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    289e:	2280      	movs	r2, #128	; 0x80
    28a0:	05d2      	lsls	r2, r2, #23
    28a2:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    28a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    28a6:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    28a8:	222c      	movs	r2, #44	; 0x2c
    28aa:	5ca2      	ldrb	r2, [r4, r2]
    28ac:	2a00      	cmp	r2, #0
    28ae:	d103      	bne.n	28b8 <i2c_master_init+0x100>
    28b0:	2280      	movs	r2, #128	; 0x80
    28b2:	0492      	lsls	r2, r2, #18
    28b4:	4291      	cmp	r1, r2
    28b6:	d102      	bne.n	28be <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    28b8:	2280      	movs	r2, #128	; 0x80
    28ba:	0512      	lsls	r2, r2, #20
    28bc:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    28be:	222d      	movs	r2, #45	; 0x2d
    28c0:	5ca2      	ldrb	r2, [r4, r2]
    28c2:	2a00      	cmp	r2, #0
    28c4:	d002      	beq.n	28cc <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    28c6:	2280      	movs	r2, #128	; 0x80
    28c8:	0412      	lsls	r2, r2, #16
    28ca:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    28cc:	222e      	movs	r2, #46	; 0x2e
    28ce:	5ca2      	ldrb	r2, [r4, r2]
    28d0:	2a00      	cmp	r2, #0
    28d2:	d002      	beq.n	28da <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    28d4:	2280      	movs	r2, #128	; 0x80
    28d6:	03d2      	lsls	r2, r2, #15
    28d8:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    28da:	4642      	mov	r2, r8
    28dc:	6812      	ldr	r2, [r2, #0]
    28de:	4313      	orrs	r3, r2
    28e0:	4642      	mov	r2, r8
    28e2:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    28e4:	2380      	movs	r3, #128	; 0x80
    28e6:	005b      	lsls	r3, r3, #1
    28e8:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    28ea:	0028      	movs	r0, r5
    28ec:	3014      	adds	r0, #20
    28ee:	b2c0      	uxtb	r0, r0
    28f0:	4b55      	ldr	r3, [pc, #340]	; (2a48 <i2c_master_init+0x290>)
    28f2:	4798      	blx	r3
    28f4:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    28f6:	23fa      	movs	r3, #250	; 0xfa
    28f8:	009b      	lsls	r3, r3, #2
    28fa:	6822      	ldr	r2, [r4, #0]
    28fc:	435a      	muls	r2, r3
    28fe:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    2900:	6863      	ldr	r3, [r4, #4]
    2902:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    2904:	4d51      	ldr	r5, [pc, #324]	; (2a4c <i2c_master_init+0x294>)
    2906:	47a8      	blx	r5
    2908:	9000      	str	r0, [sp, #0]
    290a:	9101      	str	r1, [sp, #4]
    290c:	464b      	mov	r3, r9
    290e:	0058      	lsls	r0, r3, #1
    2910:	47a8      	blx	r5
    2912:	9002      	str	r0, [sp, #8]
    2914:	9103      	str	r1, [sp, #12]
    2916:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    2918:	47a8      	blx	r5
    291a:	9004      	str	r0, [sp, #16]
    291c:	9105      	str	r1, [sp, #20]
    291e:	4f4c      	ldr	r7, [pc, #304]	; (2a50 <i2c_master_init+0x298>)
    2920:	4a4c      	ldr	r2, [pc, #304]	; (2a54 <i2c_master_init+0x29c>)
    2922:	4b4d      	ldr	r3, [pc, #308]	; (2a58 <i2c_master_init+0x2a0>)
    2924:	9800      	ldr	r0, [sp, #0]
    2926:	9901      	ldr	r1, [sp, #4]
    2928:	47b8      	blx	r7
    292a:	0002      	movs	r2, r0
    292c:	000b      	movs	r3, r1
    292e:	9804      	ldr	r0, [sp, #16]
    2930:	9905      	ldr	r1, [sp, #20]
    2932:	47b8      	blx	r7
    2934:	4e49      	ldr	r6, [pc, #292]	; (2a5c <i2c_master_init+0x2a4>)
    2936:	2200      	movs	r2, #0
    2938:	4b49      	ldr	r3, [pc, #292]	; (2a60 <i2c_master_init+0x2a8>)
    293a:	47b0      	blx	r6
    293c:	9004      	str	r0, [sp, #16]
    293e:	9105      	str	r1, [sp, #20]
    2940:	4648      	mov	r0, r9
    2942:	47a8      	blx	r5
    2944:	0002      	movs	r2, r0
    2946:	000b      	movs	r3, r1
    2948:	9804      	ldr	r0, [sp, #16]
    294a:	9905      	ldr	r1, [sp, #20]
    294c:	47b8      	blx	r7
    294e:	0002      	movs	r2, r0
    2950:	000b      	movs	r3, r1
    2952:	4d44      	ldr	r5, [pc, #272]	; (2a64 <i2c_master_init+0x2ac>)
    2954:	9800      	ldr	r0, [sp, #0]
    2956:	9901      	ldr	r1, [sp, #4]
    2958:	47a8      	blx	r5
    295a:	9a02      	ldr	r2, [sp, #8]
    295c:	9b03      	ldr	r3, [sp, #12]
    295e:	47b0      	blx	r6
    2960:	2200      	movs	r2, #0
    2962:	4b41      	ldr	r3, [pc, #260]	; (2a68 <i2c_master_init+0x2b0>)
    2964:	47a8      	blx	r5
    2966:	9a02      	ldr	r2, [sp, #8]
    2968:	9b03      	ldr	r3, [sp, #12]
    296a:	4d40      	ldr	r5, [pc, #256]	; (2a6c <i2c_master_init+0x2b4>)
    296c:	47a8      	blx	r5
    296e:	4b40      	ldr	r3, [pc, #256]	; (2a70 <i2c_master_init+0x2b8>)
    2970:	4798      	blx	r3
    2972:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    2974:	2380      	movs	r3, #128	; 0x80
    2976:	049b      	lsls	r3, r3, #18
    2978:	68a2      	ldr	r2, [r4, #8]
    297a:	429a      	cmp	r2, r3
    297c:	d01e      	beq.n	29bc <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    297e:	0003      	movs	r3, r0
    2980:	2040      	movs	r0, #64	; 0x40
    2982:	2dff      	cmp	r5, #255	; 0xff
    2984:	d900      	bls.n	2988 <i2c_master_init+0x1d0>
    2986:	e73e      	b.n	2806 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    2988:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    298a:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    298c:	25ff      	movs	r5, #255	; 0xff
    298e:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    2990:	0624      	lsls	r4, r4, #24
    2992:	4325      	orrs	r5, r4
    2994:	0400      	lsls	r0, r0, #16
    2996:	23ff      	movs	r3, #255	; 0xff
    2998:	041b      	lsls	r3, r3, #16
    299a:	4018      	ands	r0, r3
    299c:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    299e:	4643      	mov	r3, r8
    29a0:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    29a2:	2000      	movs	r0, #0
    29a4:	e72f      	b.n	2806 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    29a6:	2100      	movs	r1, #0
    29a8:	4640      	mov	r0, r8
    29aa:	4b32      	ldr	r3, [pc, #200]	; (2a74 <i2c_master_init+0x2bc>)
    29ac:	4798      	blx	r3
    29ae:	e74a      	b.n	2846 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    29b0:	2101      	movs	r1, #1
    29b2:	4640      	mov	r0, r8
    29b4:	4b2f      	ldr	r3, [pc, #188]	; (2a74 <i2c_master_init+0x2bc>)
    29b6:	4798      	blx	r3
    29b8:	0007      	movs	r7, r0
    29ba:	e751      	b.n	2860 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    29bc:	26fa      	movs	r6, #250	; 0xfa
    29be:	00b6      	lsls	r6, r6, #2
    29c0:	4653      	mov	r3, sl
    29c2:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    29c4:	9800      	ldr	r0, [sp, #0]
    29c6:	9901      	ldr	r1, [sp, #4]
    29c8:	0002      	movs	r2, r0
    29ca:	000b      	movs	r3, r1
    29cc:	4c23      	ldr	r4, [pc, #140]	; (2a5c <i2c_master_init+0x2a4>)
    29ce:	47a0      	blx	r4
    29d0:	9000      	str	r0, [sp, #0]
    29d2:	9101      	str	r1, [sp, #4]
    29d4:	0030      	movs	r0, r6
    29d6:	4b1d      	ldr	r3, [pc, #116]	; (2a4c <i2c_master_init+0x294>)
    29d8:	4798      	blx	r3
    29da:	2200      	movs	r2, #0
    29dc:	4b26      	ldr	r3, [pc, #152]	; (2a78 <i2c_master_init+0x2c0>)
    29de:	47b8      	blx	r7
    29e0:	0002      	movs	r2, r0
    29e2:	000b      	movs	r3, r1
    29e4:	9800      	ldr	r0, [sp, #0]
    29e6:	9901      	ldr	r1, [sp, #4]
    29e8:	4c20      	ldr	r4, [pc, #128]	; (2a6c <i2c_master_init+0x2b4>)
    29ea:	47a0      	blx	r4
    29ec:	2200      	movs	r2, #0
    29ee:	4b1e      	ldr	r3, [pc, #120]	; (2a68 <i2c_master_init+0x2b0>)
    29f0:	4c1c      	ldr	r4, [pc, #112]	; (2a64 <i2c_master_init+0x2ac>)
    29f2:	47a0      	blx	r4
    29f4:	4b1e      	ldr	r3, [pc, #120]	; (2a70 <i2c_master_init+0x2b8>)
    29f6:	4798      	blx	r3
    29f8:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    29fa:	d00c      	beq.n	2a16 <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    29fc:	0031      	movs	r1, r6
    29fe:	9807      	ldr	r0, [sp, #28]
    2a00:	4b1e      	ldr	r3, [pc, #120]	; (2a7c <i2c_master_init+0x2c4>)
    2a02:	4798      	blx	r3
    2a04:	3802      	subs	r0, #2
    2a06:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    2a08:	002b      	movs	r3, r5
    2a0a:	2dff      	cmp	r5, #255	; 0xff
    2a0c:	d80c      	bhi.n	2a28 <i2c_master_init+0x270>
    2a0e:	28ff      	cmp	r0, #255	; 0xff
    2a10:	d9bc      	bls.n	298c <i2c_master_init+0x1d4>
    2a12:	2040      	movs	r0, #64	; 0x40
    2a14:	e6f7      	b.n	2806 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    2a16:	0071      	lsls	r1, r6, #1
    2a18:	1e48      	subs	r0, r1, #1
    2a1a:	9b07      	ldr	r3, [sp, #28]
    2a1c:	469c      	mov	ip, r3
    2a1e:	4460      	add	r0, ip
    2a20:	4b16      	ldr	r3, [pc, #88]	; (2a7c <i2c_master_init+0x2c4>)
    2a22:	4798      	blx	r3
    2a24:	3801      	subs	r0, #1
    2a26:	e7ef      	b.n	2a08 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    2a28:	2040      	movs	r0, #64	; 0x40
    2a2a:	e6ec      	b.n	2806 <i2c_master_init+0x4e>
    2a2c:	000079bd 	.word	0x000079bd
    2a30:	40000400 	.word	0x40000400
    2a34:	00008d35 	.word	0x00008d35
    2a38:	00008ca9 	.word	0x00008ca9
    2a3c:	000077f9 	.word	0x000077f9
    2a40:	00008e2d 	.word	0x00008e2d
    2a44:	41002000 	.word	0x41002000
    2a48:	00008d51 	.word	0x00008d51
    2a4c:	0000d235 	.word	0x0000d235
    2a50:	0000c6a1 	.word	0x0000c6a1
    2a54:	e826d695 	.word	0xe826d695
    2a58:	3e112e0b 	.word	0x3e112e0b
    2a5c:	0000ba19 	.word	0x0000ba19
    2a60:	40240000 	.word	0x40240000
    2a64:	0000cba1 	.word	0x0000cba1
    2a68:	3ff00000 	.word	0x3ff00000
    2a6c:	0000c039 	.word	0x0000c039
    2a70:	0000d1cd 	.word	0x0000d1cd
    2a74:	00007845 	.word	0x00007845
    2a78:	40080000 	.word	0x40080000
    2a7c:	0000b65d 	.word	0x0000b65d

00002a80 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    2a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a82:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2a84:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    2a86:	4e08      	ldr	r6, [pc, #32]	; (2aa8 <i2c_master_reset+0x28>)
    2a88:	47b0      	blx	r6
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2a8a:	6825      	ldr	r5, [r4, #0]
	_i2c_master_wait_for_sync(module);
    2a8c:	0020      	movs	r0, r4
    2a8e:	47b0      	blx	r6
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    2a90:	2383      	movs	r3, #131	; 0x83
    2a92:	752b      	strb	r3, [r5, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    2a94:	762b      	strb	r3, [r5, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    2a96:	682b      	ldr	r3, [r5, #0]
    2a98:	2202      	movs	r2, #2
    2a9a:	4393      	bics	r3, r2
    2a9c:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    2a9e:	0020      	movs	r0, r4
    2aa0:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    2aa2:	2301      	movs	r3, #1
    2aa4:	603b      	str	r3, [r7, #0]
}
    2aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2aa8:	000027ad 	.word	0x000027ad

00002aac <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2aac:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    2aae:	7e1a      	ldrb	r2, [r3, #24]
    2ab0:	0792      	lsls	r2, r2, #30
    2ab2:	d507      	bpl.n	2ac4 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2ab4:	2202      	movs	r2, #2
    2ab6:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    2ab8:	8b5b      	ldrh	r3, [r3, #26]
    2aba:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    2abc:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    2abe:	17db      	asrs	r3, r3, #31
    2ac0:	4018      	ands	r0, r3
}
    2ac2:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    2ac4:	8b5a      	ldrh	r2, [r3, #26]
    2ac6:	0752      	lsls	r2, r2, #29
    2ac8:	d506      	bpl.n	2ad8 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2aca:	6859      	ldr	r1, [r3, #4]
    2acc:	22c0      	movs	r2, #192	; 0xc0
    2ace:	0292      	lsls	r2, r2, #10
    2ad0:	430a      	orrs	r2, r1
    2ad2:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    2ad4:	2018      	movs	r0, #24
    2ad6:	e7f4      	b.n	2ac2 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    2ad8:	2000      	movs	r0, #0
    2ada:	e7f2      	b.n	2ac2 <_i2c_master_address_response+0x16>

00002adc <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    2adc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2ade:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    2ae0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    2ae2:	2401      	movs	r4, #1
    2ae4:	2502      	movs	r5, #2
    2ae6:	7e11      	ldrb	r1, [r2, #24]
    2ae8:	4221      	tst	r1, r4
    2aea:	d10b      	bne.n	2b04 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    2aec:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    2aee:	4229      	tst	r1, r5
    2af0:	d106      	bne.n	2b00 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    2af2:	3301      	adds	r3, #1
    2af4:	b29b      	uxth	r3, r3
    2af6:	8901      	ldrh	r1, [r0, #8]
    2af8:	4299      	cmp	r1, r3
    2afa:	d8f4      	bhi.n	2ae6 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    2afc:	2012      	movs	r0, #18
    2afe:	e002      	b.n	2b06 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    2b00:	2000      	movs	r0, #0
    2b02:	e000      	b.n	2b06 <_i2c_master_wait_for_bus+0x2a>
    2b04:	2000      	movs	r0, #0
}
    2b06:	bd30      	pop	{r4, r5, pc}

00002b08 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    2b08:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2b0a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2b0c:	6862      	ldr	r2, [r4, #4]
    2b0e:	2380      	movs	r3, #128	; 0x80
    2b10:	02db      	lsls	r3, r3, #11
    2b12:	4313      	orrs	r3, r2
    2b14:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    2b16:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    2b18:	4b02      	ldr	r3, [pc, #8]	; (2b24 <_i2c_master_send_hs_master_code+0x1c>)
    2b1a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    2b1c:	2301      	movs	r3, #1
    2b1e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    2b20:	bd10      	pop	{r4, pc}
    2b22:	46c0      	nop			; (mov r8, r8)
    2b24:	00002add 	.word	0x00002add

00002b28 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b2a:	46de      	mov	lr, fp
    2b2c:	4657      	mov	r7, sl
    2b2e:	464e      	mov	r6, r9
    2b30:	4645      	mov	r5, r8
    2b32:	b5e0      	push	{r5, r6, r7, lr}
    2b34:	b083      	sub	sp, #12
    2b36:	0006      	movs	r6, r0
    2b38:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2b3a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    2b3c:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    2b3e:	682b      	ldr	r3, [r5, #0]
    2b40:	011b      	lsls	r3, r3, #4
    2b42:	0fdb      	lsrs	r3, r3, #31
    2b44:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    2b46:	7a4b      	ldrb	r3, [r1, #9]
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d12b      	bne.n	2ba4 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2b4c:	686b      	ldr	r3, [r5, #4]
    2b4e:	4a58      	ldr	r2, [pc, #352]	; (2cb0 <_i2c_master_read_packet+0x188>)
    2b50:	4013      	ands	r3, r2
    2b52:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    2b54:	464b      	mov	r3, r9
    2b56:	7a1b      	ldrb	r3, [r3, #8]
    2b58:	2b00      	cmp	r3, #0
    2b5a:	d127      	bne.n	2bac <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    2b5c:	464b      	mov	r3, r9
    2b5e:	881b      	ldrh	r3, [r3, #0]
    2b60:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    2b62:	464a      	mov	r2, r9
    2b64:	7a52      	ldrb	r2, [r2, #9]
    2b66:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    2b68:	4313      	orrs	r3, r2
    2b6a:	2201      	movs	r2, #1
    2b6c:	4313      	orrs	r3, r2
    2b6e:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    2b70:	0030      	movs	r0, r6
    2b72:	4b50      	ldr	r3, [pc, #320]	; (2cb4 <_i2c_master_read_packet+0x18c>)
    2b74:	4798      	blx	r3
    2b76:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    2b78:	4653      	mov	r3, sl
    2b7a:	2b00      	cmp	r3, #0
    2b7c:	d003      	beq.n	2b86 <_i2c_master_read_packet+0x5e>
    2b7e:	464b      	mov	r3, r9
    2b80:	885b      	ldrh	r3, [r3, #2]
    2b82:	2b01      	cmp	r3, #1
    2b84:	d03b      	beq.n	2bfe <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    2b86:	686b      	ldr	r3, [r5, #4]
    2b88:	4a49      	ldr	r2, [pc, #292]	; (2cb0 <_i2c_master_read_packet+0x188>)
    2b8a:	4013      	ands	r3, r2
    2b8c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    2b8e:	9b01      	ldr	r3, [sp, #4]
    2b90:	2b00      	cmp	r3, #0
    2b92:	d03a      	beq.n	2c0a <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    2b94:	9801      	ldr	r0, [sp, #4]
    2b96:	b003      	add	sp, #12
    2b98:	bc3c      	pop	{r2, r3, r4, r5}
    2b9a:	4690      	mov	r8, r2
    2b9c:	4699      	mov	r9, r3
    2b9e:	46a2      	mov	sl, r4
    2ba0:	46ab      	mov	fp, r5
    2ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    2ba4:	7a89      	ldrb	r1, [r1, #10]
    2ba6:	4b44      	ldr	r3, [pc, #272]	; (2cb8 <_i2c_master_read_packet+0x190>)
    2ba8:	4798      	blx	r3
    2baa:	e7cf      	b.n	2b4c <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    2bac:	464b      	mov	r3, r9
    2bae:	881b      	ldrh	r3, [r3, #0]
    2bb0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2bb2:	464a      	mov	r2, r9
    2bb4:	7a52      	ldrb	r2, [r2, #9]
    2bb6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    2bb8:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2bba:	2280      	movs	r2, #128	; 0x80
    2bbc:	0212      	lsls	r2, r2, #8
    2bbe:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    2bc0:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    2bc2:	0030      	movs	r0, r6
    2bc4:	4b3b      	ldr	r3, [pc, #236]	; (2cb4 <_i2c_master_read_packet+0x18c>)
    2bc6:	4798      	blx	r3
    2bc8:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2bca:	686b      	ldr	r3, [r5, #4]
    2bcc:	4a38      	ldr	r2, [pc, #224]	; (2cb0 <_i2c_master_read_packet+0x188>)
    2bce:	4013      	ands	r3, r2
    2bd0:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    2bd2:	2800      	cmp	r0, #0
    2bd4:	d1de      	bne.n	2b94 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    2bd6:	0030      	movs	r0, r6
    2bd8:	4b38      	ldr	r3, [pc, #224]	; (2cbc <_i2c_master_read_packet+0x194>)
    2bda:	4798      	blx	r3
    2bdc:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    2bde:	2800      	cmp	r0, #0
    2be0:	d1d8      	bne.n	2b94 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    2be2:	464b      	mov	r3, r9
    2be4:	881b      	ldrh	r3, [r3, #0]
    2be6:	0a1b      	lsrs	r3, r3, #8
    2be8:	2278      	movs	r2, #120	; 0x78
    2bea:	4313      	orrs	r3, r2
    2bec:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2bee:	464a      	mov	r2, r9
    2bf0:	7a52      	ldrb	r2, [r2, #9]
    2bf2:	0392      	lsls	r2, r2, #14
    2bf4:	2101      	movs	r1, #1
    2bf6:	430a      	orrs	r2, r1
    2bf8:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    2bfa:	626b      	str	r3, [r5, #36]	; 0x24
    2bfc:	e7b8      	b.n	2b70 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2bfe:	686a      	ldr	r2, [r5, #4]
    2c00:	2380      	movs	r3, #128	; 0x80
    2c02:	02db      	lsls	r3, r3, #11
    2c04:	4313      	orrs	r3, r2
    2c06:	606b      	str	r3, [r5, #4]
    2c08:	e7c1      	b.n	2b8e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    2c0a:	0030      	movs	r0, r6
    2c0c:	4b2b      	ldr	r3, [pc, #172]	; (2cbc <_i2c_master_read_packet+0x194>)
    2c0e:	4798      	blx	r3
    2c10:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    2c12:	2800      	cmp	r0, #0
    2c14:	d1be      	bne.n	2b94 <_i2c_master_read_packet+0x6c>
    2c16:	3c01      	subs	r4, #1
    2c18:	b2a4      	uxth	r4, r4
    2c1a:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    2c1c:	4b28      	ldr	r3, [pc, #160]	; (2cc0 <_i2c_master_read_packet+0x198>)
    2c1e:	469b      	mov	fp, r3
    2c20:	e015      	b.n	2c4e <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    2c22:	2c01      	cmp	r4, #1
    2c24:	d020      	beq.n	2c68 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    2c26:	0030      	movs	r0, r6
    2c28:	4b26      	ldr	r3, [pc, #152]	; (2cc4 <_i2c_master_read_packet+0x19c>)
    2c2a:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    2c2c:	4643      	mov	r3, r8
    2c2e:	1c5f      	adds	r7, r3, #1
    2c30:	b2bf      	uxth	r7, r7
    2c32:	2328      	movs	r3, #40	; 0x28
    2c34:	5ceb      	ldrb	r3, [r5, r3]
    2c36:	464a      	mov	r2, r9
    2c38:	6852      	ldr	r2, [r2, #4]
    2c3a:	4641      	mov	r1, r8
    2c3c:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    2c3e:	0030      	movs	r0, r6
    2c40:	4b1c      	ldr	r3, [pc, #112]	; (2cb4 <_i2c_master_read_packet+0x18c>)
    2c42:	4798      	blx	r3
    2c44:	3c01      	subs	r4, #1
    2c46:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    2c48:	2800      	cmp	r0, #0
    2c4a:	d115      	bne.n	2c78 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    2c4c:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    2c4e:	455c      	cmp	r4, fp
    2c50:	d014      	beq.n	2c7c <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    2c52:	8b6b      	ldrh	r3, [r5, #26]
    2c54:	069b      	lsls	r3, r3, #26
    2c56:	d527      	bpl.n	2ca8 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    2c58:	7af3      	ldrb	r3, [r6, #11]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d0e3      	beq.n	2c26 <_i2c_master_read_packet+0xfe>
    2c5e:	4653      	mov	r3, sl
    2c60:	2b00      	cmp	r3, #0
    2c62:	d1de      	bne.n	2c22 <_i2c_master_read_packet+0xfa>
    2c64:	2c00      	cmp	r4, #0
    2c66:	d1de      	bne.n	2c26 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2c68:	686a      	ldr	r2, [r5, #4]
    2c6a:	2380      	movs	r3, #128	; 0x80
    2c6c:	02db      	lsls	r3, r3, #11
    2c6e:	4313      	orrs	r3, r2
    2c70:	606b      	str	r3, [r5, #4]
    2c72:	3c01      	subs	r4, #1
    2c74:	b2a4      	uxth	r4, r4
    2c76:	e7ea      	b.n	2c4e <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    2c78:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    2c7a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    2c7c:	7ab3      	ldrb	r3, [r6, #10]
    2c7e:	2b00      	cmp	r3, #0
    2c80:	d109      	bne.n	2c96 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    2c82:	0030      	movs	r0, r6
    2c84:	4b0f      	ldr	r3, [pc, #60]	; (2cc4 <_i2c_master_read_packet+0x19c>)
    2c86:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    2c88:	2328      	movs	r3, #40	; 0x28
    2c8a:	5cea      	ldrb	r2, [r5, r3]
    2c8c:	464b      	mov	r3, r9
    2c8e:	685b      	ldr	r3, [r3, #4]
    2c90:	4641      	mov	r1, r8
    2c92:	545a      	strb	r2, [r3, r1]
    2c94:	e77e      	b.n	2b94 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    2c96:	0030      	movs	r0, r6
    2c98:	4b0a      	ldr	r3, [pc, #40]	; (2cc4 <_i2c_master_read_packet+0x19c>)
    2c9a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2c9c:	686a      	ldr	r2, [r5, #4]
    2c9e:	23c0      	movs	r3, #192	; 0xc0
    2ca0:	029b      	lsls	r3, r3, #10
    2ca2:	4313      	orrs	r3, r2
    2ca4:	606b      	str	r3, [r5, #4]
    2ca6:	e7ec      	b.n	2c82 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    2ca8:	2341      	movs	r3, #65	; 0x41
    2caa:	9301      	str	r3, [sp, #4]
    2cac:	e772      	b.n	2b94 <_i2c_master_read_packet+0x6c>
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	fffbffff 	.word	0xfffbffff
    2cb4:	00002add 	.word	0x00002add
    2cb8:	00002b09 	.word	0x00002b09
    2cbc:	00002aad 	.word	0x00002aad
    2cc0:	0000ffff 	.word	0x0000ffff
    2cc4:	000027ad 	.word	0x000027ad

00002cc8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cca:	46de      	mov	lr, fp
    2ccc:	4657      	mov	r7, sl
    2cce:	464e      	mov	r6, r9
    2cd0:	4645      	mov	r5, r8
    2cd2:	b5e0      	push	{r5, r6, r7, lr}
    2cd4:	b083      	sub	sp, #12
    2cd6:	0006      	movs	r6, r0
    2cd8:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2cda:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    2cdc:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    2cde:	4b32      	ldr	r3, [pc, #200]	; (2da8 <_i2c_master_write_packet+0xe0>)
    2ce0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    2ce2:	7a7b      	ldrb	r3, [r7, #9]
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	d11d      	bne.n	2d24 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2ce8:	686b      	ldr	r3, [r5, #4]
    2cea:	4a30      	ldr	r2, [pc, #192]	; (2dac <_i2c_master_write_packet+0xe4>)
    2cec:	4013      	ands	r3, r2
    2cee:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    2cf0:	7a3b      	ldrb	r3, [r7, #8]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d01b      	beq.n	2d2e <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2cf6:	883b      	ldrh	r3, [r7, #0]
    2cf8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2cfa:	7a7a      	ldrb	r2, [r7, #9]
    2cfc:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2cfe:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2d00:	2280      	movs	r2, #128	; 0x80
    2d02:	0212      	lsls	r2, r2, #8
    2d04:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2d06:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    2d08:	0030      	movs	r0, r6
    2d0a:	4b29      	ldr	r3, [pc, #164]	; (2db0 <_i2c_master_write_packet+0xe8>)
    2d0c:	4798      	blx	r3
    2d0e:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    2d10:	2800      	cmp	r0, #0
    2d12:	d013      	beq.n	2d3c <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    2d14:	9801      	ldr	r0, [sp, #4]
    2d16:	b003      	add	sp, #12
    2d18:	bc3c      	pop	{r2, r3, r4, r5}
    2d1a:	4690      	mov	r8, r2
    2d1c:	4699      	mov	r9, r3
    2d1e:	46a2      	mov	sl, r4
    2d20:	46ab      	mov	fp, r5
    2d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    2d24:	7ab9      	ldrb	r1, [r7, #10]
    2d26:	0030      	movs	r0, r6
    2d28:	4b22      	ldr	r3, [pc, #136]	; (2db4 <_i2c_master_write_packet+0xec>)
    2d2a:	4798      	blx	r3
    2d2c:	e7dc      	b.n	2ce8 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2d2e:	883b      	ldrh	r3, [r7, #0]
    2d30:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    2d32:	7a7a      	ldrb	r2, [r7, #9]
    2d34:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2d36:	4313      	orrs	r3, r2
    2d38:	626b      	str	r3, [r5, #36]	; 0x24
    2d3a:	e7e5      	b.n	2d08 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    2d3c:	0030      	movs	r0, r6
    2d3e:	4b1e      	ldr	r3, [pc, #120]	; (2db8 <_i2c_master_write_packet+0xf0>)
    2d40:	4798      	blx	r3
    2d42:	1e03      	subs	r3, r0, #0
    2d44:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    2d46:	d1e5      	bne.n	2d14 <_i2c_master_write_packet+0x4c>
    2d48:	46a0      	mov	r8, r4
    2d4a:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    2d4c:	3320      	adds	r3, #32
    2d4e:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    2d50:	4b15      	ldr	r3, [pc, #84]	; (2da8 <_i2c_master_write_packet+0xe0>)
    2d52:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    2d54:	4b16      	ldr	r3, [pc, #88]	; (2db0 <_i2c_master_write_packet+0xe8>)
    2d56:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    2d58:	4544      	cmp	r4, r8
    2d5a:	d015      	beq.n	2d88 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    2d5c:	8b6b      	ldrh	r3, [r5, #26]
    2d5e:	464a      	mov	r2, r9
    2d60:	4213      	tst	r3, r2
    2d62:	d01d      	beq.n	2da0 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    2d64:	0030      	movs	r0, r6
    2d66:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	5d1a      	ldrb	r2, [r3, r4]
    2d6c:	2328      	movs	r3, #40	; 0x28
    2d6e:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    2d70:	0030      	movs	r0, r6
    2d72:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    2d74:	2800      	cmp	r0, #0
    2d76:	d106      	bne.n	2d86 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    2d78:	8b6b      	ldrh	r3, [r5, #26]
    2d7a:	3401      	adds	r4, #1
    2d7c:	075b      	lsls	r3, r3, #29
    2d7e:	d5eb      	bpl.n	2d58 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    2d80:	231e      	movs	r3, #30
    2d82:	9301      	str	r3, [sp, #4]
    2d84:	e000      	b.n	2d88 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    2d86:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    2d88:	7ab3      	ldrb	r3, [r6, #10]
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d0c2      	beq.n	2d14 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    2d8e:	0030      	movs	r0, r6
    2d90:	4b05      	ldr	r3, [pc, #20]	; (2da8 <_i2c_master_write_packet+0xe0>)
    2d92:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2d94:	686a      	ldr	r2, [r5, #4]
    2d96:	23c0      	movs	r3, #192	; 0xc0
    2d98:	029b      	lsls	r3, r3, #10
    2d9a:	4313      	orrs	r3, r2
    2d9c:	606b      	str	r3, [r5, #4]
    2d9e:	e7b9      	b.n	2d14 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    2da0:	2341      	movs	r3, #65	; 0x41
    2da2:	9301      	str	r3, [sp, #4]
    2da4:	e7b6      	b.n	2d14 <_i2c_master_write_packet+0x4c>
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	000027ad 	.word	0x000027ad
    2dac:	fffbffff 	.word	0xfffbffff
    2db0:	00002add 	.word	0x00002add
    2db4:	00002b09 	.word	0x00002b09
    2db8:	00002aad 	.word	0x00002aad

00002dbc <i2c_master_read_packet_wait>:
{
    2dbc:	b510      	push	{r4, lr}
	module->send_stop = true;
    2dbe:	2301      	movs	r3, #1
    2dc0:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    2dc2:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    2dc4:	4b01      	ldr	r3, [pc, #4]	; (2dcc <i2c_master_read_packet_wait+0x10>)
    2dc6:	4798      	blx	r3
}
    2dc8:	bd10      	pop	{r4, pc}
    2dca:	46c0      	nop			; (mov r8, r8)
    2dcc:	00002b29 	.word	0x00002b29

00002dd0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2dd0:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    2dd2:	2301      	movs	r3, #1
    2dd4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    2dd6:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    2dd8:	4b01      	ldr	r3, [pc, #4]	; (2de0 <i2c_master_write_packet_wait+0x10>)
    2dda:	4798      	blx	r3
}
    2ddc:	bd10      	pop	{r4, pc}
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	00002cc9 	.word	0x00002cc9

00002de4 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2de4:	b530      	push	{r4, r5, lr}
    2de6:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2de8:	aa01      	add	r2, sp, #4
    2dea:	4b0b      	ldr	r3, [pc, #44]	; (2e18 <_tc_get_inst_index+0x34>)
    2dec:	cb32      	ldmia	r3!, {r1, r4, r5}
    2dee:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    2df0:	9b01      	ldr	r3, [sp, #4]
    2df2:	4298      	cmp	r0, r3
    2df4:	d00d      	beq.n	2e12 <_tc_get_inst_index+0x2e>
    2df6:	9b02      	ldr	r3, [sp, #8]
    2df8:	4298      	cmp	r0, r3
    2dfa:	d008      	beq.n	2e0e <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2dfc:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    2dfe:	9a03      	ldr	r2, [sp, #12]
    2e00:	4282      	cmp	r2, r0
    2e02:	d002      	beq.n	2e0a <_tc_get_inst_index+0x26>
}
    2e04:	0018      	movs	r0, r3
    2e06:	b005      	add	sp, #20
    2e08:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2e0a:	3302      	adds	r3, #2
    2e0c:	e002      	b.n	2e14 <_tc_get_inst_index+0x30>
    2e0e:	2301      	movs	r3, #1
    2e10:	e000      	b.n	2e14 <_tc_get_inst_index+0x30>
    2e12:	2300      	movs	r3, #0
			return i;
    2e14:	b2db      	uxtb	r3, r3
    2e16:	e7f5      	b.n	2e04 <_tc_get_inst_index+0x20>
    2e18:	0000ee28 	.word	0x0000ee28

00002e1c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e1e:	b087      	sub	sp, #28
    2e20:	0004      	movs	r4, r0
    2e22:	000d      	movs	r5, r1
    2e24:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2e26:	0008      	movs	r0, r1
    2e28:	4b85      	ldr	r3, [pc, #532]	; (3040 <tc_init+0x224>)
    2e2a:	4798      	blx	r3
    2e2c:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2e2e:	ab05      	add	r3, sp, #20
    2e30:	221b      	movs	r2, #27
    2e32:	701a      	strb	r2, [r3, #0]
    2e34:	3201      	adds	r2, #1
    2e36:	705a      	strb	r2, [r3, #1]
    2e38:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2e3a:	ab03      	add	r3, sp, #12
    2e3c:	2280      	movs	r2, #128	; 0x80
    2e3e:	0112      	lsls	r2, r2, #4
    2e40:	801a      	strh	r2, [r3, #0]
    2e42:	2280      	movs	r2, #128	; 0x80
    2e44:	0152      	lsls	r2, r2, #5
    2e46:	805a      	strh	r2, [r3, #2]
    2e48:	2280      	movs	r2, #128	; 0x80
    2e4a:	0192      	lsls	r2, r2, #6
    2e4c:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2e4e:	2300      	movs	r3, #0
    2e50:	60a3      	str	r3, [r4, #8]
    2e52:	60e3      	str	r3, [r4, #12]
    2e54:	6123      	str	r3, [r4, #16]
    2e56:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2e58:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2e5a:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2e5c:	0082      	lsls	r2, r0, #2
    2e5e:	4b79      	ldr	r3, [pc, #484]	; (3044 <tc_init+0x228>)
    2e60:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2e62:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2e64:	78b3      	ldrb	r3, [r6, #2]
    2e66:	2b08      	cmp	r3, #8
    2e68:	d006      	beq.n	2e78 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2e6a:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2e6c:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2e6e:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2e70:	07db      	lsls	r3, r3, #31
    2e72:	d505      	bpl.n	2e80 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2e74:	b007      	add	sp, #28
    2e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    2e78:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2e7a:	07fa      	lsls	r2, r7, #31
    2e7c:	d5fa      	bpl.n	2e74 <tc_init+0x58>
    2e7e:	e7f4      	b.n	2e6a <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2e80:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    2e82:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2e84:	06db      	lsls	r3, r3, #27
    2e86:	d4f5      	bmi.n	2e74 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2e88:	882b      	ldrh	r3, [r5, #0]
    2e8a:	079b      	lsls	r3, r3, #30
    2e8c:	d4f2      	bmi.n	2e74 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    2e8e:	7c33      	ldrb	r3, [r6, #16]
    2e90:	2b00      	cmp	r3, #0
    2e92:	d179      	bne.n	2f88 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    2e94:	7f33      	ldrb	r3, [r6, #28]
    2e96:	2b00      	cmp	r3, #0
    2e98:	d000      	beq.n	2e9c <tc_init+0x80>
    2e9a:	e081      	b.n	2fa0 <tc_init+0x184>
    2e9c:	496a      	ldr	r1, [pc, #424]	; (3048 <tc_init+0x22c>)
    2e9e:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    2ea0:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2ea2:	ab03      	add	r3, sp, #12
    2ea4:	5ad3      	ldrh	r3, [r2, r3]
    2ea6:	4303      	orrs	r3, r0
    2ea8:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    2eaa:	78b3      	ldrb	r3, [r6, #2]
    2eac:	2b08      	cmp	r3, #8
    2eae:	d100      	bne.n	2eb2 <tc_init+0x96>
    2eb0:	e086      	b.n	2fc0 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    2eb2:	a901      	add	r1, sp, #4
    2eb4:	7833      	ldrb	r3, [r6, #0]
    2eb6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2eb8:	ab05      	add	r3, sp, #20
    2eba:	5ddf      	ldrb	r7, [r3, r7]
    2ebc:	0038      	movs	r0, r7
    2ebe:	4b63      	ldr	r3, [pc, #396]	; (304c <tc_init+0x230>)
    2ec0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2ec2:	0038      	movs	r0, r7
    2ec4:	4b62      	ldr	r3, [pc, #392]	; (3050 <tc_init+0x234>)
    2ec6:	4798      	blx	r3
	ctrla_tmp =
    2ec8:	8931      	ldrh	r1, [r6, #8]
    2eca:	88b3      	ldrh	r3, [r6, #4]
    2ecc:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    2ece:	78b1      	ldrb	r1, [r6, #2]
    2ed0:	79b2      	ldrb	r2, [r6, #6]
    2ed2:	4311      	orrs	r1, r2
	ctrla_tmp =
    2ed4:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    2ed6:	7873      	ldrb	r3, [r6, #1]
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d002      	beq.n	2ee2 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2edc:	2380      	movs	r3, #128	; 0x80
    2ede:	011b      	lsls	r3, r3, #4
    2ee0:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2ee2:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2ee4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2ee6:	b25b      	sxtb	r3, r3
    2ee8:	2b00      	cmp	r3, #0
    2eea:	dbfb      	blt.n	2ee4 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2eec:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    2eee:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    2ef0:	1e4b      	subs	r3, r1, #1
    2ef2:	4199      	sbcs	r1, r3
    2ef4:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    2ef6:	7bb3      	ldrb	r3, [r6, #14]
    2ef8:	2b00      	cmp	r3, #0
    2efa:	d001      	beq.n	2f00 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2efc:	2301      	movs	r3, #1
    2efe:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2f00:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f02:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2f04:	b25b      	sxtb	r3, r3
    2f06:	2b00      	cmp	r3, #0
    2f08:	dbfb      	blt.n	2f02 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    2f0a:	23ff      	movs	r3, #255	; 0xff
    2f0c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    2f0e:	2900      	cmp	r1, #0
    2f10:	d005      	beq.n	2f1e <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2f12:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f14:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    2f16:	b25b      	sxtb	r3, r3
    2f18:	2b00      	cmp	r3, #0
    2f1a:	dbfb      	blt.n	2f14 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    2f1c:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    2f1e:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    2f20:	7af3      	ldrb	r3, [r6, #11]
    2f22:	2b00      	cmp	r3, #0
    2f24:	d001      	beq.n	2f2a <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2f26:	2310      	movs	r3, #16
    2f28:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    2f2a:	7b33      	ldrb	r3, [r6, #12]
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	d001      	beq.n	2f34 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2f30:	2320      	movs	r3, #32
    2f32:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2f34:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f36:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2f38:	b25b      	sxtb	r3, r3
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	dbfb      	blt.n	2f36 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2f3e:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2f40:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f42:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2f44:	b25b      	sxtb	r3, r3
    2f46:	2b00      	cmp	r3, #0
    2f48:	dbfb      	blt.n	2f42 <tc_init+0x126>
	switch (module_inst->counter_size) {
    2f4a:	7923      	ldrb	r3, [r4, #4]
    2f4c:	2b04      	cmp	r3, #4
    2f4e:	d03f      	beq.n	2fd0 <tc_init+0x1b4>
    2f50:	2b08      	cmp	r3, #8
    2f52:	d05e      	beq.n	3012 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    2f54:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2f56:	2b00      	cmp	r3, #0
    2f58:	d000      	beq.n	2f5c <tc_init+0x140>
    2f5a:	e78b      	b.n	2e74 <tc_init+0x58>
    2f5c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2f5e:	b25b      	sxtb	r3, r3
    2f60:	2b00      	cmp	r3, #0
    2f62:	dbfb      	blt.n	2f5c <tc_init+0x140>
				= config->counter_16_bit.value;
    2f64:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2f66:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2f68:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f6a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2f6c:	b25b      	sxtb	r3, r3
    2f6e:	2b00      	cmp	r3, #0
    2f70:	dbfb      	blt.n	2f6a <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    2f72:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2f74:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2f76:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f78:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2f7a:	b25b      	sxtb	r3, r3
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	dbfb      	blt.n	2f78 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    2f80:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    2f82:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    2f84:	2000      	movs	r0, #0
    2f86:	e775      	b.n	2e74 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2f88:	a902      	add	r1, sp, #8
    2f8a:	2301      	movs	r3, #1
    2f8c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2f8e:	2200      	movs	r2, #0
    2f90:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2f92:	7e32      	ldrb	r2, [r6, #24]
    2f94:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2f96:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2f98:	7d30      	ldrb	r0, [r6, #20]
    2f9a:	4b2e      	ldr	r3, [pc, #184]	; (3054 <tc_init+0x238>)
    2f9c:	4798      	blx	r3
    2f9e:	e779      	b.n	2e94 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2fa0:	a902      	add	r1, sp, #8
    2fa2:	2301      	movs	r3, #1
    2fa4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2fa6:	2200      	movs	r2, #0
    2fa8:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2faa:	3224      	adds	r2, #36	; 0x24
    2fac:	18b2      	adds	r2, r6, r2
    2fae:	7812      	ldrb	r2, [r2, #0]
    2fb0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2fb2:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2fb4:	331f      	adds	r3, #31
    2fb6:	18f3      	adds	r3, r6, r3
    2fb8:	7818      	ldrb	r0, [r3, #0]
    2fba:	4b26      	ldr	r3, [pc, #152]	; (3054 <tc_init+0x238>)
    2fbc:	4798      	blx	r3
    2fbe:	e76d      	b.n	2e9c <tc_init+0x80>
    2fc0:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    2fc2:	1c7a      	adds	r2, r7, #1
    2fc4:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2fc6:	ab03      	add	r3, sp, #12
    2fc8:	5ad3      	ldrh	r3, [r2, r3]
    2fca:	4303      	orrs	r3, r0
    2fcc:	620b      	str	r3, [r1, #32]
    2fce:	e770      	b.n	2eb2 <tc_init+0x96>
    2fd0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2fd2:	b25b      	sxtb	r3, r3
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	dbfb      	blt.n	2fd0 <tc_init+0x1b4>
					config->counter_8_bit.value;
    2fd8:	2328      	movs	r3, #40	; 0x28
    2fda:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    2fdc:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2fde:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2fe0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2fe2:	b25b      	sxtb	r3, r3
    2fe4:	2b00      	cmp	r3, #0
    2fe6:	dbfb      	blt.n	2fe0 <tc_init+0x1c4>
					config->counter_8_bit.period;
    2fe8:	2329      	movs	r3, #41	; 0x29
    2fea:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    2fec:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2fee:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2ff0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2ff2:	b25b      	sxtb	r3, r3
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	dbfb      	blt.n	2ff0 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    2ff8:	232a      	movs	r3, #42	; 0x2a
    2ffa:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    2ffc:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2ffe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3000:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    3002:	b25b      	sxtb	r3, r3
    3004:	2b00      	cmp	r3, #0
    3006:	dbfb      	blt.n	3000 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    3008:	232b      	movs	r3, #43	; 0x2b
    300a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    300c:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    300e:	2000      	movs	r0, #0
    3010:	e730      	b.n	2e74 <tc_init+0x58>
    3012:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    3014:	b25b      	sxtb	r3, r3
    3016:	2b00      	cmp	r3, #0
    3018:	dbfb      	blt.n	3012 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    301a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    301c:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    301e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3020:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    3022:	b25b      	sxtb	r3, r3
    3024:	2b00      	cmp	r3, #0
    3026:	dbfb      	blt.n	3020 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    3028:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    302a:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    302c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    302e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    3030:	b25b      	sxtb	r3, r3
    3032:	2b00      	cmp	r3, #0
    3034:	dbfb      	blt.n	302e <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    3036:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    3038:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    303a:	2000      	movs	r0, #0
    303c:	e71a      	b.n	2e74 <tc_init+0x58>
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	00002de5 	.word	0x00002de5
    3044:	200014f0 	.word	0x200014f0
    3048:	40000400 	.word	0x40000400
    304c:	00008d35 	.word	0x00008d35
    3050:	00008ca9 	.word	0x00008ca9
    3054:	00008e2d 	.word	0x00008e2d

00003058 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3058:	b5f0      	push	{r4, r5, r6, r7, lr}
    305a:	46de      	mov	lr, fp
    305c:	4657      	mov	r7, sl
    305e:	464e      	mov	r6, r9
    3060:	4645      	mov	r5, r8
    3062:	b5e0      	push	{r5, r6, r7, lr}
    3064:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    3066:	4bc4      	ldr	r3, [pc, #784]	; (3378 <USB_Handler+0x320>)
    3068:	681f      	ldr	r7, [r3, #0]
    306a:	683d      	ldr	r5, [r7, #0]
    306c:	782b      	ldrb	r3, [r5, #0]
    306e:	09db      	lsrs	r3, r3, #7
    3070:	d114      	bne.n	309c <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    3072:	8c2e      	ldrh	r6, [r5, #32]
    3074:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    3076:	2e00      	cmp	r6, #0
    3078:	d000      	beq.n	307c <USB_Handler+0x24>
    307a:	e22d      	b.n	34d8 <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    307c:	8bae      	ldrh	r6, [r5, #28]
    307e:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    3080:	23ab      	movs	r3, #171	; 0xab
    3082:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    3084:	5afb      	ldrh	r3, [r7, r3]
    3086:	22aa      	movs	r2, #170	; 0xaa
    3088:	0052      	lsls	r2, r2, #1
    308a:	5abd      	ldrh	r5, [r7, r2]
    308c:	401d      	ands	r5, r3
    308e:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3090:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    3092:	4fba      	ldr	r7, [pc, #744]	; (337c <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3094:	4bb8      	ldr	r3, [pc, #736]	; (3378 <USB_Handler+0x320>)
    3096:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3098:	4698      	mov	r8, r3
    309a:	e208      	b.n	34ae <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    309c:	8c2b      	ldrh	r3, [r5, #32]
    309e:	b29b      	uxth	r3, r3
    30a0:	2b00      	cmp	r3, #0
    30a2:	d100      	bne.n	30a6 <USB_Handler+0x4e>
    30a4:	e13d      	b.n	3322 <USB_Handler+0x2ca>
    30a6:	8c28      	ldrh	r0, [r5, #32]
    30a8:	b280      	uxth	r0, r0
    30aa:	4bb5      	ldr	r3, [pc, #724]	; (3380 <USB_Handler+0x328>)
    30ac:	4798      	blx	r3
    30ae:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    30b0:	281f      	cmp	r0, #31
    30b2:	d900      	bls.n	30b6 <USB_Handler+0x5e>
    30b4:	e135      	b.n	3322 <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    30b6:	0003      	movs	r3, r0
    30b8:	3308      	adds	r3, #8
    30ba:	015b      	lsls	r3, r3, #5
    30bc:	18ed      	adds	r5, r5, r3
    30be:	79ed      	ldrb	r5, [r5, #7]
    30c0:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    30c2:	07ab      	lsls	r3, r5, #30
    30c4:	d041      	beq.n	314a <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    30c6:	4aaf      	ldr	r2, [pc, #700]	; (3384 <USB_Handler+0x32c>)
    30c8:	2301      	movs	r3, #1
    30ca:	4083      	lsls	r3, r0
    30cc:	6811      	ldr	r1, [r2, #0]
    30ce:	4399      	bics	r1, r3
    30d0:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    30d2:	0003      	movs	r3, r0
    30d4:	3308      	adds	r3, #8
    30d6:	015b      	lsls	r3, r3, #5
    30d8:	683a      	ldr	r2, [r7, #0]
    30da:	4694      	mov	ip, r2
    30dc:	4463      	add	r3, ip
    30de:	2203      	movs	r2, #3
    30e0:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    30e2:	183b      	adds	r3, r7, r0
    30e4:	33ae      	adds	r3, #174	; 0xae
    30e6:	781b      	ldrb	r3, [r3, #0]
    30e8:	07db      	lsls	r3, r3, #31
    30ea:	d52e      	bpl.n	314a <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    30ec:	4ba6      	ldr	r3, [pc, #664]	; (3388 <USB_Handler+0x330>)
    30ee:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    30f0:	683a      	ldr	r2, [r7, #0]
    30f2:	0003      	movs	r3, r0
    30f4:	3308      	adds	r3, #8
    30f6:	015b      	lsls	r3, r3, #5
    30f8:	5c9b      	ldrb	r3, [r3, r2]
    30fa:	079b      	lsls	r3, r3, #30
    30fc:	0f9b      	lsrs	r3, r3, #30
    30fe:	2b01      	cmp	r3, #1
    3100:	d100      	bne.n	3104 <USB_Handler+0xac>
    3102:	e094      	b.n	322e <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3104:	0142      	lsls	r2, r0, #5
    3106:	4ba1      	ldr	r3, [pc, #644]	; (338c <USB_Handler+0x334>)
    3108:	189b      	adds	r3, r3, r2
    310a:	685a      	ldr	r2, [r3, #4]
    310c:	0112      	lsls	r2, r2, #4
    310e:	0c92      	lsrs	r2, r2, #18
    3110:	b290      	uxth	r0, r2
    3112:	499d      	ldr	r1, [pc, #628]	; (3388 <USB_Handler+0x330>)
    3114:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3116:	685a      	ldr	r2, [r3, #4]
    3118:	0492      	lsls	r2, r2, #18
    311a:	0c92      	lsrs	r2, r2, #18
    311c:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    311e:	685a      	ldr	r2, [r3, #4]
    3120:	499b      	ldr	r1, [pc, #620]	; (3390 <USB_Handler+0x338>)
    3122:	400a      	ands	r2, r1
    3124:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3126:	2800      	cmp	r0, #0
    3128:	d107      	bne.n	313a <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    312a:	0162      	lsls	r2, r4, #5
    312c:	4b97      	ldr	r3, [pc, #604]	; (338c <USB_Handler+0x334>)
    312e:	189b      	adds	r3, r3, r2
    3130:	685b      	ldr	r3, [r3, #4]
    3132:	049b      	lsls	r3, r3, #18
    3134:	0c9b      	lsrs	r3, r3, #18
    3136:	4a94      	ldr	r2, [pc, #592]	; (3388 <USB_Handler+0x330>)
    3138:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    313a:	4b8f      	ldr	r3, [pc, #572]	; (3378 <USB_Handler+0x320>)
    313c:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    313e:	1ca3      	adds	r3, r4, #2
    3140:	011b      	lsls	r3, r3, #4
    3142:	18c3      	adds	r3, r0, r3
    3144:	685b      	ldr	r3, [r3, #4]
    3146:	4990      	ldr	r1, [pc, #576]	; (3388 <USB_Handler+0x330>)
    3148:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    314a:	076b      	lsls	r3, r5, #29
    314c:	d51f      	bpl.n	318e <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    314e:	4b8a      	ldr	r3, [pc, #552]	; (3378 <USB_Handler+0x320>)
    3150:	6818      	ldr	r0, [r3, #0]
    3152:	6802      	ldr	r2, [r0, #0]
    3154:	0023      	movs	r3, r4
    3156:	3308      	adds	r3, #8
    3158:	015b      	lsls	r3, r3, #5
    315a:	5c9b      	ldrb	r3, [r3, r2]
    315c:	069b      	lsls	r3, r3, #26
    315e:	0f5b      	lsrs	r3, r3, #29
    3160:	2b02      	cmp	r3, #2
    3162:	d075      	beq.n	3250 <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    3164:	0023      	movs	r3, r4
    3166:	3308      	adds	r3, #8
    3168:	015b      	lsls	r3, r3, #5
    316a:	5c9b      	ldrb	r3, [r3, r2]
    316c:	069b      	lsls	r3, r3, #26
    316e:	0f5b      	lsrs	r3, r3, #29
    3170:	2b03      	cmp	r3, #3
    3172:	d100      	bne.n	3176 <USB_Handler+0x11e>
    3174:	e09e      	b.n	32b4 <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3176:	0162      	lsls	r2, r4, #5
    3178:	4b84      	ldr	r3, [pc, #528]	; (338c <USB_Handler+0x334>)
    317a:	189b      	adds	r3, r3, r2
    317c:	2200      	movs	r2, #0
    317e:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3180:	6803      	ldr	r3, [r0, #0]
    3182:	0022      	movs	r2, r4
    3184:	3208      	adds	r2, #8
    3186:	0152      	lsls	r2, r2, #5
    3188:	189b      	adds	r3, r3, r2
    318a:	2204      	movs	r2, #4
    318c:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    318e:	072b      	lsls	r3, r5, #28
    3190:	d515      	bpl.n	31be <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3192:	4a7c      	ldr	r2, [pc, #496]	; (3384 <USB_Handler+0x32c>)
    3194:	2301      	movs	r3, #1
    3196:	40a3      	lsls	r3, r4
    3198:	6811      	ldr	r1, [r2, #0]
    319a:	4399      	bics	r1, r3
    319c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    319e:	4b76      	ldr	r3, [pc, #472]	; (3378 <USB_Handler+0x320>)
    31a0:	6818      	ldr	r0, [r3, #0]
    31a2:	0023      	movs	r3, r4
    31a4:	3308      	adds	r3, #8
    31a6:	015b      	lsls	r3, r3, #5
    31a8:	6802      	ldr	r2, [r0, #0]
    31aa:	4694      	mov	ip, r2
    31ac:	4463      	add	r3, ip
    31ae:	2208      	movs	r2, #8
    31b0:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    31b2:	1903      	adds	r3, r0, r4
    31b4:	33ae      	adds	r3, #174	; 0xae
    31b6:	781b      	ldrb	r3, [r3, #0]
    31b8:	079b      	lsls	r3, r3, #30
    31ba:	d500      	bpl.n	31be <USB_Handler+0x166>
    31bc:	e094      	b.n	32e8 <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    31be:	06eb      	lsls	r3, r5, #27
    31c0:	d515      	bpl.n	31ee <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    31c2:	4a70      	ldr	r2, [pc, #448]	; (3384 <USB_Handler+0x32c>)
    31c4:	2301      	movs	r3, #1
    31c6:	40a3      	lsls	r3, r4
    31c8:	6811      	ldr	r1, [r2, #0]
    31ca:	4399      	bics	r1, r3
    31cc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    31ce:	4b6a      	ldr	r3, [pc, #424]	; (3378 <USB_Handler+0x320>)
    31d0:	6818      	ldr	r0, [r3, #0]
    31d2:	0023      	movs	r3, r4
    31d4:	3308      	adds	r3, #8
    31d6:	015b      	lsls	r3, r3, #5
    31d8:	6802      	ldr	r2, [r0, #0]
    31da:	4694      	mov	ip, r2
    31dc:	4463      	add	r3, ip
    31de:	2210      	movs	r2, #16
    31e0:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    31e2:	1903      	adds	r3, r0, r4
    31e4:	33ae      	adds	r3, #174	; 0xae
    31e6:	781b      	ldrb	r3, [r3, #0]
    31e8:	075b      	lsls	r3, r3, #29
    31ea:	d500      	bpl.n	31ee <USB_Handler+0x196>
    31ec:	e08a      	b.n	3304 <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    31ee:	06ab      	lsls	r3, r5, #26
    31f0:	d400      	bmi.n	31f4 <USB_Handler+0x19c>
    31f2:	e12f      	b.n	3454 <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    31f4:	4a63      	ldr	r2, [pc, #396]	; (3384 <USB_Handler+0x32c>)
    31f6:	2301      	movs	r3, #1
    31f8:	40a3      	lsls	r3, r4
    31fa:	6811      	ldr	r1, [r2, #0]
    31fc:	4399      	bics	r1, r3
    31fe:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3200:	4b5d      	ldr	r3, [pc, #372]	; (3378 <USB_Handler+0x320>)
    3202:	6818      	ldr	r0, [r3, #0]
    3204:	0023      	movs	r3, r4
    3206:	3308      	adds	r3, #8
    3208:	015b      	lsls	r3, r3, #5
    320a:	6802      	ldr	r2, [r0, #0]
    320c:	4694      	mov	ip, r2
    320e:	4463      	add	r3, ip
    3210:	2220      	movs	r2, #32
    3212:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3214:	1903      	adds	r3, r0, r4
    3216:	33ae      	adds	r3, #174	; 0xae
    3218:	781b      	ldrb	r3, [r3, #0]
    321a:	071b      	lsls	r3, r3, #28
    321c:	d400      	bmi.n	3220 <USB_Handler+0x1c8>
    321e:	e119      	b.n	3454 <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    3220:	4959      	ldr	r1, [pc, #356]	; (3388 <USB_Handler+0x330>)
    3222:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3224:	0124      	lsls	r4, r4, #4
    3226:	1904      	adds	r4, r0, r4
    3228:	6b23      	ldr	r3, [r4, #48]	; 0x30
    322a:	4798      	blx	r3
    322c:	e112      	b.n	3454 <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    322e:	0142      	lsls	r2, r0, #5
    3230:	4b56      	ldr	r3, [pc, #344]	; (338c <USB_Handler+0x334>)
    3232:	189b      	adds	r3, r3, r2
    3234:	685a      	ldr	r2, [r3, #4]
    3236:	0492      	lsls	r2, r2, #18
    3238:	0c92      	lsrs	r2, r2, #18
    323a:	4953      	ldr	r1, [pc, #332]	; (3388 <USB_Handler+0x330>)
    323c:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    323e:	685a      	ldr	r2, [r3, #4]
    3240:	0112      	lsls	r2, r2, #4
    3242:	0c92      	lsrs	r2, r2, #18
    3244:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3246:	685a      	ldr	r2, [r3, #4]
    3248:	0b92      	lsrs	r2, r2, #14
    324a:	0392      	lsls	r2, r2, #14
    324c:	605a      	str	r2, [r3, #4]
    324e:	e774      	b.n	313a <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3250:	0023      	movs	r3, r4
    3252:	3308      	adds	r3, #8
    3254:	015b      	lsls	r3, r3, #5
    3256:	5c9b      	ldrb	r3, [r3, r2]
    3258:	079b      	lsls	r3, r3, #30
    325a:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    325c:	2b01      	cmp	r3, #1
    325e:	d181      	bne.n	3164 <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    3260:	0161      	lsls	r1, r4, #5
    3262:	4b4a      	ldr	r3, [pc, #296]	; (338c <USB_Handler+0x334>)
    3264:	185b      	adds	r3, r3, r1
    3266:	3308      	adds	r3, #8
    3268:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    326a:	07db      	lsls	r3, r3, #31
    326c:	d400      	bmi.n	3270 <USB_Handler+0x218>
    326e:	e779      	b.n	3164 <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    3270:	4a44      	ldr	r2, [pc, #272]	; (3384 <USB_Handler+0x32c>)
    3272:	2301      	movs	r3, #1
    3274:	40a3      	lsls	r3, r4
    3276:	6811      	ldr	r1, [r2, #0]
    3278:	4399      	bics	r1, r3
    327a:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    327c:	0162      	lsls	r2, r4, #5
    327e:	4b43      	ldr	r3, [pc, #268]	; (338c <USB_Handler+0x334>)
    3280:	189b      	adds	r3, r3, r2
    3282:	2200      	movs	r2, #0
    3284:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3286:	0023      	movs	r3, r4
    3288:	3308      	adds	r3, #8
    328a:	015b      	lsls	r3, r3, #5
    328c:	6802      	ldr	r2, [r0, #0]
    328e:	4694      	mov	ip, r2
    3290:	4463      	add	r3, ip
    3292:	2204      	movs	r2, #4
    3294:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3296:	1903      	adds	r3, r0, r4
    3298:	33ae      	adds	r3, #174	; 0xae
    329a:	781b      	ldrb	r3, [r3, #0]
    329c:	079b      	lsls	r3, r3, #30
    329e:	d400      	bmi.n	32a2 <USB_Handler+0x24a>
    32a0:	e775      	b.n	318e <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    32a2:	4939      	ldr	r1, [pc, #228]	; (3388 <USB_Handler+0x330>)
    32a4:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    32a6:	2310      	movs	r3, #16
    32a8:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    32aa:	0123      	lsls	r3, r4, #4
    32ac:	18c3      	adds	r3, r0, r3
    32ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    32b0:	4798      	blx	r3
    32b2:	e76c      	b.n	318e <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    32b4:	0023      	movs	r3, r4
    32b6:	3308      	adds	r3, #8
    32b8:	015b      	lsls	r3, r3, #5
    32ba:	5c9b      	ldrb	r3, [r3, r2]
    32bc:	079b      	lsls	r3, r3, #30
    32be:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    32c0:	2b01      	cmp	r3, #1
    32c2:	d000      	beq.n	32c6 <USB_Handler+0x26e>
    32c4:	e757      	b.n	3176 <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    32c6:	0162      	lsls	r2, r4, #5
    32c8:	4b30      	ldr	r3, [pc, #192]	; (338c <USB_Handler+0x334>)
    32ca:	189b      	adds	r3, r3, r2
    32cc:	2200      	movs	r2, #0
    32ce:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    32d0:	0023      	movs	r3, r4
    32d2:	3308      	adds	r3, #8
    32d4:	015b      	lsls	r3, r3, #5
    32d6:	6802      	ldr	r2, [r0, #0]
    32d8:	18d2      	adds	r2, r2, r3
    32da:	2104      	movs	r1, #4
    32dc:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    32de:	6802      	ldr	r2, [r0, #0]
    32e0:	18d3      	adds	r3, r2, r3
    32e2:	2210      	movs	r2, #16
    32e4:	715a      	strb	r2, [r3, #5]
    32e6:	e752      	b.n	318e <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    32e8:	4927      	ldr	r1, [pc, #156]	; (3388 <USB_Handler+0x330>)
    32ea:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    32ec:	0162      	lsls	r2, r4, #5
    32ee:	4b27      	ldr	r3, [pc, #156]	; (338c <USB_Handler+0x334>)
    32f0:	189b      	adds	r3, r3, r2
    32f2:	89db      	ldrh	r3, [r3, #14]
    32f4:	221f      	movs	r2, #31
    32f6:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    32f8:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    32fa:	0123      	lsls	r3, r4, #4
    32fc:	18c3      	adds	r3, r0, r3
    32fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3300:	4798      	blx	r3
    3302:	e75c      	b.n	31be <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    3304:	4920      	ldr	r1, [pc, #128]	; (3388 <USB_Handler+0x330>)
    3306:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3308:	0162      	lsls	r2, r4, #5
    330a:	4b20      	ldr	r3, [pc, #128]	; (338c <USB_Handler+0x334>)
    330c:	189b      	adds	r3, r3, r2
    330e:	685b      	ldr	r3, [r3, #4]
    3310:	011b      	lsls	r3, r3, #4
    3312:	0c9b      	lsrs	r3, r3, #18
    3314:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3316:	0123      	lsls	r3, r4, #4
    3318:	18c3      	adds	r3, r0, r3
    331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    331c:	2100      	movs	r1, #0
    331e:	4798      	blx	r3
    3320:	e765      	b.n	31ee <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3322:	8bac      	ldrh	r4, [r5, #28]
    3324:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3326:	0763      	lsls	r3, r4, #29
    3328:	d538      	bpl.n	339c <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    332a:	2304      	movs	r3, #4
    332c:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    332e:	4b15      	ldr	r3, [pc, #84]	; (3384 <USB_Handler+0x32c>)
    3330:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    3332:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3334:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3336:	2610      	movs	r6, #16
    3338:	e002      	b.n	3340 <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    333a:	3301      	adds	r3, #1
    333c:	2b08      	cmp	r3, #8
    333e:	d029      	beq.n	3394 <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3340:	0002      	movs	r2, r0
    3342:	409a      	lsls	r2, r3
    3344:	4215      	tst	r5, r2
    3346:	d0f8      	beq.n	333a <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3348:	6839      	ldr	r1, [r7, #0]
    334a:	001a      	movs	r2, r3
    334c:	3208      	adds	r2, #8
    334e:	0152      	lsls	r2, r2, #5
    3350:	5c52      	ldrb	r2, [r2, r1]
    3352:	0692      	lsls	r2, r2, #26
    3354:	0f52      	lsrs	r2, r2, #29
    3356:	2a03      	cmp	r2, #3
    3358:	d1ef      	bne.n	333a <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    335a:	001a      	movs	r2, r3
    335c:	3208      	adds	r2, #8
    335e:	0152      	lsls	r2, r2, #5
    3360:	5c52      	ldrb	r2, [r2, r1]
    3362:	0792      	lsls	r2, r2, #30
    3364:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3366:	2a01      	cmp	r2, #1
    3368:	d1e7      	bne.n	333a <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    336a:	001a      	movs	r2, r3
    336c:	3208      	adds	r2, #8
    336e:	0152      	lsls	r2, r2, #5
    3370:	1889      	adds	r1, r1, r2
    3372:	710e      	strb	r6, [r1, #4]
    3374:	e7e1      	b.n	333a <USB_Handler+0x2e2>
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	20000444 	.word	0x20000444
    337c:	0000ee34 	.word	0x0000ee34
    3380:	0000b985 	.word	0x0000b985
    3384:	20000454 	.word	0x20000454
    3388:	20000458 	.word	0x20000458
    338c:	200013f0 	.word	0x200013f0
    3390:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3394:	339d      	adds	r3, #157	; 0x9d
    3396:	5cfb      	ldrb	r3, [r7, r3]
    3398:	07db      	lsls	r3, r3, #31
    339a:	d462      	bmi.n	3462 <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    339c:	0723      	lsls	r3, r4, #28
    339e:	d50b      	bpl.n	33b8 <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    33a0:	2200      	movs	r2, #0
    33a2:	4baf      	ldr	r3, [pc, #700]	; (3660 <USB_Handler+0x608>)
    33a4:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    33a6:	4baf      	ldr	r3, [pc, #700]	; (3664 <USB_Handler+0x60c>)
    33a8:	6818      	ldr	r0, [r3, #0]
    33aa:	2308      	movs	r3, #8
    33ac:	6802      	ldr	r2, [r0, #0]
    33ae:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    33b0:	339d      	adds	r3, #157	; 0x9d
    33b2:	5cc3      	ldrb	r3, [r0, r3]
    33b4:	079b      	lsls	r3, r3, #30
    33b6:	d458      	bmi.n	346a <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    33b8:	0663      	lsls	r3, r4, #25
    33ba:	d508      	bpl.n	33ce <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    33bc:	4ba9      	ldr	r3, [pc, #676]	; (3664 <USB_Handler+0x60c>)
    33be:	6818      	ldr	r0, [r3, #0]
    33c0:	2340      	movs	r3, #64	; 0x40
    33c2:	6802      	ldr	r2, [r0, #0]
    33c4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    33c6:	3365      	adds	r3, #101	; 0x65
    33c8:	5cc3      	ldrb	r3, [r0, r3]
    33ca:	06db      	lsls	r3, r3, #27
    33cc:	d450      	bmi.n	3470 <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    33ce:	06a3      	lsls	r3, r4, #26
    33d0:	d508      	bpl.n	33e4 <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    33d2:	4ba4      	ldr	r3, [pc, #656]	; (3664 <USB_Handler+0x60c>)
    33d4:	6818      	ldr	r0, [r3, #0]
    33d6:	2320      	movs	r3, #32
    33d8:	6802      	ldr	r2, [r0, #0]
    33da:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    33dc:	3385      	adds	r3, #133	; 0x85
    33de:	5cc3      	ldrb	r3, [r0, r3]
    33e0:	071b      	lsls	r3, r3, #28
    33e2:	d448      	bmi.n	3476 <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    33e4:	06e3      	lsls	r3, r4, #27
    33e6:	d508      	bpl.n	33fa <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    33e8:	4b9e      	ldr	r3, [pc, #632]	; (3664 <USB_Handler+0x60c>)
    33ea:	6818      	ldr	r0, [r3, #0]
    33ec:	2310      	movs	r3, #16
    33ee:	6802      	ldr	r2, [r0, #0]
    33f0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    33f2:	3395      	adds	r3, #149	; 0x95
    33f4:	5cc3      	ldrb	r3, [r0, r3]
    33f6:	075b      	lsls	r3, r3, #29
    33f8:	d440      	bmi.n	347c <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    33fa:	0623      	lsls	r3, r4, #24
    33fc:	d50b      	bpl.n	3416 <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    33fe:	2200      	movs	r2, #0
    3400:	4b97      	ldr	r3, [pc, #604]	; (3660 <USB_Handler+0x608>)
    3402:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3404:	4b97      	ldr	r3, [pc, #604]	; (3664 <USB_Handler+0x60c>)
    3406:	6818      	ldr	r0, [r3, #0]
    3408:	2380      	movs	r3, #128	; 0x80
    340a:	6802      	ldr	r2, [r0, #0]
    340c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    340e:	3325      	adds	r3, #37	; 0x25
    3410:	5cc3      	ldrb	r3, [r0, r3]
    3412:	069b      	lsls	r3, r3, #26
    3414:	d435      	bmi.n	3482 <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3416:	05e3      	lsls	r3, r4, #23
    3418:	d50c      	bpl.n	3434 <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    341a:	2200      	movs	r2, #0
    341c:	4b90      	ldr	r3, [pc, #576]	; (3660 <USB_Handler+0x608>)
    341e:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3420:	4b90      	ldr	r3, [pc, #576]	; (3664 <USB_Handler+0x60c>)
    3422:	6818      	ldr	r0, [r3, #0]
    3424:	2380      	movs	r3, #128	; 0x80
    3426:	005b      	lsls	r3, r3, #1
    3428:	6802      	ldr	r2, [r0, #0]
    342a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    342c:	3b5b      	subs	r3, #91	; 0x5b
    342e:	5cc3      	ldrb	r3, [r0, r3]
    3430:	065b      	lsls	r3, r3, #25
    3432:	d429      	bmi.n	3488 <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3434:	05a3      	lsls	r3, r4, #22
    3436:	d50d      	bpl.n	3454 <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    3438:	2200      	movs	r2, #0
    343a:	4b89      	ldr	r3, [pc, #548]	; (3660 <USB_Handler+0x608>)
    343c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    343e:	4b89      	ldr	r3, [pc, #548]	; (3664 <USB_Handler+0x60c>)
    3440:	6818      	ldr	r0, [r3, #0]
    3442:	2380      	movs	r3, #128	; 0x80
    3444:	009b      	lsls	r3, r3, #2
    3446:	6802      	ldr	r2, [r0, #0]
    3448:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    344a:	3b5c      	subs	r3, #92	; 0x5c
    344c:	3bff      	subs	r3, #255	; 0xff
    344e:	5cc3      	ldrb	r3, [r0, r3]
    3450:	2b7f      	cmp	r3, #127	; 0x7f
    3452:	d81c      	bhi.n	348e <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    3454:	b003      	add	sp, #12
    3456:	bc3c      	pop	{r2, r3, r4, r5}
    3458:	4690      	mov	r8, r2
    345a:	4699      	mov	r9, r3
    345c:	46a2      	mov	sl, r4
    345e:	46ab      	mov	fp, r5
    3460:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3462:	687b      	ldr	r3, [r7, #4]
    3464:	0038      	movs	r0, r7
    3466:	4798      	blx	r3
    3468:	e798      	b.n	339c <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    346a:	6883      	ldr	r3, [r0, #8]
    346c:	4798      	blx	r3
    346e:	e7a3      	b.n	33b8 <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    3470:	6943      	ldr	r3, [r0, #20]
    3472:	4798      	blx	r3
    3474:	e7ab      	b.n	33ce <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3476:	6903      	ldr	r3, [r0, #16]
    3478:	4798      	blx	r3
    347a:	e7b3      	b.n	33e4 <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    347c:	68c3      	ldr	r3, [r0, #12]
    347e:	4798      	blx	r3
    3480:	e7bb      	b.n	33fa <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    3482:	6983      	ldr	r3, [r0, #24]
    3484:	4798      	blx	r3
    3486:	e7c6      	b.n	3416 <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3488:	69c3      	ldr	r3, [r0, #28]
    348a:	4798      	blx	r3
    348c:	e7d2      	b.n	3434 <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    348e:	6a03      	ldr	r3, [r0, #32]
    3490:	4798      	blx	r3
    3492:	e7df      	b.n	3454 <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3494:	0023      	movs	r3, r4
    3496:	332e      	adds	r3, #46	; 0x2e
    3498:	009b      	lsls	r3, r3, #2
    349a:	4642      	mov	r2, r8
    349c:	6812      	ldr	r2, [r2, #0]
    349e:	589b      	ldr	r3, [r3, r2]
    34a0:	4971      	ldr	r1, [pc, #452]	; (3668 <USB_Handler+0x610>)
    34a2:	4642      	mov	r2, r8
    34a4:	6810      	ldr	r0, [r2, #0]
    34a6:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    34a8:	3401      	adds	r4, #1
    34aa:	2c07      	cmp	r4, #7
    34ac:	d0d2      	beq.n	3454 <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    34ae:	0063      	lsls	r3, r4, #1
    34b0:	5bdb      	ldrh	r3, [r3, r7]
    34b2:	4233      	tst	r3, r6
    34b4:	d003      	beq.n	34be <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    34b6:	464a      	mov	r2, r9
    34b8:	6812      	ldr	r2, [r2, #0]
    34ba:	6812      	ldr	r2, [r2, #0]
    34bc:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    34be:	422b      	tst	r3, r5
    34c0:	d0f2      	beq.n	34a8 <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    34c2:	2c06      	cmp	r4, #6
    34c4:	d1e6      	bne.n	3494 <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    34c6:	4b69      	ldr	r3, [pc, #420]	; (366c <USB_Handler+0x614>)
    34c8:	891b      	ldrh	r3, [r3, #8]
    34ca:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    34cc:	2280      	movs	r2, #128	; 0x80
    34ce:	0052      	lsls	r2, r2, #1
    34d0:	4013      	ands	r3, r2
    34d2:	4a65      	ldr	r2, [pc, #404]	; (3668 <USB_Handler+0x610>)
    34d4:	6013      	str	r3, [r2, #0]
    34d6:	e7dd      	b.n	3494 <USB_Handler+0x43c>
    34d8:	003c      	movs	r4, r7
    34da:	3459      	adds	r4, #89	; 0x59
    34dc:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    34de:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    34e0:	2201      	movs	r2, #1
    34e2:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    34e4:	325f      	adds	r2, #95	; 0x5f
    34e6:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    34e8:	3a50      	subs	r2, #80	; 0x50
    34ea:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    34ec:	3a0d      	subs	r2, #13
    34ee:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    34f0:	46b8      	mov	r8, r7
    34f2:	002f      	movs	r7, r5
    34f4:	e0c3      	b.n	367e <USB_Handler+0x626>
    34f6:	002a      	movs	r2, r5
    34f8:	003d      	movs	r5, r7
    34fa:	4647      	mov	r7, r8
    34fc:	4690      	mov	r8, r2
    34fe:	015b      	lsls	r3, r3, #5
    3500:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3502:	2308      	movs	r3, #8
    3504:	33ff      	adds	r3, #255	; 0xff
    3506:	5ceb      	ldrb	r3, [r5, r3]
    3508:	065b      	lsls	r3, r3, #25
    350a:	d515      	bpl.n	3538 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    350c:	2240      	movs	r2, #64	; 0x40
    350e:	2308      	movs	r3, #8
    3510:	33ff      	adds	r3, #255	; 0xff
    3512:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3514:	3b88      	subs	r3, #136	; 0x88
    3516:	3bff      	subs	r3, #255	; 0xff
    3518:	4642      	mov	r2, r8
    351a:	4313      	orrs	r3, r2
    351c:	4a54      	ldr	r2, [pc, #336]	; (3670 <USB_Handler+0x618>)
    351e:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3520:	2360      	movs	r3, #96	; 0x60
    3522:	420b      	tst	r3, r1
    3524:	d096      	beq.n	3454 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    3526:	9b01      	ldr	r3, [sp, #4]
    3528:	011b      	lsls	r3, r3, #4
    352a:	18fb      	adds	r3, r7, r3
    352c:	33e0      	adds	r3, #224	; 0xe0
    352e:	681b      	ldr	r3, [r3, #0]
    3530:	494f      	ldr	r1, [pc, #316]	; (3670 <USB_Handler+0x618>)
    3532:	0038      	movs	r0, r7
    3534:	4798      	blx	r3
    3536:	e78d      	b.n	3454 <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3538:	2308      	movs	r3, #8
    353a:	33ff      	adds	r3, #255	; 0xff
    353c:	5ceb      	ldrb	r3, [r5, r3]
    353e:	069b      	lsls	r3, r3, #26
    3540:	d5ee      	bpl.n	3520 <USB_Handler+0x4c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3542:	2220      	movs	r2, #32
    3544:	2308      	movs	r3, #8
    3546:	33ff      	adds	r3, #255	; 0xff
    3548:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    354a:	4b49      	ldr	r3, [pc, #292]	; (3670 <USB_Handler+0x618>)
    354c:	4642      	mov	r2, r8
    354e:	719a      	strb	r2, [r3, #6]
    3550:	e7e6      	b.n	3520 <USB_Handler+0x4c8>
    3552:	003d      	movs	r5, r7
    3554:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    3556:	9a01      	ldr	r2, [sp, #4]
    3558:	0013      	movs	r3, r2
    355a:	3308      	adds	r3, #8
    355c:	015b      	lsls	r3, r3, #5
    355e:	18ed      	adds	r5, r5, r3
    3560:	2310      	movs	r3, #16
    3562:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    3564:	18bb      	adds	r3, r7, r2
    3566:	3361      	adds	r3, #97	; 0x61
    3568:	33ff      	adds	r3, #255	; 0xff
    356a:	781b      	ldrb	r3, [r3, #0]
    356c:	06db      	lsls	r3, r3, #27
    356e:	d400      	bmi.n	3572 <USB_Handler+0x51a>
    3570:	e770      	b.n	3454 <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3572:	0010      	movs	r0, r2
    3574:	0152      	lsls	r2, r2, #5
    3576:	4b3d      	ldr	r3, [pc, #244]	; (366c <USB_Handler+0x614>)
    3578:	189b      	adds	r3, r3, r2
    357a:	685b      	ldr	r3, [r3, #4]
    357c:	049b      	lsls	r3, r3, #18
    357e:	0c9b      	lsrs	r3, r3, #18
    3580:	493b      	ldr	r1, [pc, #236]	; (3670 <USB_Handler+0x618>)
    3582:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3584:	0103      	lsls	r3, r0, #4
    3586:	18fb      	adds	r3, r7, r3
    3588:	33dc      	adds	r3, #220	; 0xdc
    358a:	681b      	ldr	r3, [r3, #0]
    358c:	4640      	mov	r0, r8
    358e:	4798      	blx	r3
    3590:	e760      	b.n	3454 <USB_Handler+0x3fc>
    3592:	002a      	movs	r2, r5
    3594:	003d      	movs	r5, r7
    3596:	4647      	mov	r7, r8
    3598:	4690      	mov	r8, r2
    359a:	015b      	lsls	r3, r3, #5
    359c:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    359e:	2308      	movs	r3, #8
    35a0:	33ff      	adds	r3, #255	; 0xff
    35a2:	5ceb      	ldrb	r3, [r5, r3]
    35a4:	079b      	lsls	r3, r3, #30
    35a6:	d51e      	bpl.n	35e6 <USB_Handler+0x58e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    35a8:	2202      	movs	r2, #2
    35aa:	2308      	movs	r3, #8
    35ac:	33ff      	adds	r3, #255	; 0xff
    35ae:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    35b0:	482f      	ldr	r0, [pc, #188]	; (3670 <USB_Handler+0x618>)
    35b2:	3b88      	subs	r3, #136	; 0x88
    35b4:	3bff      	subs	r3, #255	; 0xff
    35b6:	4642      	mov	r2, r8
    35b8:	4313      	orrs	r3, r2
    35ba:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    35bc:	9b01      	ldr	r3, [sp, #4]
    35be:	015a      	lsls	r2, r3, #5
    35c0:	4b2a      	ldr	r3, [pc, #168]	; (366c <USB_Handler+0x614>)
    35c2:	189b      	adds	r3, r3, r2
    35c4:	3310      	adds	r3, #16
    35c6:	685b      	ldr	r3, [r3, #4]
    35c8:	049b      	lsls	r3, r3, #18
    35ca:	0c9b      	lsrs	r3, r3, #18
    35cc:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    35ce:	078b      	lsls	r3, r1, #30
    35d0:	d100      	bne.n	35d4 <USB_Handler+0x57c>
    35d2:	e73f      	b.n	3454 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    35d4:	9b01      	ldr	r3, [sp, #4]
    35d6:	330d      	adds	r3, #13
    35d8:	011b      	lsls	r3, r3, #4
    35da:	18fb      	adds	r3, r7, r3
    35dc:	685b      	ldr	r3, [r3, #4]
    35de:	4924      	ldr	r1, [pc, #144]	; (3670 <USB_Handler+0x618>)
    35e0:	0038      	movs	r0, r7
    35e2:	4798      	blx	r3
    35e4:	e736      	b.n	3454 <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    35e6:	2308      	movs	r3, #8
    35e8:	33ff      	adds	r3, #255	; 0xff
    35ea:	5ceb      	ldrb	r3, [r5, r3]
    35ec:	07db      	lsls	r3, r3, #31
    35ee:	d5ee      	bpl.n	35ce <USB_Handler+0x576>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    35f0:	2201      	movs	r2, #1
    35f2:	2308      	movs	r3, #8
    35f4:	33ff      	adds	r3, #255	; 0xff
    35f6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    35f8:	481d      	ldr	r0, [pc, #116]	; (3670 <USB_Handler+0x618>)
    35fa:	4643      	mov	r3, r8
    35fc:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    35fe:	9b01      	ldr	r3, [sp, #4]
    3600:	015b      	lsls	r3, r3, #5
    3602:	4a1a      	ldr	r2, [pc, #104]	; (366c <USB_Handler+0x614>)
    3604:	18d2      	adds	r2, r2, r3
    3606:	6853      	ldr	r3, [r2, #4]
    3608:	049b      	lsls	r3, r3, #18
    360a:	0c9b      	lsrs	r3, r3, #18
    360c:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    360e:	6853      	ldr	r3, [r2, #4]
    3610:	011b      	lsls	r3, r3, #4
    3612:	0c9b      	lsrs	r3, r3, #18
    3614:	8083      	strh	r3, [r0, #4]
    3616:	e7da      	b.n	35ce <USB_Handler+0x576>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3618:	2208      	movs	r2, #8
    361a:	32ff      	adds	r2, #255	; 0xff
    361c:	5c9a      	ldrb	r2, [r3, r2]
    361e:	0752      	lsls	r2, r2, #29
    3620:	d579      	bpl.n	3716 <USB_Handler+0x6be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    3622:	2004      	movs	r0, #4
    3624:	2208      	movs	r2, #8
    3626:	32ff      	adds	r2, #255	; 0xff
    3628:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    362a:	9801      	ldr	r0, [sp, #4]
    362c:	0142      	lsls	r2, r0, #5
    362e:	4b0f      	ldr	r3, [pc, #60]	; (366c <USB_Handler+0x614>)
    3630:	189b      	adds	r3, r3, r2
    3632:	7a9b      	ldrb	r3, [r3, #10]
    3634:	079b      	lsls	r3, r3, #30
    3636:	d505      	bpl.n	3644 <USB_Handler+0x5ec>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3638:	4b0c      	ldr	r3, [pc, #48]	; (366c <USB_Handler+0x614>)
    363a:	189b      	adds	r3, r3, r2
    363c:	7a9a      	ldrb	r2, [r3, #10]
    363e:	2002      	movs	r0, #2
    3640:	4382      	bics	r2, r0
    3642:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3644:	4b0a      	ldr	r3, [pc, #40]	; (3670 <USB_Handler+0x618>)
    3646:	4642      	mov	r2, r8
    3648:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    364a:	9b01      	ldr	r3, [sp, #4]
    364c:	3308      	adds	r3, #8
    364e:	015b      	lsls	r3, r3, #5
    3650:	683a      	ldr	r2, [r7, #0]
    3652:	4694      	mov	ip, r2
    3654:	4463      	add	r3, ip
    3656:	79db      	ldrb	r3, [r3, #7]
    3658:	07db      	lsls	r3, r3, #31
    365a:	d55c      	bpl.n	3716 <USB_Handler+0x6be>
    365c:	e6fa      	b.n	3454 <USB_Handler+0x3fc>
    365e:	46c0      	nop			; (mov r8, r8)
    3660:	20000454 	.word	0x20000454
    3664:	20000444 	.word	0x20000444
    3668:	20000448 	.word	0x20000448
    366c:	200013f0 	.word	0x200013f0
    3670:	2000044c 	.word	0x2000044c
    3674:	3301      	adds	r3, #1
    3676:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3678:	2b08      	cmp	r3, #8
    367a:	d100      	bne.n	367e <USB_Handler+0x626>
    367c:	e6ea      	b.n	3454 <USB_Handler+0x3fc>
    367e:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    3680:	9301      	str	r3, [sp, #4]
    3682:	0032      	movs	r2, r6
    3684:	411a      	asrs	r2, r3
    3686:	4661      	mov	r1, ip
    3688:	4211      	tst	r1, r2
    368a:	d0f3      	beq.n	3674 <USB_Handler+0x61c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    368c:	001a      	movs	r2, r3
    368e:	3208      	adds	r2, #8
    3690:	0152      	lsls	r2, r2, #5
    3692:	18ba      	adds	r2, r7, r2
    3694:	79d2      	ldrb	r2, [r2, #7]
    3696:	b2d2      	uxtb	r2, r2
    3698:	7a21      	ldrb	r1, [r4, #8]
    369a:	4011      	ands	r1, r2
    369c:	7820      	ldrb	r0, [r4, #0]
    369e:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    36a0:	4648      	mov	r0, r9
    36a2:	4210      	tst	r0, r2
    36a4:	d000      	beq.n	36a8 <USB_Handler+0x650>
    36a6:	e726      	b.n	34f6 <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    36a8:	4650      	mov	r0, sl
    36aa:	4210      	tst	r0, r2
    36ac:	d000      	beq.n	36b0 <USB_Handler+0x658>
    36ae:	e750      	b.n	3552 <USB_Handler+0x4fa>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    36b0:	4658      	mov	r0, fp
    36b2:	4210      	tst	r0, r2
    36b4:	d000      	beq.n	36b8 <USB_Handler+0x660>
    36b6:	e76c      	b.n	3592 <USB_Handler+0x53a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    36b8:	200c      	movs	r0, #12
    36ba:	4210      	tst	r0, r2
    36bc:	d0da      	beq.n	3674 <USB_Handler+0x61c>
    36be:	002a      	movs	r2, r5
    36c0:	003d      	movs	r5, r7
    36c2:	4647      	mov	r7, r8
    36c4:	4690      	mov	r8, r2
    36c6:	015b      	lsls	r3, r3, #5
    36c8:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    36ca:	2208      	movs	r2, #8
    36cc:	32ff      	adds	r2, #255	; 0xff
    36ce:	5c9a      	ldrb	r2, [r3, r2]
    36d0:	0712      	lsls	r2, r2, #28
    36d2:	d5a1      	bpl.n	3618 <USB_Handler+0x5c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    36d4:	3804      	subs	r0, #4
    36d6:	2208      	movs	r2, #8
    36d8:	32ff      	adds	r2, #255	; 0xff
    36da:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    36dc:	9801      	ldr	r0, [sp, #4]
    36de:	0142      	lsls	r2, r0, #5
    36e0:	4b13      	ldr	r3, [pc, #76]	; (3730 <USB_Handler+0x6d8>)
    36e2:	189b      	adds	r3, r3, r2
    36e4:	7e9b      	ldrb	r3, [r3, #26]
    36e6:	079b      	lsls	r3, r3, #30
    36e8:	d505      	bpl.n	36f6 <USB_Handler+0x69e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    36ea:	4b11      	ldr	r3, [pc, #68]	; (3730 <USB_Handler+0x6d8>)
    36ec:	189b      	adds	r3, r3, r2
    36ee:	7e9a      	ldrb	r2, [r3, #26]
    36f0:	2002      	movs	r0, #2
    36f2:	4382      	bics	r2, r0
    36f4:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    36f6:	2380      	movs	r3, #128	; 0x80
    36f8:	425b      	negs	r3, r3
    36fa:	4642      	mov	r2, r8
    36fc:	4313      	orrs	r3, r2
    36fe:	4a0d      	ldr	r2, [pc, #52]	; (3734 <USB_Handler+0x6dc>)
    3700:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3702:	9b01      	ldr	r3, [sp, #4]
    3704:	3308      	adds	r3, #8
    3706:	015b      	lsls	r3, r3, #5
    3708:	683a      	ldr	r2, [r7, #0]
    370a:	4694      	mov	ip, r2
    370c:	4463      	add	r3, ip
    370e:	79db      	ldrb	r3, [r3, #7]
    3710:	079b      	lsls	r3, r3, #30
    3712:	d500      	bpl.n	3716 <USB_Handler+0x6be>
    3714:	e69e      	b.n	3454 <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3716:	230c      	movs	r3, #12
    3718:	420b      	tst	r3, r1
    371a:	d100      	bne.n	371e <USB_Handler+0x6c6>
    371c:	e69a      	b.n	3454 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    371e:	9b01      	ldr	r3, [sp, #4]
    3720:	011b      	lsls	r3, r3, #4
    3722:	18fb      	adds	r3, r7, r3
    3724:	33d8      	adds	r3, #216	; 0xd8
    3726:	681b      	ldr	r3, [r3, #0]
    3728:	4902      	ldr	r1, [pc, #8]	; (3734 <USB_Handler+0x6dc>)
    372a:	0038      	movs	r0, r7
    372c:	4798      	blx	r3
    372e:	e691      	b.n	3454 <USB_Handler+0x3fc>
    3730:	200013f0 	.word	0x200013f0
    3734:	2000044c 	.word	0x2000044c

00003738 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3738:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    373a:	0080      	lsls	r0, r0, #2
    373c:	4b16      	ldr	r3, [pc, #88]	; (3798 <_tc_interrupt_handler+0x60>)
    373e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3740:	6823      	ldr	r3, [r4, #0]
    3742:	7b9d      	ldrb	r5, [r3, #14]
    3744:	7e22      	ldrb	r2, [r4, #24]
    3746:	7e63      	ldrb	r3, [r4, #25]
    3748:	4013      	ands	r3, r2
    374a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    374c:	07eb      	lsls	r3, r5, #31
    374e:	d406      	bmi.n	375e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3750:	07ab      	lsls	r3, r5, #30
    3752:	d40b      	bmi.n	376c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3754:	06eb      	lsls	r3, r5, #27
    3756:	d410      	bmi.n	377a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    3758:	06ab      	lsls	r3, r5, #26
    375a:	d415      	bmi.n	3788 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    375c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    375e:	0020      	movs	r0, r4
    3760:	68a3      	ldr	r3, [r4, #8]
    3762:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3764:	2301      	movs	r3, #1
    3766:	6822      	ldr	r2, [r4, #0]
    3768:	7393      	strb	r3, [r2, #14]
    376a:	e7f1      	b.n	3750 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    376c:	0020      	movs	r0, r4
    376e:	68e3      	ldr	r3, [r4, #12]
    3770:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    3772:	2302      	movs	r3, #2
    3774:	6822      	ldr	r2, [r4, #0]
    3776:	7393      	strb	r3, [r2, #14]
    3778:	e7ec      	b.n	3754 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    377a:	0020      	movs	r0, r4
    377c:	6923      	ldr	r3, [r4, #16]
    377e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    3780:	2310      	movs	r3, #16
    3782:	6822      	ldr	r2, [r4, #0]
    3784:	7393      	strb	r3, [r2, #14]
    3786:	e7e7      	b.n	3758 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    3788:	0020      	movs	r0, r4
    378a:	6963      	ldr	r3, [r4, #20]
    378c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    378e:	6823      	ldr	r3, [r4, #0]
    3790:	2220      	movs	r2, #32
    3792:	739a      	strb	r2, [r3, #14]
}
    3794:	e7e2      	b.n	375c <_tc_interrupt_handler+0x24>
    3796:	46c0      	nop			; (mov r8, r8)
    3798:	200014f0 	.word	0x200014f0

0000379c <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    379c:	b510      	push	{r4, lr}
    379e:	2000      	movs	r0, #0
    37a0:	4b01      	ldr	r3, [pc, #4]	; (37a8 <TC3_Handler+0xc>)
    37a2:	4798      	blx	r3
    37a4:	bd10      	pop	{r4, pc}
    37a6:	46c0      	nop			; (mov r8, r8)
    37a8:	00003739 	.word	0x00003739

000037ac <TC4_Handler>:
    37ac:	b510      	push	{r4, lr}
    37ae:	2001      	movs	r0, #1
    37b0:	4b01      	ldr	r3, [pc, #4]	; (37b8 <TC4_Handler+0xc>)
    37b2:	4798      	blx	r3
    37b4:	bd10      	pop	{r4, pc}
    37b6:	46c0      	nop			; (mov r8, r8)
    37b8:	00003739 	.word	0x00003739

000037bc <TC5_Handler>:
    37bc:	b510      	push	{r4, lr}
    37be:	2002      	movs	r0, #2
    37c0:	4b01      	ldr	r3, [pc, #4]	; (37c8 <TC5_Handler+0xc>)
    37c2:	4798      	blx	r3
    37c4:	bd10      	pop	{r4, pc}
    37c6:	46c0      	nop			; (mov r8, r8)
    37c8:	00003739 	.word	0x00003739

000037cc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    37cc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    37ce:	2000      	movs	r0, #0
    37d0:	4b08      	ldr	r3, [pc, #32]	; (37f4 <delay_init+0x28>)
    37d2:	4798      	blx	r3
    37d4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    37d6:	4c08      	ldr	r4, [pc, #32]	; (37f8 <delay_init+0x2c>)
    37d8:	21fa      	movs	r1, #250	; 0xfa
    37da:	0089      	lsls	r1, r1, #2
    37dc:	47a0      	blx	r4
    37de:	4b07      	ldr	r3, [pc, #28]	; (37fc <delay_init+0x30>)
    37e0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    37e2:	4907      	ldr	r1, [pc, #28]	; (3800 <delay_init+0x34>)
    37e4:	0028      	movs	r0, r5
    37e6:	47a0      	blx	r4
    37e8:	4b06      	ldr	r3, [pc, #24]	; (3804 <delay_init+0x38>)
    37ea:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    37ec:	2205      	movs	r2, #5
    37ee:	4b06      	ldr	r3, [pc, #24]	; (3808 <delay_init+0x3c>)
    37f0:	601a      	str	r2, [r3, #0]
}
    37f2:	bd70      	pop	{r4, r5, r6, pc}
    37f4:	00008c1d 	.word	0x00008c1d
    37f8:	0000b65d 	.word	0x0000b65d
    37fc:	20000018 	.word	0x20000018
    3800:	000f4240 	.word	0x000f4240
    3804:	2000001c 	.word	0x2000001c
    3808:	e000e010 	.word	0xe000e010

0000380c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    380c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    380e:	4b08      	ldr	r3, [pc, #32]	; (3830 <delay_cycles_us+0x24>)
    3810:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    3812:	4a08      	ldr	r2, [pc, #32]	; (3834 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    3814:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3816:	2180      	movs	r1, #128	; 0x80
    3818:	0249      	lsls	r1, r1, #9
	while (n--) {
    381a:	3801      	subs	r0, #1
    381c:	d307      	bcc.n	382e <delay_cycles_us+0x22>
	if (n > 0) {
    381e:	2c00      	cmp	r4, #0
    3820:	d0fb      	beq.n	381a <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    3822:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    3824:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3826:	6813      	ldr	r3, [r2, #0]
    3828:	420b      	tst	r3, r1
    382a:	d0fc      	beq.n	3826 <delay_cycles_us+0x1a>
    382c:	e7f5      	b.n	381a <delay_cycles_us+0xe>
	}
}
    382e:	bd30      	pop	{r4, r5, pc}
    3830:	2000001c 	.word	0x2000001c
    3834:	e000e010 	.word	0xe000e010

00003838 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    3838:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    383a:	4b08      	ldr	r3, [pc, #32]	; (385c <delay_cycles_ms+0x24>)
    383c:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    383e:	4a08      	ldr	r2, [pc, #32]	; (3860 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    3840:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3842:	2180      	movs	r1, #128	; 0x80
    3844:	0249      	lsls	r1, r1, #9
	while (n--) {
    3846:	3801      	subs	r0, #1
    3848:	d307      	bcc.n	385a <delay_cycles_ms+0x22>
	if (n > 0) {
    384a:	2c00      	cmp	r4, #0
    384c:	d0fb      	beq.n	3846 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    384e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    3850:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3852:	6813      	ldr	r3, [r2, #0]
    3854:	420b      	tst	r3, r1
    3856:	d0fc      	beq.n	3852 <delay_cycles_ms+0x1a>
    3858:	e7f5      	b.n	3846 <delay_cycles_ms+0xe>
	}
}
    385a:	bd30      	pop	{r4, r5, pc}
    385c:	20000018 	.word	0x20000018
    3860:	e000e010 	.word	0xe000e010

00003864 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    3864:	b510      	push	{r4, lr}
	if (gpfIsr) {
    3866:	4b03      	ldr	r3, [pc, #12]	; (3874 <chip_isr+0x10>)
    3868:	681b      	ldr	r3, [r3, #0]
    386a:	2b00      	cmp	r3, #0
    386c:	d000      	beq.n	3870 <chip_isr+0xc>
		gpfIsr();
    386e:	4798      	blx	r3
	}
}
    3870:	bd10      	pop	{r4, pc}
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	20000460 	.word	0x20000460

00003878 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    3878:	b570      	push	{r4, r5, r6, lr}
    387a:	b082      	sub	sp, #8
	gpfIsr = NULL;
    387c:	2300      	movs	r3, #0
    387e:	4a15      	ldr	r2, [pc, #84]	; (38d4 <nm_bsp_init+0x5c>)
    3880:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3882:	ac01      	add	r4, sp, #4
    3884:	2501      	movs	r5, #1
    3886:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3888:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    388a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    388c:	0021      	movs	r1, r4
    388e:	201b      	movs	r0, #27
    3890:	4e11      	ldr	r6, [pc, #68]	; (38d8 <nm_bsp_init+0x60>)
    3892:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    3894:	0021      	movs	r1, r4
    3896:	201c      	movs	r0, #28
    3898:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    389a:	0021      	movs	r1, r4
    389c:	2028      	movs	r0, #40	; 0x28
    389e:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    38a0:	4b0e      	ldr	r3, [pc, #56]	; (38dc <nm_bsp_init+0x64>)
    38a2:	2280      	movs	r2, #128	; 0x80
    38a4:	0552      	lsls	r2, r2, #21
    38a6:	615a      	str	r2, [r3, #20]
    38a8:	2280      	movs	r2, #128	; 0x80
    38aa:	0512      	lsls	r2, r2, #20
    38ac:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    38ae:	4b0c      	ldr	r3, [pc, #48]	; (38e0 <nm_bsp_init+0x68>)
    38b0:	681b      	ldr	r3, [r3, #0]
    38b2:	421d      	tst	r5, r3
    38b4:	d003      	beq.n	38be <nm_bsp_init+0x46>
    38b6:	4b0a      	ldr	r3, [pc, #40]	; (38e0 <nm_bsp_init+0x68>)
    38b8:	681b      	ldr	r3, [r3, #0]
    38ba:	079b      	lsls	r3, r3, #30
    38bc:	d401      	bmi.n	38c2 <nm_bsp_init+0x4a>
	    delay_init();
    38be:	4b09      	ldr	r3, [pc, #36]	; (38e4 <nm_bsp_init+0x6c>)
    38c0:	4798      	blx	r3
	cpu_irq_enable();
    38c2:	2201      	movs	r2, #1
    38c4:	4b08      	ldr	r3, [pc, #32]	; (38e8 <nm_bsp_init+0x70>)
    38c6:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    38c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    38cc:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    38ce:	2000      	movs	r0, #0
    38d0:	b002      	add	sp, #8
    38d2:	bd70      	pop	{r4, r5, r6, pc}
    38d4:	20000460 	.word	0x20000460
    38d8:	0000765d 	.word	0x0000765d
    38dc:	41004400 	.word	0x41004400
    38e0:	e000e010 	.word	0xe000e010
    38e4:	000037cd 	.word	0x000037cd
    38e8:	20000022 	.word	0x20000022

000038ec <nm_bsp_deinit>:
 *	@fn		nm_bsp_deinit
 *	@brief	De-iInitialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
    38ec:	b500      	push	{lr}
    38ee:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    38f0:	a901      	add	r1, sp, #4
    38f2:	2300      	movs	r3, #0
    38f4:	700b      	strb	r3, [r1, #0]
	config->powersave  = false;
    38f6:	708b      	strb	r3, [r1, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    38f8:	704b      	strb	r3, [r1, #1]
		port_base->OUTCLR.reg = pin_mask;
    38fa:	4b06      	ldr	r3, [pc, #24]	; (3914 <nm_bsp_deinit+0x28>)
    38fc:	2280      	movs	r2, #128	; 0x80
    38fe:	0552      	lsls	r2, r2, #21
    3900:	615a      	str	r2, [r3, #20]
    3902:	2280      	movs	r2, #128	; 0x80
    3904:	0512      	lsls	r2, r2, #20
    3906:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
	port_pin_set_config(CONF_WINC_SPI_INT_PIN, &pin_conf);
    3908:	2029      	movs	r0, #41	; 0x29
    390a:	4b03      	ldr	r3, [pc, #12]	; (3918 <nm_bsp_deinit+0x2c>)
    390c:	4798      	blx	r3
	return M2M_SUCCESS;
}
    390e:	2000      	movs	r0, #0
    3910:	b003      	add	sp, #12
    3912:	bd00      	pop	{pc}
    3914:	41004400 	.word	0x41004400
    3918:	0000765d 	.word	0x0000765d

0000391c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    391c:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    391e:	1e44      	subs	r4, r0, #1
    3920:	2800      	cmp	r0, #0
    3922:	d004      	beq.n	392e <nm_bsp_sleep+0x12>
		delay_ms(1);
    3924:	4d02      	ldr	r5, [pc, #8]	; (3930 <nm_bsp_sleep+0x14>)
    3926:	2001      	movs	r0, #1
    3928:	47a8      	blx	r5
	while (u32TimeMsec--) {
    392a:	3c01      	subs	r4, #1
    392c:	d2fb      	bcs.n	3926 <nm_bsp_sleep+0xa>
	}
}
    392e:	bd70      	pop	{r4, r5, r6, pc}
    3930:	00003839 	.word	0x00003839

00003934 <nm_bsp_reset>:
{
    3934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3936:	4c07      	ldr	r4, [pc, #28]	; (3954 <nm_bsp_reset+0x20>)
    3938:	2780      	movs	r7, #128	; 0x80
    393a:	057f      	lsls	r7, r7, #21
    393c:	6167      	str	r7, [r4, #20]
    393e:	2580      	movs	r5, #128	; 0x80
    3940:	052d      	lsls	r5, r5, #20
    3942:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    3944:	2001      	movs	r0, #1
    3946:	4e04      	ldr	r6, [pc, #16]	; (3958 <nm_bsp_reset+0x24>)
    3948:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    394a:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    394c:	200a      	movs	r0, #10
    394e:	47b0      	blx	r6
    3950:	61a5      	str	r5, [r4, #24]
}
    3952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3954:	41004400 	.word	0x41004400
    3958:	0000391d 	.word	0x0000391d

0000395c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    395c:	b510      	push	{r4, lr}
    395e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    3960:	4b0e      	ldr	r3, [pc, #56]	; (399c <nm_bsp_register_isr+0x40>)
    3962:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    3964:	ac01      	add	r4, sp, #4
    3966:	0020      	movs	r0, r4
    3968:	4b0d      	ldr	r3, [pc, #52]	; (39a0 <nm_bsp_register_isr+0x44>)
    396a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    396c:	2329      	movs	r3, #41	; 0x29
    396e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    3970:	2300      	movs	r3, #0
    3972:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3974:	3301      	adds	r3, #1
    3976:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    3978:	3301      	adds	r3, #1
    397a:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    397c:	0021      	movs	r1, r4
    397e:	2009      	movs	r0, #9
    3980:	4b08      	ldr	r3, [pc, #32]	; (39a4 <nm_bsp_register_isr+0x48>)
    3982:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    3984:	2200      	movs	r2, #0
    3986:	2109      	movs	r1, #9
    3988:	4807      	ldr	r0, [pc, #28]	; (39a8 <nm_bsp_register_isr+0x4c>)
    398a:	4b08      	ldr	r3, [pc, #32]	; (39ac <nm_bsp_register_isr+0x50>)
    398c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    398e:	2100      	movs	r1, #0
    3990:	2009      	movs	r0, #9
    3992:	4b07      	ldr	r3, [pc, #28]	; (39b0 <nm_bsp_register_isr+0x54>)
    3994:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    3996:	b004      	add	sp, #16
    3998:	bd10      	pop	{r4, pc}
    399a:	46c0      	nop			; (mov r8, r8)
    399c:	20000460 	.word	0x20000460
    39a0:	000075d1 	.word	0x000075d1
    39a4:	000075e5 	.word	0x000075e5
    39a8:	00003865 	.word	0x00003865
    39ac:	0000748d 	.word	0x0000748d
    39b0:	000074b9 	.word	0x000074b9

000039b4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    39b4:	b510      	push	{r4, lr}
	if (u8Enable) {
    39b6:	2800      	cmp	r0, #0
    39b8:	d104      	bne.n	39c4 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    39ba:	2100      	movs	r1, #0
    39bc:	2009      	movs	r0, #9
    39be:	4b04      	ldr	r3, [pc, #16]	; (39d0 <nm_bsp_interrupt_ctrl+0x1c>)
    39c0:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    39c2:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    39c4:	2100      	movs	r1, #0
    39c6:	2009      	movs	r0, #9
    39c8:	4b02      	ldr	r3, [pc, #8]	; (39d4 <nm_bsp_interrupt_ctrl+0x20>)
    39ca:	4798      	blx	r3
    39cc:	e7f9      	b.n	39c2 <nm_bsp_interrupt_ctrl+0xe>
    39ce:	46c0      	nop			; (mov r8, r8)
    39d0:	000074d9 	.word	0x000074d9
    39d4:	000074b9 	.word	0x000074b9

000039d8 <spi_rw>:

	return M2M_SUCCESS;
}

sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    39d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39da:	46de      	mov	lr, fp
    39dc:	4657      	mov	r7, sl
    39de:	464e      	mov	r6, r9
    39e0:	4645      	mov	r5, r8
    39e2:	b5e0      	push	{r5, r6, r7, lr}
    39e4:	b083      	sub	sp, #12
    39e6:	0007      	movs	r7, r0
    39e8:	000e      	movs	r6, r1
    39ea:	0014      	movs	r4, r2
	uint8 u8Dummy = 0;
    39ec:	2200      	movs	r2, #0
    39ee:	466b      	mov	r3, sp
    39f0:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    39f2:	2900      	cmp	r1, #0
    39f4:	d00c      	beq.n	3a10 <spi_rw+0x38>
    39f6:	2c00      	cmp	r4, #0
    39f8:	d068      	beq.n	3acc <spi_rw+0xf4>
		return M2M_ERR_BUS_FAIL;
    39fa:	2006      	movs	r0, #6
    39fc:	4240      	negs	r0, r0
	if (!pu8Mosi) {
    39fe:	2f00      	cmp	r7, #0
    3a00:	d15a      	bne.n	3ab8 <spi_rw+0xe0>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    3a02:	2300      	movs	r3, #0
    3a04:	469b      	mov	fp, r3
		u8SkipMosi = 1;
    3a06:	3301      	adds	r3, #1
    3a08:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    3a0a:	466b      	mov	r3, sp
    3a0c:	1ddf      	adds	r7, r3, #7
    3a0e:	e009      	b.n	3a24 <spi_rw+0x4c>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    3a10:	2800      	cmp	r0, #0
    3a12:	d058      	beq.n	3ac6 <spi_rw+0xee>
    3a14:	2c00      	cmp	r4, #0
    3a16:	d05c      	beq.n	3ad2 <spi_rw+0xfa>
		u8SkipMiso = 1;
    3a18:	2301      	movs	r3, #1
    3a1a:	469b      	mov	fp, r3
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    3a1c:	2300      	movs	r3, #0
    3a1e:	4698      	mov	r8, r3
		pu8Miso = &u8Dummy;
    3a20:	466b      	mov	r3, sp
    3a22:	1dde      	adds	r6, r3, #7
	spi_select_slave(&master, &slave_inst, true);
    3a24:	2201      	movs	r2, #1
    3a26:	492c      	ldr	r1, [pc, #176]	; (3ad8 <spi_rw+0x100>)
    3a28:	482c      	ldr	r0, [pc, #176]	; (3adc <spi_rw+0x104>)
    3a2a:	4b2d      	ldr	r3, [pc, #180]	; (3ae0 <spi_rw+0x108>)
    3a2c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3a2e:	4b2b      	ldr	r3, [pc, #172]	; (3adc <spi_rw+0x104>)
    3a30:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    3a32:	2501      	movs	r5, #1
		while (!spi_is_ready_to_read(&master))
    3a34:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3a36:	4699      	mov	r9, r3
			pu8Miso++;
    3a38:	465a      	mov	r2, fp
    3a3a:	4253      	negs	r3, r2
    3a3c:	415a      	adcs	r2, r3
    3a3e:	4693      	mov	fp, r2
		txd_data = *pu8Mosi;
    3a40:	7838      	ldrb	r0, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3a42:	4653      	mov	r3, sl
    3a44:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3a46:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    3a48:	422a      	tst	r2, r5
    3a4a:	d0fc      	beq.n	3a46 <spi_rw+0x6e>
    3a4c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3a4e:	422a      	tst	r2, r5
    3a50:	d0fc      	beq.n	3a4c <spi_rw+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3a52:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3a54:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    3a56:	420a      	tst	r2, r1
    3a58:	d0fc      	beq.n	3a54 <spi_rw+0x7c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3a5a:	464a      	mov	r2, r9
    3a5c:	7992      	ldrb	r2, [r2, #6]
    3a5e:	4694      	mov	ip, r2
    3a60:	e006      	b.n	3a70 <spi_rw+0x98>
    3a62:	4660      	mov	r0, ip
    3a64:	2801      	cmp	r0, #1
    3a66:	d00d      	beq.n	3a84 <spi_rw+0xac>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3a68:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3a6a:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    3a6c:	2a00      	cmp	r2, #0
    3a6e:	d00d      	beq.n	3a8c <spi_rw+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3a70:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3a72:	420a      	tst	r2, r1
    3a74:	d0fc      	beq.n	3a70 <spi_rw+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3a76:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    3a78:	2200      	movs	r2, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3a7a:	4208      	tst	r0, r1
    3a7c:	d0f1      	beq.n	3a62 <spi_rw+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3a7e:	8359      	strh	r1, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    3a80:	321e      	adds	r2, #30
    3a82:	e7ee      	b.n	3a62 <spi_rw+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3a84:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3a86:	05c0      	lsls	r0, r0, #23
    3a88:	0dc0      	lsrs	r0, r0, #23
    3a8a:	e7ef      	b.n	3a6c <spi_rw+0x94>
		*pu8Miso = rxd_data;
    3a8c:	7030      	strb	r0, [r6, #0]
		u16Sz--;
    3a8e:	3c01      	subs	r4, #1
    3a90:	b2a4      	uxth	r4, r4
			pu8Miso++;
    3a92:	445e      	add	r6, fp
			pu8Mosi++;
    3a94:	4643      	mov	r3, r8
    3a96:	425a      	negs	r2, r3
    3a98:	4153      	adcs	r3, r2
    3a9a:	18ff      	adds	r7, r7, r3
	while (u16Sz) {
    3a9c:	2c00      	cmp	r4, #0
    3a9e:	d1cf      	bne.n	3a40 <spi_rw+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3aa0:	4b0e      	ldr	r3, [pc, #56]	; (3adc <spi_rw+0x104>)
    3aa2:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    3aa4:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3aa6:	7e0b      	ldrb	r3, [r1, #24]
    3aa8:	4213      	tst	r3, r2
    3aaa:	d0fc      	beq.n	3aa6 <spi_rw+0xce>
	spi_select_slave(&master, &slave_inst, false);
    3aac:	2200      	movs	r2, #0
    3aae:	490a      	ldr	r1, [pc, #40]	; (3ad8 <spi_rw+0x100>)
    3ab0:	480a      	ldr	r0, [pc, #40]	; (3adc <spi_rw+0x104>)
    3ab2:	4b0b      	ldr	r3, [pc, #44]	; (3ae0 <spi_rw+0x108>)
    3ab4:	4798      	blx	r3
	return M2M_SUCCESS;
    3ab6:	2000      	movs	r0, #0
	else
#endif //CONF_WINC_SPI_DMA
	{
		return spi_rw_pio(pu8Mosi, pu8Miso, u16Sz);
	}
}
    3ab8:	b003      	add	sp, #12
    3aba:	bc3c      	pop	{r2, r3, r4, r5}
    3abc:	4690      	mov	r8, r2
    3abe:	4699      	mov	r9, r3
    3ac0:	46a2      	mov	sl, r4
    3ac2:	46ab      	mov	fp, r5
    3ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    3ac6:	200f      	movs	r0, #15
    3ac8:	4240      	negs	r0, r0
    3aca:	e7f5      	b.n	3ab8 <spi_rw+0xe0>
    3acc:	200f      	movs	r0, #15
    3ace:	4240      	negs	r0, r0
    3ad0:	e7f2      	b.n	3ab8 <spi_rw+0xe0>
    3ad2:	200f      	movs	r0, #15
    3ad4:	4240      	negs	r0, r0
		return spi_rw_pio(pu8Mosi, pu8Miso, u16Sz);
    3ad6:	e7ef      	b.n	3ab8 <spi_rw+0xe0>
    3ad8:	200014fc 	.word	0x200014fc
    3adc:	20001500 	.word	0x20001500
    3ae0:	00007d71 	.word	0x00007d71

00003ae4 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    3ae4:	b530      	push	{r4, r5, lr}
    3ae6:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    3ae8:	4c30      	ldr	r4, [pc, #192]	; (3bac <nm_bus_init+0xc8>)
    3aea:	230e      	movs	r3, #14
    3aec:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3aee:	2300      	movs	r3, #0
    3af0:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3af2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3af4:	a901      	add	r1, sp, #4
    3af6:	2201      	movs	r2, #1
    3af8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3afa:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3afc:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3afe:	200e      	movs	r0, #14
    3b00:	4b2b      	ldr	r3, [pc, #172]	; (3bb0 <nm_bus_init+0xcc>)
    3b02:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3b04:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    3b06:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3b08:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3b0a:	2900      	cmp	r1, #0
    3b0c:	d104      	bne.n	3b18 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    3b0e:	0953      	lsrs	r3, r2, #5
    3b10:	01db      	lsls	r3, r3, #7
    3b12:	4928      	ldr	r1, [pc, #160]	; (3bb4 <nm_bus_init+0xd0>)
    3b14:	468c      	mov	ip, r1
    3b16:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3b18:	211f      	movs	r1, #31
    3b1a:	4011      	ands	r1, r2
    3b1c:	2201      	movs	r2, #1
    3b1e:	0010      	movs	r0, r2
    3b20:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    3b22:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3b24:	ac02      	add	r4, sp, #8
    3b26:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3b28:	2300      	movs	r3, #0
    3b2a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3b2c:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    3b2e:	21c0      	movs	r1, #192	; 0xc0
    3b30:	0389      	lsls	r1, r1, #14
    3b32:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3b34:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3b36:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3b38:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3b3a:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    3b3c:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3b3e:	3223      	adds	r2, #35	; 0x23
    3b40:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3b42:	3a18      	subs	r2, #24
    3b44:	2100      	movs	r1, #0
    3b46:	a808      	add	r0, sp, #32
    3b48:	4b1b      	ldr	r3, [pc, #108]	; (3bb8 <nm_bus_init+0xd4>)
    3b4a:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    3b4c:	4b1b      	ldr	r3, [pc, #108]	; (3bbc <nm_bus_init+0xd8>)
    3b4e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    3b50:	4b1b      	ldr	r3, [pc, #108]	; (3bc0 <nm_bus_init+0xdc>)
    3b52:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    3b54:	2301      	movs	r3, #1
    3b56:	425b      	negs	r3, r3
    3b58:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    3b5a:	4b1a      	ldr	r3, [pc, #104]	; (3bc4 <nm_bus_init+0xe0>)
    3b5c:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    3b5e:	4b1a      	ldr	r3, [pc, #104]	; (3bc8 <nm_bus_init+0xe4>)
    3b60:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    3b62:	0022      	movs	r2, r4
    3b64:	4919      	ldr	r1, [pc, #100]	; (3bcc <nm_bus_init+0xe8>)
    3b66:	481a      	ldr	r0, [pc, #104]	; (3bd0 <nm_bus_init+0xec>)
    3b68:	4b1a      	ldr	r3, [pc, #104]	; (3bd4 <nm_bus_init+0xf0>)
    3b6a:	4798      	blx	r3
    3b6c:	2800      	cmp	r0, #0
    3b6e:	d11a      	bne.n	3ba6 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b70:	4d17      	ldr	r5, [pc, #92]	; (3bd0 <nm_bus_init+0xec>)
    3b72:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3b74:	0020      	movs	r0, r4
    3b76:	4b18      	ldr	r3, [pc, #96]	; (3bd8 <nm_bus_init+0xf4>)
    3b78:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3b7a:	231f      	movs	r3, #31
    3b7c:	4018      	ands	r0, r3
    3b7e:	3b1e      	subs	r3, #30
    3b80:	4083      	lsls	r3, r0
    3b82:	4a16      	ldr	r2, [pc, #88]	; (3bdc <nm_bus_init+0xf8>)
    3b84:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b86:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3b88:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	d1fc      	bne.n	3b88 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3b8e:	6823      	ldr	r3, [r4, #0]
    3b90:	2202      	movs	r2, #2
    3b92:	4313      	orrs	r3, r2
    3b94:	6023      	str	r3, [r4, #0]
		dma_cfg_rx.source_address       = (uint32_t)(&master.hw->SPI.DATA.reg);
		dma_cfg_rx.src_increment_enable = false;
	}
#endif

	nm_bsp_reset();
    3b96:	4b12      	ldr	r3, [pc, #72]	; (3be0 <nm_bus_init+0xfc>)
    3b98:	4798      	blx	r3
	nm_bsp_sleep(1);
    3b9a:	2001      	movs	r0, #1
    3b9c:	4b11      	ldr	r3, [pc, #68]	; (3be4 <nm_bus_init+0x100>)
    3b9e:	4798      	blx	r3
#endif
	return result;
    3ba0:	2000      	movs	r0, #0
}
    3ba2:	b011      	add	sp, #68	; 0x44
    3ba4:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    3ba6:	2006      	movs	r0, #6
    3ba8:	4240      	negs	r0, r0
    3baa:	e7fa      	b.n	3ba2 <nm_bus_init+0xbe>
    3bac:	200014fc 	.word	0x200014fc
    3bb0:	0000765d 	.word	0x0000765d
    3bb4:	41004400 	.word	0x41004400
    3bb8:	0000d375 	.word	0x0000d375
    3bbc:	000c0002 	.word	0x000c0002
    3bc0:	000d0002 	.word	0x000d0002
    3bc4:	000f0002 	.word	0x000f0002
    3bc8:	00b71b00 	.word	0x00b71b00
    3bcc:	42001000 	.word	0x42001000
    3bd0:	20001500 	.word	0x20001500
    3bd4:	00007ac5 	.word	0x00007ac5
    3bd8:	00007a35 	.word	0x00007a35
    3bdc:	e000e100 	.word	0xe000e100
    3be0:	00003935 	.word	0x00003935
    3be4:	0000391d 	.word	0x0000391d

00003be8 <nm_bus_ioctl>:
*					Arbitrary parameter depending on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    3be8:	b510      	push	{r4, lr}
	sint8 s8Ret = 0;
	switch(u8Cmd)
    3bea:	2803      	cmp	r0, #3
    3bec:	d106      	bne.n	3bfc <nm_bus_ioctl+0x14>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    3bee:	890a      	ldrh	r2, [r1, #8]
    3bf0:	684b      	ldr	r3, [r1, #4]
    3bf2:	6808      	ldr	r0, [r1, #0]
    3bf4:	0019      	movs	r1, r3
    3bf6:	4b09      	ldr	r3, [pc, #36]	; (3c1c <nm_bus_ioctl+0x34>)
    3bf8:	4798      	blx	r3
			M2M_ERR("invalid ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    3bfa:	bd10      	pop	{r4, pc}
			M2M_ERR("invalid ioclt cmd\n");
    3bfc:	22b8      	movs	r2, #184	; 0xb8
    3bfe:	0052      	lsls	r2, r2, #1
    3c00:	4907      	ldr	r1, [pc, #28]	; (3c20 <nm_bus_ioctl+0x38>)
    3c02:	4808      	ldr	r0, [pc, #32]	; (3c24 <nm_bus_ioctl+0x3c>)
    3c04:	4b08      	ldr	r3, [pc, #32]	; (3c28 <nm_bus_ioctl+0x40>)
    3c06:	4798      	blx	r3
    3c08:	4808      	ldr	r0, [pc, #32]	; (3c2c <nm_bus_ioctl+0x44>)
    3c0a:	4b09      	ldr	r3, [pc, #36]	; (3c30 <nm_bus_ioctl+0x48>)
    3c0c:	4798      	blx	r3
    3c0e:	200d      	movs	r0, #13
    3c10:	4b08      	ldr	r3, [pc, #32]	; (3c34 <nm_bus_ioctl+0x4c>)
    3c12:	4798      	blx	r3
			s8Ret = -1;
    3c14:	2001      	movs	r0, #1
    3c16:	4240      	negs	r0, r0
			break;
    3c18:	e7ef      	b.n	3bfa <nm_bus_ioctl+0x12>
    3c1a:	46c0      	nop			; (mov r8, r8)
    3c1c:	000039d9 	.word	0x000039d9
    3c20:	0000ee44 	.word	0x0000ee44
    3c24:	0000ee54 	.word	0x0000ee54
    3c28:	0000d4d5 	.word	0x0000d4d5
    3c2c:	0000ee68 	.word	0x0000ee68
    3c30:	0000d5f1 	.word	0x0000d5f1
    3c34:	0000d509 	.word	0x0000d509

00003c38 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    3c38:	b530      	push	{r4, r5, lr}
    3c3a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    3c3c:	ab01      	add	r3, sp, #4
    3c3e:	2200      	movs	r2, #0
    3c40:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    3c42:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    3c44:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	nm_bsp_deinit();
    3c46:	4b14      	ldr	r3, [pc, #80]	; (3c98 <nm_bus_deinit+0x60>)
    3c48:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c4a:	4d14      	ldr	r5, [pc, #80]	; (3c9c <nm_bus_deinit+0x64>)
    3c4c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3c4e:	0020      	movs	r0, r4
    3c50:	4b13      	ldr	r3, [pc, #76]	; (3ca0 <nm_bus_deinit+0x68>)
    3c52:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3c54:	231f      	movs	r3, #31
    3c56:	4018      	ands	r0, r3
    3c58:	3b1e      	subs	r3, #30
    3c5a:	4083      	lsls	r3, r0
    3c5c:	2280      	movs	r2, #128	; 0x80
    3c5e:	4911      	ldr	r1, [pc, #68]	; (3ca4 <nm_bus_deinit+0x6c>)
    3c60:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c62:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3c64:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3c66:	2b00      	cmp	r3, #0
    3c68:	d1fc      	bne.n	3c64 <nm_bus_deinit+0x2c>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    3c6a:	338f      	adds	r3, #143	; 0x8f
    3c6c:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    3c6e:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3c70:	6823      	ldr	r3, [r4, #0]
    3c72:	2202      	movs	r2, #2
    3c74:	4393      	bics	r3, r2
    3c76:	6023      	str	r3, [r4, #0]

	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    3c78:	a901      	add	r1, sp, #4
    3c7a:	200c      	movs	r0, #12
    3c7c:	4c0a      	ldr	r4, [pc, #40]	; (3ca8 <nm_bus_deinit+0x70>)
    3c7e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    3c80:	a901      	add	r1, sp, #4
    3c82:	200f      	movs	r0, #15
    3c84:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    3c86:	a901      	add	r1, sp, #4
    3c88:	200d      	movs	r0, #13
    3c8a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    3c8c:	a901      	add	r1, sp, #4
    3c8e:	200e      	movs	r0, #14
    3c90:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    3c92:	2000      	movs	r0, #0
    3c94:	b003      	add	sp, #12
    3c96:	bd30      	pop	{r4, r5, pc}
    3c98:	000038ed 	.word	0x000038ed
    3c9c:	20001500 	.word	0x20001500
    3ca0:	00007a35 	.word	0x00007a35
    3ca4:	e000e100 	.word	0xe000e100
    3ca8:	0000765d 	.word	0x0000765d

00003cac <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    3cac:	2a00      	cmp	r2, #0
    3cae:	d006      	beq.n	3cbe <m2m_memcpy+0x12>
    3cb0:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    3cb2:	780b      	ldrb	r3, [r1, #0]
    3cb4:	7003      	strb	r3, [r0, #0]
		pDst++;
    3cb6:	3001      	adds	r0, #1
		pSrc++;
    3cb8:	3101      	adds	r1, #1
	}while(--sz);
    3cba:	4290      	cmp	r0, r2
    3cbc:	d1f9      	bne.n	3cb2 <m2m_memcpy+0x6>
}
    3cbe:	4770      	bx	lr

00003cc0 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    3cc0:	2a00      	cmp	r2, #0
    3cc2:	d004      	beq.n	3cce <m2m_memset+0xe>
    3cc4:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    3cc6:	7001      	strb	r1, [r0, #0]
		pBuf++;
    3cc8:	3001      	adds	r0, #1
	}while(--sz);
    3cca:	4290      	cmp	r0, r2
    3ccc:	d1fb      	bne.n	3cc6 <m2m_memset+0x6>
}
    3cce:	4770      	bx	lr

00003cd0 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    3cd0:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    3cd2:	7802      	ldrb	r2, [r0, #0]
    3cd4:	2a00      	cmp	r2, #0
    3cd6:	d007      	beq.n	3ce8 <m2m_strlen+0x18>
    3cd8:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    3cda:	3001      	adds	r0, #1
    3cdc:	b280      	uxth	r0, r0
		pcStr++;
    3cde:	3301      	adds	r3, #1
	while(*pcStr)
    3ce0:	781a      	ldrb	r2, [r3, #0]
    3ce2:	2a00      	cmp	r2, #0
    3ce4:	d1f9      	bne.n	3cda <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    3ce6:	4770      	bx	lr
	uint16	u16StrLen = 0;
    3ce8:	2000      	movs	r0, #0
    3cea:	e7fc      	b.n	3ce6 <m2m_strlen+0x16>

00003cec <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    3cec:	4a02      	ldr	r2, [pc, #8]	; (3cf8 <isr+0xc>)
    3cee:	78d3      	ldrb	r3, [r2, #3]
    3cf0:	3301      	adds	r3, #1
    3cf2:	b2db      	uxtb	r3, r3
    3cf4:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    3cf6:	4770      	bx	lr
    3cf8:	2000153c 	.word	0x2000153c

00003cfc <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    3cfc:	4770      	bx	lr
	...

00003d00 <hif_set_rx_done>:
{
    3d00:	b500      	push	{lr}
    3d02:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    3d04:	2200      	movs	r2, #0
    3d06:	4b0a      	ldr	r3, [pc, #40]	; (3d30 <hif_set_rx_done+0x30>)
    3d08:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    3d0a:	2001      	movs	r0, #1
    3d0c:	4b09      	ldr	r3, [pc, #36]	; (3d34 <hif_set_rx_done+0x34>)
    3d0e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    3d10:	a901      	add	r1, sp, #4
    3d12:	4809      	ldr	r0, [pc, #36]	; (3d38 <hif_set_rx_done+0x38>)
    3d14:	4b09      	ldr	r3, [pc, #36]	; (3d3c <hif_set_rx_done+0x3c>)
    3d16:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    3d18:	2800      	cmp	r0, #0
    3d1a:	d001      	beq.n	3d20 <hif_set_rx_done+0x20>
}
    3d1c:	b003      	add	sp, #12
    3d1e:	bd00      	pop	{pc}
	reg |= NBIT1;
    3d20:	2102      	movs	r1, #2
    3d22:	9b01      	ldr	r3, [sp, #4]
    3d24:	4319      	orrs	r1, r3
    3d26:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    3d28:	4803      	ldr	r0, [pc, #12]	; (3d38 <hif_set_rx_done+0x38>)
    3d2a:	4b05      	ldr	r3, [pc, #20]	; (3d40 <hif_set_rx_done+0x40>)
    3d2c:	4798      	blx	r3
    3d2e:	e7f5      	b.n	3d1c <hif_set_rx_done+0x1c>
    3d30:	2000153c 	.word	0x2000153c
    3d34:	000039b5 	.word	0x000039b5
    3d38:	00001070 	.word	0x00001070
    3d3c:	00005a1d 	.word	0x00005a1d
    3d40:	00005a29 	.word	0x00005a29

00003d44 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    3d44:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    3d46:	4b0c      	ldr	r3, [pc, #48]	; (3d78 <hif_chip_wake+0x34>)
    3d48:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    3d4a:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    3d4c:	2b00      	cmp	r3, #0
    3d4e:	d10d      	bne.n	3d6c <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    3d50:	4b09      	ldr	r3, [pc, #36]	; (3d78 <hif_chip_wake+0x34>)
    3d52:	785b      	ldrb	r3, [r3, #1]
    3d54:	2b00      	cmp	r3, #0
    3d56:	d103      	bne.n	3d60 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    3d58:	4b07      	ldr	r3, [pc, #28]	; (3d78 <hif_chip_wake+0x34>)
    3d5a:	781b      	ldrb	r3, [r3, #0]
    3d5c:	2b00      	cmp	r3, #0
    3d5e:	d106      	bne.n	3d6e <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    3d60:	4a05      	ldr	r2, [pc, #20]	; (3d78 <hif_chip_wake+0x34>)
    3d62:	7853      	ldrb	r3, [r2, #1]
    3d64:	3301      	adds	r3, #1
    3d66:	b2db      	uxtb	r3, r3
    3d68:	7053      	strb	r3, [r2, #1]
    3d6a:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    3d6c:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    3d6e:	4b03      	ldr	r3, [pc, #12]	; (3d7c <hif_chip_wake+0x38>)
    3d70:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    3d72:	2800      	cmp	r0, #0
    3d74:	d0f4      	beq.n	3d60 <hif_chip_wake+0x1c>
    3d76:	e7f9      	b.n	3d6c <hif_chip_wake+0x28>
    3d78:	2000153c 	.word	0x2000153c
    3d7c:	000055d9 	.word	0x000055d9

00003d80 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    3d80:	4b05      	ldr	r3, [pc, #20]	; (3d98 <hif_chip_sleep_sc+0x18>)
    3d82:	785b      	ldrb	r3, [r3, #1]
    3d84:	2b00      	cmp	r3, #0
    3d86:	d004      	beq.n	3d92 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    3d88:	4a03      	ldr	r2, [pc, #12]	; (3d98 <hif_chip_sleep_sc+0x18>)
    3d8a:	7853      	ldrb	r3, [r2, #1]
    3d8c:	3b01      	subs	r3, #1
    3d8e:	b2db      	uxtb	r3, r3
    3d90:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    3d92:	2000      	movs	r0, #0
    3d94:	4770      	bx	lr
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	2000153c 	.word	0x2000153c

00003d9c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    3d9c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    3d9e:	4b0b      	ldr	r3, [pc, #44]	; (3dcc <hif_chip_sleep+0x30>)
    3da0:	785b      	ldrb	r3, [r3, #1]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d004      	beq.n	3db0 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    3da6:	4a09      	ldr	r2, [pc, #36]	; (3dcc <hif_chip_sleep+0x30>)
    3da8:	7853      	ldrb	r3, [r2, #1]
    3daa:	3b01      	subs	r3, #1
    3dac:	b2db      	uxtb	r3, r3
    3dae:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    3db0:	4b06      	ldr	r3, [pc, #24]	; (3dcc <hif_chip_sleep+0x30>)
    3db2:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    3db4:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    3db6:	2b00      	cmp	r3, #0
    3db8:	d103      	bne.n	3dc2 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    3dba:	4b04      	ldr	r3, [pc, #16]	; (3dcc <hif_chip_sleep+0x30>)
    3dbc:	781b      	ldrb	r3, [r3, #0]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d100      	bne.n	3dc4 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    3dc2:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    3dc4:	4b02      	ldr	r3, [pc, #8]	; (3dd0 <hif_chip_sleep+0x34>)
    3dc6:	4798      	blx	r3
    3dc8:	e7fb      	b.n	3dc2 <hif_chip_sleep+0x26>
    3dca:	46c0      	nop			; (mov r8, r8)
    3dcc:	2000153c 	.word	0x2000153c
    3dd0:	00005571 	.word	0x00005571

00003dd4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    3dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dd6:	46de      	mov	lr, fp
    3dd8:	4657      	mov	r7, sl
    3dda:	b580      	push	{r7, lr}
    3ddc:	b089      	sub	sp, #36	; 0x24
    3dde:	4683      	mov	fp, r0
    3de0:	468a      	mov	sl, r1
    3de2:	9201      	str	r2, [sp, #4]
    3de4:	9300      	str	r3, [sp, #0]
    3de6:	ab10      	add	r3, sp, #64	; 0x40
    3de8:	cb80      	ldmia	r3!, {r7}
    3dea:	881e      	ldrh	r6, [r3, #0]
    3dec:	ab12      	add	r3, sp, #72	; 0x48
    3dee:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    3df0:	aa07      	add	r2, sp, #28
    3df2:	237f      	movs	r3, #127	; 0x7f
    3df4:	400b      	ands	r3, r1
    3df6:	7053      	strb	r3, [r2, #1]
	strHif.u8Gid		= u8Gid;
    3df8:	7010      	strb	r0, [r2, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
	if(pu8DataBuf != NULL)
    3dfa:	2f00      	cmp	r7, #0
    3dfc:	d042      	beq.n	3e84 <hif_send+0xb0>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    3dfe:	0033      	movs	r3, r6
    3e00:	3308      	adds	r3, #8
    3e02:	18eb      	adds	r3, r5, r3
    3e04:	8053      	strh	r3, [r2, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
    if (strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
    3e06:	4b72      	ldr	r3, [pc, #456]	; (3fd0 <hif_send+0x1fc>)
    3e08:	aa07      	add	r2, sp, #28
    3e0a:	8852      	ldrh	r2, [r2, #2]
    3e0c:	429a      	cmp	r2, r3
    3e0e:	d900      	bls.n	3e12 <hif_send+0x3e>
    3e10:	e0cd      	b.n	3fae <hif_send+0x1da>
    {
	ret = hif_chip_wake();
    3e12:	4b70      	ldr	r3, [pc, #448]	; (3fd4 <hif_send+0x200>)
    3e14:	4798      	blx	r3
    3e16:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    3e18:	d000      	beq.n	3e1c <hif_send+0x48>
    3e1a:	e0bb      	b.n	3f94 <hif_send+0x1c0>
	{
		volatile uint32 reg, dma_addr = 0;
    3e1c:	2300      	movs	r3, #0
    3e1e:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    3e20:	aa02      	add	r2, sp, #8
    3e22:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    3e24:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    3e26:	9b04      	ldr	r3, [sp, #16]
    3e28:	465a      	mov	r2, fp
    3e2a:	431a      	orrs	r2, r3
    3e2c:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    3e2e:	9a04      	ldr	r2, [sp, #16]
    3e30:	4653      	mov	r3, sl
    3e32:	021b      	lsls	r3, r3, #8
    3e34:	4313      	orrs	r3, r2
    3e36:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    3e38:	9a04      	ldr	r2, [sp, #16]
    3e3a:	ab07      	add	r3, sp, #28
    3e3c:	885b      	ldrh	r3, [r3, #2]
    3e3e:	041b      	lsls	r3, r3, #16
    3e40:	4313      	orrs	r3, r2
    3e42:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    3e44:	9904      	ldr	r1, [sp, #16]
    3e46:	4864      	ldr	r0, [pc, #400]	; (3fd8 <hif_send+0x204>)
    3e48:	4b64      	ldr	r3, [pc, #400]	; (3fdc <hif_send+0x208>)
    3e4a:	4798      	blx	r3
    3e4c:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    3e4e:	d154      	bne.n	3efa <hif_send+0x126>

		reg = 0UL;
    3e50:	2300      	movs	r3, #0
    3e52:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    3e54:	9b04      	ldr	r3, [sp, #16]
    3e56:	2202      	movs	r2, #2
    3e58:	4313      	orrs	r3, r2
    3e5a:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    3e5c:	9904      	ldr	r1, [sp, #16]
    3e5e:	4860      	ldr	r0, [pc, #384]	; (3fe0 <hif_send+0x20c>)
    3e60:	4b5e      	ldr	r3, [pc, #376]	; (3fdc <hif_send+0x208>)
    3e62:	4798      	blx	r3
    3e64:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    3e66:	d148      	bne.n	3efa <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    3e68:	2200      	movs	r2, #0
    3e6a:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    3e6c:	ab02      	add	r3, sp, #8
    3e6e:	80da      	strh	r2, [r3, #6]
    3e70:	3306      	adds	r3, #6
    3e72:	881b      	ldrh	r3, [r3, #0]
    3e74:	b29b      	uxth	r3, r3
    3e76:	4a5b      	ldr	r2, [pc, #364]	; (3fe4 <hif_send+0x210>)
    3e78:	4293      	cmp	r3, r2
    3e7a:	d846      	bhi.n	3f0a <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    3e7c:	4c5a      	ldr	r4, [pc, #360]	; (3fe8 <hif_send+0x214>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    3e7e:	4b5b      	ldr	r3, [pc, #364]	; (3fec <hif_send+0x218>)
    3e80:	469a      	mov	sl, r3
    3e82:	e014      	b.n	3eae <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    3e84:	9b00      	ldr	r3, [sp, #0]
    3e86:	3308      	adds	r3, #8
    3e88:	aa07      	add	r2, sp, #28
    3e8a:	8053      	strh	r3, [r2, #2]
    3e8c:	e7bb      	b.n	3e06 <hif_send+0x32>
				nm_bsp_sleep(1);
    3e8e:	2001      	movs	r0, #1
    3e90:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    3e92:	9b04      	ldr	r3, [sp, #16]
    3e94:	079b      	lsls	r3, r3, #30
    3e96:	d528      	bpl.n	3eea <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    3e98:	ab02      	add	r3, sp, #8
    3e9a:	1d9a      	adds	r2, r3, #6
    3e9c:	88db      	ldrh	r3, [r3, #6]
    3e9e:	3301      	adds	r3, #1
    3ea0:	b29b      	uxth	r3, r3
    3ea2:	8013      	strh	r3, [r2, #0]
    3ea4:	8813      	ldrh	r3, [r2, #0]
    3ea6:	b29b      	uxth	r3, r3
    3ea8:	4a4e      	ldr	r2, [pc, #312]	; (3fe4 <hif_send+0x210>)
    3eaa:	4293      	cmp	r3, r2
    3eac:	d82d      	bhi.n	3f0a <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    3eae:	a904      	add	r1, sp, #16
    3eb0:	484b      	ldr	r0, [pc, #300]	; (3fe0 <hif_send+0x20c>)
    3eb2:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    3eb4:	2800      	cmp	r0, #0
    3eb6:	d128      	bne.n	3f0a <hif_send+0x136>
			if(cnt >= 500) {
    3eb8:	ab02      	add	r3, sp, #8
    3eba:	3306      	adds	r3, #6
    3ebc:	881b      	ldrh	r3, [r3, #0]
    3ebe:	b29b      	uxth	r3, r3
    3ec0:	22f4      	movs	r2, #244	; 0xf4
    3ec2:	32ff      	adds	r2, #255	; 0xff
    3ec4:	4293      	cmp	r3, r2
    3ec6:	d9e4      	bls.n	3e92 <hif_send+0xbe>
				if(cnt < 501) {
    3ec8:	ab02      	add	r3, sp, #8
    3eca:	3306      	adds	r3, #6
    3ecc:	881b      	ldrh	r3, [r3, #0]
    3ece:	b29b      	uxth	r3, r3
    3ed0:	3201      	adds	r2, #1
    3ed2:	4293      	cmp	r3, r2
    3ed4:	d8db      	bhi.n	3e8e <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    3ed6:	4846      	ldr	r0, [pc, #280]	; (3ff0 <hif_send+0x21c>)
    3ed8:	4b46      	ldr	r3, [pc, #280]	; (3ff4 <hif_send+0x220>)
    3eda:	4798      	blx	r3
    3edc:	4846      	ldr	r0, [pc, #280]	; (3ff8 <hif_send+0x224>)
    3ede:	4b47      	ldr	r3, [pc, #284]	; (3ffc <hif_send+0x228>)
    3ee0:	4798      	blx	r3
    3ee2:	200d      	movs	r0, #13
    3ee4:	4b46      	ldr	r3, [pc, #280]	; (4000 <hif_send+0x22c>)
    3ee6:	4798      	blx	r3
    3ee8:	e7d1      	b.n	3e8e <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    3eea:	a905      	add	r1, sp, #20
    3eec:	4845      	ldr	r0, [pc, #276]	; (4004 <hif_send+0x230>)
    3eee:	4b3e      	ldr	r3, [pc, #248]	; (3fe8 <hif_send+0x214>)
    3ef0:	4798      	blx	r3
    3ef2:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    3ef4:	d009      	beq.n	3f0a <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    3ef6:	2300      	movs	r3, #0
    3ef8:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    3efa:	4b43      	ldr	r3, [pc, #268]	; (4008 <hif_send+0x234>)
    3efc:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    3efe:	0020      	movs	r0, r4
    3f00:	b009      	add	sp, #36	; 0x24
    3f02:	bc0c      	pop	{r2, r3}
    3f04:	4692      	mov	sl, r2
    3f06:	469b      	mov	fp, r3
    3f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    3f0a:	9b05      	ldr	r3, [sp, #20]
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	d03c      	beq.n	3f8a <hif_send+0x1b6>
			u32CurrAddr = dma_addr;
    3f10:	9b05      	ldr	r3, [sp, #20]
    3f12:	9306      	str	r3, [sp, #24]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    3f14:	9806      	ldr	r0, [sp, #24]
    3f16:	2208      	movs	r2, #8
    3f18:	a907      	add	r1, sp, #28
    3f1a:	4b3c      	ldr	r3, [pc, #240]	; (400c <hif_send+0x238>)
    3f1c:	4798      	blx	r3
    3f1e:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    3f20:	d1eb      	bne.n	3efa <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    3f22:	9b06      	ldr	r3, [sp, #24]
    3f24:	3308      	adds	r3, #8
    3f26:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    3f28:	9b01      	ldr	r3, [sp, #4]
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d00b      	beq.n	3f46 <hif_send+0x172>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    3f2e:	9806      	ldr	r0, [sp, #24]
    3f30:	9a00      	ldr	r2, [sp, #0]
    3f32:	0019      	movs	r1, r3
    3f34:	4b35      	ldr	r3, [pc, #212]	; (400c <hif_send+0x238>)
    3f36:	4798      	blx	r3
    3f38:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    3f3a:	d1de      	bne.n	3efa <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    3f3c:	9b06      	ldr	r3, [sp, #24]
    3f3e:	9a00      	ldr	r2, [sp, #0]
    3f40:	4694      	mov	ip, r2
    3f42:	4463      	add	r3, ip
    3f44:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    3f46:	2f00      	cmp	r7, #0
    3f48:	d00e      	beq.n	3f68 <hif_send+0x194>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    3f4a:	9b06      	ldr	r3, [sp, #24]
    3f4c:	9a00      	ldr	r2, [sp, #0]
    3f4e:	1aad      	subs	r5, r5, r2
    3f50:	18ed      	adds	r5, r5, r3
    3f52:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    3f54:	9806      	ldr	r0, [sp, #24]
    3f56:	0032      	movs	r2, r6
    3f58:	0039      	movs	r1, r7
    3f5a:	4b2c      	ldr	r3, [pc, #176]	; (400c <hif_send+0x238>)
    3f5c:	4798      	blx	r3
    3f5e:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    3f60:	d1cb      	bne.n	3efa <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    3f62:	9b06      	ldr	r3, [sp, #24]
    3f64:	18f3      	adds	r3, r6, r3
    3f66:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    3f68:	9b05      	ldr	r3, [sp, #20]
    3f6a:	009b      	lsls	r3, r3, #2
    3f6c:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    3f6e:	9b04      	ldr	r3, [sp, #16]
    3f70:	2202      	movs	r2, #2
    3f72:	4313      	orrs	r3, r2
    3f74:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    3f76:	9904      	ldr	r1, [sp, #16]
    3f78:	4825      	ldr	r0, [pc, #148]	; (4010 <hif_send+0x23c>)
    3f7a:	4b18      	ldr	r3, [pc, #96]	; (3fdc <hif_send+0x208>)
    3f7c:	4798      	blx	r3
    3f7e:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    3f80:	d1bb      	bne.n	3efa <hif_send+0x126>
 	ret = hif_chip_sleep();
    3f82:	4b24      	ldr	r3, [pc, #144]	; (4014 <hif_send+0x240>)
    3f84:	4798      	blx	r3
    3f86:	0004      	movs	r4, r0
	return ret;
    3f88:	e7b9      	b.n	3efe <hif_send+0x12a>
			ret = hif_chip_sleep();
    3f8a:	4b22      	ldr	r3, [pc, #136]	; (4014 <hif_send+0x240>)
    3f8c:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    3f8e:	2403      	movs	r4, #3
    3f90:	4264      	negs	r4, r4
			goto ERR2;
    3f92:	e7b4      	b.n	3efe <hif_send+0x12a>
            M2M_ERR("(HIF)Failed to wakeup the chip\n");
    3f94:	22cb      	movs	r2, #203	; 0xcb
    3f96:	0052      	lsls	r2, r2, #1
    3f98:	491f      	ldr	r1, [pc, #124]	; (4018 <hif_send+0x244>)
    3f9a:	4820      	ldr	r0, [pc, #128]	; (401c <hif_send+0x248>)
    3f9c:	4b15      	ldr	r3, [pc, #84]	; (3ff4 <hif_send+0x220>)
    3f9e:	4798      	blx	r3
    3fa0:	481f      	ldr	r0, [pc, #124]	; (4020 <hif_send+0x24c>)
    3fa2:	4b16      	ldr	r3, [pc, #88]	; (3ffc <hif_send+0x228>)
    3fa4:	4798      	blx	r3
    3fa6:	200d      	movs	r0, #13
    3fa8:	4b15      	ldr	r3, [pc, #84]	; (4000 <hif_send+0x22c>)
    3faa:	4798      	blx	r3
            goto ERR2;
    3fac:	e7a7      	b.n	3efe <hif_send+0x12a>
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n",strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
    3fae:	22ce      	movs	r2, #206	; 0xce
    3fb0:	0052      	lsls	r2, r2, #1
    3fb2:	4919      	ldr	r1, [pc, #100]	; (4018 <hif_send+0x244>)
    3fb4:	4819      	ldr	r0, [pc, #100]	; (401c <hif_send+0x248>)
    3fb6:	4c0f      	ldr	r4, [pc, #60]	; (3ff4 <hif_send+0x220>)
    3fb8:	47a0      	blx	r4
    3fba:	ab07      	add	r3, sp, #28
    3fbc:	8859      	ldrh	r1, [r3, #2]
    3fbe:	4a04      	ldr	r2, [pc, #16]	; (3fd0 <hif_send+0x1fc>)
    3fc0:	4818      	ldr	r0, [pc, #96]	; (4024 <hif_send+0x250>)
    3fc2:	47a0      	blx	r4
    3fc4:	200d      	movs	r0, #13
    3fc6:	4b0e      	ldr	r3, [pc, #56]	; (4000 <hif_send+0x22c>)
    3fc8:	4798      	blx	r3
        ret = M2M_ERR_SEND;
    3fca:	2401      	movs	r4, #1
    3fcc:	4264      	negs	r4, r4
		goto ERR2;
    3fce:	e796      	b.n	3efe <hif_send+0x12a>
    3fd0:	0000063c 	.word	0x0000063c
    3fd4:	00003d45 	.word	0x00003d45
    3fd8:	0000108c 	.word	0x0000108c
    3fdc:	00005a29 	.word	0x00005a29
    3fe0:	00001078 	.word	0x00001078
    3fe4:	000003e7 	.word	0x000003e7
    3fe8:	00005a1d 	.word	0x00005a1d
    3fec:	0000391d 	.word	0x0000391d
    3ff0:	0000f1f4 	.word	0x0000f1f4
    3ff4:	0000d4d5 	.word	0x0000d4d5
    3ff8:	0000f200 	.word	0x0000f200
    3ffc:	0000d5f1 	.word	0x0000d5f1
    4000:	0000d509 	.word	0x0000d509
    4004:	00150400 	.word	0x00150400
    4008:	00003d81 	.word	0x00003d81
    400c:	00005a9d 	.word	0x00005a9d
    4010:	0000106c 	.word	0x0000106c
    4014:	00003d9d 	.word	0x00003d9d
    4018:	0000ee9c 	.word	0x0000ee9c
    401c:	0000ee54 	.word	0x0000ee54
    4020:	0000f210 	.word	0x0000f210
    4024:	0000f230 	.word	0x0000f230

00004028 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    4028:	b5f0      	push	{r4, r5, r6, r7, lr}
    402a:	46de      	mov	lr, fp
    402c:	4657      	mov	r7, sl
    402e:	464e      	mov	r6, r9
    4030:	b5c0      	push	{r6, r7, lr}
    4032:	b086      	sub	sp, #24
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    4034:	2200      	movs	r2, #0
    4036:	4bd8      	ldr	r3, [pc, #864]	; (4398 <hif_handle_isr+0x370>)
    4038:	711a      	strb	r2, [r3, #4]
	sint8 ret = M2M_SUCCESS;	
    403a:	2600      	movs	r6, #0
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
    403c:	4699      	mov	r9, r3
    403e:	469a      	mov	sl, r3
    4040:	e149      	b.n	42d6 <hif_handle_isr+0x2ae>
				gstrHifCxt.u32RxAddr = address;
    4042:	4bd5      	ldr	r3, [pc, #852]	; (4398 <hif_handle_isr+0x370>)
    4044:	9a05      	ldr	r2, [sp, #20]
    4046:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    4048:	465a      	mov	r2, fp
    404a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    404c:	2204      	movs	r2, #4
    404e:	a904      	add	r1, sp, #16
    4050:	9805      	ldr	r0, [sp, #20]
    4052:	4bd2      	ldr	r3, [pc, #840]	; (439c <hif_handle_isr+0x374>)
    4054:	4798      	blx	r3
    4056:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    4058:	466b      	mov	r3, sp
    405a:	8a5b      	ldrh	r3, [r3, #18]
    405c:	b29b      	uxth	r3, r3
    405e:	466a      	mov	r2, sp
    4060:	8253      	strh	r3, [r2, #18]
				if(M2M_SUCCESS != ret)
    4062:	2800      	cmp	r0, #0
    4064:	d135      	bne.n	40d2 <hif_handle_isr+0xaa>
				if(strHif.u16Length != size)
    4066:	ab04      	add	r3, sp, #16
    4068:	885b      	ldrh	r3, [r3, #2]
    406a:	b29b      	uxth	r3, r3
    406c:	459b      	cmp	fp, r3
    406e:	d005      	beq.n	407c <hif_handle_isr+0x54>
					if((size - strHif.u16Length) > 4)
    4070:	ab04      	add	r3, sp, #16
    4072:	885b      	ldrh	r3, [r3, #2]
    4074:	465a      	mov	r2, fp
    4076:	1ad3      	subs	r3, r2, r3
    4078:	2b04      	cmp	r3, #4
    407a:	dc37      	bgt.n	40ec <hif_handle_isr+0xc4>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    407c:	ab04      	add	r3, sp, #16
    407e:	781b      	ldrb	r3, [r3, #0]
    4080:	2b01      	cmp	r3, #1
    4082:	d049      	beq.n	4118 <hif_handle_isr+0xf0>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    4084:	ab04      	add	r3, sp, #16
    4086:	781b      	ldrb	r3, [r3, #0]
    4088:	2b02      	cmp	r3, #2
    408a:	d07b      	beq.n	4184 <hif_handle_isr+0x15c>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    408c:	ab04      	add	r3, sp, #16
    408e:	781b      	ldrb	r3, [r3, #0]
    4090:	2b04      	cmp	r3, #4
    4092:	d100      	bne.n	4096 <hif_handle_isr+0x6e>
    4094:	e093      	b.n	41be <hif_handle_isr+0x196>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    4096:	ab04      	add	r3, sp, #16
    4098:	781b      	ldrb	r3, [r3, #0]
    409a:	2b06      	cmp	r3, #6
    409c:	d100      	bne.n	40a0 <hif_handle_isr+0x78>
    409e:	e0ab      	b.n	41f8 <hif_handle_isr+0x1d0>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    40a0:	ab04      	add	r3, sp, #16
    40a2:	781b      	ldrb	r3, [r3, #0]
    40a4:	2b07      	cmp	r3, #7
    40a6:	d100      	bne.n	40aa <hif_handle_isr+0x82>
    40a8:	e0c3      	b.n	4232 <hif_handle_isr+0x20a>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    40aa:	ab04      	add	r3, sp, #16
    40ac:	781b      	ldrb	r3, [r3, #0]
    40ae:	2b05      	cmp	r3, #5
    40b0:	d100      	bne.n	40b4 <hif_handle_isr+0x8c>
    40b2:	e0da      	b.n	426a <hif_handle_isr+0x242>
					M2M_ERR("(hif) invalid group ID\n");
    40b4:	2284      	movs	r2, #132	; 0x84
    40b6:	0092      	lsls	r2, r2, #2
    40b8:	49b9      	ldr	r1, [pc, #740]	; (43a0 <hif_handle_isr+0x378>)
    40ba:	48ba      	ldr	r0, [pc, #744]	; (43a4 <hif_handle_isr+0x37c>)
    40bc:	4bba      	ldr	r3, [pc, #744]	; (43a8 <hif_handle_isr+0x380>)
    40be:	4798      	blx	r3
    40c0:	48ba      	ldr	r0, [pc, #744]	; (43ac <hif_handle_isr+0x384>)
    40c2:	4bbb      	ldr	r3, [pc, #748]	; (43b0 <hif_handle_isr+0x388>)
    40c4:	4798      	blx	r3
    40c6:	200d      	movs	r0, #13
    40c8:	4bba      	ldr	r3, [pc, #744]	; (43b4 <hif_handle_isr+0x38c>)
    40ca:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    40cc:	2406      	movs	r4, #6
    40ce:	4264      	negs	r4, r4
    40d0:	e123      	b.n	431a <hif_handle_isr+0x2f2>
					M2M_ERR("(hif) address bus fail\n");
    40d2:	22eb      	movs	r2, #235	; 0xeb
    40d4:	0052      	lsls	r2, r2, #1
    40d6:	49b2      	ldr	r1, [pc, #712]	; (43a0 <hif_handle_isr+0x378>)
    40d8:	48b2      	ldr	r0, [pc, #712]	; (43a4 <hif_handle_isr+0x37c>)
    40da:	4bb3      	ldr	r3, [pc, #716]	; (43a8 <hif_handle_isr+0x380>)
    40dc:	4798      	blx	r3
    40de:	48b6      	ldr	r0, [pc, #728]	; (43b8 <hif_handle_isr+0x390>)
    40e0:	4bb3      	ldr	r3, [pc, #716]	; (43b0 <hif_handle_isr+0x388>)
    40e2:	4798      	blx	r3
    40e4:	200d      	movs	r0, #13
    40e6:	4bb3      	ldr	r3, [pc, #716]	; (43b4 <hif_handle_isr+0x38c>)
    40e8:	4798      	blx	r3
    40ea:	e116      	b.n	431a <hif_handle_isr+0x2f2>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    40ec:	22ef      	movs	r2, #239	; 0xef
    40ee:	0052      	lsls	r2, r2, #1
    40f0:	49ab      	ldr	r1, [pc, #684]	; (43a0 <hif_handle_isr+0x378>)
    40f2:	48ac      	ldr	r0, [pc, #688]	; (43a4 <hif_handle_isr+0x37c>)
    40f4:	4cac      	ldr	r4, [pc, #688]	; (43a8 <hif_handle_isr+0x380>)
    40f6:	47a0      	blx	r4
    40f8:	a904      	add	r1, sp, #16
    40fa:	884a      	ldrh	r2, [r1, #2]
    40fc:	b292      	uxth	r2, r2
    40fe:	780b      	ldrb	r3, [r1, #0]
    4100:	b2db      	uxtb	r3, r3
    4102:	7849      	ldrb	r1, [r1, #1]
    4104:	9100      	str	r1, [sp, #0]
    4106:	4659      	mov	r1, fp
    4108:	48ac      	ldr	r0, [pc, #688]	; (43bc <hif_handle_isr+0x394>)
    410a:	47a0      	blx	r4
    410c:	200d      	movs	r0, #13
    410e:	4ba9      	ldr	r3, [pc, #676]	; (43b4 <hif_handle_isr+0x38c>)
    4110:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    4112:	2406      	movs	r4, #6
    4114:	4264      	negs	r4, r4
    4116:	e100      	b.n	431a <hif_handle_isr+0x2f2>
					if(gstrHifCxt.pfWifiCb)
    4118:	4b9f      	ldr	r3, [pc, #636]	; (4398 <hif_handle_isr+0x370>)
    411a:	691b      	ldr	r3, [r3, #16]
    411c:	2b00      	cmp	r3, #0
    411e:	d024      	beq.n	416a <hif_handle_isr+0x142>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4120:	4b9d      	ldr	r3, [pc, #628]	; (4398 <hif_handle_isr+0x370>)
    4122:	691b      	ldr	r3, [r3, #16]
    4124:	aa04      	add	r2, sp, #16
    4126:	7850      	ldrb	r0, [r2, #1]
    4128:	b2c0      	uxtb	r0, r0
    412a:	8851      	ldrh	r1, [r2, #2]
    412c:	9a05      	ldr	r2, [sp, #20]
    412e:	3208      	adds	r2, #8
    4130:	3908      	subs	r1, #8
    4132:	b289      	uxth	r1, r1
    4134:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    4136:	4b98      	ldr	r3, [pc, #608]	; (4398 <hif_handle_isr+0x370>)
    4138:	789b      	ldrb	r3, [r3, #2]
    413a:	2b00      	cmp	r3, #0
    413c:	d100      	bne.n	4140 <hif_handle_isr+0x118>
    413e:	e0ca      	b.n	42d6 <hif_handle_isr+0x2ae>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    4140:	4a9f      	ldr	r2, [pc, #636]	; (43c0 <hif_handle_isr+0x398>)
    4142:	4997      	ldr	r1, [pc, #604]	; (43a0 <hif_handle_isr+0x378>)
    4144:	4897      	ldr	r0, [pc, #604]	; (43a4 <hif_handle_isr+0x37c>)
    4146:	4c98      	ldr	r4, [pc, #608]	; (43a8 <hif_handle_isr+0x380>)
    4148:	47a0      	blx	r4
    414a:	ab04      	add	r3, sp, #16
    414c:	7819      	ldrb	r1, [r3, #0]
    414e:	b2c9      	uxtb	r1, r1
    4150:	785a      	ldrb	r2, [r3, #1]
    4152:	b2d2      	uxtb	r2, r2
    4154:	489b      	ldr	r0, [pc, #620]	; (43c4 <hif_handle_isr+0x39c>)
    4156:	47a0      	blx	r4
    4158:	200d      	movs	r0, #13
    415a:	4b96      	ldr	r3, [pc, #600]	; (43b4 <hif_handle_isr+0x38c>)
    415c:	4798      	blx	r3
					ret = hif_set_rx_done();
    415e:	4b9a      	ldr	r3, [pc, #616]	; (43c8 <hif_handle_isr+0x3a0>)
    4160:	4798      	blx	r3
    4162:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    4164:	d000      	beq.n	4168 <hif_handle_isr+0x140>
    4166:	e0d8      	b.n	431a <hif_handle_isr+0x2f2>
    4168:	e0b5      	b.n	42d6 <hif_handle_isr+0x2ae>
						M2M_ERR("WIFI callback is not registered\n");
    416a:	22ea      	movs	r2, #234	; 0xea
    416c:	32ff      	adds	r2, #255	; 0xff
    416e:	498c      	ldr	r1, [pc, #560]	; (43a0 <hif_handle_isr+0x378>)
    4170:	488c      	ldr	r0, [pc, #560]	; (43a4 <hif_handle_isr+0x37c>)
    4172:	4b8d      	ldr	r3, [pc, #564]	; (43a8 <hif_handle_isr+0x380>)
    4174:	4798      	blx	r3
    4176:	4895      	ldr	r0, [pc, #596]	; (43cc <hif_handle_isr+0x3a4>)
    4178:	4b8d      	ldr	r3, [pc, #564]	; (43b0 <hif_handle_isr+0x388>)
    417a:	4798      	blx	r3
    417c:	200d      	movs	r0, #13
    417e:	4b8d      	ldr	r3, [pc, #564]	; (43b4 <hif_handle_isr+0x38c>)
    4180:	4798      	blx	r3
    4182:	e7d8      	b.n	4136 <hif_handle_isr+0x10e>
					if(gstrHifCxt.pfIpCb)
    4184:	4b84      	ldr	r3, [pc, #528]	; (4398 <hif_handle_isr+0x370>)
    4186:	695b      	ldr	r3, [r3, #20]
    4188:	2b00      	cmp	r3, #0
    418a:	d00b      	beq.n	41a4 <hif_handle_isr+0x17c>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    418c:	4b82      	ldr	r3, [pc, #520]	; (4398 <hif_handle_isr+0x370>)
    418e:	695b      	ldr	r3, [r3, #20]
    4190:	aa04      	add	r2, sp, #16
    4192:	7850      	ldrb	r0, [r2, #1]
    4194:	b2c0      	uxtb	r0, r0
    4196:	8851      	ldrh	r1, [r2, #2]
    4198:	9a05      	ldr	r2, [sp, #20]
    419a:	3208      	adds	r2, #8
    419c:	3908      	subs	r1, #8
    419e:	b289      	uxth	r1, r1
    41a0:	4798      	blx	r3
    41a2:	e7c8      	b.n	4136 <hif_handle_isr+0x10e>
						M2M_ERR("Socket callback is not registered\n");
    41a4:	22f8      	movs	r2, #248	; 0xf8
    41a6:	0052      	lsls	r2, r2, #1
    41a8:	497d      	ldr	r1, [pc, #500]	; (43a0 <hif_handle_isr+0x378>)
    41aa:	487e      	ldr	r0, [pc, #504]	; (43a4 <hif_handle_isr+0x37c>)
    41ac:	4b7e      	ldr	r3, [pc, #504]	; (43a8 <hif_handle_isr+0x380>)
    41ae:	4798      	blx	r3
    41b0:	4887      	ldr	r0, [pc, #540]	; (43d0 <hif_handle_isr+0x3a8>)
    41b2:	4b7f      	ldr	r3, [pc, #508]	; (43b0 <hif_handle_isr+0x388>)
    41b4:	4798      	blx	r3
    41b6:	200d      	movs	r0, #13
    41b8:	4b7e      	ldr	r3, [pc, #504]	; (43b4 <hif_handle_isr+0x38c>)
    41ba:	4798      	blx	r3
    41bc:	e7bb      	b.n	4136 <hif_handle_isr+0x10e>
					if(gstrHifCxt.pfOtaCb)
    41be:	4b76      	ldr	r3, [pc, #472]	; (4398 <hif_handle_isr+0x370>)
    41c0:	699b      	ldr	r3, [r3, #24]
    41c2:	2b00      	cmp	r3, #0
    41c4:	d00b      	beq.n	41de <hif_handle_isr+0x1b6>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    41c6:	4b74      	ldr	r3, [pc, #464]	; (4398 <hif_handle_isr+0x370>)
    41c8:	699b      	ldr	r3, [r3, #24]
    41ca:	aa04      	add	r2, sp, #16
    41cc:	7850      	ldrb	r0, [r2, #1]
    41ce:	b2c0      	uxtb	r0, r0
    41d0:	8851      	ldrh	r1, [r2, #2]
    41d2:	9a05      	ldr	r2, [sp, #20]
    41d4:	3208      	adds	r2, #8
    41d6:	3908      	subs	r1, #8
    41d8:	b289      	uxth	r1, r1
    41da:	4798      	blx	r3
    41dc:	e7ab      	b.n	4136 <hif_handle_isr+0x10e>
						M2M_ERR("Ota callback is not registered\n");
    41de:	22f8      	movs	r2, #248	; 0xf8
    41e0:	32ff      	adds	r2, #255	; 0xff
    41e2:	496f      	ldr	r1, [pc, #444]	; (43a0 <hif_handle_isr+0x378>)
    41e4:	486f      	ldr	r0, [pc, #444]	; (43a4 <hif_handle_isr+0x37c>)
    41e6:	4b70      	ldr	r3, [pc, #448]	; (43a8 <hif_handle_isr+0x380>)
    41e8:	4798      	blx	r3
    41ea:	487a      	ldr	r0, [pc, #488]	; (43d4 <hif_handle_isr+0x3ac>)
    41ec:	4b70      	ldr	r3, [pc, #448]	; (43b0 <hif_handle_isr+0x388>)
    41ee:	4798      	blx	r3
    41f0:	200d      	movs	r0, #13
    41f2:	4b70      	ldr	r3, [pc, #448]	; (43b4 <hif_handle_isr+0x38c>)
    41f4:	4798      	blx	r3
    41f6:	e79e      	b.n	4136 <hif_handle_isr+0x10e>
					if(gstrHifCxt.pfCryptoCb)
    41f8:	4b67      	ldr	r3, [pc, #412]	; (4398 <hif_handle_isr+0x370>)
    41fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    41fc:	2b00      	cmp	r3, #0
    41fe:	d00b      	beq.n	4218 <hif_handle_isr+0x1f0>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4200:	4b65      	ldr	r3, [pc, #404]	; (4398 <hif_handle_isr+0x370>)
    4202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4204:	aa04      	add	r2, sp, #16
    4206:	7850      	ldrb	r0, [r2, #1]
    4208:	b2c0      	uxtb	r0, r0
    420a:	8851      	ldrh	r1, [r2, #2]
    420c:	9a05      	ldr	r2, [sp, #20]
    420e:	3208      	adds	r2, #8
    4210:	3908      	subs	r1, #8
    4212:	b289      	uxth	r1, r1
    4214:	4798      	blx	r3
    4216:	e78e      	b.n	4136 <hif_handle_isr+0x10e>
						M2M_ERR("Crypto callback is not registered\n");
    4218:	22ff      	movs	r2, #255	; 0xff
    421a:	0052      	lsls	r2, r2, #1
    421c:	4960      	ldr	r1, [pc, #384]	; (43a0 <hif_handle_isr+0x378>)
    421e:	4861      	ldr	r0, [pc, #388]	; (43a4 <hif_handle_isr+0x37c>)
    4220:	4b61      	ldr	r3, [pc, #388]	; (43a8 <hif_handle_isr+0x380>)
    4222:	4798      	blx	r3
    4224:	486c      	ldr	r0, [pc, #432]	; (43d8 <hif_handle_isr+0x3b0>)
    4226:	4b62      	ldr	r3, [pc, #392]	; (43b0 <hif_handle_isr+0x388>)
    4228:	4798      	blx	r3
    422a:	200d      	movs	r0, #13
    422c:	4b61      	ldr	r3, [pc, #388]	; (43b4 <hif_handle_isr+0x38c>)
    422e:	4798      	blx	r3
    4230:	e781      	b.n	4136 <hif_handle_isr+0x10e>
					if(gstrHifCxt.pfSigmaCb)
    4232:	4b59      	ldr	r3, [pc, #356]	; (4398 <hif_handle_isr+0x370>)
    4234:	69db      	ldr	r3, [r3, #28]
    4236:	2b00      	cmp	r3, #0
    4238:	d00b      	beq.n	4252 <hif_handle_isr+0x22a>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    423a:	4b57      	ldr	r3, [pc, #348]	; (4398 <hif_handle_isr+0x370>)
    423c:	69db      	ldr	r3, [r3, #28]
    423e:	aa04      	add	r2, sp, #16
    4240:	7850      	ldrb	r0, [r2, #1]
    4242:	b2c0      	uxtb	r0, r0
    4244:	8851      	ldrh	r1, [r2, #2]
    4246:	9a05      	ldr	r2, [sp, #20]
    4248:	3208      	adds	r2, #8
    424a:	3908      	subs	r1, #8
    424c:	b289      	uxth	r1, r1
    424e:	4798      	blx	r3
    4250:	e771      	b.n	4136 <hif_handle_isr+0x10e>
						M2M_ERR("Sigma callback is not registered\n");
    4252:	4a62      	ldr	r2, [pc, #392]	; (43dc <hif_handle_isr+0x3b4>)
    4254:	4952      	ldr	r1, [pc, #328]	; (43a0 <hif_handle_isr+0x378>)
    4256:	4853      	ldr	r0, [pc, #332]	; (43a4 <hif_handle_isr+0x37c>)
    4258:	4b53      	ldr	r3, [pc, #332]	; (43a8 <hif_handle_isr+0x380>)
    425a:	4798      	blx	r3
    425c:	4860      	ldr	r0, [pc, #384]	; (43e0 <hif_handle_isr+0x3b8>)
    425e:	4b54      	ldr	r3, [pc, #336]	; (43b0 <hif_handle_isr+0x388>)
    4260:	4798      	blx	r3
    4262:	200d      	movs	r0, #13
    4264:	4b53      	ldr	r3, [pc, #332]	; (43b4 <hif_handle_isr+0x38c>)
    4266:	4798      	blx	r3
    4268:	e765      	b.n	4136 <hif_handle_isr+0x10e>
				    if(gstrHifCxt.pfSslCb)
    426a:	4b4b      	ldr	r3, [pc, #300]	; (4398 <hif_handle_isr+0x370>)
    426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    426e:	2b00      	cmp	r3, #0
    4270:	d00b      	beq.n	428a <hif_handle_isr+0x262>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4272:	4b49      	ldr	r3, [pc, #292]	; (4398 <hif_handle_isr+0x370>)
    4274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4276:	aa04      	add	r2, sp, #16
    4278:	7850      	ldrb	r0, [r2, #1]
    427a:	b2c0      	uxtb	r0, r0
    427c:	8851      	ldrh	r1, [r2, #2]
    427e:	9a05      	ldr	r2, [sp, #20]
    4280:	3208      	adds	r2, #8
    4282:	3908      	subs	r1, #8
    4284:	b289      	uxth	r1, r1
    4286:	4798      	blx	r3
    4288:	e755      	b.n	4136 <hif_handle_isr+0x10e>
                        M2M_ERR("SSL callback is not registered\n");
    428a:	2283      	movs	r2, #131	; 0x83
    428c:	0092      	lsls	r2, r2, #2
    428e:	4944      	ldr	r1, [pc, #272]	; (43a0 <hif_handle_isr+0x378>)
    4290:	4844      	ldr	r0, [pc, #272]	; (43a4 <hif_handle_isr+0x37c>)
    4292:	4b45      	ldr	r3, [pc, #276]	; (43a8 <hif_handle_isr+0x380>)
    4294:	4798      	blx	r3
    4296:	4853      	ldr	r0, [pc, #332]	; (43e4 <hif_handle_isr+0x3bc>)
    4298:	4b45      	ldr	r3, [pc, #276]	; (43b0 <hif_handle_isr+0x388>)
    429a:	4798      	blx	r3
    429c:	200d      	movs	r0, #13
    429e:	4b45      	ldr	r3, [pc, #276]	; (43b4 <hif_handle_isr+0x38c>)
    42a0:	4798      	blx	r3
    42a2:	e748      	b.n	4136 <hif_handle_isr+0x10e>
				M2M_ERR("(hif) Wrong Size\n");
    42a4:	4a50      	ldr	r2, [pc, #320]	; (43e8 <hif_handle_isr+0x3c0>)
    42a6:	493e      	ldr	r1, [pc, #248]	; (43a0 <hif_handle_isr+0x378>)
    42a8:	483e      	ldr	r0, [pc, #248]	; (43a4 <hif_handle_isr+0x37c>)
    42aa:	4b3f      	ldr	r3, [pc, #252]	; (43a8 <hif_handle_isr+0x380>)
    42ac:	4798      	blx	r3
    42ae:	484f      	ldr	r0, [pc, #316]	; (43ec <hif_handle_isr+0x3c4>)
    42b0:	4b3f      	ldr	r3, [pc, #252]	; (43b0 <hif_handle_isr+0x388>)
    42b2:	4798      	blx	r3
    42b4:	200d      	movs	r0, #13
    42b6:	4b3f      	ldr	r3, [pc, #252]	; (43b4 <hif_handle_isr+0x38c>)
    42b8:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    42ba:	2402      	movs	r4, #2
    42bc:	4264      	negs	r4, r4
    42be:	e02c      	b.n	431a <hif_handle_isr+0x2f2>
			M2M_ERR("(hif) False interrupt %lx",reg);
    42c0:	4a4b      	ldr	r2, [pc, #300]	; (43f0 <hif_handle_isr+0x3c8>)
    42c2:	4937      	ldr	r1, [pc, #220]	; (43a0 <hif_handle_isr+0x378>)
    42c4:	4837      	ldr	r0, [pc, #220]	; (43a4 <hif_handle_isr+0x37c>)
    42c6:	4c38      	ldr	r4, [pc, #224]	; (43a8 <hif_handle_isr+0x380>)
    42c8:	47a0      	blx	r4
    42ca:	9903      	ldr	r1, [sp, #12]
    42cc:	4849      	ldr	r0, [pc, #292]	; (43f4 <hif_handle_isr+0x3cc>)
    42ce:	47a0      	blx	r4
    42d0:	200d      	movs	r0, #13
    42d2:	4b38      	ldr	r3, [pc, #224]	; (43b4 <hif_handle_isr+0x38c>)
    42d4:	4798      	blx	r3
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
    42d6:	464b      	mov	r3, r9
    42d8:	78db      	ldrb	r3, [r3, #3]
    42da:	2b00      	cmp	r3, #0
    42dc:	d100      	bne.n	42e0 <hif_handle_isr+0x2b8>
    42de:	e0ae      	b.n	443e <hif_handle_isr+0x416>
    42e0:	4653      	mov	r3, sl
    42e2:	791b      	ldrb	r3, [r3, #4]
    42e4:	2b00      	cmp	r3, #0
    42e6:	d000      	beq.n	42ea <hif_handle_isr+0x2c2>
    42e8:	e0a9      	b.n	443e <hif_handle_isr+0x416>
         * during which the ISR could fire again.
         * If LEVEL interrupt is used instead of EDGE then the atomicity isn't needed since the interrupt
         * is turned off in the ISR and back on again only after the interrupt has been serviced in hif_isr(). */

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(0);
    42ea:	2000      	movs	r0, #0
    42ec:	4c42      	ldr	r4, [pc, #264]	; (43f8 <hif_handle_isr+0x3d0>)
    42ee:	47a0      	blx	r4
#endif

		gstrHifCxt.u8Interrupt--;
    42f0:	4a29      	ldr	r2, [pc, #164]	; (4398 <hif_handle_isr+0x370>)
    42f2:	78d3      	ldrb	r3, [r2, #3]
    42f4:	3b01      	subs	r3, #1
    42f6:	b2db      	uxtb	r3, r3
    42f8:	70d3      	strb	r3, [r2, #3]

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(1);
    42fa:	2001      	movs	r0, #1
    42fc:	47a0      	blx	r4
    42fe:	2504      	movs	r5, #4
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    4300:	4f3e      	ldr	r7, [pc, #248]	; (43fc <hif_handle_isr+0x3d4>)
    4302:	e01a      	b.n	433a <hif_handle_isr+0x312>
		M2M_ERR("(hif) Failed to Read interrupt reg\n");
    4304:	4a3e      	ldr	r2, [pc, #248]	; (4400 <hif_handle_isr+0x3d8>)
    4306:	4926      	ldr	r1, [pc, #152]	; (43a0 <hif_handle_isr+0x378>)
    4308:	4826      	ldr	r0, [pc, #152]	; (43a4 <hif_handle_isr+0x37c>)
    430a:	4b27      	ldr	r3, [pc, #156]	; (43a8 <hif_handle_isr+0x380>)
    430c:	4798      	blx	r3
    430e:	483d      	ldr	r0, [pc, #244]	; (4404 <hif_handle_isr+0x3dc>)
    4310:	4b27      	ldr	r3, [pc, #156]	; (43b0 <hif_handle_isr+0x388>)
    4312:	4798      	blx	r3
    4314:	200d      	movs	r0, #13
    4316:	4b27      	ldr	r3, [pc, #156]	; (43b4 <hif_handle_isr+0x38c>)
    4318:	4798      	blx	r3
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				retries--;
				if(!retries)
    431a:	2d00      	cmp	r5, #0
    431c:	d100      	bne.n	4320 <hif_handle_isr+0x2f8>
    431e:	e081      	b.n	4424 <hif_handle_isr+0x3fc>
				{
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
					break;
				}
				else
					M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
    4320:	4a39      	ldr	r2, [pc, #228]	; (4408 <hif_handle_isr+0x3e0>)
    4322:	493a      	ldr	r1, [pc, #232]	; (440c <hif_handle_isr+0x3e4>)
    4324:	481f      	ldr	r0, [pc, #124]	; (43a4 <hif_handle_isr+0x37c>)
    4326:	4e20      	ldr	r6, [pc, #128]	; (43a8 <hif_handle_isr+0x380>)
    4328:	47b0      	blx	r6
    432a:	002a      	movs	r2, r5
    432c:	0021      	movs	r1, r4
    432e:	4838      	ldr	r0, [pc, #224]	; (4410 <hif_handle_isr+0x3e8>)
    4330:	47b0      	blx	r6
    4332:	200d      	movs	r0, #13
    4334:	4b1f      	ldr	r3, [pc, #124]	; (43b4 <hif_handle_isr+0x38c>)
    4336:	4798      	blx	r3
    4338:	3d01      	subs	r5, #1
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    433a:	a903      	add	r1, sp, #12
    433c:	4835      	ldr	r0, [pc, #212]	; (4414 <hif_handle_isr+0x3ec>)
    433e:	47b8      	blx	r7
    4340:	0004      	movs	r4, r0
    4342:	1e06      	subs	r6, r0, #0
	if(M2M_SUCCESS == ret)
    4344:	d1de      	bne.n	4304 <hif_handle_isr+0x2dc>
		if(reg & 0x1)	/* New interrupt has been received */
    4346:	9903      	ldr	r1, [sp, #12]
    4348:	07cb      	lsls	r3, r1, #31
    434a:	d5b9      	bpl.n	42c0 <hif_handle_isr+0x298>
			reg &= ~NBIT0;
    434c:	2301      	movs	r3, #1
    434e:	4399      	bics	r1, r3
    4350:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    4352:	4830      	ldr	r0, [pc, #192]	; (4414 <hif_handle_isr+0x3ec>)
    4354:	4b30      	ldr	r3, [pc, #192]	; (4418 <hif_handle_isr+0x3f0>)
    4356:	4798      	blx	r3
    4358:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    435a:	d1de      	bne.n	431a <hif_handle_isr+0x2f2>
			gstrHifCxt.u8HifRXDone = 1;
    435c:	2201      	movs	r2, #1
    435e:	4b0e      	ldr	r3, [pc, #56]	; (4398 <hif_handle_isr+0x370>)
    4360:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    4362:	9b03      	ldr	r3, [sp, #12]
    4364:	049b      	lsls	r3, r3, #18
    4366:	0d1b      	lsrs	r3, r3, #20
    4368:	469b      	mov	fp, r3
			if (size > 0) {
    436a:	d09b      	beq.n	42a4 <hif_handle_isr+0x27c>
				uint32 address = 0;
    436c:	2300      	movs	r3, #0
    436e:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    4370:	a905      	add	r1, sp, #20
    4372:	482a      	ldr	r0, [pc, #168]	; (441c <hif_handle_isr+0x3f4>)
    4374:	4b21      	ldr	r3, [pc, #132]	; (43fc <hif_handle_isr+0x3d4>)
    4376:	4798      	blx	r3
    4378:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    437a:	d100      	bne.n	437e <hif_handle_isr+0x356>
    437c:	e661      	b.n	4042 <hif_handle_isr+0x1a>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    437e:	22ce      	movs	r2, #206	; 0xce
    4380:	32ff      	adds	r2, #255	; 0xff
    4382:	4907      	ldr	r1, [pc, #28]	; (43a0 <hif_handle_isr+0x378>)
    4384:	4807      	ldr	r0, [pc, #28]	; (43a4 <hif_handle_isr+0x37c>)
    4386:	4b08      	ldr	r3, [pc, #32]	; (43a8 <hif_handle_isr+0x380>)
    4388:	4798      	blx	r3
    438a:	4825      	ldr	r0, [pc, #148]	; (4420 <hif_handle_isr+0x3f8>)
    438c:	4b08      	ldr	r3, [pc, #32]	; (43b0 <hif_handle_isr+0x388>)
    438e:	4798      	blx	r3
    4390:	200d      	movs	r0, #13
    4392:	4b08      	ldr	r3, [pc, #32]	; (43b4 <hif_handle_isr+0x38c>)
    4394:	4798      	blx	r3
    4396:	e7c0      	b.n	431a <hif_handle_isr+0x2f2>
    4398:	2000153c 	.word	0x2000153c
    439c:	00005a35 	.word	0x00005a35
    43a0:	0000eea8 	.word	0x0000eea8
    43a4:	0000ee54 	.word	0x0000ee54
    43a8:	0000d4d5 	.word	0x0000d4d5
    43ac:	0000f024 	.word	0x0000f024
    43b0:	0000d5f1 	.word	0x0000d5f1
    43b4:	0000d509 	.word	0x0000d509
    43b8:	0000ef00 	.word	0x0000ef00
    43bc:	0000ef18 	.word	0x0000ef18
    43c0:	00000216 	.word	0x00000216
    43c4:	0000f03c 	.word	0x0000f03c
    43c8:	00003d01 	.word	0x00003d01
    43cc:	0000ef58 	.word	0x0000ef58
    43d0:	0000ef78 	.word	0x0000ef78
    43d4:	0000ef9c 	.word	0x0000ef9c
    43d8:	0000efbc 	.word	0x0000efbc
    43dc:	00000205 	.word	0x00000205
    43e0:	0000efe0 	.word	0x0000efe0
    43e4:	0000f004 	.word	0x0000f004
    43e8:	0000021d 	.word	0x0000021d
    43ec:	0000f068 	.word	0x0000f068
    43f0:	00000225 	.word	0x00000225
    43f4:	0000f07c 	.word	0x0000f07c
    43f8:	000039b5 	.word	0x000039b5
    43fc:	00005a1d 	.word	0x00005a1d
    4400:	0000022d 	.word	0x0000022d
    4404:	0000f098 	.word	0x0000f098
    4408:	0000026b 	.word	0x0000026b
    440c:	0000eeb0 	.word	0x0000eeb0
    4410:	0000f104 	.word	0x0000f104
    4414:	00001070 	.word	0x00001070
    4418:	00005a29 	.word	0x00005a29
    441c:	00001084 	.word	0x00001084
    4420:	0000eedc 	.word	0x0000eedc
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
    4424:	4a09      	ldr	r2, [pc, #36]	; (444c <hif_handle_isr+0x424>)
    4426:	490a      	ldr	r1, [pc, #40]	; (4450 <hif_handle_isr+0x428>)
    4428:	480a      	ldr	r0, [pc, #40]	; (4454 <hif_handle_isr+0x42c>)
    442a:	4d0b      	ldr	r5, [pc, #44]	; (4458 <hif_handle_isr+0x430>)
    442c:	47a8      	blx	r5
    442e:	0021      	movs	r1, r4
    4430:	480a      	ldr	r0, [pc, #40]	; (445c <hif_handle_isr+0x434>)
    4432:	47a8      	blx	r5
    4434:	200d      	movs	r0, #13
    4436:	4b0a      	ldr	r3, [pc, #40]	; (4460 <hif_handle_isr+0x438>)
    4438:	4798      	blx	r3
					break;
    443a:	0026      	movs	r6, r4
    443c:	e74b      	b.n	42d6 <hif_handle_isr+0x2ae>
			}
		}
	}

	return ret;
}
    443e:	0030      	movs	r0, r6
    4440:	b006      	add	sp, #24
    4442:	bc1c      	pop	{r2, r3, r4}
    4444:	4691      	mov	r9, r2
    4446:	469a      	mov	sl, r3
    4448:	46a3      	mov	fp, r4
    444a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    444c:	00000267 	.word	0x00000267
    4450:	0000eeb0 	.word	0x0000eeb0
    4454:	0000ee54 	.word	0x0000ee54
    4458:	0000d4d5 	.word	0x0000d4d5
    445c:	0000f0bc 	.word	0x0000f0bc
    4460:	0000d509 	.word	0x0000d509

00004464 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    4464:	b570      	push	{r4, r5, r6, lr}
    4466:	0014      	movs	r4, r2
    4468:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    446a:	2800      	cmp	r0, #0
    446c:	d003      	beq.n	4476 <hif_receive+0x12>
    446e:	2900      	cmp	r1, #0
    4470:	d001      	beq.n	4476 <hif_receive+0x12>
    4472:	2a00      	cmp	r2, #0
    4474:	d113      	bne.n	449e <hif_receive+0x3a>
	{
		if(isDone)
    4476:	2d00      	cmp	r5, #0
    4478:	d002      	beq.n	4480 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    447a:	4b28      	ldr	r3, [pc, #160]	; (451c <hif_receive+0xb8>)
    447c:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    447e:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    4480:	22a3      	movs	r2, #163	; 0xa3
    4482:	0092      	lsls	r2, r2, #2
    4484:	4926      	ldr	r1, [pc, #152]	; (4520 <hif_receive+0xbc>)
    4486:	4827      	ldr	r0, [pc, #156]	; (4524 <hif_receive+0xc0>)
    4488:	4b27      	ldr	r3, [pc, #156]	; (4528 <hif_receive+0xc4>)
    448a:	4798      	blx	r3
    448c:	4827      	ldr	r0, [pc, #156]	; (452c <hif_receive+0xc8>)
    448e:	4b28      	ldr	r3, [pc, #160]	; (4530 <hif_receive+0xcc>)
    4490:	4798      	blx	r3
    4492:	200d      	movs	r0, #13
    4494:	4b27      	ldr	r3, [pc, #156]	; (4534 <hif_receive+0xd0>)
    4496:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    4498:	200c      	movs	r0, #12
    449a:	4240      	negs	r0, r0
    449c:	e7ef      	b.n	447e <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    449e:	4b26      	ldr	r3, [pc, #152]	; (4538 <hif_receive+0xd4>)
    44a0:	68db      	ldr	r3, [r3, #12]
    44a2:	429a      	cmp	r2, r3
    44a4:	d81a      	bhi.n	44dc <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    44a6:	4b24      	ldr	r3, [pc, #144]	; (4538 <hif_receive+0xd4>)
    44a8:	689b      	ldr	r3, [r3, #8]
    44aa:	4298      	cmp	r0, r3
    44ac:	d327      	bcc.n	44fe <hif_receive+0x9a>
    44ae:	1886      	adds	r6, r0, r2
    44b0:	4a21      	ldr	r2, [pc, #132]	; (4538 <hif_receive+0xd4>)
    44b2:	6893      	ldr	r3, [r2, #8]
    44b4:	68d2      	ldr	r2, [r2, #12]
    44b6:	189b      	adds	r3, r3, r2
    44b8:	429e      	cmp	r6, r3
    44ba:	d820      	bhi.n	44fe <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    44bc:	0022      	movs	r2, r4
    44be:	4b1f      	ldr	r3, [pc, #124]	; (453c <hif_receive+0xd8>)
    44c0:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    44c2:	2800      	cmp	r0, #0
    44c4:	d1db      	bne.n	447e <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    44c6:	4a1c      	ldr	r2, [pc, #112]	; (4538 <hif_receive+0xd4>)
    44c8:	6893      	ldr	r3, [r2, #8]
    44ca:	68d2      	ldr	r2, [r2, #12]
    44cc:	189b      	adds	r3, r3, r2
    44ce:	429e      	cmp	r6, r3
    44d0:	d001      	beq.n	44d6 <hif_receive+0x72>
    44d2:	2d00      	cmp	r5, #0
    44d4:	d0d3      	beq.n	447e <hif_receive+0x1a>
		ret = hif_set_rx_done();
    44d6:	4b11      	ldr	r3, [pc, #68]	; (451c <hif_receive+0xb8>)
    44d8:	4798      	blx	r3
    44da:	e7d0      	b.n	447e <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the received buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    44dc:	22a5      	movs	r2, #165	; 0xa5
    44de:	0092      	lsls	r2, r2, #2
    44e0:	490f      	ldr	r1, [pc, #60]	; (4520 <hif_receive+0xbc>)
    44e2:	4810      	ldr	r0, [pc, #64]	; (4524 <hif_receive+0xc0>)
    44e4:	4d10      	ldr	r5, [pc, #64]	; (4528 <hif_receive+0xc4>)
    44e6:	47a8      	blx	r5
    44e8:	4b13      	ldr	r3, [pc, #76]	; (4538 <hif_receive+0xd4>)
    44ea:	68da      	ldr	r2, [r3, #12]
    44ec:	0021      	movs	r1, r4
    44ee:	4814      	ldr	r0, [pc, #80]	; (4540 <hif_receive+0xdc>)
    44f0:	47a8      	blx	r5
    44f2:	200d      	movs	r0, #13
    44f4:	4b0f      	ldr	r3, [pc, #60]	; (4534 <hif_receive+0xd0>)
    44f6:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    44f8:	200c      	movs	r0, #12
    44fa:	4240      	negs	r0, r0
		goto ERR1;
    44fc:	e7bf      	b.n	447e <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
    44fe:	4a11      	ldr	r2, [pc, #68]	; (4544 <hif_receive+0xe0>)
    4500:	4907      	ldr	r1, [pc, #28]	; (4520 <hif_receive+0xbc>)
    4502:	4808      	ldr	r0, [pc, #32]	; (4524 <hif_receive+0xc0>)
    4504:	4b08      	ldr	r3, [pc, #32]	; (4528 <hif_receive+0xc4>)
    4506:	4798      	blx	r3
    4508:	480f      	ldr	r0, [pc, #60]	; (4548 <hif_receive+0xe4>)
    450a:	4b09      	ldr	r3, [pc, #36]	; (4530 <hif_receive+0xcc>)
    450c:	4798      	blx	r3
    450e:	200d      	movs	r0, #13
    4510:	4b08      	ldr	r3, [pc, #32]	; (4534 <hif_receive+0xd0>)
    4512:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    4514:	200c      	movs	r0, #12
    4516:	4240      	negs	r0, r0
		goto ERR1;
    4518:	e7b1      	b.n	447e <hif_receive+0x1a>
    451a:	46c0      	nop			; (mov r8, r8)
    451c:	00003d01 	.word	0x00003d01
    4520:	0000eec0 	.word	0x0000eec0
    4524:	0000ee54 	.word	0x0000ee54
    4528:	0000d4d5 	.word	0x0000d4d5
    452c:	0000f13c 	.word	0x0000f13c
    4530:	0000d5f1 	.word	0x0000d5f1
    4534:	0000d509 	.word	0x0000d509
    4538:	2000153c 	.word	0x2000153c
    453c:	00005a35 	.word	0x00005a35
    4540:	0000f15c 	.word	0x0000f15c
    4544:	0000029a 	.word	0x0000029a
    4548:	0000f1a4 	.word	0x0000f1a4

0000454c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    454c:	b570      	push	{r4, r5, r6, lr}
    454e:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    4550:	2807      	cmp	r0, #7
    4552:	d81f      	bhi.n	4594 <hif_register_cb+0x48>
    4554:	0083      	lsls	r3, r0, #2
    4556:	4a16      	ldr	r2, [pc, #88]	; (45b0 <hif_register_cb+0x64>)
    4558:	58d3      	ldr	r3, [r2, r3]
    455a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    455c:	4b15      	ldr	r3, [pc, #84]	; (45b4 <hif_register_cb+0x68>)
    455e:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    4560:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    4562:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    4564:	4b13      	ldr	r3, [pc, #76]	; (45b4 <hif_register_cb+0x68>)
    4566:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    4568:	2000      	movs	r0, #0
			break;
    456a:	e7fa      	b.n	4562 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    456c:	4b11      	ldr	r3, [pc, #68]	; (45b4 <hif_register_cb+0x68>)
    456e:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    4570:	2000      	movs	r0, #0
			break;
    4572:	e7f6      	b.n	4562 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    4574:	4b0f      	ldr	r3, [pc, #60]	; (45b4 <hif_register_cb+0x68>)
    4576:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    4578:	2000      	movs	r0, #0
			break;
    457a:	e7f2      	b.n	4562 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    457c:	4b0d      	ldr	r3, [pc, #52]	; (45b4 <hif_register_cb+0x68>)
    457e:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    4580:	2000      	movs	r0, #0
			break;
    4582:	e7ee      	b.n	4562 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    4584:	4b0b      	ldr	r3, [pc, #44]	; (45b4 <hif_register_cb+0x68>)
    4586:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    4588:	2000      	movs	r0, #0
			break;
    458a:	e7ea      	b.n	4562 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    458c:	4b09      	ldr	r3, [pc, #36]	; (45b4 <hif_register_cb+0x68>)
    458e:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    4590:	2000      	movs	r0, #0
			break;
    4592:	e7e6      	b.n	4562 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    4594:	4a08      	ldr	r2, [pc, #32]	; (45b8 <hif_register_cb+0x6c>)
    4596:	4909      	ldr	r1, [pc, #36]	; (45bc <hif_register_cb+0x70>)
    4598:	4809      	ldr	r0, [pc, #36]	; (45c0 <hif_register_cb+0x74>)
    459a:	4d0a      	ldr	r5, [pc, #40]	; (45c4 <hif_register_cb+0x78>)
    459c:	47a8      	blx	r5
    459e:	0021      	movs	r1, r4
    45a0:	4809      	ldr	r0, [pc, #36]	; (45c8 <hif_register_cb+0x7c>)
    45a2:	47a8      	blx	r5
    45a4:	200d      	movs	r0, #13
    45a6:	4b09      	ldr	r3, [pc, #36]	; (45cc <hif_register_cb+0x80>)
    45a8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    45aa:	200c      	movs	r0, #12
    45ac:	4240      	negs	r0, r0
			break;
    45ae:	e7d8      	b.n	4562 <hif_register_cb+0x16>
    45b0:	0000ee7c 	.word	0x0000ee7c
    45b4:	2000153c 	.word	0x2000153c
    45b8:	000002d2 	.word	0x000002d2
    45bc:	0000eecc 	.word	0x0000eecc
    45c0:	0000ee54 	.word	0x0000ee54
    45c4:	0000d4d5 	.word	0x0000d4d5
    45c8:	0000f1e8 	.word	0x0000f1e8
    45cc:	0000d509 	.word	0x0000d509

000045d0 <hif_init>:
{
    45d0:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    45d2:	222c      	movs	r2, #44	; 0x2c
    45d4:	2100      	movs	r1, #0
    45d6:	4806      	ldr	r0, [pc, #24]	; (45f0 <hif_init+0x20>)
    45d8:	4b06      	ldr	r3, [pc, #24]	; (45f4 <hif_init+0x24>)
    45da:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    45dc:	4806      	ldr	r0, [pc, #24]	; (45f8 <hif_init+0x28>)
    45de:	4b07      	ldr	r3, [pc, #28]	; (45fc <hif_init+0x2c>)
    45e0:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    45e2:	4907      	ldr	r1, [pc, #28]	; (4600 <hif_init+0x30>)
    45e4:	2003      	movs	r0, #3
    45e6:	4b07      	ldr	r3, [pc, #28]	; (4604 <hif_init+0x34>)
    45e8:	4798      	blx	r3
}
    45ea:	2000      	movs	r0, #0
    45ec:	bd10      	pop	{r4, pc}
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	2000153c 	.word	0x2000153c
    45f4:	00003cc1 	.word	0x00003cc1
    45f8:	00003ced 	.word	0x00003ced
    45fc:	0000395d 	.word	0x0000395d
    4600:	00003cfd 	.word	0x00003cfd
    4604:	0000454d 	.word	0x0000454d

00004608 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    4608:	b530      	push	{r4, r5, lr}
    460a:	b09f      	sub	sp, #124	; 0x7c
    460c:	0004      	movs	r4, r0
    460e:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    4610:	282c      	cmp	r0, #44	; 0x2c
    4612:	d036      	beq.n	4682 <m2m_wifi_cb+0x7a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    4614:	281b      	cmp	r0, #27
    4616:	d044      	beq.n	46a2 <m2m_wifi_cb+0x9a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    4618:	2806      	cmp	r0, #6
    461a:	d052      	beq.n	46c2 <m2m_wifi_cb+0xba>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    461c:	280e      	cmp	r0, #14
    461e:	d02e      	beq.n	467e <m2m_wifi_cb+0x76>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    4620:	2832      	cmp	r0, #50	; 0x32
    4622:	d05e      	beq.n	46e2 <m2m_wifi_cb+0xda>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_FAILURE)
    4624:	283d      	cmp	r0, #61	; 0x3d
    4626:	d100      	bne.n	462a <m2m_wifi_cb+0x22>
    4628:	e06b      	b.n	4702 <m2m_wifi_cb+0xfa>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_FAILURE, NULL);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    462a:	282f      	cmp	r0, #47	; 0x2f
    462c:	d100      	bne.n	4630 <m2m_wifi_cb+0x28>
    462e:	e078      	b.n	4722 <m2m_wifi_cb+0x11a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    4630:	2834      	cmp	r0, #52	; 0x34
    4632:	d100      	bne.n	4636 <m2m_wifi_cb+0x2e>
    4634:	e08a      	b.n	474c <m2m_wifi_cb+0x144>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    4636:	2811      	cmp	r0, #17
    4638:	d100      	bne.n	463c <m2m_wifi_cb+0x34>
    463a:	e0aa      	b.n	4792 <m2m_wifi_cb+0x18a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    463c:	2813      	cmp	r0, #19
    463e:	d100      	bne.n	4642 <m2m_wifi_cb+0x3a>
    4640:	e0c0      	b.n	47c4 <m2m_wifi_cb+0x1bc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    4642:	2804      	cmp	r0, #4
    4644:	d100      	bne.n	4648 <m2m_wifi_cb+0x40>
    4646:	e0cf      	b.n	47e8 <m2m_wifi_cb+0x1e0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    4648:	2865      	cmp	r0, #101	; 0x65
    464a:	d100      	bne.n	464e <m2m_wifi_cb+0x46>
    464c:	e0de      	b.n	480c <m2m_wifi_cb+0x204>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    464e:	2809      	cmp	r0, #9
    4650:	d100      	bne.n	4654 <m2m_wifi_cb+0x4c>
    4652:	e0ed      	b.n	4830 <m2m_wifi_cb+0x228>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    4654:	282a      	cmp	r0, #42	; 0x2a
    4656:	d100      	bne.n	465a <m2m_wifi_cb+0x52>
    4658:	e0fc      	b.n	4854 <m2m_wifi_cb+0x24c>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQRSP_DELETE_APID)
    465a:	2827      	cmp	r0, #39	; 0x27
    465c:	d100      	bne.n	4660 <m2m_wifi_cb+0x58>
    465e:	e10b      	b.n	4878 <m2m_wifi_cb+0x270>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    4660:	2820      	cmp	r0, #32
    4662:	d100      	bne.n	4666 <m2m_wifi_cb+0x5e>
    4664:	e11a      	b.n	489c <m2m_wifi_cb+0x294>
			}
		}
#endif	/* ETH_MODE */
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    4666:	2210      	movs	r2, #16
    4668:	32ff      	adds	r2, #255	; 0xff
    466a:	499b      	ldr	r1, [pc, #620]	; (48d8 <m2m_wifi_cb+0x2d0>)
    466c:	489b      	ldr	r0, [pc, #620]	; (48dc <m2m_wifi_cb+0x2d4>)
    466e:	4d9c      	ldr	r5, [pc, #624]	; (48e0 <m2m_wifi_cb+0x2d8>)
    4670:	47a8      	blx	r5
    4672:	0021      	movs	r1, r4
    4674:	489b      	ldr	r0, [pc, #620]	; (48e4 <m2m_wifi_cb+0x2dc>)
    4676:	47a8      	blx	r5
    4678:	200d      	movs	r0, #13
    467a:	4b9b      	ldr	r3, [pc, #620]	; (48e8 <m2m_wifi_cb+0x2e0>)
    467c:	4798      	blx	r3
	}
}
    467e:	b01f      	add	sp, #124	; 0x7c
    4680:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    4682:	2300      	movs	r3, #0
    4684:	2204      	movs	r2, #4
    4686:	a903      	add	r1, sp, #12
    4688:	0028      	movs	r0, r5
    468a:	4c98      	ldr	r4, [pc, #608]	; (48ec <m2m_wifi_cb+0x2e4>)
    468c:	47a0      	blx	r4
    468e:	2800      	cmp	r0, #0
    4690:	d1f5      	bne.n	467e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    4692:	4b97      	ldr	r3, [pc, #604]	; (48f0 <m2m_wifi_cb+0x2e8>)
    4694:	681b      	ldr	r3, [r3, #0]
    4696:	2b00      	cmp	r3, #0
    4698:	d0f1      	beq.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    469a:	a903      	add	r1, sp, #12
    469c:	302c      	adds	r0, #44	; 0x2c
    469e:	4798      	blx	r3
    46a0:	e7ed      	b.n	467e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    46a2:	2300      	movs	r3, #0
    46a4:	2208      	movs	r2, #8
    46a6:	a903      	add	r1, sp, #12
    46a8:	0028      	movs	r0, r5
    46aa:	4c90      	ldr	r4, [pc, #576]	; (48ec <m2m_wifi_cb+0x2e4>)
    46ac:	47a0      	blx	r4
    46ae:	2800      	cmp	r0, #0
    46b0:	d1e5      	bne.n	467e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    46b2:	4b8f      	ldr	r3, [pc, #572]	; (48f0 <m2m_wifi_cb+0x2e8>)
    46b4:	681b      	ldr	r3, [r3, #0]
    46b6:	2b00      	cmp	r3, #0
    46b8:	d0e1      	beq.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    46ba:	a903      	add	r1, sp, #12
    46bc:	301b      	adds	r0, #27
    46be:	4798      	blx	r3
    46c0:	e7dd      	b.n	467e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    46c2:	2301      	movs	r3, #1
    46c4:	2230      	movs	r2, #48	; 0x30
    46c6:	a903      	add	r1, sp, #12
    46c8:	0028      	movs	r0, r5
    46ca:	4c88      	ldr	r4, [pc, #544]	; (48ec <m2m_wifi_cb+0x2e4>)
    46cc:	47a0      	blx	r4
    46ce:	2800      	cmp	r0, #0
    46d0:	d1d5      	bne.n	467e <m2m_wifi_cb+0x76>
			if(gpfAppWifiCb)
    46d2:	4b87      	ldr	r3, [pc, #540]	; (48f0 <m2m_wifi_cb+0x2e8>)
    46d4:	681b      	ldr	r3, [r3, #0]
    46d6:	2b00      	cmp	r3, #0
    46d8:	d0d1      	beq.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    46da:	a903      	add	r1, sp, #12
    46dc:	3006      	adds	r0, #6
    46de:	4798      	blx	r3
    46e0:	e7cd      	b.n	467e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    46e2:	2300      	movs	r3, #0
    46e4:	2218      	movs	r2, #24
    46e6:	a903      	add	r1, sp, #12
    46e8:	0028      	movs	r0, r5
    46ea:	4c80      	ldr	r4, [pc, #512]	; (48ec <m2m_wifi_cb+0x2e4>)
    46ec:	47a0      	blx	r4
    46ee:	2800      	cmp	r0, #0
    46f0:	d1c5      	bne.n	467e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    46f2:	4b7f      	ldr	r3, [pc, #508]	; (48f0 <m2m_wifi_cb+0x2e8>)
    46f4:	681b      	ldr	r3, [r3, #0]
    46f6:	2b00      	cmp	r3, #0
    46f8:	d0c1      	beq.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    46fa:	a903      	add	r1, sp, #12
    46fc:	3032      	adds	r0, #50	; 0x32
    46fe:	4798      	blx	r3
    4700:	e7bd      	b.n	467e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, NULL, 0, 1) == M2M_SUCCESS)
    4702:	2301      	movs	r3, #1
    4704:	2200      	movs	r2, #0
    4706:	2100      	movs	r1, #0
    4708:	0028      	movs	r0, r5
    470a:	4c78      	ldr	r4, [pc, #480]	; (48ec <m2m_wifi_cb+0x2e4>)
    470c:	47a0      	blx	r4
    470e:	2800      	cmp	r0, #0
    4710:	d1b5      	bne.n	467e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    4712:	4b77      	ldr	r3, [pc, #476]	; (48f0 <m2m_wifi_cb+0x2e8>)
    4714:	681b      	ldr	r3, [r3, #0]
    4716:	2b00      	cmp	r3, #0
    4718:	d0b1      	beq.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_FAILURE, NULL);
    471a:	2100      	movs	r1, #0
    471c:	303d      	adds	r0, #61	; 0x3d
    471e:	4798      	blx	r3
    4720:	e7ad      	b.n	467e <m2m_wifi_cb+0x76>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    4722:	2264      	movs	r2, #100	; 0x64
    4724:	2100      	movs	r1, #0
    4726:	a803      	add	r0, sp, #12
    4728:	4b72      	ldr	r3, [pc, #456]	; (48f4 <m2m_wifi_cb+0x2ec>)
    472a:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    472c:	2300      	movs	r3, #0
    472e:	2264      	movs	r2, #100	; 0x64
    4730:	a903      	add	r1, sp, #12
    4732:	0028      	movs	r0, r5
    4734:	4c6d      	ldr	r4, [pc, #436]	; (48ec <m2m_wifi_cb+0x2e4>)
    4736:	47a0      	blx	r4
    4738:	2800      	cmp	r0, #0
    473a:	d1a0      	bne.n	467e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    473c:	4b6c      	ldr	r3, [pc, #432]	; (48f0 <m2m_wifi_cb+0x2e8>)
    473e:	681b      	ldr	r3, [r3, #0]
    4740:	2b00      	cmp	r3, #0
    4742:	d09c      	beq.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    4744:	a903      	add	r1, sp, #12
    4746:	302f      	adds	r0, #47	; 0x2f
    4748:	4798      	blx	r3
    474a:	e798      	b.n	467e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    474c:	2300      	movs	r3, #0
    474e:	2204      	movs	r2, #4
    4750:	a903      	add	r1, sp, #12
    4752:	0028      	movs	r0, r5
    4754:	4c65      	ldr	r4, [pc, #404]	; (48ec <m2m_wifi_cb+0x2e4>)
    4756:	47a0      	blx	r4
    4758:	2800      	cmp	r0, #0
    475a:	d000      	beq.n	475e <m2m_wifi_cb+0x156>
    475c:	e78f      	b.n	467e <m2m_wifi_cb+0x76>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    475e:	4866      	ldr	r0, [pc, #408]	; (48f8 <m2m_wifi_cb+0x2f0>)
    4760:	4c5f      	ldr	r4, [pc, #380]	; (48e0 <m2m_wifi_cb+0x2d8>)
    4762:	47a0      	blx	r4
    4764:	9803      	ldr	r0, [sp, #12]
    4766:	0c03      	lsrs	r3, r0, #16
    4768:	21ff      	movs	r1, #255	; 0xff
    476a:	400b      	ands	r3, r1
    476c:	0a02      	lsrs	r2, r0, #8
    476e:	400a      	ands	r2, r1
    4770:	4001      	ands	r1, r0
    4772:	0e00      	lsrs	r0, r0, #24
    4774:	9000      	str	r0, [sp, #0]
    4776:	4861      	ldr	r0, [pc, #388]	; (48fc <m2m_wifi_cb+0x2f4>)
    4778:	47a0      	blx	r4
    477a:	200d      	movs	r0, #13
    477c:	4b5a      	ldr	r3, [pc, #360]	; (48e8 <m2m_wifi_cb+0x2e0>)
    477e:	4798      	blx	r3
			if (gpfAppWifiCb)
    4780:	4b5b      	ldr	r3, [pc, #364]	; (48f0 <m2m_wifi_cb+0x2e8>)
    4782:	681b      	ldr	r3, [r3, #0]
    4784:	2b00      	cmp	r3, #0
    4786:	d100      	bne.n	478a <m2m_wifi_cb+0x182>
    4788:	e779      	b.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    478a:	2100      	movs	r1, #0
    478c:	2034      	movs	r0, #52	; 0x34
    478e:	4798      	blx	r3
    4790:	e775      	b.n	467e <m2m_wifi_cb+0x76>
		gu8scanInProgress = 0;
    4792:	2200      	movs	r2, #0
    4794:	4b5a      	ldr	r3, [pc, #360]	; (4900 <m2m_wifi_cb+0x2f8>)
    4796:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    4798:	2300      	movs	r3, #0
    479a:	3204      	adds	r2, #4
    479c:	a903      	add	r1, sp, #12
    479e:	0028      	movs	r0, r5
    47a0:	4c52      	ldr	r4, [pc, #328]	; (48ec <m2m_wifi_cb+0x2e4>)
    47a2:	47a0      	blx	r4
    47a4:	2800      	cmp	r0, #0
    47a6:	d000      	beq.n	47aa <m2m_wifi_cb+0x1a2>
    47a8:	e769      	b.n	467e <m2m_wifi_cb+0x76>
			gu8ChNum = strState.u8NumofCh;
    47aa:	ab03      	add	r3, sp, #12
    47ac:	781a      	ldrb	r2, [r3, #0]
    47ae:	4b55      	ldr	r3, [pc, #340]	; (4904 <m2m_wifi_cb+0x2fc>)
    47b0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    47b2:	4b4f      	ldr	r3, [pc, #316]	; (48f0 <m2m_wifi_cb+0x2e8>)
    47b4:	681b      	ldr	r3, [r3, #0]
    47b6:	2b00      	cmp	r3, #0
    47b8:	d100      	bne.n	47bc <m2m_wifi_cb+0x1b4>
    47ba:	e760      	b.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    47bc:	a903      	add	r1, sp, #12
    47be:	3011      	adds	r0, #17
    47c0:	4798      	blx	r3
    47c2:	e75c      	b.n	467e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    47c4:	2300      	movs	r3, #0
    47c6:	222c      	movs	r2, #44	; 0x2c
    47c8:	a903      	add	r1, sp, #12
    47ca:	0028      	movs	r0, r5
    47cc:	4c47      	ldr	r4, [pc, #284]	; (48ec <m2m_wifi_cb+0x2e4>)
    47ce:	47a0      	blx	r4
    47d0:	2800      	cmp	r0, #0
    47d2:	d000      	beq.n	47d6 <m2m_wifi_cb+0x1ce>
    47d4:	e753      	b.n	467e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    47d6:	4b46      	ldr	r3, [pc, #280]	; (48f0 <m2m_wifi_cb+0x2e8>)
    47d8:	681b      	ldr	r3, [r3, #0]
    47da:	2b00      	cmp	r3, #0
    47dc:	d100      	bne.n	47e0 <m2m_wifi_cb+0x1d8>
    47de:	e74e      	b.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    47e0:	a903      	add	r1, sp, #12
    47e2:	3013      	adds	r0, #19
    47e4:	4798      	blx	r3
    47e6:	e74a      	b.n	467e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    47e8:	2300      	movs	r3, #0
    47ea:	2204      	movs	r2, #4
    47ec:	a91c      	add	r1, sp, #112	; 0x70
    47ee:	0028      	movs	r0, r5
    47f0:	4c3e      	ldr	r4, [pc, #248]	; (48ec <m2m_wifi_cb+0x2e4>)
    47f2:	47a0      	blx	r4
    47f4:	2800      	cmp	r0, #0
    47f6:	d000      	beq.n	47fa <m2m_wifi_cb+0x1f2>
    47f8:	e741      	b.n	467e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    47fa:	4b3d      	ldr	r3, [pc, #244]	; (48f0 <m2m_wifi_cb+0x2e8>)
    47fc:	681b      	ldr	r3, [r3, #0]
    47fe:	2b00      	cmp	r3, #0
    4800:	d100      	bne.n	4804 <m2m_wifi_cb+0x1fc>
    4802:	e73c      	b.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    4804:	a91c      	add	r1, sp, #112	; 0x70
    4806:	3004      	adds	r0, #4
    4808:	4798      	blx	r3
    480a:	e738      	b.n	467e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    480c:	2300      	movs	r3, #0
    480e:	2204      	movs	r2, #4
    4810:	a91c      	add	r1, sp, #112	; 0x70
    4812:	0028      	movs	r0, r5
    4814:	4c35      	ldr	r4, [pc, #212]	; (48ec <m2m_wifi_cb+0x2e4>)
    4816:	47a0      	blx	r4
    4818:	2800      	cmp	r0, #0
    481a:	d000      	beq.n	481e <m2m_wifi_cb+0x216>
    481c:	e72f      	b.n	467e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    481e:	4b34      	ldr	r3, [pc, #208]	; (48f0 <m2m_wifi_cb+0x2e8>)
    4820:	681b      	ldr	r3, [r3, #0]
    4822:	2b00      	cmp	r3, #0
    4824:	d100      	bne.n	4828 <m2m_wifi_cb+0x220>
    4826:	e72a      	b.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    4828:	a91c      	add	r1, sp, #112	; 0x70
    482a:	3065      	adds	r0, #101	; 0x65
    482c:	4798      	blx	r3
    482e:	e726      	b.n	467e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    4830:	2301      	movs	r3, #1
    4832:	2264      	movs	r2, #100	; 0x64
    4834:	a903      	add	r1, sp, #12
    4836:	0028      	movs	r0, r5
    4838:	4c2c      	ldr	r4, [pc, #176]	; (48ec <m2m_wifi_cb+0x2e4>)
    483a:	47a0      	blx	r4
    483c:	2800      	cmp	r0, #0
    483e:	d000      	beq.n	4842 <m2m_wifi_cb+0x23a>
    4840:	e71d      	b.n	467e <m2m_wifi_cb+0x76>
			if(gpfAppWifiCb)
    4842:	4b2b      	ldr	r3, [pc, #172]	; (48f0 <m2m_wifi_cb+0x2e8>)
    4844:	681b      	ldr	r3, [r3, #0]
    4846:	2b00      	cmp	r3, #0
    4848:	d100      	bne.n	484c <m2m_wifi_cb+0x244>
    484a:	e718      	b.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    484c:	a903      	add	r1, sp, #12
    484e:	3009      	adds	r0, #9
    4850:	4798      	blx	r3
    4852:	e714      	b.n	467e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    4854:	2301      	movs	r3, #1
    4856:	2204      	movs	r2, #4
    4858:	a903      	add	r1, sp, #12
    485a:	0028      	movs	r0, r5
    485c:	4c23      	ldr	r4, [pc, #140]	; (48ec <m2m_wifi_cb+0x2e4>)
    485e:	47a0      	blx	r4
    4860:	2800      	cmp	r0, #0
    4862:	d000      	beq.n	4866 <m2m_wifi_cb+0x25e>
    4864:	e70b      	b.n	467e <m2m_wifi_cb+0x76>
			if(gpfAppWifiCb)
    4866:	4b22      	ldr	r3, [pc, #136]	; (48f0 <m2m_wifi_cb+0x2e8>)
    4868:	681b      	ldr	r3, [r3, #0]
    486a:	2b00      	cmp	r3, #0
    486c:	d100      	bne.n	4870 <m2m_wifi_cb+0x268>
    486e:	e706      	b.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    4870:	a903      	add	r1, sp, #12
    4872:	302a      	adds	r0, #42	; 0x2a
    4874:	4798      	blx	r3
    4876:	e702      	b.n	467e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MGenericResp), 0) == M2M_SUCCESS)
    4878:	2300      	movs	r3, #0
    487a:	2204      	movs	r2, #4
    487c:	a903      	add	r1, sp, #12
    487e:	0028      	movs	r0, r5
    4880:	4c1a      	ldr	r4, [pc, #104]	; (48ec <m2m_wifi_cb+0x2e4>)
    4882:	47a0      	blx	r4
    4884:	2800      	cmp	r0, #0
    4886:	d000      	beq.n	488a <m2m_wifi_cb+0x282>
    4888:	e6f9      	b.n	467e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    488a:	4b19      	ldr	r3, [pc, #100]	; (48f0 <m2m_wifi_cb+0x2e8>)
    488c:	681b      	ldr	r3, [r3, #0]
    488e:	2b00      	cmp	r3, #0
    4890:	d100      	bne.n	4894 <m2m_wifi_cb+0x28c>
    4892:	e6f4      	b.n	467e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
    4894:	a903      	add	r1, sp, #12
    4896:	3027      	adds	r0, #39	; 0x27
    4898:	4798      	blx	r3
    489a:	e6f0      	b.n	467e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    489c:	2300      	movs	r3, #0
    489e:	2208      	movs	r2, #8
    48a0:	a903      	add	r1, sp, #12
    48a2:	0028      	movs	r0, r5
    48a4:	4c11      	ldr	r4, [pc, #68]	; (48ec <m2m_wifi_cb+0x2e4>)
    48a6:	47a0      	blx	r4
    48a8:	2800      	cmp	r0, #0
    48aa:	d000      	beq.n	48ae <m2m_wifi_cb+0x2a6>
    48ac:	e6e7      	b.n	467e <m2m_wifi_cb+0x76>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    48ae:	ab03      	add	r3, sp, #12
    48b0:	889a      	ldrh	r2, [r3, #4]
    48b2:	0028      	movs	r0, r5
    48b4:	3008      	adds	r0, #8
    48b6:	2301      	movs	r3, #1
    48b8:	9903      	ldr	r1, [sp, #12]
    48ba:	4c0c      	ldr	r4, [pc, #48]	; (48ec <m2m_wifi_cb+0x2e4>)
    48bc:	47a0      	blx	r4
    48be:	2800      	cmp	r0, #0
    48c0:	d000      	beq.n	48c4 <m2m_wifi_cb+0x2bc>
    48c2:	e6dc      	b.n	467e <m2m_wifi_cb+0x76>
				if(gpfAppWifiCb)
    48c4:	4b0a      	ldr	r3, [pc, #40]	; (48f0 <m2m_wifi_cb+0x2e8>)
    48c6:	681b      	ldr	r3, [r3, #0]
    48c8:	2b00      	cmp	r3, #0
    48ca:	d100      	bne.n	48ce <m2m_wifi_cb+0x2c6>
    48cc:	e6d7      	b.n	467e <m2m_wifi_cb+0x76>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    48ce:	a903      	add	r1, sp, #12
    48d0:	3020      	adds	r0, #32
    48d2:	4798      	blx	r3
    48d4:	e6d3      	b.n	467e <m2m_wifi_cb+0x76>
    48d6:	46c0      	nop			; (mov r8, r8)
    48d8:	0000f264 	.word	0x0000f264
    48dc:	0000ee54 	.word	0x0000ee54
    48e0:	0000d4d5 	.word	0x0000d4d5
    48e4:	0000f39c 	.word	0x0000f39c
    48e8:	0000d509 	.word	0x0000d509
    48ec:	00004465 	.word	0x00004465
    48f0:	20000464 	.word	0x20000464
    48f4:	00003cc1 	.word	0x00003cc1
    48f8:	0000f1f4 	.word	0x0000f1f4
    48fc:	0000f37c 	.word	0x0000f37c
    4900:	2000046a 	.word	0x2000046a
    4904:	20000468 	.word	0x20000468

00004908 <m2m_wifi_connect_prepare_msg>:
	tenuM2mSecType		enuAuthType,
	uint16				u16AuthSize,
	tstrNetworkId		*pstrNetworkId,
	tstrM2mWifiConnHdr	*pstrWifiConn
)
{
    4908:	b5f0      	push	{r4, r5, r6, r7, lr}
    490a:	46c6      	mov	lr, r8
    490c:	b500      	push	{lr}
    490e:	0007      	movs	r7, r0
    4910:	4688      	mov	r8, r1
    4912:	001d      	movs	r5, r3
    4914:	9c06      	ldr	r4, [sp, #24]
	sint8	ret = M2M_ERR_FAIL;
	uint16	u16CredSize = sizeof(tstrM2mConnCredCmn) + u16AuthSize;
    4916:	322c      	adds	r2, #44	; 0x2c
    4918:	b296      	uxth	r6, r2

	/* Check application params. */
	if (
    491a:	2b00      	cmp	r3, #0
    491c:	d043      	beq.n	49a6 <m2m_wifi_connect_prepare_msg+0x9e>
			(pstrNetworkId == NULL)
		||	(pstrNetworkId->pu8Ssid == NULL)
    491e:	685b      	ldr	r3, [r3, #4]
    4920:	2b00      	cmp	r3, #0
    4922:	d043      	beq.n	49ac <m2m_wifi_connect_prepare_msg+0xa4>
		||	(pstrNetworkId->u8SsidLen >= M2M_MAX_SSID_LEN)
    4924:	7a2b      	ldrb	r3, [r5, #8]
    4926:	2b20      	cmp	r3, #32
    4928:	d843      	bhi.n	49b2 <m2m_wifi_connect_prepare_msg+0xaa>
	)
		goto INVALID_ARG;

	if (pstrWifiConn != NULL)
    492a:	2c00      	cmp	r4, #0
    492c:	d044      	beq.n	49b8 <m2m_wifi_connect_prepare_msg+0xb0>
	{
		tstrM2mConnCredHdr	*pstrHdr = &pstrWifiConn->strConnCredHdr;
		tstrM2mConnCredCmn	*pstrCmn = &pstrWifiConn->strConnCredCmn;

		m2m_memset((uint8*)pstrWifiConn, 0, sizeof(tstrM2mWifiConnHdr));
    492e:	2230      	movs	r2, #48	; 0x30
    4930:	2100      	movs	r1, #0
    4932:	0020      	movs	r0, r4
    4934:	4b27      	ldr	r3, [pc, #156]	; (49d4 <m2m_wifi_connect_prepare_msg+0xcc>)
    4936:	4798      	blx	r3

		pstrHdr->u16CredSize = u16CredSize;
    4938:	8026      	strh	r6, [r4, #0]
		switch (enuCredStoreOption)
    493a:	2f01      	cmp	r7, #1
    493c:	d007      	beq.n	494e <m2m_wifi_connect_prepare_msg+0x46>
    493e:	2f00      	cmp	r7, #0
    4940:	d009      	beq.n	4956 <m2m_wifi_connect_prepare_msg+0x4e>
    4942:	2f02      	cmp	r7, #2
    4944:	d13b      	bne.n	49be <m2m_wifi_connect_prepare_msg+0xb6>
		{
			case WIFI_CRED_SAVE_ENCRYPTED:
				pstrHdr->u8CredStoreFlags |= M2M_CRED_ENCRYPT_FLAG;
    4946:	78a3      	ldrb	r3, [r4, #2]
    4948:	2202      	movs	r2, #2
    494a:	4313      	orrs	r3, r2
    494c:	70a3      	strb	r3, [r4, #2]
			// intentional fall through...
			case WIFI_CRED_SAVE_UNENCRYPTED:
				pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
    494e:	78a3      	ldrb	r3, [r4, #2]
    4950:	2201      	movs	r2, #1
    4952:	4313      	orrs	r3, r2
    4954:	70a3      	strb	r3, [r4, #2]
				break;
			default:
				goto INVALID_ARG;
		}

		if (pstrNetworkId->enuChannel == M2M_WIFI_CH_ALL)
    4956:	7a6b      	ldrb	r3, [r5, #9]
    4958:	2bff      	cmp	r3, #255	; 0xff
    495a:	d022      	beq.n	49a2 <m2m_wifi_connect_prepare_msg+0x9a>
			pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel);
		else if ((pstrNetworkId->enuChannel <= M2M_WIFI_CH_14) && (pstrNetworkId->enuChannel >= M2M_WIFI_CH_1))
    495c:	3b01      	subs	r3, #1
    495e:	b2db      	uxtb	r3, r3
    4960:	2b0d      	cmp	r3, #13
    4962:	d82f      	bhi.n	49c4 <m2m_wifi_connect_prepare_msg+0xbc>
			pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel) - 1;
    4964:	70e3      	strb	r3, [r4, #3]
		else
			goto INVALID_ARG;

		if ((enuAuthType == M2M_WIFI_SEC_INVALID) || (enuAuthType >= M2M_WIFI_NUM_AUTH_TYPES))
    4966:	4643      	mov	r3, r8
    4968:	3b01      	subs	r3, #1
    496a:	2b03      	cmp	r3, #3
    496c:	d82d      	bhi.n	49ca <m2m_wifi_connect_prepare_msg+0xc2>
			goto INVALID_ARG;
		pstrCmn->u8AuthType = (uint8)enuAuthType;
    496e:	232c      	movs	r3, #44	; 0x2c
    4970:	4642      	mov	r2, r8
    4972:	54e2      	strb	r2, [r4, r3]

		pstrCmn->u8SsidLen = pstrNetworkId->u8SsidLen;
    4974:	7a2b      	ldrb	r3, [r5, #8]
    4976:	7123      	strb	r3, [r4, #4]
		m2m_memcpy(pstrCmn->au8Ssid, pstrNetworkId->pu8Ssid, pstrNetworkId->u8SsidLen);
    4978:	7a2a      	ldrb	r2, [r5, #8]
    497a:	1d60      	adds	r0, r4, #5
    497c:	6869      	ldr	r1, [r5, #4]
    497e:	4b16      	ldr	r3, [pc, #88]	; (49d8 <m2m_wifi_connect_prepare_msg+0xd0>)
    4980:	4798      	blx	r3
		if (pstrNetworkId->pu8Bssid != NULL)
    4982:	682b      	ldr	r3, [r5, #0]
    4984:	2b00      	cmp	r3, #0
    4986:	d023      	beq.n	49d0 <m2m_wifi_connect_prepare_msg+0xc8>
		{
			pstrCmn->u8Options = M2M_WIFI_CONN_BSSID_FLAG;
    4988:	2201      	movs	r2, #1
    498a:	2325      	movs	r3, #37	; 0x25
    498c:	54e2      	strb	r2, [r4, r3]
			m2m_memcpy(pstrCmn->au8Bssid, pstrNetworkId->pu8Bssid, M2M_MAC_ADDRES_LEN);
    498e:	6829      	ldr	r1, [r5, #0]
    4990:	0020      	movs	r0, r4
    4992:	3026      	adds	r0, #38	; 0x26
    4994:	3205      	adds	r2, #5
    4996:	4b10      	ldr	r3, [pc, #64]	; (49d8 <m2m_wifi_connect_prepare_msg+0xd0>)
    4998:	4798      	blx	r3
		}
		/* Everything is ok, set return value. */
		ret = M2M_SUCCESS;
    499a:	2000      	movs	r0, #0
	}
	return ret;
INVALID_ARG:
	return M2M_ERR_INVALID_ARG;
}
    499c:	bc04      	pop	{r2}
    499e:	4690      	mov	r8, r2
    49a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel);
    49a2:	70e3      	strb	r3, [r4, #3]
    49a4:	e7df      	b.n	4966 <m2m_wifi_connect_prepare_msg+0x5e>
	return M2M_ERR_INVALID_ARG;
    49a6:	200f      	movs	r0, #15
    49a8:	4240      	negs	r0, r0
    49aa:	e7f7      	b.n	499c <m2m_wifi_connect_prepare_msg+0x94>
    49ac:	200f      	movs	r0, #15
    49ae:	4240      	negs	r0, r0
    49b0:	e7f4      	b.n	499c <m2m_wifi_connect_prepare_msg+0x94>
    49b2:	200f      	movs	r0, #15
    49b4:	4240      	negs	r0, r0
    49b6:	e7f1      	b.n	499c <m2m_wifi_connect_prepare_msg+0x94>
	sint8	ret = M2M_ERR_FAIL;
    49b8:	200c      	movs	r0, #12
    49ba:	4240      	negs	r0, r0
    49bc:	e7ee      	b.n	499c <m2m_wifi_connect_prepare_msg+0x94>
	return M2M_ERR_INVALID_ARG;
    49be:	200f      	movs	r0, #15
    49c0:	4240      	negs	r0, r0
    49c2:	e7eb      	b.n	499c <m2m_wifi_connect_prepare_msg+0x94>
    49c4:	200f      	movs	r0, #15
    49c6:	4240      	negs	r0, r0
    49c8:	e7e8      	b.n	499c <m2m_wifi_connect_prepare_msg+0x94>
    49ca:	200f      	movs	r0, #15
    49cc:	4240      	negs	r0, r0
    49ce:	e7e5      	b.n	499c <m2m_wifi_connect_prepare_msg+0x94>
		ret = M2M_SUCCESS;
    49d0:	2000      	movs	r0, #0
    49d2:	e7e3      	b.n	499c <m2m_wifi_connect_prepare_msg+0x94>
    49d4:	00003cc1 	.word	0x00003cc1
    49d8:	00003cad 	.word	0x00003cad

000049dc <m2m_validate_ap_parameters>:
{
    49dc:	b510      	push	{r4, lr}
    49de:	1e04      	subs	r4, r0, #0
	if(pstrM2MAPModeConfig == NULL)
    49e0:	d02b      	beq.n	4a3a <m2m_validate_ap_parameters+0x5e>
	if((m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8SSID) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8SSID) >= M2M_MAX_SSID_LEN))
    49e2:	4b67      	ldr	r3, [pc, #412]	; (4b80 <m2m_validate_ap_parameters+0x1a4>)
    49e4:	4798      	blx	r3
    49e6:	2800      	cmp	r0, #0
    49e8:	d036      	beq.n	4a58 <m2m_validate_ap_parameters+0x7c>
    49ea:	0020      	movs	r0, r4
    49ec:	4b64      	ldr	r3, [pc, #400]	; (4b80 <m2m_validate_ap_parameters+0x1a4>)
    49ee:	4798      	blx	r3
    49f0:	2820      	cmp	r0, #32
    49f2:	d831      	bhi.n	4a58 <m2m_validate_ap_parameters+0x7c>
	if(pstrM2MAPModeConfig->strApConfig.u8ListenChannel > M2M_WIFI_CH_14 || pstrM2MAPModeConfig->strApConfig.u8ListenChannel < M2M_WIFI_CH_1)
    49f4:	2321      	movs	r3, #33	; 0x21
    49f6:	5ce3      	ldrb	r3, [r4, r3]
    49f8:	3b01      	subs	r3, #1
    49fa:	2b0d      	cmp	r3, #13
    49fc:	d83b      	bhi.n	4a76 <m2m_validate_ap_parameters+0x9a>
	if(!(pstrM2MAPModeConfig->strApConfig.au8DHCPServerIP[0] || pstrM2MAPModeConfig->strApConfig.au8DHCPServerIP[1]))
    49fe:	2341      	movs	r3, #65	; 0x41
    4a00:	5ce3      	ldrb	r3, [r4, r3]
    4a02:	2b00      	cmp	r3, #0
    4a04:	d107      	bne.n	4a16 <m2m_validate_ap_parameters+0x3a>
    4a06:	3342      	adds	r3, #66	; 0x42
    4a08:	5ce3      	ldrb	r3, [r4, r3]
    4a0a:	2b00      	cmp	r3, #0
    4a0c:	d103      	bne.n	4a16 <m2m_validate_ap_parameters+0x3a>
		if(!(pstrM2MAPModeConfig->strApConfig.au8DHCPServerIP[2]))
    4a0e:	3343      	adds	r3, #67	; 0x43
    4a10:	5ce3      	ldrb	r3, [r4, r3]
    4a12:	2b00      	cmp	r3, #0
    4a14:	d03e      	beq.n	4a94 <m2m_validate_ap_parameters+0xb8>
	if(pstrM2MAPModeConfig->strApConfig.u8SecType == M2M_WIFI_SEC_OPEN)
    4a16:	233f      	movs	r3, #63	; 0x3f
    4a18:	5ce3      	ldrb	r3, [r4, r3]
    4a1a:	2b01      	cmp	r3, #1
    4a1c:	d100      	bne.n	4a20 <m2m_validate_ap_parameters+0x44>
    4a1e:	e0ac      	b.n	4b7a <m2m_validate_ap_parameters+0x19e>
	else if(pstrM2MAPModeConfig->strApConfig.u8SecType == M2M_WIFI_SEC_WEP)
    4a20:	2b03      	cmp	r3, #3
    4a22:	d046      	beq.n	4ab2 <m2m_validate_ap_parameters+0xd6>
	else if(pstrM2MAPModeConfig->strApConfig.u8SecType == M2M_WIFI_SEC_WPA_PSK)
    4a24:	2b02      	cmp	r3, #2
    4a26:	d000      	beq.n	4a2a <m2m_validate_ap_parameters+0x4e>
    4a28:	e098      	b.n	4b5c <m2m_validate_ap_parameters+0x180>
		if(	((pstrM2MAPModeConfig->strApConfig.u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPModeConfig->strApConfig.u8KeySz + 1) > M2M_MAX_PSK_LEN))
    4a2a:	3321      	adds	r3, #33	; 0x21
    4a2c:	5ce3      	ldrb	r3, [r4, r3]
    4a2e:	3b08      	subs	r3, #8
	sint8 s8Ret = M2M_SUCCESS;
    4a30:	2000      	movs	r0, #0
		if(	((pstrM2MAPModeConfig->strApConfig.u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPModeConfig->strApConfig.u8KeySz + 1) > M2M_MAX_PSK_LEN))
    4a32:	2b38      	cmp	r3, #56	; 0x38
    4a34:	d900      	bls.n	4a38 <m2m_validate_ap_parameters+0x5c>
    4a36:	e082      	b.n	4b3e <m2m_validate_ap_parameters+0x162>
}
    4a38:	bd10      	pop	{r4, pc}
		M2M_ERR("INVALID POINTER\n");
    4a3a:	2228      	movs	r2, #40	; 0x28
    4a3c:	32ff      	adds	r2, #255	; 0xff
    4a3e:	4951      	ldr	r1, [pc, #324]	; (4b84 <m2m_validate_ap_parameters+0x1a8>)
    4a40:	4851      	ldr	r0, [pc, #324]	; (4b88 <m2m_validate_ap_parameters+0x1ac>)
    4a42:	4b52      	ldr	r3, [pc, #328]	; (4b8c <m2m_validate_ap_parameters+0x1b0>)
    4a44:	4798      	blx	r3
    4a46:	4852      	ldr	r0, [pc, #328]	; (4b90 <m2m_validate_ap_parameters+0x1b4>)
    4a48:	4b52      	ldr	r3, [pc, #328]	; (4b94 <m2m_validate_ap_parameters+0x1b8>)
    4a4a:	4798      	blx	r3
    4a4c:	200d      	movs	r0, #13
    4a4e:	4b52      	ldr	r3, [pc, #328]	; (4b98 <m2m_validate_ap_parameters+0x1bc>)
    4a50:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
    4a52:	200c      	movs	r0, #12
    4a54:	4240      	negs	r0, r0
		goto ERR1;
    4a56:	e7ef      	b.n	4a38 <m2m_validate_ap_parameters+0x5c>
		M2M_ERR("INVALID SSID\n");
    4a58:	2297      	movs	r2, #151	; 0x97
    4a5a:	0052      	lsls	r2, r2, #1
    4a5c:	4949      	ldr	r1, [pc, #292]	; (4b84 <m2m_validate_ap_parameters+0x1a8>)
    4a5e:	484a      	ldr	r0, [pc, #296]	; (4b88 <m2m_validate_ap_parameters+0x1ac>)
    4a60:	4b4a      	ldr	r3, [pc, #296]	; (4b8c <m2m_validate_ap_parameters+0x1b0>)
    4a62:	4798      	blx	r3
    4a64:	484d      	ldr	r0, [pc, #308]	; (4b9c <m2m_validate_ap_parameters+0x1c0>)
    4a66:	4b4b      	ldr	r3, [pc, #300]	; (4b94 <m2m_validate_ap_parameters+0x1b8>)
    4a68:	4798      	blx	r3
    4a6a:	200d      	movs	r0, #13
    4a6c:	4b4a      	ldr	r3, [pc, #296]	; (4b98 <m2m_validate_ap_parameters+0x1bc>)
    4a6e:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
    4a70:	200c      	movs	r0, #12
    4a72:	4240      	negs	r0, r0
		goto ERR1;
    4a74:	e7e0      	b.n	4a38 <m2m_validate_ap_parameters+0x5c>
		M2M_ERR("INVALID CH\n");
    4a76:	2236      	movs	r2, #54	; 0x36
    4a78:	32ff      	adds	r2, #255	; 0xff
    4a7a:	4942      	ldr	r1, [pc, #264]	; (4b84 <m2m_validate_ap_parameters+0x1a8>)
    4a7c:	4842      	ldr	r0, [pc, #264]	; (4b88 <m2m_validate_ap_parameters+0x1ac>)
    4a7e:	4b43      	ldr	r3, [pc, #268]	; (4b8c <m2m_validate_ap_parameters+0x1b0>)
    4a80:	4798      	blx	r3
    4a82:	4847      	ldr	r0, [pc, #284]	; (4ba0 <m2m_validate_ap_parameters+0x1c4>)
    4a84:	4b43      	ldr	r3, [pc, #268]	; (4b94 <m2m_validate_ap_parameters+0x1b8>)
    4a86:	4798      	blx	r3
    4a88:	200d      	movs	r0, #13
    4a8a:	4b43      	ldr	r3, [pc, #268]	; (4b98 <m2m_validate_ap_parameters+0x1bc>)
    4a8c:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
    4a8e:	200c      	movs	r0, #12
    4a90:	4240      	negs	r0, r0
		goto ERR1;
    4a92:	e7d1      	b.n	4a38 <m2m_validate_ap_parameters+0x5c>
			M2M_ERR("INVALID DHCP SERVER IP\n");
    4a94:	229f      	movs	r2, #159	; 0x9f
    4a96:	0052      	lsls	r2, r2, #1
    4a98:	493a      	ldr	r1, [pc, #232]	; (4b84 <m2m_validate_ap_parameters+0x1a8>)
    4a9a:	483b      	ldr	r0, [pc, #236]	; (4b88 <m2m_validate_ap_parameters+0x1ac>)
    4a9c:	4b3b      	ldr	r3, [pc, #236]	; (4b8c <m2m_validate_ap_parameters+0x1b0>)
    4a9e:	4798      	blx	r3
    4aa0:	4840      	ldr	r0, [pc, #256]	; (4ba4 <m2m_validate_ap_parameters+0x1c8>)
    4aa2:	4b3c      	ldr	r3, [pc, #240]	; (4b94 <m2m_validate_ap_parameters+0x1b8>)
    4aa4:	4798      	blx	r3
    4aa6:	200d      	movs	r0, #13
    4aa8:	4b3b      	ldr	r3, [pc, #236]	; (4b98 <m2m_validate_ap_parameters+0x1bc>)
    4aaa:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    4aac:	200c      	movs	r0, #12
    4aae:	4240      	negs	r0, r0
			goto ERR1;
    4ab0:	e7c2      	b.n	4a38 <m2m_validate_ap_parameters+0x5c>
		if((pstrM2MAPModeConfig->strApConfig.u8KeyIndx == 0) || (pstrM2MAPModeConfig->strApConfig.u8KeyIndx > WEP_KEY_MAX_INDEX))
    4ab2:	331f      	adds	r3, #31
    4ab4:	5ce3      	ldrb	r3, [r4, r3]
    4ab6:	3b01      	subs	r3, #1
    4ab8:	2b03      	cmp	r3, #3
    4aba:	d814      	bhi.n	4ae6 <m2m_validate_ap_parameters+0x10a>
		if(	(pstrM2MAPModeConfig->strApConfig.u8KeySz != WEP_40_KEY_STRING_SIZE) &&
    4abc:	2323      	movs	r3, #35	; 0x23
    4abe:	5ce3      	ldrb	r3, [r4, r3]
    4ac0:	2210      	movs	r2, #16
    4ac2:	4393      	bics	r3, r2
    4ac4:	2b0a      	cmp	r3, #10
    4ac6:	d01d      	beq.n	4b04 <m2m_validate_ap_parameters+0x128>
			M2M_ERR("INVALID KEY STRING SIZE\n");
    4ac8:	3247      	adds	r2, #71	; 0x47
    4aca:	32ff      	adds	r2, #255	; 0xff
    4acc:	492d      	ldr	r1, [pc, #180]	; (4b84 <m2m_validate_ap_parameters+0x1a8>)
    4ace:	482e      	ldr	r0, [pc, #184]	; (4b88 <m2m_validate_ap_parameters+0x1ac>)
    4ad0:	4b2e      	ldr	r3, [pc, #184]	; (4b8c <m2m_validate_ap_parameters+0x1b0>)
    4ad2:	4798      	blx	r3
    4ad4:	4834      	ldr	r0, [pc, #208]	; (4ba8 <m2m_validate_ap_parameters+0x1cc>)
    4ad6:	4b2f      	ldr	r3, [pc, #188]	; (4b94 <m2m_validate_ap_parameters+0x1b8>)
    4ad8:	4798      	blx	r3
    4ada:	200d      	movs	r0, #13
    4adc:	4b2e      	ldr	r3, [pc, #184]	; (4b98 <m2m_validate_ap_parameters+0x1bc>)
    4ade:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    4ae0:	200c      	movs	r0, #12
    4ae2:	4240      	negs	r0, r0
			goto ERR1;
    4ae4:	e7a8      	b.n	4a38 <m2m_validate_ap_parameters+0x5c>
			M2M_ERR("INVALID KEY INDEX\n");
    4ae6:	224e      	movs	r2, #78	; 0x4e
    4ae8:	32ff      	adds	r2, #255	; 0xff
    4aea:	4926      	ldr	r1, [pc, #152]	; (4b84 <m2m_validate_ap_parameters+0x1a8>)
    4aec:	4826      	ldr	r0, [pc, #152]	; (4b88 <m2m_validate_ap_parameters+0x1ac>)
    4aee:	4b27      	ldr	r3, [pc, #156]	; (4b8c <m2m_validate_ap_parameters+0x1b0>)
    4af0:	4798      	blx	r3
    4af2:	482e      	ldr	r0, [pc, #184]	; (4bac <m2m_validate_ap_parameters+0x1d0>)
    4af4:	4b27      	ldr	r3, [pc, #156]	; (4b94 <m2m_validate_ap_parameters+0x1b8>)
    4af6:	4798      	blx	r3
    4af8:	200d      	movs	r0, #13
    4afa:	4b27      	ldr	r3, [pc, #156]	; (4b98 <m2m_validate_ap_parameters+0x1bc>)
    4afc:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    4afe:	200c      	movs	r0, #12
    4b00:	4240      	negs	r0, r0
			goto ERR1;
    4b02:	e799      	b.n	4a38 <m2m_validate_ap_parameters+0x5c>
		if((m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8WepKey) > WEP_104_KEY_STRING_SIZE))
    4b04:	3424      	adds	r4, #36	; 0x24
    4b06:	0020      	movs	r0, r4
    4b08:	4b1d      	ldr	r3, [pc, #116]	; (4b80 <m2m_validate_ap_parameters+0x1a4>)
    4b0a:	4798      	blx	r3
    4b0c:	2800      	cmp	r0, #0
    4b0e:	d007      	beq.n	4b20 <m2m_validate_ap_parameters+0x144>
    4b10:	0020      	movs	r0, r4
    4b12:	4b1b      	ldr	r3, [pc, #108]	; (4b80 <m2m_validate_ap_parameters+0x1a4>)
    4b14:	4798      	blx	r3
    4b16:	0003      	movs	r3, r0
	sint8 s8Ret = M2M_SUCCESS;
    4b18:	2000      	movs	r0, #0
		if((m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8WepKey) > WEP_104_KEY_STRING_SIZE))
    4b1a:	2b1a      	cmp	r3, #26
    4b1c:	d800      	bhi.n	4b20 <m2m_validate_ap_parameters+0x144>
    4b1e:	e78b      	b.n	4a38 <m2m_validate_ap_parameters+0x5c>
			M2M_ERR("INVALID KEY SIZE\n");
    4b20:	225e      	movs	r2, #94	; 0x5e
    4b22:	32ff      	adds	r2, #255	; 0xff
    4b24:	4917      	ldr	r1, [pc, #92]	; (4b84 <m2m_validate_ap_parameters+0x1a8>)
    4b26:	4818      	ldr	r0, [pc, #96]	; (4b88 <m2m_validate_ap_parameters+0x1ac>)
    4b28:	4b18      	ldr	r3, [pc, #96]	; (4b8c <m2m_validate_ap_parameters+0x1b0>)
    4b2a:	4798      	blx	r3
    4b2c:	4820      	ldr	r0, [pc, #128]	; (4bb0 <m2m_validate_ap_parameters+0x1d4>)
    4b2e:	4b19      	ldr	r3, [pc, #100]	; (4b94 <m2m_validate_ap_parameters+0x1b8>)
    4b30:	4798      	blx	r3
    4b32:	200d      	movs	r0, #13
    4b34:	4b18      	ldr	r3, [pc, #96]	; (4b98 <m2m_validate_ap_parameters+0x1bc>)
    4b36:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    4b38:	200c      	movs	r0, #12
    4b3a:	4240      	negs	r0, r0
			goto ERR1;
    4b3c:	e77c      	b.n	4a38 <m2m_validate_ap_parameters+0x5c>
			M2M_ERR("INVALID WPA KEY SIZE\n");
    4b3e:	2268      	movs	r2, #104	; 0x68
    4b40:	32ff      	adds	r2, #255	; 0xff
    4b42:	4910      	ldr	r1, [pc, #64]	; (4b84 <m2m_validate_ap_parameters+0x1a8>)
    4b44:	4810      	ldr	r0, [pc, #64]	; (4b88 <m2m_validate_ap_parameters+0x1ac>)
    4b46:	4b11      	ldr	r3, [pc, #68]	; (4b8c <m2m_validate_ap_parameters+0x1b0>)
    4b48:	4798      	blx	r3
    4b4a:	481a      	ldr	r0, [pc, #104]	; (4bb4 <m2m_validate_ap_parameters+0x1d8>)
    4b4c:	4b11      	ldr	r3, [pc, #68]	; (4b94 <m2m_validate_ap_parameters+0x1b8>)
    4b4e:	4798      	blx	r3
    4b50:	200d      	movs	r0, #13
    4b52:	4b11      	ldr	r3, [pc, #68]	; (4b98 <m2m_validate_ap_parameters+0x1bc>)
    4b54:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    4b56:	200c      	movs	r0, #12
    4b58:	4240      	negs	r0, r0
			goto ERR1;
    4b5a:	e76d      	b.n	4a38 <m2m_validate_ap_parameters+0x5c>
		M2M_ERR("INVALID AUTHENTICATION MODE\n");
    4b5c:	22b7      	movs	r2, #183	; 0xb7
    4b5e:	0052      	lsls	r2, r2, #1
    4b60:	4908      	ldr	r1, [pc, #32]	; (4b84 <m2m_validate_ap_parameters+0x1a8>)
    4b62:	4809      	ldr	r0, [pc, #36]	; (4b88 <m2m_validate_ap_parameters+0x1ac>)
    4b64:	4b09      	ldr	r3, [pc, #36]	; (4b8c <m2m_validate_ap_parameters+0x1b0>)
    4b66:	4798      	blx	r3
    4b68:	4813      	ldr	r0, [pc, #76]	; (4bb8 <m2m_validate_ap_parameters+0x1dc>)
    4b6a:	4b0a      	ldr	r3, [pc, #40]	; (4b94 <m2m_validate_ap_parameters+0x1b8>)
    4b6c:	4798      	blx	r3
    4b6e:	200d      	movs	r0, #13
    4b70:	4b09      	ldr	r3, [pc, #36]	; (4b98 <m2m_validate_ap_parameters+0x1bc>)
    4b72:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
    4b74:	200c      	movs	r0, #12
    4b76:	4240      	negs	r0, r0
		goto ERR1;
    4b78:	e75e      	b.n	4a38 <m2m_validate_ap_parameters+0x5c>
	sint8 s8Ret = M2M_SUCCESS;
    4b7a:	2000      	movs	r0, #0
    4b7c:	e75c      	b.n	4a38 <m2m_validate_ap_parameters+0x5c>
    4b7e:	46c0      	nop			; (mov r8, r8)
    4b80:	00003cd1 	.word	0x00003cd1
    4b84:	0000f270 	.word	0x0000f270
    4b88:	0000ee54 	.word	0x0000ee54
    4b8c:	0000d4d5 	.word	0x0000d4d5
    4b90:	0000f2c4 	.word	0x0000f2c4
    4b94:	0000d5f1 	.word	0x0000d5f1
    4b98:	0000d509 	.word	0x0000d509
    4b9c:	0000f2d4 	.word	0x0000f2d4
    4ba0:	0000f2e4 	.word	0x0000f2e4
    4ba4:	0000f2f0 	.word	0x0000f2f0
    4ba8:	0000f31c 	.word	0x0000f31c
    4bac:	0000f308 	.word	0x0000f308
    4bb0:	0000f334 	.word	0x0000f334
    4bb4:	0000f348 	.word	0x0000f348
    4bb8:	0000f360 	.word	0x0000f360

00004bbc <hexstr_2_bytes>:
		return ch + 10;
	return 0xFF;
	}
/* Convert hexstring to bytes */
static sint8 hexstr_2_bytes(uint8 *pu8Out, uint8 *pu8In, uint8 u8SizeOut)
	{
    4bbc:	b570      	push	{r4, r5, r6, lr}
	while (u8SizeOut--)
    4bbe:	1e53      	subs	r3, r2, #1
    4bc0:	b2db      	uxtb	r3, r3
    4bc2:	2a00      	cmp	r2, #0
    4bc4:	d033      	beq.n	4c2e <hexstr_2_bytes+0x72>
    4bc6:	3301      	adds	r3, #1
    4bc8:	18c2      	adds	r2, r0, r3
	ch |= 0x20;
    4bca:	2420      	movs	r4, #32
    4bcc:	e01e      	b.n	4c0c <hexstr_2_bytes+0x50>
		return ch + 10;
    4bce:	3b27      	subs	r3, #39	; 0x27
    4bd0:	b2db      	uxtb	r3, r3
	{
		uint8	u8Out = hexchar_2_val(*pu8In++);
		if (u8Out > 0xF)
    4bd2:	2b0f      	cmp	r3, #15
    4bd4:	d82d      	bhi.n	4c32 <hexstr_2_bytes+0x76>
			return M2M_ERR_INVALID_ARG;
		*pu8Out = u8Out * 0x10;
    4bd6:	011b      	lsls	r3, r3, #4
    4bd8:	b2db      	uxtb	r3, r3
    4bda:	7003      	strb	r3, [r0, #0]
	ch -= 0x30;
    4bdc:	786d      	ldrb	r5, [r5, #1]
    4bde:	3d30      	subs	r5, #48	; 0x30
    4be0:	b2ed      	uxtb	r5, r5
	if (ch <= 9)
    4be2:	2d09      	cmp	r5, #9
    4be4:	d90a      	bls.n	4bfc <hexstr_2_bytes+0x40>
	ch |= 0x20;
    4be6:	4325      	orrs	r5, r4
    4be8:	b2ed      	uxtb	r5, r5
	if (ch <= 5)
    4bea:	002e      	movs	r6, r5
    4bec:	3e31      	subs	r6, #49	; 0x31
    4bee:	2e05      	cmp	r6, #5
    4bf0:	d902      	bls.n	4bf8 <hexstr_2_bytes+0x3c>
		u8Out = hexchar_2_val(*pu8In++);
		if (u8Out > 0xF)
			return M2M_ERR_INVALID_ARG;
    4bf2:	200f      	movs	r0, #15
    4bf4:	4240      	negs	r0, r0
    4bf6:	e017      	b.n	4c28 <hexstr_2_bytes+0x6c>
		return ch + 10;
    4bf8:	3d27      	subs	r5, #39	; 0x27
    4bfa:	b2ed      	uxtb	r5, r5
		if (u8Out > 0xF)
    4bfc:	2d0f      	cmp	r5, #15
    4bfe:	d81b      	bhi.n	4c38 <hexstr_2_bytes+0x7c>
		*pu8Out += u8Out;
    4c00:	195b      	adds	r3, r3, r5
    4c02:	7003      	strb	r3, [r0, #0]
		pu8Out++;
    4c04:	3001      	adds	r0, #1
    4c06:	3102      	adds	r1, #2
	while (u8SizeOut--)
    4c08:	4290      	cmp	r0, r2
    4c0a:	d00e      	beq.n	4c2a <hexstr_2_bytes+0x6e>
    4c0c:	000d      	movs	r5, r1
	ch -= 0x30;
    4c0e:	780b      	ldrb	r3, [r1, #0]
    4c10:	3b30      	subs	r3, #48	; 0x30
    4c12:	b2db      	uxtb	r3, r3
	if (ch <= 9)
    4c14:	2b09      	cmp	r3, #9
    4c16:	d9dc      	bls.n	4bd2 <hexstr_2_bytes+0x16>
	ch |= 0x20;
    4c18:	4323      	orrs	r3, r4
    4c1a:	b2db      	uxtb	r3, r3
	if (ch <= 5)
    4c1c:	001e      	movs	r6, r3
    4c1e:	3e31      	subs	r6, #49	; 0x31
    4c20:	2e05      	cmp	r6, #5
    4c22:	d9d4      	bls.n	4bce <hexstr_2_bytes+0x12>
			return M2M_ERR_INVALID_ARG;
    4c24:	200f      	movs	r0, #15
    4c26:	4240      	negs	r0, r0
	}
	return M2M_SUCCESS;
	}
    4c28:	bd70      	pop	{r4, r5, r6, pc}
	return M2M_SUCCESS;
    4c2a:	2000      	movs	r0, #0
    4c2c:	e7fc      	b.n	4c28 <hexstr_2_bytes+0x6c>
    4c2e:	2000      	movs	r0, #0
    4c30:	e7fa      	b.n	4c28 <hexstr_2_bytes+0x6c>
			return M2M_ERR_INVALID_ARG;
    4c32:	200f      	movs	r0, #15
    4c34:	4240      	negs	r0, r0
    4c36:	e7f7      	b.n	4c28 <hexstr_2_bytes+0x6c>
			return M2M_ERR_INVALID_ARG;
    4c38:	200f      	movs	r0, #15
    4c3a:	4240      	negs	r0, r0
    4c3c:	e7f4      	b.n	4c28 <hexstr_2_bytes+0x6c>
	...

00004c40 <m2m_wifi_init_hold>:
{
    4c40:	b510      	push	{r4, lr}
	ret = nm_drv_init_hold();
    4c42:	4b04      	ldr	r3, [pc, #16]	; (4c54 <m2m_wifi_init_hold+0x14>)
    4c44:	4798      	blx	r3
    if(M2M_SUCCESS == ret) {
    4c46:	2800      	cmp	r0, #0
    4c48:	d102      	bne.n	4c50 <m2m_wifi_init_hold+0x10>
        gu8WifiState = WIFI_STATE_INIT;
    4c4a:	2201      	movs	r2, #1
    4c4c:	4b02      	ldr	r3, [pc, #8]	; (4c58 <m2m_wifi_init_hold+0x18>)
    4c4e:	701a      	strb	r2, [r3, #0]
}
    4c50:	bd10      	pop	{r4, pc}
    4c52:	46c0      	nop			; (mov r8, r8)
    4c54:	00005be5 	.word	0x00005be5
    4c58:	20000469 	.word	0x20000469

00004c5c <m2m_wifi_init_start>:
{
    4c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c5e:	b08f      	sub	sp, #60	; 0x3c
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    4c60:	2201      	movs	r2, #1
    4c62:	230f      	movs	r3, #15
    4c64:	446b      	add	r3, sp
    4c66:	701a      	strb	r2, [r3, #0]
	if(pWifiInitParam == NULL) {
    4c68:	2800      	cmp	r0, #0
    4c6a:	d067      	beq.n	4d3c <m2m_wifi_init_start+0xe0>
	gpfAppWifiCb = pWifiInitParam->pfAppWifiCb;
    4c6c:	6802      	ldr	r2, [r0, #0]
    4c6e:	4b35      	ldr	r3, [pc, #212]	; (4d44 <m2m_wifi_init_start+0xe8>)
    4c70:	601a      	str	r2, [r3, #0]
	gu8scanInProgress = 0;
    4c72:	2200      	movs	r2, #0
    4c74:	4b34      	ldr	r3, [pc, #208]	; (4d48 <m2m_wifi_init_start+0xec>)
    4c76:	701a      	strb	r2, [r3, #0]
	ret = nm_drv_init_start(&u8WifiMode);
    4c78:	200f      	movs	r0, #15
    4c7a:	4468      	add	r0, sp
    4c7c:	4b33      	ldr	r3, [pc, #204]	; (4d4c <m2m_wifi_init_start+0xf0>)
    4c7e:	4798      	blx	r3
    4c80:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    4c82:	d002      	beq.n	4c8a <m2m_wifi_init_start+0x2e>
}
    4c84:	0020      	movs	r0, r4
    4c86:	b00f      	add	sp, #60	; 0x3c
    4c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gu8WifiState = WIFI_STATE_START;
    4c8a:	2202      	movs	r2, #2
    4c8c:	4b30      	ldr	r3, [pc, #192]	; (4d50 <m2m_wifi_init_start+0xf4>)
    4c8e:	701a      	strb	r2, [r3, #0]
	ret = hif_init(NULL);
    4c90:	2000      	movs	r0, #0
    4c92:	4b30      	ldr	r3, [pc, #192]	; (4d54 <m2m_wifi_init_start+0xf8>)
    4c94:	4798      	blx	r3
    4c96:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    4c98:	d149      	bne.n	4d2e <m2m_wifi_init_start+0xd2>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    4c9a:	492f      	ldr	r1, [pc, #188]	; (4d58 <m2m_wifi_init_start+0xfc>)
    4c9c:	2001      	movs	r0, #1
    4c9e:	4b2f      	ldr	r3, [pc, #188]	; (4d5c <m2m_wifi_init_start+0x100>)
    4ca0:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    4ca2:	ae04      	add	r6, sp, #16
    4ca4:	0030      	movs	r0, r6
    4ca6:	4b2e      	ldr	r3, [pc, #184]	; (4d60 <m2m_wifi_init_start+0x104>)
    4ca8:	4798      	blx	r3
    4caa:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    4cac:	482d      	ldr	r0, [pc, #180]	; (4d64 <m2m_wifi_init_start+0x108>)
    4cae:	4d2e      	ldr	r5, [pc, #184]	; (4d68 <m2m_wifi_init_start+0x10c>)
    4cb0:	47a8      	blx	r5
    4cb2:	79b3      	ldrb	r3, [r6, #6]
    4cb4:	7972      	ldrb	r2, [r6, #5]
    4cb6:	7931      	ldrb	r1, [r6, #4]
    4cb8:	8c30      	ldrh	r0, [r6, #32]
    4cba:	9000      	str	r0, [sp, #0]
    4cbc:	482b      	ldr	r0, [pc, #172]	; (4d6c <m2m_wifi_init_start+0x110>)
    4cbe:	47a8      	blx	r5
    4cc0:	200d      	movs	r0, #13
    4cc2:	4f2b      	ldr	r7, [pc, #172]	; (4d70 <m2m_wifi_init_start+0x114>)
    4cc4:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    4cc6:	4827      	ldr	r0, [pc, #156]	; (4d64 <m2m_wifi_init_start+0x108>)
    4cc8:	47a8      	blx	r5
    4cca:	2226      	movs	r2, #38	; 0x26
    4ccc:	446a      	add	r2, sp
    4cce:	211a      	movs	r1, #26
    4cd0:	4469      	add	r1, sp
    4cd2:	4828      	ldr	r0, [pc, #160]	; (4d74 <m2m_wifi_init_start+0x118>)
    4cd4:	47a8      	blx	r5
    4cd6:	200d      	movs	r0, #13
    4cd8:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    4cda:	4822      	ldr	r0, [pc, #136]	; (4d64 <m2m_wifi_init_start+0x108>)
    4cdc:	47a8      	blx	r5
    4cde:	7a73      	ldrb	r3, [r6, #9]
    4ce0:	7a32      	ldrb	r2, [r6, #8]
    4ce2:	79f1      	ldrb	r1, [r6, #7]
    4ce4:	4824      	ldr	r0, [pc, #144]	; (4d78 <m2m_wifi_init_start+0x11c>)
    4ce6:	47a8      	blx	r5
    4ce8:	200d      	movs	r0, #13
    4cea:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u \n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    4cec:	481d      	ldr	r0, [pc, #116]	; (4d64 <m2m_wifi_init_start+0x108>)
    4cee:	47a8      	blx	r5
    4cf0:	2301      	movs	r3, #1
    4cf2:	2206      	movs	r2, #6
    4cf4:	2113      	movs	r1, #19
    4cf6:	4821      	ldr	r0, [pc, #132]	; (4d7c <m2m_wifi_init_start+0x120>)
    4cf8:	47a8      	blx	r5
    4cfa:	200d      	movs	r0, #13
    4cfc:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    4cfe:	4819      	ldr	r0, [pc, #100]	; (4d64 <m2m_wifi_init_start+0x108>)
    4d00:	47a8      	blx	r5
    4d02:	4a1f      	ldr	r2, [pc, #124]	; (4d80 <m2m_wifi_init_start+0x124>)
    4d04:	491f      	ldr	r1, [pc, #124]	; (4d84 <m2m_wifi_init_start+0x128>)
    4d06:	4820      	ldr	r0, [pc, #128]	; (4d88 <m2m_wifi_init_start+0x12c>)
    4d08:	47a8      	blx	r5
    4d0a:	200d      	movs	r0, #13
    4d0c:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    4d0e:	0023      	movs	r3, r4
    4d10:	330d      	adds	r3, #13
    4d12:	d1b7      	bne.n	4c84 <m2m_wifi_init_start+0x28>
		M2M_ERR("Mismatch Firmware Version\n");
    4d14:	22f0      	movs	r2, #240	; 0xf0
    4d16:	0052      	lsls	r2, r2, #1
    4d18:	491c      	ldr	r1, [pc, #112]	; (4d8c <m2m_wifi_init_start+0x130>)
    4d1a:	481d      	ldr	r0, [pc, #116]	; (4d90 <m2m_wifi_init_start+0x134>)
    4d1c:	4b12      	ldr	r3, [pc, #72]	; (4d68 <m2m_wifi_init_start+0x10c>)
    4d1e:	4798      	blx	r3
    4d20:	481c      	ldr	r0, [pc, #112]	; (4d94 <m2m_wifi_init_start+0x138>)
    4d22:	4b1d      	ldr	r3, [pc, #116]	; (4d98 <m2m_wifi_init_start+0x13c>)
    4d24:	4798      	blx	r3
    4d26:	200d      	movs	r0, #13
    4d28:	4b11      	ldr	r3, [pc, #68]	; (4d70 <m2m_wifi_init_start+0x114>)
    4d2a:	4798      	blx	r3
    4d2c:	e7aa      	b.n	4c84 <m2m_wifi_init_start+0x28>
    gu8WifiState = WIFI_STATE_DEINIT;
    4d2e:	2200      	movs	r2, #0
    4d30:	4b07      	ldr	r3, [pc, #28]	; (4d50 <m2m_wifi_init_start+0xf4>)
    4d32:	701a      	strb	r2, [r3, #0]
	nm_drv_deinit(NULL);
    4d34:	2000      	movs	r0, #0
    4d36:	4b19      	ldr	r3, [pc, #100]	; (4d9c <m2m_wifi_init_start+0x140>)
    4d38:	4798      	blx	r3
    4d3a:	e7a3      	b.n	4c84 <m2m_wifi_init_start+0x28>
		ret = M2M_ERR_FAIL;
    4d3c:	240c      	movs	r4, #12
    4d3e:	4264      	negs	r4, r4
    4d40:	e7a0      	b.n	4c84 <m2m_wifi_init_start+0x28>
    4d42:	46c0      	nop			; (mov r8, r8)
    4d44:	20000464 	.word	0x20000464
    4d48:	2000046a 	.word	0x2000046a
    4d4c:	00005c55 	.word	0x00005c55
    4d50:	20000469 	.word	0x20000469
    4d54:	000045d1 	.word	0x000045d1
    4d58:	00004609 	.word	0x00004609
    4d5c:	0000454d 	.word	0x0000454d
    4d60:	00005b05 	.word	0x00005b05
    4d64:	0000f1f4 	.word	0x0000f1f4
    4d68:	0000d4d5 	.word	0x0000d4d5
    4d6c:	0000f3b0 	.word	0x0000f3b0
    4d70:	0000d509 	.word	0x0000d509
    4d74:	0000f3d8 	.word	0x0000f3d8
    4d78:	0000f3f4 	.word	0x0000f3f4
    4d7c:	0000f418 	.word	0x0000f418
    4d80:	0000f430 	.word	0x0000f430
    4d84:	0000f43c 	.word	0x0000f43c
    4d88:	0000f448 	.word	0x0000f448
    4d8c:	0000f28c 	.word	0x0000f28c
    4d90:	0000ee54 	.word	0x0000ee54
    4d94:	0000f460 	.word	0x0000f460
    4d98:	0000d5f1 	.word	0x0000d5f1
    4d9c:	00005cdd 	.word	0x00005cdd

00004da0 <m2m_wifi_init>:
{
    4da0:	b510      	push	{r4, lr}
    4da2:	0004      	movs	r4, r0
	ret = m2m_wifi_init_hold();
    4da4:	4b04      	ldr	r3, [pc, #16]	; (4db8 <m2m_wifi_init+0x18>)
    4da6:	4798      	blx	r3
	if (ret == M2M_SUCCESS)
    4da8:	2800      	cmp	r0, #0
    4daa:	d000      	beq.n	4dae <m2m_wifi_init+0xe>
}
    4dac:	bd10      	pop	{r4, pc}
		ret = m2m_wifi_init_start(pWifiInitParam);
    4dae:	0020      	movs	r0, r4
    4db0:	4b02      	ldr	r3, [pc, #8]	; (4dbc <m2m_wifi_init+0x1c>)
    4db2:	4798      	blx	r3
    4db4:	e7fa      	b.n	4dac <m2m_wifi_init+0xc>
    4db6:	46c0      	nop			; (mov r8, r8)
    4db8:	00004c41 	.word	0x00004c41
    4dbc:	00004c5d 	.word	0x00004c5d

00004dc0 <m2m_wifi_handle_events>:
{
    4dc0:	b510      	push	{r4, lr}
	return hif_handle_isr();
    4dc2:	4b01      	ldr	r3, [pc, #4]	; (4dc8 <m2m_wifi_handle_events+0x8>)
    4dc4:	4798      	blx	r3
}
    4dc6:	bd10      	pop	{r4, pc}
    4dc8:	00004029 	.word	0x00004029

00004dcc <m2m_wifi_connect_open>:
/*************************************************************************************************/
sint8 m2m_wifi_connect_open(
	tenuCredStoreOption	enuCredStoreOption,
	tstrNetworkId		*pstrNetworkId
)
	{
    4dcc:	b510      	push	{r4, lr}
    4dce:	b090      	sub	sp, #64	; 0x40
    4dd0:	000b      	movs	r3, r1
	sint8				ret = M2M_ERR_INVALID_ARG;
	tstrM2mWifiConnHdr	strConnHdr;

	ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption, M2M_WIFI_SEC_OPEN, 0, pstrNetworkId, &strConnHdr);
    4dd2:	aa04      	add	r2, sp, #16
    4dd4:	9200      	str	r2, [sp, #0]
    4dd6:	2200      	movs	r2, #0
    4dd8:	2101      	movs	r1, #1
    4dda:	4c08      	ldr	r4, [pc, #32]	; (4dfc <m2m_wifi_connect_open+0x30>)
    4ddc:	47a0      	blx	r4
	if (ret == M2M_SUCCESS)
    4dde:	2800      	cmp	r0, #0
    4de0:	d001      	beq.n	4de6 <m2m_wifi_connect_open+0x1a>
		ret = hif_send(	M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN,
						(uint8*)&strConnHdr, sizeof(strConnHdr),
						NULL, 0, 0);
		}
	return ret;
	}
    4de2:	b010      	add	sp, #64	; 0x40
    4de4:	bd10      	pop	{r4, pc}
		ret = hif_send(	M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN,
    4de6:	2300      	movs	r3, #0
    4de8:	9302      	str	r3, [sp, #8]
    4dea:	9301      	str	r3, [sp, #4]
    4dec:	9300      	str	r3, [sp, #0]
    4dee:	3330      	adds	r3, #48	; 0x30
    4df0:	aa04      	add	r2, sp, #16
    4df2:	213b      	movs	r1, #59	; 0x3b
    4df4:	3001      	adds	r0, #1
    4df6:	4c02      	ldr	r4, [pc, #8]	; (4e00 <m2m_wifi_connect_open+0x34>)
    4df8:	47a0      	blx	r4
    4dfa:	e7f2      	b.n	4de2 <m2m_wifi_connect_open+0x16>
    4dfc:	00004909 	.word	0x00004909
    4e00:	00003dd5 	.word	0x00003dd5

00004e04 <m2m_wifi_connect_wep>:
sint8 m2m_wifi_connect_wep(
	tenuCredStoreOption	enuCredStoreOption,
	tstrNetworkId		*pstrNetworkId,
	tstrAuthWep			*pstrAuthWep
)
{
    4e04:	b570      	push	{r4, r5, r6, lr}
    4e06:	b090      	sub	sp, #64	; 0x40
    4e08:	1e14      	subs	r4, r2, #0
	sint8	ret = M2M_ERR_INVALID_ARG;

	if (
    4e0a:	d036      	beq.n	4e7a <m2m_wifi_connect_wep+0x76>
			(pstrAuthWep != NULL) && (pstrAuthWep->pu8WepKey != NULL)
    4e0c:	6813      	ldr	r3, [r2, #0]
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d036      	beq.n	4e80 <m2m_wifi_connect_wep+0x7c>
		&&	(pstrAuthWep->u8KeyIndx > 0) && (pstrAuthWep->u8KeyIndx <= WEP_KEY_MAX_INDEX)
    4e12:	7952      	ldrb	r2, [r2, #5]
    4e14:	3a01      	subs	r2, #1
    4e16:	2a03      	cmp	r2, #3
    4e18:	d835      	bhi.n	4e86 <m2m_wifi_connect_wep+0x82>
		&&	((pstrAuthWep->u8KeySz == WEP_104_KEY_STRING_SIZE) || (pstrAuthWep->u8KeySz == WEP_40_KEY_STRING_SIZE))
    4e1a:	7922      	ldrb	r2, [r4, #4]
    4e1c:	2310      	movs	r3, #16
    4e1e:	439a      	bics	r2, r3
    4e20:	2a0a      	cmp	r2, #10
    4e22:	d133      	bne.n	4e8c <m2m_wifi_connect_wep+0x88>
	)
	{
		tstrM2mWifiConnHdr	strConnHdr;

		ret = m2m_wifi_connect_prepare_msg(	enuCredStoreOption,
    4e24:	ab04      	add	r3, sp, #16
    4e26:	9300      	str	r3, [sp, #0]
    4e28:	000b      	movs	r3, r1
    4e2a:	3206      	adds	r2, #6
    4e2c:	2103      	movs	r1, #3
    4e2e:	4d19      	ldr	r5, [pc, #100]	; (4e94 <m2m_wifi_connect_wep+0x90>)
    4e30:	47a8      	blx	r5
    4e32:	1e05      	subs	r5, r0, #0
											M2M_WIFI_SEC_WEP,
											sizeof(tstrM2mWifiWep),
											pstrNetworkId,
											&strConnHdr);

		if (ret == M2M_SUCCESS)
    4e34:	d002      	beq.n	4e3c <m2m_wifi_connect_wep+0x38>
				free(pstrWep);
			}
		}
	}
	return ret;
	}
    4e36:	0028      	movs	r0, r5
    4e38:	b010      	add	sp, #64	; 0x40
    4e3a:	bd70      	pop	{r4, r5, r6, pc}
			tstrM2mWifiWep	*pstrWep = (tstrM2mWifiWep*)malloc(sizeof(tstrM2mWifiWep));
    4e3c:	2010      	movs	r0, #16
    4e3e:	4b16      	ldr	r3, [pc, #88]	; (4e98 <m2m_wifi_connect_wep+0x94>)
    4e40:	4798      	blx	r3
    4e42:	1e06      	subs	r6, r0, #0
			if (pstrWep != NULL)
    4e44:	d0f7      	beq.n	4e36 <m2m_wifi_connect_wep+0x32>
				pstrWep->u8KeyIndex = pstrAuthWep->u8KeyIndx - 1;
    4e46:	7963      	ldrb	r3, [r4, #5]
    4e48:	3b01      	subs	r3, #1
    4e4a:	7003      	strb	r3, [r0, #0]
				pstrWep->u8KeyLen = pstrAuthWep->u8KeySz/2;
    4e4c:	7922      	ldrb	r2, [r4, #4]
    4e4e:	0852      	lsrs	r2, r2, #1
    4e50:	7042      	strb	r2, [r0, #1]
				hexstr_2_bytes(pstrWep->au8WepKey, (pstrAuthWep->pu8WepKey), pstrWep->u8KeyLen);
    4e52:	6821      	ldr	r1, [r4, #0]
    4e54:	3002      	adds	r0, #2
    4e56:	4b11      	ldr	r3, [pc, #68]	; (4e9c <m2m_wifi_connect_wep+0x98>)
    4e58:	4798      	blx	r3
				ret = hif_send(	M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
    4e5a:	2330      	movs	r3, #48	; 0x30
    4e5c:	9302      	str	r3, [sp, #8]
    4e5e:	3b20      	subs	r3, #32
    4e60:	9301      	str	r3, [sp, #4]
    4e62:	9600      	str	r6, [sp, #0]
    4e64:	3320      	adds	r3, #32
    4e66:	aa04      	add	r2, sp, #16
    4e68:	21bb      	movs	r1, #187	; 0xbb
    4e6a:	2001      	movs	r0, #1
    4e6c:	4c0c      	ldr	r4, [pc, #48]	; (4ea0 <m2m_wifi_connect_wep+0x9c>)
    4e6e:	47a0      	blx	r4
    4e70:	0005      	movs	r5, r0
				free(pstrWep);
    4e72:	0030      	movs	r0, r6
    4e74:	4b0b      	ldr	r3, [pc, #44]	; (4ea4 <m2m_wifi_connect_wep+0xa0>)
    4e76:	4798      	blx	r3
    4e78:	e7dd      	b.n	4e36 <m2m_wifi_connect_wep+0x32>
	sint8	ret = M2M_ERR_INVALID_ARG;
    4e7a:	250f      	movs	r5, #15
    4e7c:	426d      	negs	r5, r5
    4e7e:	e7da      	b.n	4e36 <m2m_wifi_connect_wep+0x32>
    4e80:	250f      	movs	r5, #15
    4e82:	426d      	negs	r5, r5
    4e84:	e7d7      	b.n	4e36 <m2m_wifi_connect_wep+0x32>
    4e86:	250f      	movs	r5, #15
    4e88:	426d      	negs	r5, r5
    4e8a:	e7d4      	b.n	4e36 <m2m_wifi_connect_wep+0x32>
    4e8c:	250f      	movs	r5, #15
    4e8e:	426d      	negs	r5, r5
    4e90:	e7d1      	b.n	4e36 <m2m_wifi_connect_wep+0x32>
    4e92:	46c0      	nop			; (mov r8, r8)
    4e94:	00004909 	.word	0x00004909
    4e98:	0000d2f9 	.word	0x0000d2f9
    4e9c:	00004bbd 	.word	0x00004bbd
    4ea0:	00003dd5 	.word	0x00003dd5
    4ea4:	0000d30d 	.word	0x0000d30d

00004ea8 <m2m_wifi_connect_psk>:
sint8 m2m_wifi_connect_psk(
	tenuCredStoreOption	enuCredStoreOption,
	tstrNetworkId		*pstrNetworkId,
	tstrAuthPsk			*pstrAuthPsk
)
{
    4ea8:	b570      	push	{r4, r5, r6, lr}
    4eaa:	b090      	sub	sp, #64	; 0x40
    4eac:	1e15      	subs	r5, r2, #0
	sint8	ret = M2M_ERR_INVALID_ARG;

	if (pstrAuthPsk != NULL)
    4eae:	d04c      	beq.n	4f4a <m2m_wifi_connect_psk+0xa2>
	{
		tstrM2mWifiConnHdr	strConnHdr;

		ret = m2m_wifi_connect_prepare_msg(	enuCredStoreOption,
    4eb0:	ab04      	add	r3, sp, #16
    4eb2:	9300      	str	r3, [sp, #0]
    4eb4:	000b      	movs	r3, r1
    4eb6:	226c      	movs	r2, #108	; 0x6c
    4eb8:	2102      	movs	r1, #2
    4eba:	4c29      	ldr	r4, [pc, #164]	; (4f60 <m2m_wifi_connect_psk+0xb8>)
    4ebc:	47a0      	blx	r4
    4ebe:	1e04      	subs	r4, r0, #0
											M2M_WIFI_SEC_WPA_PSK,
											sizeof(tstrM2mWifiPsk),
											pstrNetworkId,
											&strConnHdr);

		if (ret == M2M_SUCCESS)
    4ec0:	d002      	beq.n	4ec8 <m2m_wifi_connect_psk+0x20>
				free(pstrPsk);
			}
		}
	}
	return ret;
}
    4ec2:	0020      	movs	r0, r4
    4ec4:	b010      	add	sp, #64	; 0x40
    4ec6:	bd70      	pop	{r4, r5, r6, pc}
			tstrM2mWifiPsk	*pstrPsk = (tstrM2mWifiPsk*)malloc(sizeof(tstrM2mWifiPsk));
    4ec8:	206c      	movs	r0, #108	; 0x6c
    4eca:	4b26      	ldr	r3, [pc, #152]	; (4f64 <m2m_wifi_connect_psk+0xbc>)
    4ecc:	4798      	blx	r3
    4ece:	1e06      	subs	r6, r0, #0
			if (pstrPsk != NULL)
    4ed0:	d0f7      	beq.n	4ec2 <m2m_wifi_connect_psk+0x1a>
				m2m_memset((uint8*)pstrPsk, 0, sizeof(tstrM2mWifiPsk));
    4ed2:	226c      	movs	r2, #108	; 0x6c
    4ed4:	2100      	movs	r1, #0
    4ed6:	4b24      	ldr	r3, [pc, #144]	; (4f68 <m2m_wifi_connect_psk+0xc0>)
    4ed8:	4798      	blx	r3
				if (pstrAuthPsk->pu8Psk != NULL)
    4eda:	6829      	ldr	r1, [r5, #0]
    4edc:	2900      	cmp	r1, #0
    4ede:	d017      	beq.n	4f10 <m2m_wifi_connect_psk+0x68>
					if (pstrAuthPsk->pu8Passphrase != NULL)
    4ee0:	686b      	ldr	r3, [r5, #4]
    4ee2:	240f      	movs	r4, #15
    4ee4:	4264      	negs	r4, r4
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d003      	beq.n	4ef2 <m2m_wifi_connect_psk+0x4a>
				free(pstrPsk);
    4eea:	0030      	movs	r0, r6
    4eec:	4b1f      	ldr	r3, [pc, #124]	; (4f6c <m2m_wifi_connect_psk+0xc4>)
    4eee:	4798      	blx	r3
    4ef0:	e7e7      	b.n	4ec2 <m2m_wifi_connect_psk+0x1a>
						pstrPsk->u8PassphraseLen = M2M_MAX_PSK_LEN-1;
    4ef2:	3340      	adds	r3, #64	; 0x40
    4ef4:	7033      	strb	r3, [r6, #0]
						if (M2M_SUCCESS != hexstr_2_bytes(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen/2))
    4ef6:	1c74      	adds	r4, r6, #1
    4ef8:	2220      	movs	r2, #32
    4efa:	0020      	movs	r0, r4
    4efc:	4b1c      	ldr	r3, [pc, #112]	; (4f70 <m2m_wifi_connect_psk+0xc8>)
    4efe:	4798      	blx	r3
    4f00:	2800      	cmp	r0, #0
    4f02:	d125      	bne.n	4f50 <m2m_wifi_connect_psk+0xa8>
						m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen);
    4f04:	7832      	ldrb	r2, [r6, #0]
    4f06:	6829      	ldr	r1, [r5, #0]
    4f08:	0020      	movs	r0, r4
    4f0a:	4b1a      	ldr	r3, [pc, #104]	; (4f74 <m2m_wifi_connect_psk+0xcc>)
    4f0c:	4798      	blx	r3
    4f0e:	e00c      	b.n	4f2a <m2m_wifi_connect_psk+0x82>
				else if (pstrAuthPsk->pu8Passphrase != NULL)
    4f10:	6869      	ldr	r1, [r5, #4]
    4f12:	2900      	cmp	r1, #0
    4f14:	d016      	beq.n	4f44 <m2m_wifi_connect_psk+0x9c>
					if (pstrAuthPsk->u8PassphraseLen > M2M_MAX_PSK_LEN-1)
    4f16:	7a2a      	ldrb	r2, [r5, #8]
    4f18:	2a40      	cmp	r2, #64	; 0x40
    4f1a:	d902      	bls.n	4f22 <m2m_wifi_connect_psk+0x7a>
    4f1c:	240f      	movs	r4, #15
    4f1e:	4264      	negs	r4, r4
    4f20:	e7e3      	b.n	4eea <m2m_wifi_connect_psk+0x42>
						pstrPsk->u8PassphraseLen = pstrAuthPsk->u8PassphraseLen;
    4f22:	7032      	strb	r2, [r6, #0]
						m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Passphrase, pstrPsk->u8PassphraseLen);
    4f24:	1c70      	adds	r0, r6, #1
    4f26:	4b13      	ldr	r3, [pc, #76]	; (4f74 <m2m_wifi_connect_psk+0xcc>)
    4f28:	4798      	blx	r3
					ret = hif_send(	M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
    4f2a:	2330      	movs	r3, #48	; 0x30
    4f2c:	9302      	str	r3, [sp, #8]
    4f2e:	333c      	adds	r3, #60	; 0x3c
    4f30:	9301      	str	r3, [sp, #4]
    4f32:	9600      	str	r6, [sp, #0]
    4f34:	3b3c      	subs	r3, #60	; 0x3c
    4f36:	aa04      	add	r2, sp, #16
    4f38:	21bb      	movs	r1, #187	; 0xbb
    4f3a:	2001      	movs	r0, #1
    4f3c:	4c0e      	ldr	r4, [pc, #56]	; (4f78 <m2m_wifi_connect_psk+0xd0>)
    4f3e:	47a0      	blx	r4
    4f40:	0004      	movs	r4, r0
    4f42:	e7d2      	b.n	4eea <m2m_wifi_connect_psk+0x42>
    4f44:	240f      	movs	r4, #15
    4f46:	4264      	negs	r4, r4
    4f48:	e7cf      	b.n	4eea <m2m_wifi_connect_psk+0x42>
	sint8	ret = M2M_ERR_INVALID_ARG;
    4f4a:	240f      	movs	r4, #15
    4f4c:	4264      	negs	r4, r4
	return ret;
    4f4e:	e7b8      	b.n	4ec2 <m2m_wifi_connect_psk+0x1a>
						m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen);
    4f50:	7832      	ldrb	r2, [r6, #0]
    4f52:	6829      	ldr	r1, [r5, #0]
    4f54:	0020      	movs	r0, r4
    4f56:	4b07      	ldr	r3, [pc, #28]	; (4f74 <m2m_wifi_connect_psk+0xcc>)
    4f58:	4798      	blx	r3
							ret = M2M_ERR_INVALID_ARG;
    4f5a:	240f      	movs	r4, #15
    4f5c:	4264      	negs	r4, r4
    4f5e:	e7c4      	b.n	4eea <m2m_wifi_connect_psk+0x42>
    4f60:	00004909 	.word	0x00004909
    4f64:	0000d2f9 	.word	0x0000d2f9
    4f68:	00003cc1 	.word	0x00003cc1
    4f6c:	0000d30d 	.word	0x0000d30d
    4f70:	00004bbd 	.word	0x00004bbd
    4f74:	00003cad 	.word	0x00003cad
    4f78:	00003dd5 	.word	0x00003dd5

00004f7c <m2m_wifi_connect_1x_mschap2>:
sint8 m2m_wifi_connect_1x_mschap2(
	tenuCredStoreOption	enuCredStoreOption,
	tstrNetworkId		*pstrNetworkId,
	tstrAuth1xMschap2	*pstrAuth1xMschap2
)
{
    4f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f7e:	46ce      	mov	lr, r9
    4f80:	4647      	mov	r7, r8
    4f82:	b580      	push	{r7, lr}
    4f84:	b091      	sub	sp, #68	; 0x44
    4f86:	1e14      	subs	r4, r2, #0
	sint8 ret = M2M_ERR_INVALID_ARG;
	if (pstrAuth1xMschap2 != NULL)
    4f88:	d100      	bne.n	4f8c <m2m_wifi_connect_1x_mschap2+0x10>
    4f8a:	e070      	b.n	506e <m2m_wifi_connect_1x_mschap2+0xf2>
	{
		if (pstrAuth1xMschap2->pu8Domain == NULL)
    4f8c:	6813      	ldr	r3, [r2, #0]
    4f8e:	2b00      	cmp	r3, #0
    4f90:	d025      	beq.n	4fde <m2m_wifi_connect_1x_mschap2+0x62>
			pstrAuth1xMschap2->u16DomainLen = 0;
		if (
    4f92:	6863      	ldr	r3, [r4, #4]
    4f94:	2b00      	cmp	r3, #0
    4f96:	d100      	bne.n	4f9a <m2m_wifi_connect_1x_mschap2+0x1e>
    4f98:	e06c      	b.n	5074 <m2m_wifi_connect_1x_mschap2+0xf8>
				(pstrAuth1xMschap2->pu8UserName != NULL)
			&&	(pstrAuth1xMschap2->pu8Password != NULL)
    4f9a:	68a3      	ldr	r3, [r4, #8]
    4f9c:	2b00      	cmp	r3, #0
    4f9e:	d100      	bne.n	4fa2 <m2m_wifi_connect_1x_mschap2+0x26>
    4fa0:	e06b      	b.n	507a <m2m_wifi_connect_1x_mschap2+0xfe>
			&&	((uint32)(pstrAuth1xMschap2->u16DomainLen) + pstrAuth1xMschap2->u16UserNameLen <= M2M_AUTH_1X_USER_LEN_MAX)
    4fa2:	89a5      	ldrh	r5, [r4, #12]
    4fa4:	89e3      	ldrh	r3, [r4, #14]
    4fa6:	18ea      	adds	r2, r5, r3
    4fa8:	2a84      	cmp	r2, #132	; 0x84
    4faa:	d900      	bls.n	4fae <m2m_wifi_connect_1x_mschap2+0x32>
    4fac:	e068      	b.n	5080 <m2m_wifi_connect_1x_mschap2+0x104>
			&&	(pstrAuth1xMschap2->u16PasswordLen <= M2M_AUTH_1X_PASSWORD_LEN_MAX)
    4fae:	8a22      	ldrh	r2, [r4, #16]
    4fb0:	2680      	movs	r6, #128	; 0x80
    4fb2:	0076      	lsls	r6, r6, #1
    4fb4:	42b2      	cmp	r2, r6
    4fb6:	d866      	bhi.n	5086 <m2m_wifi_connect_1x_mschap2+0x10a>
		)
		{
			tstrM2mWifiConnHdr	strConnHdr;
			uint16				u16AuthSize =	sizeof(tstrM2mWifi1xHdr) +
												pstrAuth1xMschap2->u16DomainLen +
    4fb8:	18ed      	adds	r5, r5, r3
			uint16				u16AuthSize =	sizeof(tstrM2mWifi1xHdr) +
    4fba:	350c      	adds	r5, #12
    4fbc:	1955      	adds	r5, r2, r5
    4fbe:	b2ad      	uxth	r5, r5
												pstrAuth1xMschap2->u16UserNameLen +
												pstrAuth1xMschap2->u16PasswordLen;

			ret = m2m_wifi_connect_prepare_msg(	enuCredStoreOption,
    4fc0:	ab04      	add	r3, sp, #16
    4fc2:	9300      	str	r3, [sp, #0]
    4fc4:	000b      	movs	r3, r1
    4fc6:	002a      	movs	r2, r5
    4fc8:	2104      	movs	r1, #4
    4fca:	4e30      	ldr	r6, [pc, #192]	; (508c <m2m_wifi_connect_1x_mschap2+0x110>)
    4fcc:	47b0      	blx	r6
    4fce:	1e06      	subs	r6, r0, #0
												M2M_WIFI_SEC_802_1X,
												u16AuthSize,
												pstrNetworkId,
												&strConnHdr);

			if (ret == M2M_SUCCESS)
    4fd0:	d007      	beq.n	4fe2 <m2m_wifi_connect_1x_mschap2+0x66>
				}
			}
		}
	}
	return ret;
}
    4fd2:	0030      	movs	r0, r6
    4fd4:	b011      	add	sp, #68	; 0x44
    4fd6:	bc0c      	pop	{r2, r3}
    4fd8:	4690      	mov	r8, r2
    4fda:	4699      	mov	r9, r3
    4fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pstrAuth1xMschap2->u16DomainLen = 0;
    4fde:	8193      	strh	r3, [r2, #12]
    4fe0:	e7d7      	b.n	4f92 <m2m_wifi_connect_1x_mschap2+0x16>
				tstrM2mWifi1xHdr	*pstr1xHdr = (tstrM2mWifi1xHdr*)malloc(u16AuthSize);
    4fe2:	0028      	movs	r0, r5
    4fe4:	4b2a      	ldr	r3, [pc, #168]	; (5090 <m2m_wifi_connect_1x_mschap2+0x114>)
    4fe6:	4798      	blx	r3
    4fe8:	1e07      	subs	r7, r0, #0
				if (pstr1xHdr != NULL)
    4fea:	d0f2      	beq.n	4fd2 <m2m_wifi_connect_1x_mschap2+0x56>
					uint8	*pu8AuthPtr = pstr1xHdr->au81xAuthDetails;
    4fec:	230c      	movs	r3, #12
    4fee:	4698      	mov	r8, r3
    4ff0:	4480      	add	r8, r0
					m2m_memset((uint8*)pstr1xHdr, 0, u16AuthSize);
    4ff2:	002a      	movs	r2, r5
    4ff4:	2100      	movs	r1, #0
    4ff6:	4b27      	ldr	r3, [pc, #156]	; (5094 <m2m_wifi_connect_1x_mschap2+0x118>)
    4ff8:	4798      	blx	r3
					pstr1xHdr->u8Flags = M2M_802_1X_MSCHAP2_FLAG;
    4ffa:	2301      	movs	r3, #1
    4ffc:	703b      	strb	r3, [r7, #0]
					if (pstrAuth1xMschap2->bUnencryptedUserName == true)
    4ffe:	7ca3      	ldrb	r3, [r4, #18]
    5000:	2b00      	cmp	r3, #0
    5002:	d001      	beq.n	5008 <m2m_wifi_connect_1x_mschap2+0x8c>
						pstr1xHdr->u8Flags |= M2M_802_1X_UNENCRYPTED_USERNAME_FLAG;
    5004:	2381      	movs	r3, #129	; 0x81
    5006:	703b      	strb	r3, [r7, #0]
					if (pstrAuth1xMschap2->bPrependDomain == true)
    5008:	7ce3      	ldrb	r3, [r4, #19]
    500a:	2b00      	cmp	r3, #0
    500c:	d003      	beq.n	5016 <m2m_wifi_connect_1x_mschap2+0x9a>
						pstr1xHdr->u8Flags |= M2M_802_1X_PREPEND_DOMAIN_FLAG;
    500e:	783b      	ldrb	r3, [r7, #0]
    5010:	2240      	movs	r2, #64	; 0x40
    5012:	4313      	orrs	r3, r2
    5014:	703b      	strb	r3, [r7, #0]
					pstr1xHdr->u8DomainLength = 0;
    5016:	2300      	movs	r3, #0
    5018:	707b      	strb	r3, [r7, #1]
					if (pstrAuth1xMschap2->pu8Domain != NULL)
    501a:	6821      	ldr	r1, [r4, #0]
    501c:	2900      	cmp	r1, #0
    501e:	d024      	beq.n	506a <m2m_wifi_connect_1x_mschap2+0xee>
						pstr1xHdr->u8DomainLength = (uint8)(pstrAuth1xMschap2->u16DomainLen);
    5020:	7b22      	ldrb	r2, [r4, #12]
    5022:	707a      	strb	r2, [r7, #1]
						m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Domain, pstr1xHdr->u8DomainLength);
    5024:	4640      	mov	r0, r8
    5026:	4b1c      	ldr	r3, [pc, #112]	; (5098 <m2m_wifi_connect_1x_mschap2+0x11c>)
    5028:	4798      	blx	r3
						pu8AuthPtr += pstr1xHdr->u8DomainLength;
    502a:	787e      	ldrb	r6, [r7, #1]
    502c:	4446      	add	r6, r8
					pstr1xHdr->u16UserNameLength = (pstrAuth1xMschap2->u16UserNameLen);
    502e:	89e2      	ldrh	r2, [r4, #14]
    5030:	807a      	strh	r2, [r7, #2]
					m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8UserName, pstr1xHdr->u16UserNameLength);
    5032:	6861      	ldr	r1, [r4, #4]
    5034:	0030      	movs	r0, r6
    5036:	4b18      	ldr	r3, [pc, #96]	; (5098 <m2m_wifi_connect_1x_mschap2+0x11c>)
    5038:	4699      	mov	r9, r3
    503a:	4798      	blx	r3
					pu8AuthPtr += pstr1xHdr->u16UserNameLength;
    503c:	8878      	ldrh	r0, [r7, #2]
    503e:	1830      	adds	r0, r6, r0
					pstr1xHdr->u16PrivateKeyOffset = pu8AuthPtr - pstr1xHdr->au81xAuthDetails;
    5040:	4643      	mov	r3, r8
    5042:	1ac3      	subs	r3, r0, r3
    5044:	80bb      	strh	r3, [r7, #4]
					pstr1xHdr->u16PrivateKeyLength = pstrAuth1xMschap2->u16PasswordLen;
    5046:	8a22      	ldrh	r2, [r4, #16]
    5048:	80fa      	strh	r2, [r7, #6]
					m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Password, pstr1xHdr->u16PrivateKeyLength);
    504a:	68a1      	ldr	r1, [r4, #8]
    504c:	47c8      	blx	r9
					ret = hif_send(	M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
    504e:	2330      	movs	r3, #48	; 0x30
    5050:	9302      	str	r3, [sp, #8]
    5052:	9501      	str	r5, [sp, #4]
    5054:	9700      	str	r7, [sp, #0]
    5056:	aa04      	add	r2, sp, #16
    5058:	21bb      	movs	r1, #187	; 0xbb
    505a:	2001      	movs	r0, #1
    505c:	4c0f      	ldr	r4, [pc, #60]	; (509c <m2m_wifi_connect_1x_mschap2+0x120>)
    505e:	47a0      	blx	r4
    5060:	0006      	movs	r6, r0
					free(pstr1xHdr);
    5062:	0038      	movs	r0, r7
    5064:	4b0e      	ldr	r3, [pc, #56]	; (50a0 <m2m_wifi_connect_1x_mschap2+0x124>)
    5066:	4798      	blx	r3
    5068:	e7b3      	b.n	4fd2 <m2m_wifi_connect_1x_mschap2+0x56>
					uint8	*pu8AuthPtr = pstr1xHdr->au81xAuthDetails;
    506a:	4646      	mov	r6, r8
    506c:	e7df      	b.n	502e <m2m_wifi_connect_1x_mschap2+0xb2>
	sint8 ret = M2M_ERR_INVALID_ARG;
    506e:	260f      	movs	r6, #15
    5070:	4276      	negs	r6, r6
    5072:	e7ae      	b.n	4fd2 <m2m_wifi_connect_1x_mschap2+0x56>
    5074:	260f      	movs	r6, #15
    5076:	4276      	negs	r6, r6
    5078:	e7ab      	b.n	4fd2 <m2m_wifi_connect_1x_mschap2+0x56>
    507a:	260f      	movs	r6, #15
    507c:	4276      	negs	r6, r6
    507e:	e7a8      	b.n	4fd2 <m2m_wifi_connect_1x_mschap2+0x56>
    5080:	260f      	movs	r6, #15
    5082:	4276      	negs	r6, r6
    5084:	e7a5      	b.n	4fd2 <m2m_wifi_connect_1x_mschap2+0x56>
    5086:	260f      	movs	r6, #15
    5088:	4276      	negs	r6, r6
    508a:	e7a2      	b.n	4fd2 <m2m_wifi_connect_1x_mschap2+0x56>
    508c:	00004909 	.word	0x00004909
    5090:	0000d2f9 	.word	0x0000d2f9
    5094:	00003cc1 	.word	0x00003cc1
    5098:	00003cad 	.word	0x00003cad
    509c:	00003dd5 	.word	0x00003dd5
    50a0:	0000d30d 	.word	0x0000d30d

000050a4 <m2m_wifi_connect_sc>:
{
    return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch, 0);
}

sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    50a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    50a6:	b08b      	sub	sp, #44	; 0x2c
    50a8:	001e      	movs	r6, r3
    50aa:	ab10      	add	r3, sp, #64	; 0x40
    50ac:	881d      	ldrh	r5, [r3, #0]
    50ae:	ab11      	add	r3, sp, #68	; 0x44
    50b0:	781c      	ldrb	r4, [r3, #0]
    sint8               s8Ret              = M2M_ERR_INVALID_ARG;
    tstrNetworkId       strNetworkId       = {NULL, (uint8*)pcSsid, u8SsidLen, (tenuM2mScanCh)u16Ch};
    50b2:	ab07      	add	r3, sp, #28
    50b4:	2700      	movs	r7, #0
    50b6:	9707      	str	r7, [sp, #28]
    50b8:	9008      	str	r0, [sp, #32]
    50ba:	7219      	strb	r1, [r3, #8]
    50bc:	725d      	strb	r5, [r3, #9]
    tenuCredStoreOption enuCredStoreOption = u8NoSaveCred ? WIFI_CRED_DONTSAVE : WIFI_CRED_SAVE_ENCRYPTED;
    50be:	4263      	negs	r3, r4
    50c0:	415c      	adcs	r4, r3
    50c2:	0064      	lsls	r4, r4, #1

    /* This API does not support SSIDs which contain '\0'. If there is a '\0' character within the
     * first u8SsidLen characters, then assume that the input u8SsidLen was incorrect - set length
     * to strlen(pcSsid) and continue. This is to avoid a change from the behaviour of previously
     * released drivers. */
    if (u8SsidLen < M2M_MAX_SSID_LEN)
    50c4:	2920      	cmp	r1, #32
    50c6:	d920      	bls.n	510a <m2m_wifi_connect_sc+0x66>
        while (u8SsidLen--)
            if (strNetworkId.pu8Ssid[u8SsidLen] == 0){
                strNetworkId.u8SsidLen = u8SsidLen;}
	}

	switch ((tenuM2mSecType)u8SecType)
    50c8:	2a02      	cmp	r2, #2
    50ca:	d03a      	beq.n	5142 <m2m_wifi_connect_sc+0x9e>
    50cc:	d931      	bls.n	5132 <m2m_wifi_connect_sc+0x8e>
    50ce:	2a03      	cmp	r2, #3
    50d0:	d04e      	beq.n	5170 <m2m_wifi_connect_sc+0xcc>
    50d2:	2a04      	cmp	r2, #4
    50d4:	d15b      	bne.n	518e <m2m_wifi_connect_sc+0xea>

            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
		}
		break;
		case M2M_WIFI_SEC_802_1X:
		if (pvAuthInfo != NULL)
    50d6:	2e00      	cmp	r6, #0
    50d8:	d062      	beq.n	51a0 <m2m_wifi_connect_sc+0xfc>
		{
			tstr1xAuthCredentials	*pstr1xParams = (tstr1xAuthCredentials*)pvAuthInfo;
			tstrAuth1xMschap2		strAuth1xMschap2 = {NULL,
    50da:	2214      	movs	r2, #20
    50dc:	2100      	movs	r1, #0
    50de:	a802      	add	r0, sp, #8
    50e0:	4b31      	ldr	r3, [pc, #196]	; (51a8 <m2m_wifi_connect_sc+0x104>)
    50e2:	4798      	blx	r3
    50e4:	9603      	str	r6, [sp, #12]
				pstr1xParams->au8UserName,
				pstr1xParams->au8Passwd,
    50e6:	0037      	movs	r7, r6
    50e8:	3715      	adds	r7, #21
			tstrAuth1xMschap2		strAuth1xMschap2 = {NULL,
    50ea:	9704      	str	r7, [sp, #16]
				0,
                                                        m2m_strlen(pstr1xParams->au8UserName),
    50ec:	0030      	movs	r0, r6
    50ee:	4d2f      	ldr	r5, [pc, #188]	; (51ac <m2m_wifi_connect_sc+0x108>)
    50f0:	47a8      	blx	r5
			tstrAuth1xMschap2		strAuth1xMschap2 = {NULL,
    50f2:	ab02      	add	r3, sp, #8
    50f4:	81d8      	strh	r0, [r3, #14]
                                                        m2m_strlen(pstr1xParams->au8Passwd),
    50f6:	0038      	movs	r0, r7
    50f8:	47a8      	blx	r5
			tstrAuth1xMschap2		strAuth1xMschap2 = {NULL,
    50fa:	ab02      	add	r3, sp, #8
    50fc:	8218      	strh	r0, [r3, #16]
                                                        false};

            s8Ret = m2m_wifi_connect_1x_mschap2(enuCredStoreOption, &strNetworkId, &strAuth1xMschap2);
    50fe:	001a      	movs	r2, r3
    5100:	a907      	add	r1, sp, #28
    5102:	0020      	movs	r0, r4
    5104:	4b2a      	ldr	r3, [pc, #168]	; (51b0 <m2m_wifi_connect_sc+0x10c>)
    5106:	4798      	blx	r3
    5108:	e019      	b.n	513e <m2m_wifi_connect_sc+0x9a>
    510a:	9101      	str	r1, [sp, #4]
    510c:	2500      	movs	r5, #0
            if (strNetworkId.pu8Ssid[u8SsidLen] == 0){
    510e:	2701      	movs	r7, #1
        while (u8SsidLen--)
    5110:	3901      	subs	r1, #1
    5112:	b2c9      	uxtb	r1, r1
    5114:	29ff      	cmp	r1, #255	; 0xff
    5116:	d005      	beq.n	5124 <m2m_wifi_connect_sc+0x80>
            if (strNetworkId.pu8Ssid[u8SsidLen] == 0){
    5118:	5c43      	ldrb	r3, [r0, r1]
    511a:	2b00      	cmp	r3, #0
    511c:	d1f8      	bne.n	5110 <m2m_wifi_connect_sc+0x6c>
                strNetworkId.u8SsidLen = u8SsidLen;}
    511e:	9101      	str	r1, [sp, #4]
            if (strNetworkId.pu8Ssid[u8SsidLen] == 0){
    5120:	003d      	movs	r5, r7
    5122:	e7f5      	b.n	5110 <m2m_wifi_connect_sc+0x6c>
    5124:	2d00      	cmp	r5, #0
    5126:	d0cf      	beq.n	50c8 <m2m_wifi_connect_sc+0x24>
    5128:	ab07      	add	r3, sp, #28
    512a:	4669      	mov	r1, sp
    512c:	7909      	ldrb	r1, [r1, #4]
    512e:	7219      	strb	r1, [r3, #8]
    5130:	e7ca      	b.n	50c8 <m2m_wifi_connect_sc+0x24>
	switch ((tenuM2mSecType)u8SecType)
    5132:	2a01      	cmp	r2, #1
    5134:	d12b      	bne.n	518e <m2m_wifi_connect_sc+0xea>
        s8Ret = m2m_wifi_connect_open(enuCredStoreOption, &strNetworkId);
    5136:	a907      	add	r1, sp, #28
    5138:	0020      	movs	r0, r4
    513a:	4b1e      	ldr	r3, [pc, #120]	; (51b4 <m2m_wifi_connect_sc+0x110>)
    513c:	4798      	blx	r3
		break;
		default:
		break;
	}
    return s8Ret;
}
    513e:	b00b      	add	sp, #44	; 0x2c
    5140:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (pvAuthInfo != NULL)
    5142:	2e00      	cmp	r6, #0
    5144:	d026      	beq.n	5194 <m2m_wifi_connect_sc+0xf0>
			tstrAuthPsk	strAuthPsk = {NULL, NULL, 0};
    5146:	2300      	movs	r3, #0
    5148:	9302      	str	r3, [sp, #8]
    514a:	9303      	str	r3, [sp, #12]
    514c:	aa02      	add	r2, sp, #8
    514e:	7213      	strb	r3, [r2, #8]
            uint16      len        = m2m_strlen((uint8*)pvAuthInfo);
    5150:	0030      	movs	r0, r6
    5152:	4b16      	ldr	r3, [pc, #88]	; (51ac <m2m_wifi_connect_sc+0x108>)
    5154:	4798      	blx	r3
			if (len == M2M_MAX_PSK_LEN-1)
    5156:	2840      	cmp	r0, #64	; 0x40
    5158:	d008      	beq.n	516c <m2m_wifi_connect_sc+0xc8>
				strAuthPsk.pu8Passphrase = (uint8*)pvAuthInfo;
    515a:	9603      	str	r6, [sp, #12]
				strAuthPsk.u8PassphraseLen = len;
    515c:	ab02      	add	r3, sp, #8
    515e:	7218      	strb	r0, [r3, #8]
            s8Ret = m2m_wifi_connect_psk(enuCredStoreOption, &strNetworkId, &strAuthPsk);
    5160:	aa02      	add	r2, sp, #8
    5162:	a907      	add	r1, sp, #28
    5164:	0020      	movs	r0, r4
    5166:	4b14      	ldr	r3, [pc, #80]	; (51b8 <m2m_wifi_connect_sc+0x114>)
    5168:	4798      	blx	r3
    516a:	e7e8      	b.n	513e <m2m_wifi_connect_sc+0x9a>
				strAuthPsk.pu8Psk = (uint8*)pvAuthInfo;
    516c:	9602      	str	r6, [sp, #8]
    516e:	e7f7      	b.n	5160 <m2m_wifi_connect_sc+0xbc>
		if (pvAuthInfo != NULL)
    5170:	2e00      	cmp	r6, #0
    5172:	d012      	beq.n	519a <m2m_wifi_connect_sc+0xf6>
			tstrAuthWep				strAuthWep = {pstrWepParams->au8WepKey, pstrWepParams->u8KeySz-1, pstrWepParams->u8KeyIndx};
    5174:	1cb3      	adds	r3, r6, #2
    5176:	9302      	str	r3, [sp, #8]
    5178:	7873      	ldrb	r3, [r6, #1]
    517a:	3b01      	subs	r3, #1
    517c:	aa02      	add	r2, sp, #8
    517e:	7113      	strb	r3, [r2, #4]
    5180:	7833      	ldrb	r3, [r6, #0]
    5182:	7153      	strb	r3, [r2, #5]
            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
    5184:	a907      	add	r1, sp, #28
    5186:	0020      	movs	r0, r4
    5188:	4b0c      	ldr	r3, [pc, #48]	; (51bc <m2m_wifi_connect_sc+0x118>)
    518a:	4798      	blx	r3
    518c:	e7d7      	b.n	513e <m2m_wifi_connect_sc+0x9a>
    sint8               s8Ret              = M2M_ERR_INVALID_ARG;
    518e:	200f      	movs	r0, #15
    5190:	4240      	negs	r0, r0
    5192:	e7d4      	b.n	513e <m2m_wifi_connect_sc+0x9a>
    5194:	200f      	movs	r0, #15
    5196:	4240      	negs	r0, r0
    5198:	e7d1      	b.n	513e <m2m_wifi_connect_sc+0x9a>
    519a:	200f      	movs	r0, #15
    519c:	4240      	negs	r0, r0
    519e:	e7ce      	b.n	513e <m2m_wifi_connect_sc+0x9a>
    51a0:	200f      	movs	r0, #15
    51a2:	4240      	negs	r0, r0
    51a4:	e7cb      	b.n	513e <m2m_wifi_connect_sc+0x9a>
    51a6:	46c0      	nop			; (mov r8, r8)
    51a8:	0000d375 	.word	0x0000d375
    51ac:	00003cd1 	.word	0x00003cd1
    51b0:	00004f7d 	.word	0x00004f7d
    51b4:	00004dcd 	.word	0x00004dcd
    51b8:	00004ea9 	.word	0x00004ea9
    51bc:	00004e05 	.word	0x00004e05

000051c0 <m2m_wifi_connect>:
{
    51c0:	b530      	push	{r4, r5, lr}
    51c2:	b083      	sub	sp, #12
    51c4:	ac06      	add	r4, sp, #24
    51c6:	8824      	ldrh	r4, [r4, #0]
    return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch, 0);
    51c8:	2500      	movs	r5, #0
    51ca:	9501      	str	r5, [sp, #4]
    51cc:	9400      	str	r4, [sp, #0]
    51ce:	4c02      	ldr	r4, [pc, #8]	; (51d8 <m2m_wifi_connect+0x18>)
    51d0:	47a0      	blx	r4
}
    51d2:	b003      	add	sp, #12
    51d4:	bd30      	pop	{r4, r5, pc}
    51d6:	46c0      	nop			; (mov r8, r8)
    51d8:	000050a5 	.word	0x000050a5

000051dc <m2m_wifi_set_mac_address>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
}

sint8 m2m_wifi_set_mac_address(uint8 au8MacAddress[6])
{
    51dc:	b510      	push	{r4, lr}
    51de:	b086      	sub	sp, #24
    51e0:	0001      	movs	r1, r0
	tstrM2mSetMacAddress strTmp;
	m2m_memcpy((uint8*) strTmp.au8Mac, (uint8*) au8MacAddress, 6);
    51e2:	2206      	movs	r2, #6
    51e4:	a804      	add	r0, sp, #16
    51e6:	4b07      	ldr	r3, [pc, #28]	; (5204 <m2m_wifi_set_mac_address+0x28>)
    51e8:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
    51ea:	2300      	movs	r3, #0
    51ec:	9302      	str	r3, [sp, #8]
    51ee:	9301      	str	r3, [sp, #4]
    51f0:	9300      	str	r3, [sp, #0]
    51f2:	3308      	adds	r3, #8
    51f4:	aa04      	add	r2, sp, #16
    51f6:	2102      	movs	r1, #2
    51f8:	2001      	movs	r0, #1
    51fa:	4c03      	ldr	r4, [pc, #12]	; (5208 <m2m_wifi_set_mac_address+0x2c>)
    51fc:	47a0      	blx	r4
		(uint8*) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0,0);
}
    51fe:	b006      	add	sp, #24
    5200:	bd10      	pop	{r4, pc}
    5202:	46c0      	nop			; (mov r8, r8)
    5204:	00003cad 	.word	0x00003cad
    5208:	00003dd5 	.word	0x00003dd5

0000520c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    520c:	2000      	movs	r0, #0
    520e:	4770      	bx	lr

00005210 <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
    5210:	b570      	push	{r4, r5, r6, lr}
    5212:	0004      	movs	r4, r0
    5214:	000d      	movs	r5, r1
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    5216:	4b07      	ldr	r3, [pc, #28]	; (5234 <m2m_wifi_get_otp_mac_address+0x24>)
    5218:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
    521a:	2800      	cmp	r0, #0
    521c:	d000      	beq.n	5220 <m2m_wifi_get_otp_mac_address+0x10>
		{
			ret = hif_chip_sleep();
		}
	}
	return ret;
}
    521e:	bd70      	pop	{r4, r5, r6, pc}
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
    5220:	0029      	movs	r1, r5
    5222:	0020      	movs	r0, r4
    5224:	4b04      	ldr	r3, [pc, #16]	; (5238 <m2m_wifi_get_otp_mac_address+0x28>)
    5226:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    5228:	2800      	cmp	r0, #0
    522a:	d1f8      	bne.n	521e <m2m_wifi_get_otp_mac_address+0xe>
			ret = hif_chip_sleep();
    522c:	4b03      	ldr	r3, [pc, #12]	; (523c <m2m_wifi_get_otp_mac_address+0x2c>)
    522e:	4798      	blx	r3
    5230:	e7f5      	b.n	521e <m2m_wifi_get_otp_mac_address+0xe>
    5232:	46c0      	nop			; (mov r8, r8)
    5234:	00003d45 	.word	0x00003d45
    5238:	000058e9 	.word	0x000058e9
    523c:	00003d9d 	.word	0x00003d9d

00005240 <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
    5240:	b510      	push	{r4, lr}
    5242:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    5244:	4b06      	ldr	r3, [pc, #24]	; (5260 <m2m_wifi_get_mac_address+0x20>)
    5246:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
    5248:	2800      	cmp	r0, #0
    524a:	d000      	beq.n	524e <m2m_wifi_get_mac_address+0xe>
			ret = hif_chip_sleep();
		}
	}

	return ret;
}
    524c:	bd10      	pop	{r4, pc}
		ret = nmi_get_mac_address(pu8MacAddr);
    524e:	0020      	movs	r0, r4
    5250:	4b04      	ldr	r3, [pc, #16]	; (5264 <m2m_wifi_get_mac_address+0x24>)
    5252:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    5254:	2800      	cmp	r0, #0
    5256:	d1f9      	bne.n	524c <m2m_wifi_get_mac_address+0xc>
			ret = hif_chip_sleep();
    5258:	4b03      	ldr	r3, [pc, #12]	; (5268 <m2m_wifi_get_mac_address+0x28>)
    525a:	4798      	blx	r3
    525c:	e7f6      	b.n	524c <m2m_wifi_get_mac_address+0xc>
    525e:	46c0      	nop			; (mov r8, r8)
    5260:	00003d45 	.word	0x00003d45
    5264:	0000597d 	.word	0x0000597d
    5268:	00003d9d 	.word	0x00003d9d

0000526c <m2m_wifi_set_device_name>:
			Length of the device name.
@return		The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@warning	The Function called once after initialization. 
*/
sint8 m2m_wifi_set_device_name(uint8 *pu8DeviceName, uint8 u8DeviceNameLength)
{
    526c:	b510      	push	{r4, lr}
    526e:	b090      	sub	sp, #64	; 0x40
    5270:	1c0a      	adds	r2, r1, #0
    5272:	2930      	cmp	r1, #48	; 0x30
    5274:	d900      	bls.n	5278 <m2m_wifi_set_device_name+0xc>
    5276:	2230      	movs	r2, #48	; 0x30
	if(u8DeviceNameLength >= M2M_DEVICE_NAME_MAX)
	{
		u8DeviceNameLength = M2M_DEVICE_NAME_MAX;
	}
	//pu8DeviceName[u8DeviceNameLength] = '\0';
	u8DeviceNameLength ++;
    5278:	3201      	adds	r2, #1
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
    527a:	b2d2      	uxtb	r2, r2
    527c:	0001      	movs	r1, r0
    527e:	a804      	add	r0, sp, #16
    5280:	4b06      	ldr	r3, [pc, #24]	; (529c <m2m_wifi_set_device_name+0x30>)
    5282:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
    5284:	2300      	movs	r3, #0
    5286:	9302      	str	r3, [sp, #8]
    5288:	9301      	str	r3, [sp, #4]
    528a:	9300      	str	r3, [sp, #0]
    528c:	3330      	adds	r3, #48	; 0x30
    528e:	aa04      	add	r2, sp, #16
    5290:	2107      	movs	r1, #7
    5292:	2001      	movs	r0, #1
    5294:	4c02      	ldr	r4, [pc, #8]	; (52a0 <m2m_wifi_set_device_name+0x34>)
    5296:	47a0      	blx	r4
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
    5298:	b010      	add	sp, #64	; 0x40
    529a:	bd10      	pop	{r4, pc}
    529c:	00003cad 	.word	0x00003cad
    52a0:	00003dd5 	.word	0x00003dd5

000052a4 <m2m_wifi_configure_sntp>:
@param [in]	useDHCP
			Should the NTP server provided by the DHCP server be used.
@return		The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
*/
sint8 m2m_wifi_configure_sntp(uint8 *pu8NTPServerName, uint8 u8NTPServerNameLength, tenuSNTPUseDHCP useDHCP)
{
    52a4:	b570      	push	{r4, r5, r6, lr}
    52a6:	b08e      	sub	sp, #56	; 0x38
    52a8:	000d      	movs	r5, r1
    52aa:	0016      	movs	r6, r2
	tstrM2MSNTPConfig strSNTPConfig;
	if(u8NTPServerNameLength > M2M_NTP_MAX_SERVER_NAME_LENGTH)
    52ac:	2920      	cmp	r1, #32
    52ae:	d814      	bhi.n	52da <m2m_wifi_configure_sntp+0x36>
		return M2M_ERR_FAIL;

	m2m_memcpy((uint8*)strSNTPConfig.acNTPServer, pu8NTPServerName, u8NTPServerNameLength);
    52b0:	ac05      	add	r4, sp, #20
    52b2:	000a      	movs	r2, r1
    52b4:	0001      	movs	r1, r0
    52b6:	0020      	movs	r0, r4
    52b8:	4b09      	ldr	r3, [pc, #36]	; (52e0 <m2m_wifi_configure_sntp+0x3c>)
    52ba:	4798      	blx	r3
	strSNTPConfig.acNTPServer[u8NTPServerNameLength] = '\0';
    52bc:	2300      	movs	r3, #0
    52be:	5563      	strb	r3, [r4, r5]

	strSNTPConfig.enuUseDHCP = useDHCP;
    52c0:	2221      	movs	r2, #33	; 0x21
    52c2:	54a6      	strb	r6, [r4, r2]

	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONFIG_SNTP,
    52c4:	9302      	str	r3, [sp, #8]
    52c6:	9301      	str	r3, [sp, #4]
    52c8:	9300      	str	r3, [sp, #0]
    52ca:	3324      	adds	r3, #36	; 0x24
    52cc:	0022      	movs	r2, r4
    52ce:	2125      	movs	r1, #37	; 0x25
    52d0:	2001      	movs	r0, #1
    52d2:	4c04      	ldr	r4, [pc, #16]	; (52e4 <m2m_wifi_configure_sntp+0x40>)
    52d4:	47a0      	blx	r4
		(uint8*)&strSNTPConfig, sizeof(tstrM2MSNTPConfig), NULL, 0,0);
}
    52d6:	b00e      	add	sp, #56	; 0x38
    52d8:	bd70      	pop	{r4, r5, r6, pc}
		return M2M_ERR_FAIL;
    52da:	200c      	movs	r0, #12
    52dc:	4240      	negs	r0, r0
    52de:	e7fa      	b.n	52d6 <m2m_wifi_configure_sntp+0x32>
    52e0:	00003cad 	.word	0x00003cad
    52e4:	00003dd5 	.word	0x00003dd5

000052e8 <m2m_wifi_start_provision_mode_ext>:

	return m2m_wifi_start_provision_mode_ext(&strM2MAPModeConfig, pcHttpServerDomainName, bEnableHttpRedirect);
}

sint8 m2m_wifi_start_provision_mode_ext(tstrM2MAPModeConfig *pstrAPModeConfig, char *pcHttpServerDomainName, uint8 bEnableHttpRedirect)
{
    52e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    52ea:	b0bb      	sub	sp, #236	; 0xec
    52ec:	0004      	movs	r4, r0
    52ee:	000d      	movs	r5, r1
    52f0:	0016      	movs	r6, r2
	sint8	s8Ret = M2M_ERR_FAIL;

	if(pstrAPModeConfig != NULL)
    52f2:	2800      	cmp	r0, #0
    52f4:	d03c      	beq.n	5370 <m2m_wifi_start_provision_mode_ext+0x88>
	{
		tstrM2MProvisionModeConfig	strProvConfig;
		if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrAPModeConfig))
    52f6:	4b20      	ldr	r3, [pc, #128]	; (5378 <m2m_wifi_start_provision_mode_ext+0x90>)
    52f8:	4798      	blx	r3
    52fa:	2800      	cmp	r0, #0
    52fc:	d003      	beq.n	5306 <m2m_wifi_start_provision_mode_ext+0x1e>
	sint8	s8Ret = M2M_ERR_FAIL;
    52fe:	200c      	movs	r0, #12
    5300:	4240      	negs	r0, r0
			/*goto ERR1;*/
		}
	}
ERR1:
	return s8Ret;
}
    5302:	b03b      	add	sp, #236	; 0xec
    5304:	bdf0      	pop	{r4, r5, r6, r7, pc}
			m2m_memcpy((uint8*)&strProvConfig.strApConfig, (uint8*)&pstrAPModeConfig->strApConfig, sizeof(tstrM2MAPConfig));
    5306:	2288      	movs	r2, #136	; 0x88
    5308:	0021      	movs	r1, r4
    530a:	a804      	add	r0, sp, #16
    530c:	4f1b      	ldr	r7, [pc, #108]	; (537c <m2m_wifi_start_provision_mode_ext+0x94>)
    530e:	47b8      	blx	r7
			m2m_memcpy((uint8*)&strProvConfig.strApConfigExt, (uint8*)&pstrAPModeConfig->strApConfigExt, sizeof(tstrM2MAPConfigExt));
    5310:	0021      	movs	r1, r4
    5312:	3188      	adds	r1, #136	; 0x88
    5314:	220c      	movs	r2, #12
    5316:	20d9      	movs	r0, #217	; 0xd9
    5318:	4468      	add	r0, sp
    531a:	47b8      	blx	r7
			if((m2m_strlen((uint8 *)pcHttpServerDomainName) <= 0) || (NULL == pcHttpServerDomainName))
    531c:	0028      	movs	r0, r5
    531e:	4b18      	ldr	r3, [pc, #96]	; (5380 <m2m_wifi_start_provision_mode_ext+0x98>)
    5320:	4798      	blx	r3
    5322:	2800      	cmp	r0, #0
    5324:	d016      	beq.n	5354 <m2m_wifi_start_provision_mode_ext+0x6c>
    5326:	2d00      	cmp	r5, #0
    5328:	d014      	beq.n	5354 <m2m_wifi_start_provision_mode_ext+0x6c>
			m2m_memcpy((uint8*)strProvConfig.acHttpServerDomainName, (uint8*)pcHttpServerDomainName, 64);
    532a:	ac04      	add	r4, sp, #16
    532c:	2240      	movs	r2, #64	; 0x40
    532e:	0029      	movs	r1, r5
    5330:	a826      	add	r0, sp, #152	; 0x98
    5332:	4b12      	ldr	r3, [pc, #72]	; (537c <m2m_wifi_start_provision_mode_ext+0x94>)
    5334:	4798      	blx	r3
			strProvConfig.u8EnableRedirect = bEnableHttpRedirect;
    5336:	23c8      	movs	r3, #200	; 0xc8
    5338:	54e6      	strb	r6, [r4, r3]
			gu8scanInProgress = 0;
    533a:	2300      	movs	r3, #0
    533c:	4a11      	ldr	r2, [pc, #68]	; (5384 <m2m_wifi_start_provision_mode_ext+0x9c>)
    533e:	7013      	strb	r3, [r2, #0]
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_START_PROVISION_MODE | M2M_REQ_DATA_PKT, 
    5340:	9302      	str	r3, [sp, #8]
    5342:	9301      	str	r3, [sp, #4]
    5344:	9300      	str	r3, [sp, #0]
    5346:	33d8      	adds	r3, #216	; 0xd8
    5348:	0022      	movs	r2, r4
    534a:	2188      	movs	r1, #136	; 0x88
    534c:	2001      	movs	r0, #1
    534e:	4c0e      	ldr	r4, [pc, #56]	; (5388 <m2m_wifi_start_provision_mode_ext+0xa0>)
    5350:	47a0      	blx	r4
    5352:	e7d6      	b.n	5302 <m2m_wifi_start_provision_mode_ext+0x1a>
				M2M_ERR("INVALID DOMAIN NAME\n");
    5354:	4a0d      	ldr	r2, [pc, #52]	; (538c <m2m_wifi_start_provision_mode_ext+0xa4>)
    5356:	490e      	ldr	r1, [pc, #56]	; (5390 <m2m_wifi_start_provision_mode_ext+0xa8>)
    5358:	480e      	ldr	r0, [pc, #56]	; (5394 <m2m_wifi_start_provision_mode_ext+0xac>)
    535a:	4b0f      	ldr	r3, [pc, #60]	; (5398 <m2m_wifi_start_provision_mode_ext+0xb0>)
    535c:	4798      	blx	r3
    535e:	480f      	ldr	r0, [pc, #60]	; (539c <m2m_wifi_start_provision_mode_ext+0xb4>)
    5360:	4b0f      	ldr	r3, [pc, #60]	; (53a0 <m2m_wifi_start_provision_mode_ext+0xb8>)
    5362:	4798      	blx	r3
    5364:	200d      	movs	r0, #13
    5366:	4b0f      	ldr	r3, [pc, #60]	; (53a4 <m2m_wifi_start_provision_mode_ext+0xbc>)
    5368:	4798      	blx	r3
	sint8	s8Ret = M2M_ERR_FAIL;
    536a:	200c      	movs	r0, #12
    536c:	4240      	negs	r0, r0
    536e:	e7c8      	b.n	5302 <m2m_wifi_start_provision_mode_ext+0x1a>
    5370:	200c      	movs	r0, #12
    5372:	4240      	negs	r0, r0
    5374:	e7c5      	b.n	5302 <m2m_wifi_start_provision_mode_ext+0x1a>
    5376:	46c0      	nop			; (mov r8, r8)
    5378:	000049dd 	.word	0x000049dd
    537c:	00003cad 	.word	0x00003cad
    5380:	00003cd1 	.word	0x00003cd1
    5384:	2000046a 	.word	0x2000046a
    5388:	00003dd5 	.word	0x00003dd5
    538c:	0000063e 	.word	0x0000063e
    5390:	0000f2a0 	.word	0x0000f2a0
    5394:	0000ee54 	.word	0x0000ee54
    5398:	0000d4d5 	.word	0x0000d4d5
    539c:	0000f47c 	.word	0x0000f47c
    53a0:	0000d5f1 	.word	0x0000d5f1
    53a4:	0000d509 	.word	0x0000d509

000053a8 <m2m_wifi_start_provision_mode>:
{
    53a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53aa:	b0a9      	sub	sp, #164	; 0xa4
    53ac:	0005      	movs	r5, r0
    53ae:	9101      	str	r1, [sp, #4]
    53b0:	0017      	movs	r7, r2
	m2m_memcpy((uint8 *)&strM2MAPModeConfig.strApConfig, (uint8 *)pstrM2MAPConfig, sizeof(tstrM2MAPConfig));
    53b2:	ac03      	add	r4, sp, #12
    53b4:	2288      	movs	r2, #136	; 0x88
    53b6:	0001      	movs	r1, r0
    53b8:	0020      	movs	r0, r4
    53ba:	4e0a      	ldr	r6, [pc, #40]	; (53e4 <m2m_wifi_start_provision_mode+0x3c>)
    53bc:	47b0      	blx	r6
	m2m_memcpy(strM2MAPModeConfig.strApConfigExt.au8DefRouterIP, pstrM2MAPConfig->au8DHCPServerIP, 4);
    53be:	3541      	adds	r5, #65	; 0x41
    53c0:	2204      	movs	r2, #4
    53c2:	0029      	movs	r1, r5
    53c4:	a825      	add	r0, sp, #148	; 0x94
    53c6:	47b0      	blx	r6
	m2m_memcpy(strM2MAPModeConfig.strApConfigExt.au8DNSServerIP, pstrM2MAPConfig->au8DHCPServerIP, 4);
    53c8:	2204      	movs	r2, #4
    53ca:	0029      	movs	r1, r5
    53cc:	a826      	add	r0, sp, #152	; 0x98
    53ce:	47b0      	blx	r6
	strM2MAPModeConfig.strApConfigExt.au8SubnetMask[0] = 0;
    53d0:	2200      	movs	r2, #0
    53d2:	2390      	movs	r3, #144	; 0x90
    53d4:	54e2      	strb	r2, [r4, r3]
	return m2m_wifi_start_provision_mode_ext(&strM2MAPModeConfig, pcHttpServerDomainName, bEnableHttpRedirect);
    53d6:	003a      	movs	r2, r7
    53d8:	9901      	ldr	r1, [sp, #4]
    53da:	0020      	movs	r0, r4
    53dc:	4b02      	ldr	r3, [pc, #8]	; (53e8 <m2m_wifi_start_provision_mode+0x40>)
    53de:	4798      	blx	r3
}
    53e0:	b029      	add	sp, #164	; 0xa4
    53e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53e4:	00003cad 	.word	0x00003cad
    53e8:	000052e9 	.word	0x000052e9

000053ec <m2m_wifi_get_system_time>:
 * @note         get the system time from the sntp client
 *		         using the API \ref m2m_wifi_get_system_time.
 * @return        The function returns @ref M2M_SUCCESS for successful operations and a negative value otherwise.
 */
sint8 m2m_wifi_get_system_time(void)
{
    53ec:	b510      	push	{r4, lr}
    53ee:	b084      	sub	sp, #16
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_GET_SYS_TIME, NULL,0, NULL, 0, 0);
    53f0:	2300      	movs	r3, #0
    53f2:	9302      	str	r3, [sp, #8]
    53f4:	9301      	str	r3, [sp, #4]
    53f6:	9300      	str	r3, [sp, #0]
    53f8:	2200      	movs	r2, #0
    53fa:	211a      	movs	r1, #26
    53fc:	2001      	movs	r0, #1
    53fe:	4c02      	ldr	r4, [pc, #8]	; (5408 <m2m_wifi_get_system_time+0x1c>)
    5400:	47a0      	blx	r4
}
    5402:	b004      	add	sp, #16
    5404:	bd10      	pop	{r4, pc}
    5406:	46c0      	nop			; (mov r8, r8)
    5408:	00003dd5 	.word	0x00003dd5

0000540c <chip_apply_conf>:

#define TIMEOUT						(0x2000ul)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    540c:	b5f0      	push	{r4, r5, r6, r7, lr}
    540e:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    5410:	2580      	movs	r5, #128	; 0x80
    5412:	006d      	lsls	r5, r5, #1
    5414:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    5416:	24a5      	movs	r4, #165	; 0xa5
    5418:	0164      	lsls	r4, r4, #5
    541a:	4f08      	ldr	r7, [pc, #32]	; (543c <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    541c:	4e08      	ldr	r6, [pc, #32]	; (5440 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    541e:	0029      	movs	r1, r5
    5420:	0020      	movs	r0, r4
    5422:	47b8      	blx	r7
			uint32 reg = 0;
    5424:	2300      	movs	r3, #0
    5426:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    5428:	a901      	add	r1, sp, #4
    542a:	0020      	movs	r0, r4
    542c:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    542e:	2800      	cmp	r0, #0
    5430:	d1f5      	bne.n	541e <chip_apply_conf+0x12>
				if(reg == val32)
    5432:	9b01      	ldr	r3, [sp, #4]
    5434:	429d      	cmp	r5, r3
    5436:	d1f2      	bne.n	541e <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    5438:	b003      	add	sp, #12
    543a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    543c:	00005a29 	.word	0x00005a29
    5440:	00005a1d 	.word	0x00005a1d

00005444 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    5444:	b500      	push	{lr}
    5446:	b083      	sub	sp, #12
	uint32 reg = 0;
    5448:	2300      	movs	r3, #0
    544a:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    544c:	a901      	add	r1, sp, #4
    544e:	4811      	ldr	r0, [pc, #68]	; (5494 <enable_interrupts+0x50>)
    5450:	4b11      	ldr	r3, [pc, #68]	; (5498 <enable_interrupts+0x54>)
    5452:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    5454:	2800      	cmp	r0, #0
    5456:	d001      	beq.n	545c <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    5458:	b003      	add	sp, #12
    545a:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    545c:	2180      	movs	r1, #128	; 0x80
    545e:	0049      	lsls	r1, r1, #1
    5460:	9b01      	ldr	r3, [sp, #4]
    5462:	4319      	orrs	r1, r3
    5464:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    5466:	480b      	ldr	r0, [pc, #44]	; (5494 <enable_interrupts+0x50>)
    5468:	4b0c      	ldr	r3, [pc, #48]	; (549c <enable_interrupts+0x58>)
    546a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    546c:	2800      	cmp	r0, #0
    546e:	d1f3      	bne.n	5458 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    5470:	a901      	add	r1, sp, #4
    5472:	20d0      	movs	r0, #208	; 0xd0
    5474:	0140      	lsls	r0, r0, #5
    5476:	4b08      	ldr	r3, [pc, #32]	; (5498 <enable_interrupts+0x54>)
    5478:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    547a:	2800      	cmp	r0, #0
    547c:	d1ec      	bne.n	5458 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    547e:	2180      	movs	r1, #128	; 0x80
    5480:	0249      	lsls	r1, r1, #9
    5482:	9b01      	ldr	r3, [sp, #4]
    5484:	4319      	orrs	r1, r3
    5486:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    5488:	20d0      	movs	r0, #208	; 0xd0
    548a:	0140      	lsls	r0, r0, #5
    548c:	4b03      	ldr	r3, [pc, #12]	; (549c <enable_interrupts+0x58>)
    548e:	4798      	blx	r3
    5490:	e7e2      	b.n	5458 <enable_interrupts+0x14>
    5492:	46c0      	nop			; (mov r8, r8)
    5494:	00001408 	.word	0x00001408
    5498:	00005a1d 	.word	0x00005a1d
    549c:	00005a29 	.word	0x00005a29

000054a0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    54a0:	b510      	push	{r4, lr}
    54a2:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    54a4:	4b28      	ldr	r3, [pc, #160]	; (5548 <nmi_get_chipid+0xa8>)
    54a6:	681c      	ldr	r4, [r3, #0]
    54a8:	2c00      	cmp	r4, #0
    54aa:	d004      	beq.n	54b6 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    54ac:	4b26      	ldr	r3, [pc, #152]	; (5548 <nmi_get_chipid+0xa8>)
    54ae:	681c      	ldr	r4, [r3, #0]
}
    54b0:	0020      	movs	r0, r4
    54b2:	b002      	add	sp, #8
    54b4:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    54b6:	0019      	movs	r1, r3
    54b8:	2080      	movs	r0, #128	; 0x80
    54ba:	0140      	lsls	r0, r0, #5
    54bc:	4b23      	ldr	r3, [pc, #140]	; (554c <nmi_get_chipid+0xac>)
    54be:	4798      	blx	r3
    54c0:	2800      	cmp	r0, #0
    54c2:	d003      	beq.n	54cc <nmi_get_chipid+0x2c>
			chipid = 0;
    54c4:	2200      	movs	r2, #0
    54c6:	4b20      	ldr	r3, [pc, #128]	; (5548 <nmi_get_chipid+0xa8>)
    54c8:	601a      	str	r2, [r3, #0]
			return 0;
    54ca:	e7f1      	b.n	54b0 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    54cc:	a901      	add	r1, sp, #4
    54ce:	4820      	ldr	r0, [pc, #128]	; (5550 <nmi_get_chipid+0xb0>)
    54d0:	4b1e      	ldr	r3, [pc, #120]	; (554c <nmi_get_chipid+0xac>)
    54d2:	4798      	blx	r3
    54d4:	2800      	cmp	r0, #0
    54d6:	d003      	beq.n	54e0 <nmi_get_chipid+0x40>
			chipid = 0;
    54d8:	2200      	movs	r2, #0
    54da:	4b1b      	ldr	r3, [pc, #108]	; (5548 <nmi_get_chipid+0xa8>)
    54dc:	601a      	str	r2, [r3, #0]
			return 0;
    54de:	e7e7      	b.n	54b0 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    54e0:	4b19      	ldr	r3, [pc, #100]	; (5548 <nmi_get_chipid+0xa8>)
    54e2:	681b      	ldr	r3, [r3, #0]
    54e4:	4a1b      	ldr	r2, [pc, #108]	; (5554 <nmi_get_chipid+0xb4>)
    54e6:	4293      	cmp	r3, r2
    54e8:	d00e      	beq.n	5508 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    54ea:	4a1b      	ldr	r2, [pc, #108]	; (5558 <nmi_get_chipid+0xb8>)
    54ec:	4293      	cmp	r3, r2
    54ee:	d012      	beq.n	5516 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    54f0:	4a1a      	ldr	r2, [pc, #104]	; (555c <nmi_get_chipid+0xbc>)
    54f2:	4293      	cmp	r3, r2
    54f4:	d01c      	beq.n	5530 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    54f6:	4914      	ldr	r1, [pc, #80]	; (5548 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    54f8:	4a19      	ldr	r2, [pc, #100]	; (5560 <nmi_get_chipid+0xc0>)
    54fa:	680b      	ldr	r3, [r1, #0]
    54fc:	401a      	ands	r2, r3
		chipid |= 0x050000;
    54fe:	23a0      	movs	r3, #160	; 0xa0
    5500:	02db      	lsls	r3, r3, #11
    5502:	4313      	orrs	r3, r2
    5504:	600b      	str	r3, [r1, #0]
    5506:	e7d1      	b.n	54ac <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    5508:	9b01      	ldr	r3, [sp, #4]
    550a:	2b01      	cmp	r3, #1
    550c:	d0f3      	beq.n	54f6 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    550e:	4a15      	ldr	r2, [pc, #84]	; (5564 <nmi_get_chipid+0xc4>)
    5510:	4b0d      	ldr	r3, [pc, #52]	; (5548 <nmi_get_chipid+0xa8>)
    5512:	601a      	str	r2, [r3, #0]
    5514:	e7ef      	b.n	54f6 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    5516:	9b01      	ldr	r3, [sp, #4]
    5518:	2b03      	cmp	r3, #3
    551a:	d0ec      	beq.n	54f6 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    551c:	2b04      	cmp	r3, #4
    551e:	d003      	beq.n	5528 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    5520:	4a11      	ldr	r2, [pc, #68]	; (5568 <nmi_get_chipid+0xc8>)
    5522:	4b09      	ldr	r3, [pc, #36]	; (5548 <nmi_get_chipid+0xa8>)
    5524:	601a      	str	r2, [r3, #0]
    5526:	e7e6      	b.n	54f6 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    5528:	4a10      	ldr	r2, [pc, #64]	; (556c <nmi_get_chipid+0xcc>)
    552a:	4b07      	ldr	r3, [pc, #28]	; (5548 <nmi_get_chipid+0xa8>)
    552c:	601a      	str	r2, [r3, #0]
    552e:	e7e2      	b.n	54f6 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    5530:	4905      	ldr	r1, [pc, #20]	; (5548 <nmi_get_chipid+0xa8>)
    5532:	20ec      	movs	r0, #236	; 0xec
    5534:	0380      	lsls	r0, r0, #14
    5536:	4b05      	ldr	r3, [pc, #20]	; (554c <nmi_get_chipid+0xac>)
    5538:	4798      	blx	r3
    553a:	2800      	cmp	r0, #0
    553c:	d0db      	beq.n	54f6 <nmi_get_chipid+0x56>
			chipid = 0;
    553e:	2200      	movs	r2, #0
    5540:	4b01      	ldr	r3, [pc, #4]	; (5548 <nmi_get_chipid+0xa8>)
    5542:	601a      	str	r2, [r3, #0]
			return 0;
    5544:	e7b4      	b.n	54b0 <nmi_get_chipid+0x10>
    5546:	46c0      	nop			; (mov r8, r8)
    5548:	2000046c 	.word	0x2000046c
    554c:	00005a1d 	.word	0x00005a1d
    5550:	000013f4 	.word	0x000013f4
    5554:	001002a0 	.word	0x001002a0
    5558:	001002b0 	.word	0x001002b0
    555c:	001000f0 	.word	0x001000f0
    5560:	fff0ffff 	.word	0xfff0ffff
    5564:	001002a1 	.word	0x001002a1
    5568:	001002b2 	.word	0x001002b2
    556c:	001002b1 	.word	0x001002b1

00005570 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    5570:	b530      	push	{r4, r5, lr}
    5572:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    5574:	4c16      	ldr	r4, [pc, #88]	; (55d0 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    5576:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    5578:	a901      	add	r1, sp, #4
    557a:	2010      	movs	r0, #16
    557c:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    557e:	2800      	cmp	r0, #0
    5580:	d11c      	bne.n	55bc <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    5582:	9b01      	ldr	r3, [sp, #4]
    5584:	422b      	tst	r3, r5
    5586:	d1f7      	bne.n	5578 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    5588:	a901      	add	r1, sp, #4
    558a:	3001      	adds	r0, #1
    558c:	4b10      	ldr	r3, [pc, #64]	; (55d0 <chip_sleep+0x60>)
    558e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    5590:	2800      	cmp	r0, #0
    5592:	d113      	bne.n	55bc <chip_sleep+0x4c>
	if(reg & NBIT1)
    5594:	9901      	ldr	r1, [sp, #4]
    5596:	078b      	lsls	r3, r1, #30
    5598:	d507      	bpl.n	55aa <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    559a:	2302      	movs	r3, #2
    559c:	4399      	bics	r1, r3
    559e:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    55a0:	3001      	adds	r0, #1
    55a2:	4b0c      	ldr	r3, [pc, #48]	; (55d4 <chip_sleep+0x64>)
    55a4:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    55a6:	2800      	cmp	r0, #0
    55a8:	d108      	bne.n	55bc <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    55aa:	a901      	add	r1, sp, #4
    55ac:	200b      	movs	r0, #11
    55ae:	4b08      	ldr	r3, [pc, #32]	; (55d0 <chip_sleep+0x60>)
    55b0:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    55b2:	2800      	cmp	r0, #0
    55b4:	d102      	bne.n	55bc <chip_sleep+0x4c>
	if(reg & NBIT0)
    55b6:	9901      	ldr	r1, [sp, #4]
    55b8:	07cb      	lsls	r3, r1, #31
    55ba:	d401      	bmi.n	55c0 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    55bc:	b003      	add	sp, #12
    55be:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    55c0:	2301      	movs	r3, #1
    55c2:	4399      	bics	r1, r3
    55c4:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    55c6:	300b      	adds	r0, #11
    55c8:	4b02      	ldr	r3, [pc, #8]	; (55d4 <chip_sleep+0x64>)
    55ca:	4798      	blx	r3
    55cc:	e7f6      	b.n	55bc <chip_sleep+0x4c>
    55ce:	46c0      	nop			; (mov r8, r8)
    55d0:	00005a1d 	.word	0x00005a1d
    55d4:	00005a29 	.word	0x00005a29

000055d8 <chip_wake>:
sint8 chip_wake(void)
{
    55d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55da:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    55dc:	2300      	movs	r3, #0
    55de:	9301      	str	r3, [sp, #4]
    55e0:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    55e2:	a901      	add	r1, sp, #4
    55e4:	200b      	movs	r0, #11
    55e6:	4b28      	ldr	r3, [pc, #160]	; (5688 <chip_wake+0xb0>)
    55e8:	4798      	blx	r3
    55ea:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    55ec:	d130      	bne.n	5650 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    55ee:	9901      	ldr	r1, [sp, #4]
    55f0:	07cb      	lsls	r3, r1, #31
    55f2:	d406      	bmi.n	5602 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    55f4:	2301      	movs	r3, #1
    55f6:	4319      	orrs	r1, r3
    55f8:	200b      	movs	r0, #11
    55fa:	4b24      	ldr	r3, [pc, #144]	; (568c <chip_wake+0xb4>)
    55fc:	4798      	blx	r3
    55fe:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    5600:	d126      	bne.n	5650 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    5602:	a901      	add	r1, sp, #4
    5604:	2001      	movs	r0, #1
    5606:	4b20      	ldr	r3, [pc, #128]	; (5688 <chip_wake+0xb0>)
    5608:	4798      	blx	r3
    560a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    560c:	d120      	bne.n	5650 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    560e:	9901      	ldr	r1, [sp, #4]
    5610:	078b      	lsls	r3, r1, #30
    5612:	d520      	bpl.n	5656 <chip_wake+0x7e>
{
    5614:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    5616:	4f1c      	ldr	r7, [pc, #112]	; (5688 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    5618:	4e1d      	ldr	r6, [pc, #116]	; (5690 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    561a:	4669      	mov	r1, sp
    561c:	200f      	movs	r0, #15
    561e:	47b8      	blx	r7
    5620:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    5622:	d120      	bne.n	5666 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    5624:	9b00      	ldr	r3, [sp, #0]
    5626:	075b      	lsls	r3, r3, #29
    5628:	d42b      	bmi.n	5682 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    562a:	2002      	movs	r0, #2
    562c:	47b0      	blx	r6
    562e:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    5630:	2d00      	cmp	r5, #0
    5632:	d1f2      	bne.n	561a <chip_wake+0x42>
		{
			M2M_ERR("Failed to wake up the chip\n");
    5634:	22ad      	movs	r2, #173	; 0xad
    5636:	0052      	lsls	r2, r2, #1
    5638:	4916      	ldr	r1, [pc, #88]	; (5694 <chip_wake+0xbc>)
    563a:	4817      	ldr	r0, [pc, #92]	; (5698 <chip_wake+0xc0>)
    563c:	4b17      	ldr	r3, [pc, #92]	; (569c <chip_wake+0xc4>)
    563e:	4798      	blx	r3
    5640:	4817      	ldr	r0, [pc, #92]	; (56a0 <chip_wake+0xc8>)
    5642:	4b18      	ldr	r3, [pc, #96]	; (56a4 <chip_wake+0xcc>)
    5644:	4798      	blx	r3
    5646:	200d      	movs	r0, #13
    5648:	4b17      	ldr	r3, [pc, #92]	; (56a8 <chip_wake+0xd0>)
    564a:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    564c:	2404      	movs	r4, #4
    564e:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    5650:	0020      	movs	r0, r4
    5652:	b003      	add	sp, #12
    5654:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    5656:	2302      	movs	r3, #2
    5658:	4319      	orrs	r1, r3
    565a:	2001      	movs	r0, #1
    565c:	4b0b      	ldr	r3, [pc, #44]	; (568c <chip_wake+0xb4>)
    565e:	4798      	blx	r3
    5660:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    5662:	d0d7      	beq.n	5614 <chip_wake+0x3c>
    5664:	e7f4      	b.n	5650 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    5666:	22a8      	movs	r2, #168	; 0xa8
    5668:	0052      	lsls	r2, r2, #1
    566a:	490a      	ldr	r1, [pc, #40]	; (5694 <chip_wake+0xbc>)
    566c:	480a      	ldr	r0, [pc, #40]	; (5698 <chip_wake+0xc0>)
    566e:	4d0b      	ldr	r5, [pc, #44]	; (569c <chip_wake+0xc4>)
    5670:	47a8      	blx	r5
    5672:	9a00      	ldr	r2, [sp, #0]
    5674:	0021      	movs	r1, r4
    5676:	480d      	ldr	r0, [pc, #52]	; (56ac <chip_wake+0xd4>)
    5678:	47a8      	blx	r5
    567a:	200d      	movs	r0, #13
    567c:	4b0a      	ldr	r3, [pc, #40]	; (56a8 <chip_wake+0xd0>)
    567e:	4798      	blx	r3
			goto _WAKE_EXIT;
    5680:	e7e6      	b.n	5650 <chip_wake+0x78>
	nm_bus_reset();
    5682:	4b0b      	ldr	r3, [pc, #44]	; (56b0 <chip_wake+0xd8>)
    5684:	4798      	blx	r3
    5686:	e7e3      	b.n	5650 <chip_wake+0x78>
    5688:	00005a1d 	.word	0x00005a1d
    568c:	00005a29 	.word	0x00005a29
    5690:	0000391d 	.word	0x0000391d
    5694:	0000f490 	.word	0x0000f490
    5698:	0000ee54 	.word	0x0000ee54
    569c:	0000d4d5 	.word	0x0000d4d5
    56a0:	0000f4d8 	.word	0x0000f4d8
    56a4:	0000d5f1 	.word	0x0000d5f1
    56a8:	0000d509 	.word	0x0000d509
    56ac:	0000f4c0 	.word	0x0000f4c0
    56b0:	00005a05 	.word	0x00005a05

000056b4 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    56b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    56b6:	46c6      	mov	lr, r8
    56b8:	b500      	push	{lr}
    56ba:	4680      	mov	r8, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    56bc:	4d36      	ldr	r5, [pc, #216]	; (5798 <wait_for_bootrom+0xe4>)
    56be:	4c37      	ldr	r4, [pc, #220]	; (579c <wait_for_bootrom+0xe8>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    56c0:	4e37      	ldr	r6, [pc, #220]	; (57a0 <wait_for_bootrom+0xec>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    56c2:	0028      	movs	r0, r5
    56c4:	47a0      	blx	r4
		if (reg & 0x80000000) {
    56c6:	2800      	cmp	r0, #0
    56c8:	db02      	blt.n	56d0 <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    56ca:	2001      	movs	r0, #1
    56cc:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    56ce:	e7f8      	b.n	56c2 <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    56d0:	4834      	ldr	r0, [pc, #208]	; (57a4 <wait_for_bootrom+0xf0>)
    56d2:	4b32      	ldr	r3, [pc, #200]	; (579c <wait_for_bootrom+0xe8>)
    56d4:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    56d6:	07c3      	lsls	r3, r0, #31
    56d8:	d546      	bpl.n	5768 <wait_for_bootrom+0xb4>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    56da:	4643      	mov	r3, r8
    56dc:	2b02      	cmp	r3, #2
    56de:	d026      	beq.n	572e <wait_for_bootrom+0x7a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    56e0:	4643      	mov	r3, r8
    56e2:	2b03      	cmp	r3, #3
    56e4:	d02d      	beq.n	5742 <wait_for_bootrom+0x8e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    56e6:	4643      	mov	r3, r8
    56e8:	2b04      	cmp	r3, #4
    56ea:	d033      	beq.n	5754 <wait_for_bootrom+0xa0>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    56ec:	492e      	ldr	r1, [pc, #184]	; (57a8 <wait_for_bootrom+0xf4>)
    56ee:	482f      	ldr	r0, [pc, #188]	; (57ac <wait_for_bootrom+0xf8>)
    56f0:	4b2f      	ldr	r3, [pc, #188]	; (57b0 <wait_for_bootrom+0xfc>)
    56f2:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    56f4:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    56f6:	4b2f      	ldr	r3, [pc, #188]	; (57b4 <wait_for_bootrom+0x100>)
    56f8:	4798      	blx	r3
    56fa:	0500      	lsls	r0, r0, #20
    56fc:	0d00      	lsrs	r0, r0, #20
    56fe:	4b2e      	ldr	r3, [pc, #184]	; (57b8 <wait_for_bootrom+0x104>)
    5700:	4298      	cmp	r0, r3
    5702:	d92d      	bls.n	5760 <wait_for_bootrom+0xac>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    5704:	2002      	movs	r0, #2
    5706:	4320      	orrs	r0, r4
    5708:	4b2c      	ldr	r3, [pc, #176]	; (57bc <wait_for_bootrom+0x108>)
    570a:	4798      	blx	r3
	} else {
		chip_apply_conf(u32GpReg1);
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    570c:	482c      	ldr	r0, [pc, #176]	; (57c0 <wait_for_bootrom+0x10c>)
    570e:	4c2d      	ldr	r4, [pc, #180]	; (57c4 <wait_for_bootrom+0x110>)
    5710:	47a0      	blx	r4
    5712:	4925      	ldr	r1, [pc, #148]	; (57a8 <wait_for_bootrom+0xf4>)
    5714:	482c      	ldr	r0, [pc, #176]	; (57c8 <wait_for_bootrom+0x114>)
    5716:	47a0      	blx	r4
    5718:	200d      	movs	r0, #13
    571a:	4b2c      	ldr	r3, [pc, #176]	; (57cc <wait_for_bootrom+0x118>)
    571c:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    571e:	492c      	ldr	r1, [pc, #176]	; (57d0 <wait_for_bootrom+0x11c>)
    5720:	482c      	ldr	r0, [pc, #176]	; (57d4 <wait_for_bootrom+0x120>)
    5722:	4b23      	ldr	r3, [pc, #140]	; (57b0 <wait_for_bootrom+0xfc>)
    5724:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    5726:	2000      	movs	r0, #0
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    5728:	bc04      	pop	{r2}
    572a:	4690      	mov	r8, r2
    572c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    572e:	492a      	ldr	r1, [pc, #168]	; (57d8 <wait_for_bootrom+0x124>)
    5730:	482a      	ldr	r0, [pc, #168]	; (57dc <wait_for_bootrom+0x128>)
    5732:	4c1f      	ldr	r4, [pc, #124]	; (57b0 <wait_for_bootrom+0xfc>)
    5734:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    5736:	2180      	movs	r1, #128	; 0x80
    5738:	0349      	lsls	r1, r1, #13
    573a:	481c      	ldr	r0, [pc, #112]	; (57ac <wait_for_bootrom+0xf8>)
    573c:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    573e:	2400      	movs	r4, #0
    5740:	e7d9      	b.n	56f6 <wait_for_bootrom+0x42>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    5742:	4925      	ldr	r1, [pc, #148]	; (57d8 <wait_for_bootrom+0x124>)
    5744:	4825      	ldr	r0, [pc, #148]	; (57dc <wait_for_bootrom+0x128>)
    5746:	4c1a      	ldr	r4, [pc, #104]	; (57b0 <wait_for_bootrom+0xfc>)
    5748:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    574a:	2100      	movs	r1, #0
    574c:	4817      	ldr	r0, [pc, #92]	; (57ac <wait_for_bootrom+0xf8>)
    574e:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    5750:	2400      	movs	r4, #0
    5752:	e7d0      	b.n	56f6 <wait_for_bootrom+0x42>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    5754:	4914      	ldr	r1, [pc, #80]	; (57a8 <wait_for_bootrom+0xf4>)
    5756:	4815      	ldr	r0, [pc, #84]	; (57ac <wait_for_bootrom+0xf8>)
    5758:	4b15      	ldr	r3, [pc, #84]	; (57b0 <wait_for_bootrom+0xfc>)
    575a:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    575c:	2480      	movs	r4, #128	; 0x80
    575e:	e7ca      	b.n	56f6 <wait_for_bootrom+0x42>
		chip_apply_conf(u32GpReg1);
    5760:	0020      	movs	r0, r4
    5762:	4b16      	ldr	r3, [pc, #88]	; (57bc <wait_for_bootrom+0x108>)
    5764:	4798      	blx	r3
    5766:	e7d1      	b.n	570c <wait_for_bootrom+0x58>
			nm_bsp_sleep(1);
    5768:	2001      	movs	r0, #1
    576a:	4b0d      	ldr	r3, [pc, #52]	; (57a0 <wait_for_bootrom+0xec>)
    576c:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    576e:	4819      	ldr	r0, [pc, #100]	; (57d4 <wait_for_bootrom+0x120>)
    5770:	4b0a      	ldr	r3, [pc, #40]	; (579c <wait_for_bootrom+0xe8>)
    5772:	4798      	blx	r3
    5774:	2480      	movs	r4, #128	; 0x80
    5776:	01a4      	lsls	r4, r4, #6
		while(reg != M2M_FINISH_BOOT_ROM)
    5778:	4d19      	ldr	r5, [pc, #100]	; (57e0 <wait_for_bootrom+0x12c>)
			nm_bsp_sleep(1);
    577a:	4f09      	ldr	r7, [pc, #36]	; (57a0 <wait_for_bootrom+0xec>)
			reg = nm_read_reg(BOOTROM_REG);
    577c:	4e07      	ldr	r6, [pc, #28]	; (579c <wait_for_bootrom+0xe8>)
		while(reg != M2M_FINISH_BOOT_ROM)
    577e:	42a8      	cmp	r0, r5
    5780:	d0ab      	beq.n	56da <wait_for_bootrom+0x26>
			nm_bsp_sleep(1);
    5782:	2001      	movs	r0, #1
    5784:	47b8      	blx	r7
			reg = nm_read_reg(BOOTROM_REG);
    5786:	4813      	ldr	r0, [pc, #76]	; (57d4 <wait_for_bootrom+0x120>)
    5788:	47b0      	blx	r6
    578a:	3c01      	subs	r4, #1
			if(++cnt > TIMEOUT)
    578c:	2c00      	cmp	r4, #0
    578e:	d1f6      	bne.n	577e <wait_for_bootrom+0xca>
				ret = M2M_ERR_INIT;
    5790:	2005      	movs	r0, #5
    5792:	4240      	negs	r0, r0
	return ret;
    5794:	e7c8      	b.n	5728 <wait_for_bootrom+0x74>
    5796:	46c0      	nop			; (mov r8, r8)
    5798:	00001014 	.word	0x00001014
    579c:	00005a11 	.word	0x00005a11
    57a0:	0000391d 	.word	0x0000391d
    57a4:	000207bc 	.word	0x000207bc
    57a8:	13301361 	.word	0x13301361
    57ac:	0000108c 	.word	0x0000108c
    57b0:	00005a29 	.word	0x00005a29
    57b4:	000054a1 	.word	0x000054a1
    57b8:	0000039f 	.word	0x0000039f
    57bc:	0000540d 	.word	0x0000540d
    57c0:	0000f1f4 	.word	0x0000f1f4
    57c4:	0000d4d5 	.word	0x0000d4d5
    57c8:	0000f4f4 	.word	0x0000f4f4
    57cc:	0000d509 	.word	0x0000d509
    57d0:	ef522f61 	.word	0xef522f61
    57d4:	000c000c 	.word	0x000c000c
    57d8:	3c1cd57d 	.word	0x3c1cd57d
    57dc:	000207ac 	.word	0x000207ac
    57e0:	10add09e 	.word	0x10add09e

000057e4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    57e4:	b570      	push	{r4, r5, r6, lr}
    57e6:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    57e8:	4b15      	ldr	r3, [pc, #84]	; (5840 <wait_for_firmware_start+0x5c>)
    57ea:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    57ec:	4b15      	ldr	r3, [pc, #84]	; (5844 <wait_for_firmware_start+0x60>)
    57ee:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    57f0:	3802      	subs	r0, #2
    57f2:	2801      	cmp	r0, #1
    57f4:	d911      	bls.n	581a <wait_for_firmware_start+0x36>
{
    57f6:	2480      	movs	r4, #128	; 0x80
    57f8:	01a4      	lsls	r4, r4, #6
    57fa:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    57fc:	4e12      	ldr	r6, [pc, #72]	; (5848 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    57fe:	4d13      	ldr	r5, [pc, #76]	; (584c <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    5800:	9b00      	ldr	r3, [sp, #0]
    5802:	4298      	cmp	r0, r3
    5804:	d00e      	beq.n	5824 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    5806:	2002      	movs	r0, #2
    5808:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    580a:	9801      	ldr	r0, [sp, #4]
    580c:	47a8      	blx	r5
    580e:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    5810:	2c00      	cmp	r4, #0
    5812:	d1f5      	bne.n	5800 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    5814:	2005      	movs	r0, #5
    5816:	4240      	negs	r0, r0
    5818:	e009      	b.n	582e <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    581a:	4b0d      	ldr	r3, [pc, #52]	; (5850 <wait_for_firmware_start+0x6c>)
    581c:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    581e:	4b0d      	ldr	r3, [pc, #52]	; (5854 <wait_for_firmware_start+0x70>)
    5820:	9300      	str	r3, [sp, #0]
    5822:	e7e8      	b.n	57f6 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    5824:	9a00      	ldr	r2, [sp, #0]
    5826:	4b07      	ldr	r3, [pc, #28]	; (5844 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    5828:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    582a:	429a      	cmp	r2, r3
    582c:	d001      	beq.n	5832 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    582e:	b002      	add	sp, #8
    5830:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    5832:	2100      	movs	r1, #0
    5834:	4802      	ldr	r0, [pc, #8]	; (5840 <wait_for_firmware_start+0x5c>)
    5836:	4b08      	ldr	r3, [pc, #32]	; (5858 <wait_for_firmware_start+0x74>)
    5838:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    583a:	2000      	movs	r0, #0
    583c:	e7f7      	b.n	582e <wait_for_firmware_start+0x4a>
    583e:	46c0      	nop			; (mov r8, r8)
    5840:	0000108c 	.word	0x0000108c
    5844:	02532636 	.word	0x02532636
    5848:	0000391d 	.word	0x0000391d
    584c:	00005a11 	.word	0x00005a11
    5850:	000207ac 	.word	0x000207ac
    5854:	d75dc1c3 	.word	0xd75dc1c3
    5858:	00005a29 	.word	0x00005a29

0000585c <chip_deinit>:

sint8 chip_deinit(void)
{
    585c:	b510      	push	{r4, lr}
    585e:	b082      	sub	sp, #8
	uint32 reg = 0;
    5860:	2300      	movs	r3, #0
    5862:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    5864:	a901      	add	r1, sp, #4
    5866:	20a0      	movs	r0, #160	; 0xa0
    5868:	0140      	lsls	r0, r0, #5
    586a:	4b14      	ldr	r3, [pc, #80]	; (58bc <chip_deinit+0x60>)
    586c:	4798      	blx	r3
    586e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    5870:	d115      	bne.n	589e <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    5872:	4913      	ldr	r1, [pc, #76]	; (58c0 <chip_deinit+0x64>)
    5874:	9b01      	ldr	r3, [sp, #4]
    5876:	4019      	ands	r1, r3
    5878:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    587a:	20a0      	movs	r0, #160	; 0xa0
    587c:	0140      	lsls	r0, r0, #5
    587e:	4b11      	ldr	r3, [pc, #68]	; (58c4 <chip_deinit+0x68>)
    5880:	4798      	blx	r3
    5882:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    5884:	d016      	beq.n	58b4 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    5886:	4a10      	ldr	r2, [pc, #64]	; (58c8 <chip_deinit+0x6c>)
    5888:	4910      	ldr	r1, [pc, #64]	; (58cc <chip_deinit+0x70>)
    588a:	4811      	ldr	r0, [pc, #68]	; (58d0 <chip_deinit+0x74>)
    588c:	4b11      	ldr	r3, [pc, #68]	; (58d4 <chip_deinit+0x78>)
    588e:	4798      	blx	r3
    5890:	4811      	ldr	r0, [pc, #68]	; (58d8 <chip_deinit+0x7c>)
    5892:	4b12      	ldr	r3, [pc, #72]	; (58dc <chip_deinit+0x80>)
    5894:	4798      	blx	r3
    5896:	200d      	movs	r0, #13
    5898:	4b11      	ldr	r3, [pc, #68]	; (58e0 <chip_deinit+0x84>)
    589a:	4798      	blx	r3
		goto ERR1;
    589c:	e00a      	b.n	58b4 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    589e:	4a11      	ldr	r2, [pc, #68]	; (58e4 <chip_deinit+0x88>)
    58a0:	490a      	ldr	r1, [pc, #40]	; (58cc <chip_deinit+0x70>)
    58a2:	480b      	ldr	r0, [pc, #44]	; (58d0 <chip_deinit+0x74>)
    58a4:	4b0b      	ldr	r3, [pc, #44]	; (58d4 <chip_deinit+0x78>)
    58a6:	4798      	blx	r3
    58a8:	480b      	ldr	r0, [pc, #44]	; (58d8 <chip_deinit+0x7c>)
    58aa:	4b0c      	ldr	r3, [pc, #48]	; (58dc <chip_deinit+0x80>)
    58ac:	4798      	blx	r3
    58ae:	200d      	movs	r0, #13
    58b0:	4b0b      	ldr	r3, [pc, #44]	; (58e0 <chip_deinit+0x84>)
    58b2:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    58b4:	0020      	movs	r0, r4
    58b6:	b002      	add	sp, #8
    58b8:	bd10      	pop	{r4, pc}
    58ba:	46c0      	nop			; (mov r8, r8)
    58bc:	00005a1d 	.word	0x00005a1d
    58c0:	fffffbff 	.word	0xfffffbff
    58c4:	00005a29 	.word	0x00005a29
    58c8:	00000207 	.word	0x00000207
    58cc:	0000f49c 	.word	0x0000f49c
    58d0:	0000ee54 	.word	0x0000ee54
    58d4:	0000d4d5 	.word	0x0000d4d5
    58d8:	0000f4a8 	.word	0x0000f4a8
    58dc:	0000d5f1 	.word	0x0000d5f1
    58e0:	0000d509 	.word	0x0000d509
    58e4:	00000201 	.word	0x00000201

000058e8 <nmi_get_otp_mac_address>:
	return s8Ret;
}
#endif /* CONF_PERIPH */

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
    58e8:	b570      	push	{r4, r5, r6, lr}
    58ea:	b086      	sub	sp, #24
    58ec:	0006      	movs	r6, r0
    58ee:	000d      	movs	r5, r1
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    58f0:	2208      	movs	r2, #8
    58f2:	2100      	movs	r1, #0
    58f4:	a801      	add	r0, sp, #4
    58f6:	4b1b      	ldr	r3, [pc, #108]	; (5964 <nmi_get_otp_mac_address+0x7c>)
    58f8:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    58fa:	a905      	add	r1, sp, #20
    58fc:	481a      	ldr	r0, [pc, #104]	; (5968 <nmi_get_otp_mac_address+0x80>)
    58fe:	4b1b      	ldr	r3, [pc, #108]	; (596c <nmi_get_otp_mac_address+0x84>)
    5900:	4798      	blx	r3
    5902:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    5904:	d006      	beq.n	5914 <nmi_get_otp_mac_address+0x2c>
	m2m_memcpy(pu8MacAddr,mac,6);
	if(pu8IsValid) *pu8IsValid = 1;
	return ret;

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
    5906:	2d00      	cmp	r5, #0
    5908:	d001      	beq.n	590e <nmi_get_otp_mac_address+0x26>
    590a:	2300      	movs	r3, #0
    590c:	702b      	strb	r3, [r5, #0]
	return ret;
}
    590e:	0020      	movs	r0, r4
    5910:	b006      	add	sp, #24
    5912:	bd70      	pop	{r4, r5, r6, pc}
	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    5914:	20c0      	movs	r0, #192	; 0xc0
    5916:	0280      	lsls	r0, r0, #10
    5918:	9b05      	ldr	r3, [sp, #20]
    591a:	4318      	orrs	r0, r3
    591c:	2208      	movs	r2, #8
    591e:	a901      	add	r1, sp, #4
    5920:	4b13      	ldr	r3, [pc, #76]	; (5970 <nmi_get_otp_mac_address+0x88>)
    5922:	4798      	blx	r3
    5924:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    5926:	d1ee      	bne.n	5906 <nmi_get_otp_mac_address+0x1e>
	u32RegValue = strgp.u32Mac_efuse_mib;
    5928:	9801      	ldr	r0, [sp, #4]
    592a:	9005      	str	r0, [sp, #20]
	if(!EFUSED_MAC(u32RegValue)) {
    592c:	0c03      	lsrs	r3, r0, #16
    592e:	d105      	bne.n	593c <nmi_get_otp_mac_address+0x54>
		m2m_memset(pu8MacAddr, 0, 6);
    5930:	2206      	movs	r2, #6
    5932:	2100      	movs	r1, #0
    5934:	0030      	movs	r0, r6
    5936:	4b0f      	ldr	r3, [pc, #60]	; (5974 <nmi_get_otp_mac_address+0x8c>)
    5938:	4798      	blx	r3
		goto _EXIT_ERR;
    593a:	e7e4      	b.n	5906 <nmi_get_otp_mac_address+0x1e>
	u32RegValue >>=16;
    593c:	0c00      	lsrs	r0, r0, #16
    593e:	9005      	str	r0, [sp, #20]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    5940:	23c0      	movs	r3, #192	; 0xc0
    5942:	029b      	lsls	r3, r3, #10
    5944:	4318      	orrs	r0, r3
    5946:	2206      	movs	r2, #6
    5948:	a903      	add	r1, sp, #12
    594a:	4b09      	ldr	r3, [pc, #36]	; (5970 <nmi_get_otp_mac_address+0x88>)
    594c:	4798      	blx	r3
    594e:	0004      	movs	r4, r0
	m2m_memcpy(pu8MacAddr,mac,6);
    5950:	2206      	movs	r2, #6
    5952:	a903      	add	r1, sp, #12
    5954:	0030      	movs	r0, r6
    5956:	4b08      	ldr	r3, [pc, #32]	; (5978 <nmi_get_otp_mac_address+0x90>)
    5958:	4798      	blx	r3
	if(pu8IsValid) *pu8IsValid = 1;
    595a:	2d00      	cmp	r5, #0
    595c:	d0d7      	beq.n	590e <nmi_get_otp_mac_address+0x26>
    595e:	2301      	movs	r3, #1
    5960:	702b      	strb	r3, [r5, #0]
    5962:	e7d4      	b.n	590e <nmi_get_otp_mac_address+0x26>
    5964:	0000d375 	.word	0x0000d375
    5968:	000c0008 	.word	0x000c0008
    596c:	00005a1d 	.word	0x00005a1d
    5970:	00005a35 	.word	0x00005a35
    5974:	00003cc1 	.word	0x00003cc1
    5978:	00003cad 	.word	0x00003cad

0000597c <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
    597c:	b530      	push	{r4, r5, lr}
    597e:	b087      	sub	sp, #28
    5980:	0005      	movs	r5, r0
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    5982:	2208      	movs	r2, #8
    5984:	2100      	movs	r1, #0
    5986:	a801      	add	r0, sp, #4
    5988:	4b13      	ldr	r3, [pc, #76]	; (59d8 <nmi_get_mac_address+0x5c>)
    598a:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    598c:	a905      	add	r1, sp, #20
    598e:	4813      	ldr	r0, [pc, #76]	; (59dc <nmi_get_mac_address+0x60>)
    5990:	4b13      	ldr	r3, [pc, #76]	; (59e0 <nmi_get_mac_address+0x64>)
    5992:	4798      	blx	r3
    5994:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    5996:	d002      	beq.n	599e <nmi_get_mac_address+0x22>

	return ret;

_EXIT_ERR:
	return ret;
}
    5998:	0020      	movs	r0, r4
    599a:	b007      	add	sp, #28
    599c:	bd30      	pop	{r4, r5, pc}
	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    599e:	20c0      	movs	r0, #192	; 0xc0
    59a0:	0280      	lsls	r0, r0, #10
    59a2:	9b05      	ldr	r3, [sp, #20]
    59a4:	4318      	orrs	r0, r3
    59a6:	2208      	movs	r2, #8
    59a8:	a901      	add	r1, sp, #4
    59aa:	4b0e      	ldr	r3, [pc, #56]	; (59e4 <nmi_get_mac_address+0x68>)
    59ac:	4798      	blx	r3
    59ae:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    59b0:	d1f2      	bne.n	5998 <nmi_get_mac_address+0x1c>
	u32RegValue &=0x0000ffff;
    59b2:	9b01      	ldr	r3, [sp, #4]
    59b4:	0418      	lsls	r0, r3, #16
    59b6:	0c00      	lsrs	r0, r0, #16
    59b8:	9005      	str	r0, [sp, #20]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    59ba:	23c0      	movs	r3, #192	; 0xc0
    59bc:	029b      	lsls	r3, r3, #10
    59be:	4318      	orrs	r0, r3
    59c0:	2206      	movs	r2, #6
    59c2:	a903      	add	r1, sp, #12
    59c4:	4b07      	ldr	r3, [pc, #28]	; (59e4 <nmi_get_mac_address+0x68>)
    59c6:	4798      	blx	r3
    59c8:	0004      	movs	r4, r0
	m2m_memcpy(pu8MacAddr, mac, 6);
    59ca:	2206      	movs	r2, #6
    59cc:	a903      	add	r1, sp, #12
    59ce:	0028      	movs	r0, r5
    59d0:	4b05      	ldr	r3, [pc, #20]	; (59e8 <nmi_get_mac_address+0x6c>)
    59d2:	4798      	blx	r3
	return ret;
    59d4:	e7e0      	b.n	5998 <nmi_get_mac_address+0x1c>
    59d6:	46c0      	nop			; (mov r8, r8)
    59d8:	0000d375 	.word	0x0000d375
    59dc:	000c0008 	.word	0x000c0008
    59e0:	00005a1d 	.word	0x00005a1d
    59e4:	00005a35 	.word	0x00005a35
    59e8:	00003cad 	.word	0x00003cad

000059ec <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    59ec:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    59ee:	4b01      	ldr	r3, [pc, #4]	; (59f4 <nm_bus_iface_init+0x8>)
    59f0:	4798      	blx	r3
	return ret;
}
    59f2:	bd10      	pop	{r4, pc}
    59f4:	00003ae5 	.word	0x00003ae5

000059f8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    59f8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    59fa:	4b01      	ldr	r3, [pc, #4]	; (5a00 <nm_bus_iface_deinit+0x8>)
    59fc:	4798      	blx	r3

	return ret;
}
    59fe:	bd10      	pop	{r4, pc}
    5a00:	00003c39 	.word	0x00003c39

00005a04 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    5a04:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    5a06:	4b01      	ldr	r3, [pc, #4]	; (5a0c <nm_bus_reset+0x8>)
    5a08:	4798      	blx	r3
#else
#error "Please define bus usage"
#endif

	return ret;
}
    5a0a:	bd10      	pop	{r4, pc}
    5a0c:	000063cd 	.word	0x000063cd

00005a10 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    5a10:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    5a12:	4b01      	ldr	r3, [pc, #4]	; (5a18 <nm_read_reg+0x8>)
    5a14:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Please define bus usage"
#endif

}
    5a16:	bd10      	pop	{r4, pc}
    5a18:	00006405 	.word	0x00006405

00005a1c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    5a1c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    5a1e:	4b01      	ldr	r3, [pc, #4]	; (5a24 <nm_read_reg_with_ret+0x8>)
    5a20:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
    5a22:	bd10      	pop	{r4, pc}
    5a24:	00006419 	.word	0x00006419

00005a28 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    5a28:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    5a2a:	4b01      	ldr	r3, [pc, #4]	; (5a30 <nm_write_reg+0x8>)
    5a2c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Please define bus usage"
#endif
}
    5a2e:	bd10      	pop	{r4, pc}
    5a30:	00006431 	.word	0x00006431

00005a34 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    5a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a36:	46d6      	mov	lr, sl
    5a38:	464f      	mov	r7, r9
    5a3a:	4646      	mov	r6, r8
    5a3c:	b5c0      	push	{r6, r7, lr}
    5a3e:	b082      	sub	sp, #8
    5a40:	4680      	mov	r8, r0
    5a42:	4689      	mov	r9, r1
    5a44:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    5a46:	4b13      	ldr	r3, [pc, #76]	; (5a94 <nm_read_block+0x60>)
    5a48:	881f      	ldrh	r7, [r3, #0]
    5a4a:	3f08      	subs	r7, #8
    5a4c:	b2bb      	uxth	r3, r7
    5a4e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    5a50:	001e      	movs	r6, r3
    5a52:	0004      	movs	r4, r0
    5a54:	429a      	cmp	r2, r3
    5a56:	d91a      	bls.n	5a8e <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    5a58:	4b0f      	ldr	r3, [pc, #60]	; (5a98 <nm_read_block+0x64>)
    5a5a:	469a      	mov	sl, r3
    5a5c:	1a37      	subs	r7, r6, r0
    5a5e:	4643      	mov	r3, r8
    5a60:	1ae1      	subs	r1, r4, r3
    5a62:	4449      	add	r1, r9
    5a64:	9a01      	ldr	r2, [sp, #4]
    5a66:	0020      	movs	r0, r4
    5a68:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    5a6a:	2800      	cmp	r0, #0
    5a6c:	d109      	bne.n	5a82 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    5a6e:	1bad      	subs	r5, r5, r6
    5a70:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    5a72:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    5a74:	42b5      	cmp	r5, r6
    5a76:	d8f2      	bhi.n	5a5e <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    5a78:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    5a7a:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    5a7c:	0020      	movs	r0, r4
    5a7e:	4b06      	ldr	r3, [pc, #24]	; (5a98 <nm_read_block+0x64>)
    5a80:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    5a82:	b002      	add	sp, #8
    5a84:	bc1c      	pop	{r2, r3, r4}
    5a86:	4690      	mov	r8, r2
    5a88:	4699      	mov	r9, r3
    5a8a:	46a2      	mov	sl, r4
    5a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    5a8e:	2100      	movs	r1, #0
    5a90:	e7f2      	b.n	5a78 <nm_read_block+0x44>
    5a92:	46c0      	nop			; (mov r8, r8)
    5a94:	20000020 	.word	0x20000020
    5a98:	00006571 	.word	0x00006571

00005a9c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    5a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a9e:	46d6      	mov	lr, sl
    5aa0:	464f      	mov	r7, r9
    5aa2:	4646      	mov	r6, r8
    5aa4:	b5c0      	push	{r6, r7, lr}
    5aa6:	b082      	sub	sp, #8
    5aa8:	4680      	mov	r8, r0
    5aaa:	4689      	mov	r9, r1
    5aac:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    5aae:	4b13      	ldr	r3, [pc, #76]	; (5afc <nm_write_block+0x60>)
    5ab0:	881f      	ldrh	r7, [r3, #0]
    5ab2:	3f08      	subs	r7, #8
    5ab4:	b2bb      	uxth	r3, r7
    5ab6:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    5ab8:	001e      	movs	r6, r3
    5aba:	0004      	movs	r4, r0
    5abc:	429a      	cmp	r2, r3
    5abe:	d91a      	bls.n	5af6 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    5ac0:	4b0f      	ldr	r3, [pc, #60]	; (5b00 <nm_write_block+0x64>)
    5ac2:	469a      	mov	sl, r3
    5ac4:	1a37      	subs	r7, r6, r0
    5ac6:	4643      	mov	r3, r8
    5ac8:	1ae1      	subs	r1, r4, r3
    5aca:	4449      	add	r1, r9
    5acc:	9a01      	ldr	r2, [sp, #4]
    5ace:	0020      	movs	r0, r4
    5ad0:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    5ad2:	2800      	cmp	r0, #0
    5ad4:	d109      	bne.n	5aea <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    5ad6:	1bad      	subs	r5, r5, r6
    5ad8:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    5ada:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    5adc:	42b5      	cmp	r5, r6
    5ade:	d8f2      	bhi.n	5ac6 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    5ae0:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    5ae2:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    5ae4:	0020      	movs	r0, r4
    5ae6:	4b06      	ldr	r3, [pc, #24]	; (5b00 <nm_write_block+0x64>)
    5ae8:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    5aea:	b002      	add	sp, #8
    5aec:	bc1c      	pop	{r2, r3, r4}
    5aee:	4690      	mov	r8, r2
    5af0:	4699      	mov	r9, r3
    5af2:	46a2      	mov	sl, r4
    5af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    5af6:	2100      	movs	r1, #0
    5af8:	e7f2      	b.n	5ae0 <nm_write_block+0x44>
    5afa:	46c0      	nop			; (mov r8, r8)
    5afc:	20000020 	.word	0x20000020
    5b00:	000066cd 	.word	0x000066cd

00005b04 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    5b04:	b570      	push	{r4, r5, r6, lr}
    5b06:	b084      	sub	sp, #16
    5b08:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    5b0a:	2300      	movs	r3, #0
    5b0c:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    5b0e:	2208      	movs	r2, #8
    5b10:	2100      	movs	r1, #0
    5b12:	a801      	add	r0, sp, #4
    5b14:	4b2d      	ldr	r3, [pc, #180]	; (5bcc <nm_get_firmware_full_info+0xc8>)
    5b16:	4798      	blx	r3
	if (pstrRev != NULL)
    5b18:	2c00      	cmp	r4, #0
    5b1a:	d045      	beq.n	5ba8 <nm_get_firmware_full_info+0xa4>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    5b1c:	2228      	movs	r2, #40	; 0x28
    5b1e:	2100      	movs	r1, #0
    5b20:	0020      	movs	r0, r4
    5b22:	4b2b      	ldr	r3, [pc, #172]	; (5bd0 <nm_get_firmware_full_info+0xcc>)
    5b24:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    5b26:	a903      	add	r1, sp, #12
    5b28:	482a      	ldr	r0, [pc, #168]	; (5bd4 <nm_get_firmware_full_info+0xd0>)
    5b2a:	4b2b      	ldr	r3, [pc, #172]	; (5bd8 <nm_get_firmware_full_info+0xd4>)
    5b2c:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    5b2e:	2800      	cmp	r0, #0
    5b30:	d13b      	bne.n	5baa <nm_get_firmware_full_info+0xa6>
		{
			if(reg != 0)
    5b32:	9b03      	ldr	r3, [sp, #12]
    5b34:	2b00      	cmp	r3, #0
    5b36:	d03a      	beq.n	5bae <nm_get_firmware_full_info+0xaa>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    5b38:	20c0      	movs	r0, #192	; 0xc0
    5b3a:	0280      	lsls	r0, r0, #10
    5b3c:	4318      	orrs	r0, r3
    5b3e:	2208      	movs	r2, #8
    5b40:	a901      	add	r1, sp, #4
    5b42:	4b26      	ldr	r3, [pc, #152]	; (5bdc <nm_get_firmware_full_info+0xd8>)
    5b44:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    5b46:	2800      	cmp	r0, #0
    5b48:	d12f      	bne.n	5baa <nm_get_firmware_full_info+0xa6>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    5b4a:	9b02      	ldr	r3, [sp, #8]
    5b4c:	0418      	lsls	r0, r3, #16
    5b4e:	0c00      	lsrs	r0, r0, #16
    5b50:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    5b52:	d02f      	beq.n	5bb4 <nm_get_firmware_full_info+0xb0>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    5b54:	23c0      	movs	r3, #192	; 0xc0
    5b56:	029b      	lsls	r3, r3, #10
    5b58:	4318      	orrs	r0, r3
    5b5a:	2228      	movs	r2, #40	; 0x28
    5b5c:	0021      	movs	r1, r4
    5b5e:	4b1f      	ldr	r3, [pc, #124]	; (5bdc <nm_get_firmware_full_info+0xd8>)
    5b60:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    5b62:	2800      	cmp	r0, #0
    5b64:	d121      	bne.n	5baa <nm_get_firmware_full_info+0xa6>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    5b66:	7921      	ldrb	r1, [r4, #4]
    5b68:	0209      	lsls	r1, r1, #8
    5b6a:	79a2      	ldrb	r2, [r4, #6]
    5b6c:	230f      	movs	r3, #15
    5b6e:	401a      	ands	r2, r3
    5b70:	430a      	orrs	r2, r1
    5b72:	7961      	ldrb	r1, [r4, #5]
    5b74:	0109      	lsls	r1, r1, #4
    5b76:	25ff      	movs	r5, #255	; 0xff
    5b78:	4029      	ands	r1, r5
    5b7a:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    5b7c:	79e1      	ldrb	r1, [r4, #7]
    5b7e:	0209      	lsls	r1, r1, #8
    5b80:	7a66      	ldrb	r6, [r4, #9]
    5b82:	4033      	ands	r3, r6
    5b84:	430b      	orrs	r3, r1
    5b86:	7a21      	ldrb	r1, [r4, #8]
    5b88:	0109      	lsls	r1, r1, #4
    5b8a:	400d      	ands	r5, r1
    5b8c:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    5b8e:	2a00      	cmp	r2, #0
    5b90:	d013      	beq.n	5bba <nm_get_firmware_full_info+0xb6>
    5b92:	2b00      	cmp	r3, #0
    5b94:	d014      	beq.n	5bc0 <nm_get_firmware_full_info+0xbc>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    5b96:	4912      	ldr	r1, [pc, #72]	; (5be0 <nm_get_firmware_full_info+0xdc>)
    5b98:	428b      	cmp	r3, r1
    5b9a:	d814      	bhi.n	5bc6 <nm_get_firmware_full_info+0xc2>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    5b9c:	239b      	movs	r3, #155	; 0x9b
    5b9e:	015b      	lsls	r3, r3, #5
    5ba0:	429a      	cmp	r2, r3
    5ba2:	d802      	bhi.n	5baa <nm_get_firmware_full_info+0xa6>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    5ba4:	380d      	subs	r0, #13
    5ba6:	e000      	b.n	5baa <nm_get_firmware_full_info+0xa6>
	sint8	ret = M2M_SUCCESS;
    5ba8:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    5baa:	b004      	add	sp, #16
    5bac:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    5bae:	200c      	movs	r0, #12
    5bb0:	4240      	negs	r0, r0
    5bb2:	e7fa      	b.n	5baa <nm_get_firmware_full_info+0xa6>
						ret = M2M_ERR_FAIL;
    5bb4:	200c      	movs	r0, #12
    5bb6:	4240      	negs	r0, r0
    5bb8:	e7f7      	b.n	5baa <nm_get_firmware_full_info+0xa6>
								ret = M2M_ERR_FAIL;
    5bba:	200c      	movs	r0, #12
    5bbc:	4240      	negs	r0, r0
    5bbe:	e7f4      	b.n	5baa <nm_get_firmware_full_info+0xa6>
    5bc0:	200c      	movs	r0, #12
    5bc2:	4240      	negs	r0, r0
    5bc4:	e7f1      	b.n	5baa <nm_get_firmware_full_info+0xa6>
								ret = M2M_ERR_FW_VER_MISMATCH;
    5bc6:	200d      	movs	r0, #13
    5bc8:	4240      	negs	r0, r0
    5bca:	e7ee      	b.n	5baa <nm_get_firmware_full_info+0xa6>
    5bcc:	0000d375 	.word	0x0000d375
    5bd0:	00003cc1 	.word	0x00003cc1
    5bd4:	000c0008 	.word	0x000c0008
    5bd8:	00005a1d 	.word	0x00005a1d
    5bdc:	00005a35 	.word	0x00005a35
    5be0:	00001361 	.word	0x00001361

00005be4 <nm_drv_init_hold>:
ERR1:
	return ret;
}

sint8 nm_drv_init_hold(void)
{
    5be4:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	
	ret = nm_bus_iface_init(NULL);
    5be6:	2000      	movs	r0, #0
    5be8:	4b0f      	ldr	r3, [pc, #60]	; (5c28 <nm_drv_init_hold+0x44>)
    5bea:	4798      	blx	r3
    5bec:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    5bee:	d10e      	bne.n	5c0e <nm_drv_init_hold+0x2a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    5bf0:	480e      	ldr	r0, [pc, #56]	; (5c2c <nm_drv_init_hold+0x48>)
    5bf2:	4d0f      	ldr	r5, [pc, #60]	; (5c30 <nm_drv_init_hold+0x4c>)
    5bf4:	47a8      	blx	r5
    5bf6:	4b0f      	ldr	r3, [pc, #60]	; (5c34 <nm_drv_init_hold+0x50>)
    5bf8:	4798      	blx	r3
    5bfa:	0001      	movs	r1, r0
    5bfc:	480e      	ldr	r0, [pc, #56]	; (5c38 <nm_drv_init_hold+0x54>)
    5bfe:	47a8      	blx	r5
    5c00:	200d      	movs	r0, #13
    5c02:	4b0e      	ldr	r3, [pc, #56]	; (5c3c <nm_drv_init_hold+0x58>)
    5c04:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    5c06:	4b0e      	ldr	r3, [pc, #56]	; (5c40 <nm_drv_init_hold+0x5c>)
    5c08:	4798      	blx	r3
ERR2:
	nm_bus_iface_deinit();
#endif
ERR1:
	return ret;
}
    5c0a:	0020      	movs	r0, r4
    5c0c:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("[nmi start]: fail init bus\n");
    5c0e:	2286      	movs	r2, #134	; 0x86
    5c10:	0052      	lsls	r2, r2, #1
    5c12:	490c      	ldr	r1, [pc, #48]	; (5c44 <nm_drv_init_hold+0x60>)
    5c14:	480c      	ldr	r0, [pc, #48]	; (5c48 <nm_drv_init_hold+0x64>)
    5c16:	4b06      	ldr	r3, [pc, #24]	; (5c30 <nm_drv_init_hold+0x4c>)
    5c18:	4798      	blx	r3
    5c1a:	480c      	ldr	r0, [pc, #48]	; (5c4c <nm_drv_init_hold+0x68>)
    5c1c:	4b0c      	ldr	r3, [pc, #48]	; (5c50 <nm_drv_init_hold+0x6c>)
    5c1e:	4798      	blx	r3
    5c20:	200d      	movs	r0, #13
    5c22:	4b06      	ldr	r3, [pc, #24]	; (5c3c <nm_drv_init_hold+0x58>)
    5c24:	4798      	blx	r3
	return ret;
    5c26:	e7f0      	b.n	5c0a <nm_drv_init_hold+0x26>
    5c28:	000059ed 	.word	0x000059ed
    5c2c:	0000f1f4 	.word	0x0000f1f4
    5c30:	0000d4d5 	.word	0x0000d4d5
    5c34:	000054a1 	.word	0x000054a1
    5c38:	0000f5c0 	.word	0x0000f5c0
    5c3c:	0000d509 	.word	0x0000d509
    5c40:	00006449 	.word	0x00006449
    5c44:	0000f50c 	.word	0x0000f50c
    5c48:	0000ee54 	.word	0x0000ee54
    5c4c:	0000f5a4 	.word	0x0000f5a4
    5c50:	0000d5f1 	.word	0x0000d5f1

00005c54 <nm_drv_init_start>:

sint8 nm_drv_init_start(void * arg)
{
    5c54:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;

	if(NULL != arg) {
    5c56:	2800      	cmp	r0, #0
    5c58:	d027      	beq.n	5caa <nm_drv_init_start+0x56>
		u8Mode = *((uint8 *)arg);
    5c5a:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    5c5c:	1e6b      	subs	r3, r5, #1
    5c5e:	2b03      	cmp	r3, #3
    5c60:	d900      	bls.n	5c64 <nm_drv_init_start+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    5c62:	2501      	movs	r5, #1
		}
	}

	ret = wait_for_bootrom(u8Mode);
    5c64:	0028      	movs	r0, r5
    5c66:	4b12      	ldr	r3, [pc, #72]	; (5cb0 <nm_drv_init_start+0x5c>)
    5c68:	4798      	blx	r3
    5c6a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    5c6c:	d117      	bne.n	5c9e <nm_drv_init_start+0x4a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    5c6e:	0028      	movs	r0, r5
    5c70:	4b10      	ldr	r3, [pc, #64]	; (5cb4 <nm_drv_init_start+0x60>)
    5c72:	4798      	blx	r3
    5c74:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    5c76:	d112      	bne.n	5c9e <nm_drv_init_start+0x4a>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    5c78:	3d02      	subs	r5, #2
    5c7a:	2d01      	cmp	r5, #1
    5c7c:	d913      	bls.n	5ca6 <nm_drv_init_start+0x52>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    5c7e:	4b0e      	ldr	r3, [pc, #56]	; (5cb8 <nm_drv_init_start+0x64>)
    5c80:	4798      	blx	r3
    5c82:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    5c84:	d00f      	beq.n	5ca6 <nm_drv_init_start+0x52>
		M2M_ERR("failed to enable interrupts..\n");
    5c86:	22a8      	movs	r2, #168	; 0xa8
    5c88:	0052      	lsls	r2, r2, #1
    5c8a:	490c      	ldr	r1, [pc, #48]	; (5cbc <nm_drv_init_start+0x68>)
    5c8c:	480c      	ldr	r0, [pc, #48]	; (5cc0 <nm_drv_init_start+0x6c>)
    5c8e:	4b0d      	ldr	r3, [pc, #52]	; (5cc4 <nm_drv_init_start+0x70>)
    5c90:	4798      	blx	r3
    5c92:	480d      	ldr	r0, [pc, #52]	; (5cc8 <nm_drv_init_start+0x74>)
    5c94:	4b0d      	ldr	r3, [pc, #52]	; (5ccc <nm_drv_init_start+0x78>)
    5c96:	4798      	blx	r3
    5c98:	200d      	movs	r0, #13
    5c9a:	4b0d      	ldr	r3, [pc, #52]	; (5cd0 <nm_drv_init_start+0x7c>)
    5c9c:	4798      	blx	r3
		goto ERR2;
	}

	return ret;
ERR2:
	nm_bus_iface_deinit();
    5c9e:	4b0d      	ldr	r3, [pc, #52]	; (5cd4 <nm_drv_init_start+0x80>)
    5ca0:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	nm_spi_deinit();
    5ca2:	4b0d      	ldr	r3, [pc, #52]	; (5cd8 <nm_drv_init_start+0x84>)
    5ca4:	4798      	blx	r3
#endif
ERR1:
	return ret;
}
    5ca6:	0020      	movs	r0, r4
    5ca8:	bd70      	pop	{r4, r5, r6, pc}
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
    5caa:	2501      	movs	r5, #1
    5cac:	e7da      	b.n	5c64 <nm_drv_init_start+0x10>
    5cae:	46c0      	nop			; (mov r8, r8)
    5cb0:	000056b5 	.word	0x000056b5
    5cb4:	000057e5 	.word	0x000057e5
    5cb8:	00005445 	.word	0x00005445
    5cbc:	0000f520 	.word	0x0000f520
    5cc0:	0000ee54 	.word	0x0000ee54
    5cc4:	0000d4d5 	.word	0x0000d4d5
    5cc8:	0000f5d0 	.word	0x0000f5d0
    5ccc:	0000d5f1 	.word	0x0000d5f1
    5cd0:	0000d509 	.word	0x0000d509
    5cd4:	000059f9 	.word	0x000059f9
    5cd8:	000063f5 	.word	0x000063f5

00005cdc <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    5cdc:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    5cde:	4b1c      	ldr	r3, [pc, #112]	; (5d50 <nm_drv_deinit+0x74>)
    5ce0:	4798      	blx	r3
    5ce2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    5ce4:	d10b      	bne.n	5cfe <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    5ce6:	2000      	movs	r0, #0
    5ce8:	4b1a      	ldr	r3, [pc, #104]	; (5d54 <nm_drv_deinit+0x78>)
    5cea:	4798      	blx	r3
    5cec:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    5cee:	d114      	bne.n	5d1a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    5cf0:	4b19      	ldr	r3, [pc, #100]	; (5d58 <nm_drv_deinit+0x7c>)
    5cf2:	4798      	blx	r3
    5cf4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    5cf6:	d11d      	bne.n	5d34 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    5cf8:	4b18      	ldr	r3, [pc, #96]	; (5d5c <nm_drv_deinit+0x80>)
    5cfa:	4798      	blx	r3
    5cfc:	e00b      	b.n	5d16 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    5cfe:	2282      	movs	r2, #130	; 0x82
    5d00:	32ff      	adds	r2, #255	; 0xff
    5d02:	4917      	ldr	r1, [pc, #92]	; (5d60 <nm_drv_deinit+0x84>)
    5d04:	4817      	ldr	r0, [pc, #92]	; (5d64 <nm_drv_deinit+0x88>)
    5d06:	4b18      	ldr	r3, [pc, #96]	; (5d68 <nm_drv_deinit+0x8c>)
    5d08:	4798      	blx	r3
    5d0a:	4818      	ldr	r0, [pc, #96]	; (5d6c <nm_drv_deinit+0x90>)
    5d0c:	4b18      	ldr	r3, [pc, #96]	; (5d70 <nm_drv_deinit+0x94>)
    5d0e:	4798      	blx	r3
    5d10:	200d      	movs	r0, #13
    5d12:	4b18      	ldr	r3, [pc, #96]	; (5d74 <nm_drv_deinit+0x98>)
    5d14:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    5d16:	0020      	movs	r0, r4
    5d18:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    5d1a:	22c4      	movs	r2, #196	; 0xc4
    5d1c:	0052      	lsls	r2, r2, #1
    5d1e:	4910      	ldr	r1, [pc, #64]	; (5d60 <nm_drv_deinit+0x84>)
    5d20:	4810      	ldr	r0, [pc, #64]	; (5d64 <nm_drv_deinit+0x88>)
    5d22:	4b11      	ldr	r3, [pc, #68]	; (5d68 <nm_drv_deinit+0x8c>)
    5d24:	4798      	blx	r3
    5d26:	4814      	ldr	r0, [pc, #80]	; (5d78 <nm_drv_deinit+0x9c>)
    5d28:	4b11      	ldr	r3, [pc, #68]	; (5d70 <nm_drv_deinit+0x94>)
    5d2a:	4798      	blx	r3
    5d2c:	200d      	movs	r0, #13
    5d2e:	4b11      	ldr	r3, [pc, #68]	; (5d74 <nm_drv_deinit+0x98>)
    5d30:	4798      	blx	r3
		goto ERR1;
    5d32:	e7f0      	b.n	5d16 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    5d34:	22c7      	movs	r2, #199	; 0xc7
    5d36:	0052      	lsls	r2, r2, #1
    5d38:	4909      	ldr	r1, [pc, #36]	; (5d60 <nm_drv_deinit+0x84>)
    5d3a:	480a      	ldr	r0, [pc, #40]	; (5d64 <nm_drv_deinit+0x88>)
    5d3c:	4b0a      	ldr	r3, [pc, #40]	; (5d68 <nm_drv_deinit+0x8c>)
    5d3e:	4798      	blx	r3
    5d40:	480e      	ldr	r0, [pc, #56]	; (5d7c <nm_drv_deinit+0xa0>)
    5d42:	4b0b      	ldr	r3, [pc, #44]	; (5d70 <nm_drv_deinit+0x94>)
    5d44:	4798      	blx	r3
    5d46:	200d      	movs	r0, #13
    5d48:	4b0a      	ldr	r3, [pc, #40]	; (5d74 <nm_drv_deinit+0x98>)
    5d4a:	4798      	blx	r3
		goto ERR1;
    5d4c:	e7e3      	b.n	5d16 <nm_drv_deinit+0x3a>
    5d4e:	46c0      	nop			; (mov r8, r8)
    5d50:	0000585d 	.word	0x0000585d
    5d54:	000072fd 	.word	0x000072fd
    5d58:	000059f9 	.word	0x000059f9
    5d5c:	000063f5 	.word	0x000063f5
    5d60:	0000f534 	.word	0x0000f534
    5d64:	0000ee54 	.word	0x0000ee54
    5d68:	0000d4d5 	.word	0x0000d4d5
    5d6c:	0000f544 	.word	0x0000f544
    5d70:	0000d5f1 	.word	0x0000d5f1
    5d74:	0000d509 	.word	0x0000d509
    5d78:	0000f564 	.word	0x0000f564
    5d7c:	0000f588 	.word	0x0000f588

00005d80 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    5d80:	b500      	push	{lr}
    5d82:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    5d84:	ab01      	add	r3, sp, #4
    5d86:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    5d88:	2200      	movs	r2, #0
    5d8a:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    5d8c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    5d8e:	0019      	movs	r1, r3
    5d90:	2003      	movs	r0, #3
    5d92:	4b02      	ldr	r3, [pc, #8]	; (5d9c <nmi_spi_write+0x1c>)
    5d94:	4798      	blx	r3
}
    5d96:	b005      	add	sp, #20
    5d98:	bd00      	pop	{pc}
    5d9a:	46c0      	nop			; (mov r8, r8)
    5d9c:	00003be9 	.word	0x00003be9

00005da0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    5da0:	b570      	push	{r4, r5, r6, lr}
    5da2:	b084      	sub	sp, #16
    5da4:	ac08      	add	r4, sp, #32
    5da6:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    5da8:	ac01      	add	r4, sp, #4
    5daa:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    5dac:	303f      	adds	r0, #63	; 0x3f
    5dae:	b2c4      	uxtb	r4, r0
    5db0:	2c0e      	cmp	r4, #14
    5db2:	d900      	bls.n	5db6 <spi_cmd+0x16>
    5db4:	e084      	b.n	5ec0 <spi_cmd+0x120>
    5db6:	00a0      	lsls	r0, r4, #2
    5db8:	4c4f      	ldr	r4, [pc, #316]	; (5ef8 <spi_cmd+0x158>)
    5dba:	5820      	ldr	r0, [r4, r0]
    5dbc:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    5dbe:	ab01      	add	r3, sp, #4
    5dc0:	0c0a      	lsrs	r2, r1, #16
    5dc2:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    5dc4:	0a0a      	lsrs	r2, r1, #8
    5dc6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    5dc8:	70d9      	strb	r1, [r3, #3]
		len = 5;
    5dca:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    5dcc:	4b4b      	ldr	r3, [pc, #300]	; (5efc <spi_cmd+0x15c>)
    5dce:	781b      	ldrb	r3, [r3, #0]
    5dd0:	2b00      	cmp	r3, #0
    5dd2:	d077      	beq.n	5ec4 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    5dd4:	3901      	subs	r1, #1
    5dd6:	b2c9      	uxtb	r1, r1
    5dd8:	e083      	b.n	5ee2 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    5dda:	0a0b      	lsrs	r3, r1, #8
    5ddc:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    5dde:	2d00      	cmp	r5, #0
    5de0:	d107      	bne.n	5df2 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    5de2:	aa01      	add	r2, sp, #4
    5de4:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    5de6:	ab01      	add	r3, sp, #4
    5de8:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    5dea:	2200      	movs	r2, #0
    5dec:	70da      	strb	r2, [r3, #3]
		len = 5;
    5dee:	2105      	movs	r1, #5
		break;
    5df0:	e7ec      	b.n	5dcc <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    5df2:	2280      	movs	r2, #128	; 0x80
    5df4:	4252      	negs	r2, r2
    5df6:	4313      	orrs	r3, r2
    5df8:	aa01      	add	r2, sp, #4
    5dfa:	7053      	strb	r3, [r2, #1]
    5dfc:	e7f3      	b.n	5de6 <spi_cmd+0x46>
		bc[1] = 0x00;
    5dfe:	ab01      	add	r3, sp, #4
    5e00:	2200      	movs	r2, #0
    5e02:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    5e04:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    5e06:	70da      	strb	r2, [r3, #3]
		len = 5;
    5e08:	2105      	movs	r1, #5
		break;
    5e0a:	e7df      	b.n	5dcc <spi_cmd+0x2c>
		bc[1] = 0x00;
    5e0c:	ab01      	add	r3, sp, #4
    5e0e:	2200      	movs	r2, #0
    5e10:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    5e12:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    5e14:	70da      	strb	r2, [r3, #3]
		len = 5;
    5e16:	2105      	movs	r1, #5
		break;
    5e18:	e7d8      	b.n	5dcc <spi_cmd+0x2c>
		bc[1] = 0xff;
    5e1a:	ab01      	add	r3, sp, #4
    5e1c:	22ff      	movs	r2, #255	; 0xff
    5e1e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    5e20:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    5e22:	70da      	strb	r2, [r3, #3]
		len = 5;
    5e24:	2105      	movs	r1, #5
		break;
    5e26:	e7d1      	b.n	5dcc <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    5e28:	aa01      	add	r2, sp, #4
    5e2a:	0c08      	lsrs	r0, r1, #16
    5e2c:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    5e2e:	0a08      	lsrs	r0, r1, #8
    5e30:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    5e32:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    5e34:	0a19      	lsrs	r1, r3, #8
    5e36:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    5e38:	7153      	strb	r3, [r2, #5]
		len = 7;
    5e3a:	2107      	movs	r1, #7
		break;
    5e3c:	e7c6      	b.n	5dcc <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    5e3e:	aa01      	add	r2, sp, #4
    5e40:	0c08      	lsrs	r0, r1, #16
    5e42:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    5e44:	0a08      	lsrs	r0, r1, #8
    5e46:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    5e48:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    5e4a:	0c19      	lsrs	r1, r3, #16
    5e4c:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    5e4e:	0a19      	lsrs	r1, r3, #8
    5e50:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    5e52:	7193      	strb	r3, [r2, #6]
		len = 8;
    5e54:	2108      	movs	r1, #8
		break;
    5e56:	e7b9      	b.n	5dcc <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    5e58:	0a0b      	lsrs	r3, r1, #8
    5e5a:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    5e5c:	2d00      	cmp	r5, #0
    5e5e:	d10c      	bne.n	5e7a <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    5e60:	a801      	add	r0, sp, #4
    5e62:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    5e64:	ab01      	add	r3, sp, #4
    5e66:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    5e68:	0e11      	lsrs	r1, r2, #24
    5e6a:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    5e6c:	0c11      	lsrs	r1, r2, #16
    5e6e:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    5e70:	0a11      	lsrs	r1, r2, #8
    5e72:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    5e74:	719a      	strb	r2, [r3, #6]
		len = 8;
    5e76:	2108      	movs	r1, #8
		break;
    5e78:	e7a8      	b.n	5dcc <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    5e7a:	2080      	movs	r0, #128	; 0x80
    5e7c:	4240      	negs	r0, r0
    5e7e:	4303      	orrs	r3, r0
    5e80:	a801      	add	r0, sp, #4
    5e82:	7043      	strb	r3, [r0, #1]
    5e84:	e7ee      	b.n	5e64 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    5e86:	ab01      	add	r3, sp, #4
    5e88:	0c08      	lsrs	r0, r1, #16
    5e8a:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    5e8c:	0a08      	lsrs	r0, r1, #8
    5e8e:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    5e90:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    5e92:	0e11      	lsrs	r1, r2, #24
    5e94:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    5e96:	0c11      	lsrs	r1, r2, #16
    5e98:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    5e9a:	0a11      	lsrs	r1, r2, #8
    5e9c:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    5e9e:	71da      	strb	r2, [r3, #7]
		len = 9;
    5ea0:	2109      	movs	r1, #9
		break;
    5ea2:	e793      	b.n	5dcc <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    5ea4:	2290      	movs	r2, #144	; 0x90
    5ea6:	0052      	lsls	r2, r2, #1
    5ea8:	4915      	ldr	r1, [pc, #84]	; (5f00 <spi_cmd+0x160>)
    5eaa:	4816      	ldr	r0, [pc, #88]	; (5f04 <spi_cmd+0x164>)
    5eac:	4b16      	ldr	r3, [pc, #88]	; (5f08 <spi_cmd+0x168>)
    5eae:	4798      	blx	r3
    5eb0:	4816      	ldr	r0, [pc, #88]	; (5f0c <spi_cmd+0x16c>)
    5eb2:	4b17      	ldr	r3, [pc, #92]	; (5f10 <spi_cmd+0x170>)
    5eb4:	4798      	blx	r3
    5eb6:	200d      	movs	r0, #13
    5eb8:	4b16      	ldr	r3, [pc, #88]	; (5f14 <spi_cmd+0x174>)
    5eba:	4798      	blx	r3
			result = N_FAIL;
    5ebc:	2300      	movs	r3, #0
    5ebe:	e017      	b.n	5ef0 <spi_cmd+0x150>
	switch (cmd) {
    5ec0:	2300      	movs	r3, #0
    5ec2:	e015      	b.n	5ef0 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    5ec4:	1e4e      	subs	r6, r1, #1
    5ec6:	aa01      	add	r2, sp, #4
    5ec8:	1995      	adds	r5, r2, r6
    5eca:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    5ecc:	4c12      	ldr	r4, [pc, #72]	; (5f18 <spi_cmd+0x178>)
    5ece:	005b      	lsls	r3, r3, #1
    5ed0:	7810      	ldrb	r0, [r2, #0]
    5ed2:	4043      	eors	r3, r0
    5ed4:	5ce3      	ldrb	r3, [r4, r3]
    5ed6:	3201      	adds	r2, #1
	while (len--)
    5ed8:	42aa      	cmp	r2, r5
    5eda:	d1f8      	bne.n	5ece <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    5edc:	005b      	lsls	r3, r3, #1
    5ede:	aa01      	add	r2, sp, #4
    5ee0:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    5ee2:	b289      	uxth	r1, r1
    5ee4:	a801      	add	r0, sp, #4
    5ee6:	4b0d      	ldr	r3, [pc, #52]	; (5f1c <spi_cmd+0x17c>)
    5ee8:	4798      	blx	r3
    5eea:	2301      	movs	r3, #1
    5eec:	2800      	cmp	r0, #0
    5eee:	d1d9      	bne.n	5ea4 <spi_cmd+0x104>
		}
	}

	return result;
}
    5ef0:	0018      	movs	r0, r3
    5ef2:	b004      	add	sp, #16
    5ef4:	bd70      	pop	{r4, r5, r6, pc}
    5ef6:	46c0      	nop			; (mov r8, r8)
    5ef8:	0000f5f0 	.word	0x0000f5f0
    5efc:	20000470 	.word	0x20000470
    5f00:	0000f630 	.word	0x0000f630
    5f04:	0000ee54 	.word	0x0000ee54
    5f08:	0000d4d5 	.word	0x0000d4d5
    5f0c:	0000fac0 	.word	0x0000fac0
    5f10:	0000d5f1 	.word	0x0000d5f1
    5f14:	0000d509 	.word	0x0000d509
    5f18:	0000f6bc 	.word	0x0000f6bc
    5f1c:	00005d81 	.word	0x00005d81

00005f20 <nmi_spi_read>:
{
    5f20:	b500      	push	{lr}
    5f22:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    5f24:	ab01      	add	r3, sp, #4
    5f26:	2200      	movs	r2, #0
    5f28:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    5f2a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    5f2c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    5f2e:	0019      	movs	r1, r3
    5f30:	2003      	movs	r0, #3
    5f32:	4b02      	ldr	r3, [pc, #8]	; (5f3c <nmi_spi_read+0x1c>)
    5f34:	4798      	blx	r3
}
    5f36:	b005      	add	sp, #20
    5f38:	bd00      	pop	{pc}
    5f3a:	46c0      	nop			; (mov r8, r8)
    5f3c:	00003be9 	.word	0x00003be9

00005f40 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    5f40:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f42:	46c6      	mov	lr, r8
    5f44:	b500      	push	{lr}
    5f46:	b082      	sub	sp, #8
    5f48:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    5f4a:	28cf      	cmp	r0, #207	; 0xcf
    5f4c:	d02b      	beq.n	5fa6 <spi_cmd_rsp+0x66>
    5f4e:	0003      	movs	r3, r0
    5f50:	333b      	adds	r3, #59	; 0x3b
    5f52:	b2db      	uxtb	r3, r3
    5f54:	2b01      	cmp	r3, #1
    5f56:	d926      	bls.n	5fa6 <spi_cmd_rsp+0x66>
{
    5f58:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5f5a:	466b      	mov	r3, sp
    5f5c:	1dde      	adds	r6, r3, #7
    5f5e:	4b26      	ldr	r3, [pc, #152]	; (5ff8 <spi_cmd_rsp+0xb8>)
    5f60:	4698      	mov	r8, r3
    5f62:	2101      	movs	r1, #1
    5f64:	0030      	movs	r0, r6
    5f66:	47c0      	blx	r8
    5f68:	1e05      	subs	r5, r0, #0
    5f6a:	d125      	bne.n	5fb8 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    5f6c:	7833      	ldrb	r3, [r6, #0]
    5f6e:	42bb      	cmp	r3, r7
    5f70:	d030      	beq.n	5fd4 <spi_cmd_rsp+0x94>
    5f72:	3c01      	subs	r4, #1
    5f74:	b2e4      	uxtb	r4, r4
    5f76:	2c00      	cmp	r4, #0
    5f78:	d1f3      	bne.n	5f62 <spi_cmd_rsp+0x22>
    5f7a:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5f7c:	466b      	mov	r3, sp
    5f7e:	1dde      	adds	r6, r3, #7
    5f80:	4f1d      	ldr	r7, [pc, #116]	; (5ff8 <spi_cmd_rsp+0xb8>)
    5f82:	2101      	movs	r1, #1
    5f84:	0030      	movs	r0, r6
    5f86:	47b8      	blx	r7
    5f88:	2800      	cmp	r0, #0
    5f8a:	d125      	bne.n	5fd8 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    5f8c:	7833      	ldrb	r3, [r6, #0]
    5f8e:	2b00      	cmp	r3, #0
    5f90:	d02f      	beq.n	5ff2 <spi_cmd_rsp+0xb2>
    5f92:	3c01      	subs	r4, #1
    5f94:	b2e4      	uxtb	r4, r4
    5f96:	2c00      	cmp	r4, #0
    5f98:	d1f3      	bne.n	5f82 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    5f9a:	2501      	movs	r5, #1

_fail_:

	return result;
}
    5f9c:	0028      	movs	r0, r5
    5f9e:	b002      	add	sp, #8
    5fa0:	bc04      	pop	{r2}
    5fa2:	4690      	mov	r8, r2
    5fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5fa6:	2101      	movs	r1, #1
    5fa8:	466b      	mov	r3, sp
    5faa:	1dd8      	adds	r0, r3, #7
    5fac:	4b12      	ldr	r3, [pc, #72]	; (5ff8 <spi_cmd_rsp+0xb8>)
    5fae:	4798      	blx	r3
			result = N_FAIL;
    5fb0:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5fb2:	2800      	cmp	r0, #0
    5fb4:	d0d0      	beq.n	5f58 <spi_cmd_rsp+0x18>
    5fb6:	e7f1      	b.n	5f9c <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    5fb8:	225c      	movs	r2, #92	; 0x5c
    5fba:	32ff      	adds	r2, #255	; 0xff
    5fbc:	490f      	ldr	r1, [pc, #60]	; (5ffc <spi_cmd_rsp+0xbc>)
    5fbe:	4810      	ldr	r0, [pc, #64]	; (6000 <spi_cmd_rsp+0xc0>)
    5fc0:	4b10      	ldr	r3, [pc, #64]	; (6004 <spi_cmd_rsp+0xc4>)
    5fc2:	4798      	blx	r3
    5fc4:	4810      	ldr	r0, [pc, #64]	; (6008 <spi_cmd_rsp+0xc8>)
    5fc6:	4b11      	ldr	r3, [pc, #68]	; (600c <spi_cmd_rsp+0xcc>)
    5fc8:	4798      	blx	r3
    5fca:	200d      	movs	r0, #13
    5fcc:	4b10      	ldr	r3, [pc, #64]	; (6010 <spi_cmd_rsp+0xd0>)
    5fce:	4798      	blx	r3
			result = N_FAIL;
    5fd0:	2500      	movs	r5, #0
			goto _fail_;
    5fd2:	e7e3      	b.n	5f9c <spi_cmd_rsp+0x5c>
    5fd4:	240b      	movs	r4, #11
    5fd6:	e7d1      	b.n	5f7c <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    5fd8:	226a      	movs	r2, #106	; 0x6a
    5fda:	32ff      	adds	r2, #255	; 0xff
    5fdc:	4907      	ldr	r1, [pc, #28]	; (5ffc <spi_cmd_rsp+0xbc>)
    5fde:	4808      	ldr	r0, [pc, #32]	; (6000 <spi_cmd_rsp+0xc0>)
    5fe0:	4b08      	ldr	r3, [pc, #32]	; (6004 <spi_cmd_rsp+0xc4>)
    5fe2:	4798      	blx	r3
    5fe4:	4808      	ldr	r0, [pc, #32]	; (6008 <spi_cmd_rsp+0xc8>)
    5fe6:	4b09      	ldr	r3, [pc, #36]	; (600c <spi_cmd_rsp+0xcc>)
    5fe8:	4798      	blx	r3
    5fea:	200d      	movs	r0, #13
    5fec:	4b08      	ldr	r3, [pc, #32]	; (6010 <spi_cmd_rsp+0xd0>)
    5fee:	4798      	blx	r3
			goto _fail_;
    5ff0:	e7d4      	b.n	5f9c <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    5ff2:	2501      	movs	r5, #1
    5ff4:	e7d2      	b.n	5f9c <spi_cmd_rsp+0x5c>
    5ff6:	46c0      	nop			; (mov r8, r8)
    5ff8:	00005f21 	.word	0x00005f21
    5ffc:	0000f648 	.word	0x0000f648
    6000:	0000ee54 	.word	0x0000ee54
    6004:	0000d4d5 	.word	0x0000d4d5
    6008:	0000faec 	.word	0x0000faec
    600c:	0000d5f1 	.word	0x0000d5f1
    6010:	0000d509 	.word	0x0000d509

00006014 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    6014:	b5f0      	push	{r4, r5, r6, r7, lr}
    6016:	46de      	mov	lr, fp
    6018:	4657      	mov	r7, sl
    601a:	464e      	mov	r6, r9
    601c:	4645      	mov	r5, r8
    601e:	b5e0      	push	{r5, r6, r7, lr}
    6020:	b087      	sub	sp, #28
    6022:	9001      	str	r0, [sp, #4]
    6024:	4689      	mov	r9, r1
    6026:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    6028:	2300      	movs	r3, #0
    602a:	469a      	mov	sl, r3
    602c:	2380      	movs	r3, #128	; 0x80
    602e:	019b      	lsls	r3, r3, #6
    6030:	469b      	mov	fp, r3
    6032:	466a      	mov	r2, sp
    6034:	81d3      	strh	r3, [r2, #14]
		/**
			Data Response header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6036:	4b3c      	ldr	r3, [pc, #240]	; (6128 <spi_data_read+0x114>)
    6038:	4698      	mov	r8, r3
    603a:	e02f      	b.n	609c <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    603c:	22be      	movs	r2, #190	; 0xbe
    603e:	0092      	lsls	r2, r2, #2
    6040:	493a      	ldr	r1, [pc, #232]	; (612c <spi_data_read+0x118>)
    6042:	483b      	ldr	r0, [pc, #236]	; (6130 <spi_data_read+0x11c>)
    6044:	4b3b      	ldr	r3, [pc, #236]	; (6134 <spi_data_read+0x120>)
    6046:	4798      	blx	r3
    6048:	483b      	ldr	r0, [pc, #236]	; (6138 <spi_data_read+0x124>)
    604a:	4b3c      	ldr	r3, [pc, #240]	; (613c <spi_data_read+0x128>)
    604c:	4798      	blx	r3
    604e:	200d      	movs	r0, #13
    6050:	4b3b      	ldr	r3, [pc, #236]	; (6140 <spi_data_read+0x12c>)
    6052:	4798      	blx	r3
    6054:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    6056:	0028      	movs	r0, r5
    6058:	b007      	add	sp, #28
    605a:	bc3c      	pop	{r2, r3, r4, r5}
    605c:	4690      	mov	r8, r2
    605e:	4699      	mov	r9, r3
    6060:	46a2      	mov	sl, r4
    6062:	46ab      	mov	fp, r5
    6064:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    6066:	2c00      	cmp	r4, #0
    6068:	dd2e      	ble.n	60c8 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    606a:	9b01      	ldr	r3, [sp, #4]
    606c:	4453      	add	r3, sl
    606e:	0018      	movs	r0, r3
    6070:	0039      	movs	r1, r7
    6072:	4b2d      	ldr	r3, [pc, #180]	; (6128 <spi_data_read+0x114>)
    6074:	4798      	blx	r3
    6076:	1e04      	subs	r4, r0, #0
    6078:	d134      	bne.n	60e4 <spi_data_read+0xd0>
		if(!clockless)
    607a:	9b02      	ldr	r3, [sp, #8]
    607c:	2b00      	cmp	r3, #0
    607e:	d103      	bne.n	6088 <spi_data_read+0x74>
			if (!gu8Crc_off) {
    6080:	4b30      	ldr	r3, [pc, #192]	; (6144 <spi_data_read+0x130>)
    6082:	781b      	ldrb	r3, [r3, #0]
    6084:	2b00      	cmp	r3, #0
    6086:	d039      	beq.n	60fc <spi_data_read+0xe8>
		ix += nbytes;
    6088:	4653      	mov	r3, sl
    608a:	18fb      	adds	r3, r7, r3
    608c:	b21b      	sxth	r3, r3
    608e:	469a      	mov	sl, r3
		sz -= nbytes;
    6090:	464b      	mov	r3, r9
    6092:	1bdf      	subs	r7, r3, r7
    6094:	b2bb      	uxth	r3, r7
    6096:	4699      	mov	r9, r3
	} while (sz);
    6098:	2b00      	cmp	r3, #0
    609a:	d043      	beq.n	6124 <spi_data_read+0x110>
    609c:	464f      	mov	r7, r9
    609e:	45d9      	cmp	r9, fp
    60a0:	d901      	bls.n	60a6 <spi_data_read+0x92>
    60a2:	466b      	mov	r3, sp
    60a4:	89df      	ldrh	r7, [r3, #14]
    60a6:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    60a8:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    60aa:	ab04      	add	r3, sp, #16
    60ac:	1cde      	adds	r6, r3, #3
    60ae:	2101      	movs	r1, #1
    60b0:	0030      	movs	r0, r6
    60b2:	47c0      	blx	r8
    60b4:	1e05      	subs	r5, r0, #0
    60b6:	d1c1      	bne.n	603c <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    60b8:	7833      	ldrb	r3, [r6, #0]
    60ba:	091b      	lsrs	r3, r3, #4
    60bc:	2b0f      	cmp	r3, #15
    60be:	d0d2      	beq.n	6066 <spi_data_read+0x52>
    60c0:	3c01      	subs	r4, #1
    60c2:	b224      	sxth	r4, r4
		} while (retry--);
    60c4:	1c63      	adds	r3, r4, #1
    60c6:	d1f2      	bne.n	60ae <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    60c8:	22c1      	movs	r2, #193	; 0xc1
    60ca:	0092      	lsls	r2, r2, #2
    60cc:	4917      	ldr	r1, [pc, #92]	; (612c <spi_data_read+0x118>)
    60ce:	4818      	ldr	r0, [pc, #96]	; (6130 <spi_data_read+0x11c>)
    60d0:	4c18      	ldr	r4, [pc, #96]	; (6134 <spi_data_read+0x120>)
    60d2:	47a0      	blx	r4
    60d4:	ab04      	add	r3, sp, #16
    60d6:	78d9      	ldrb	r1, [r3, #3]
    60d8:	481b      	ldr	r0, [pc, #108]	; (6148 <spi_data_read+0x134>)
    60da:	47a0      	blx	r4
    60dc:	200d      	movs	r0, #13
    60de:	4b18      	ldr	r3, [pc, #96]	; (6140 <spi_data_read+0x12c>)
    60e0:	4798      	blx	r3
			break;
    60e2:	e7b8      	b.n	6056 <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    60e4:	4a19      	ldr	r2, [pc, #100]	; (614c <spi_data_read+0x138>)
    60e6:	4911      	ldr	r1, [pc, #68]	; (612c <spi_data_read+0x118>)
    60e8:	4811      	ldr	r0, [pc, #68]	; (6130 <spi_data_read+0x11c>)
    60ea:	4b12      	ldr	r3, [pc, #72]	; (6134 <spi_data_read+0x120>)
    60ec:	4798      	blx	r3
    60ee:	4818      	ldr	r0, [pc, #96]	; (6150 <spi_data_read+0x13c>)
    60f0:	4b12      	ldr	r3, [pc, #72]	; (613c <spi_data_read+0x128>)
    60f2:	4798      	blx	r3
    60f4:	200d      	movs	r0, #13
    60f6:	4b12      	ldr	r3, [pc, #72]	; (6140 <spi_data_read+0x12c>)
    60f8:	4798      	blx	r3
			break;
    60fa:	e7ac      	b.n	6056 <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    60fc:	2102      	movs	r1, #2
    60fe:	a805      	add	r0, sp, #20
    6100:	4b09      	ldr	r3, [pc, #36]	; (6128 <spi_data_read+0x114>)
    6102:	4798      	blx	r3
    6104:	2800      	cmp	r0, #0
    6106:	d0bf      	beq.n	6088 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    6108:	22c6      	movs	r2, #198	; 0xc6
    610a:	0092      	lsls	r2, r2, #2
    610c:	4907      	ldr	r1, [pc, #28]	; (612c <spi_data_read+0x118>)
    610e:	4808      	ldr	r0, [pc, #32]	; (6130 <spi_data_read+0x11c>)
    6110:	4b08      	ldr	r3, [pc, #32]	; (6134 <spi_data_read+0x120>)
    6112:	4798      	blx	r3
    6114:	480f      	ldr	r0, [pc, #60]	; (6154 <spi_data_read+0x140>)
    6116:	4b09      	ldr	r3, [pc, #36]	; (613c <spi_data_read+0x128>)
    6118:	4798      	blx	r3
    611a:	200d      	movs	r0, #13
    611c:	4b08      	ldr	r3, [pc, #32]	; (6140 <spi_data_read+0x12c>)
    611e:	4798      	blx	r3
					result = N_FAIL;
    6120:	0025      	movs	r5, r4
					break;
    6122:	e798      	b.n	6056 <spi_data_read+0x42>
    6124:	2501      	movs	r5, #1
    6126:	e796      	b.n	6056 <spi_data_read+0x42>
    6128:	00005f21 	.word	0x00005f21
    612c:	0000f654 	.word	0x0000f654
    6130:	0000ee54 	.word	0x0000ee54
    6134:	0000d4d5 	.word	0x0000d4d5
    6138:	0000fb20 	.word	0x0000fb20
    613c:	0000d5f1 	.word	0x0000d5f1
    6140:	0000d509 	.word	0x0000d509
    6144:	20000470 	.word	0x20000470
    6148:	0000fb54 	.word	0x0000fb54
    614c:	0000030d 	.word	0x0000030d
    6150:	0000fb84 	.word	0x0000fb84
    6154:	0000fbb4 	.word	0x0000fbb4

00006158 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    6158:	b5f0      	push	{r4, r5, r6, r7, lr}
    615a:	46d6      	mov	lr, sl
    615c:	464f      	mov	r7, r9
    615e:	4646      	mov	r6, r8
    6160:	b5c0      	push	{r6, r7, lr}
    6162:	b086      	sub	sp, #24
    6164:	9003      	str	r0, [sp, #12]
    6166:	9104      	str	r1, [sp, #16]
    6168:	2830      	cmp	r0, #48	; 0x30
    616a:	d80f      	bhi.n	618c <spi_write_reg+0x34>
    616c:	4b30      	ldr	r3, [pc, #192]	; (6230 <spi_write_reg+0xd8>)
    616e:	781f      	ldrb	r7, [r3, #0]
    6170:	b2fb      	uxtb	r3, r7
    6172:	9305      	str	r3, [sp, #20]
    6174:	2300      	movs	r3, #0
    6176:	2230      	movs	r2, #48	; 0x30
    6178:	9903      	ldr	r1, [sp, #12]
    617a:	428a      	cmp	r2, r1
    617c:	415b      	adcs	r3, r3
    617e:	b2db      	uxtb	r3, r3
    6180:	469a      	mov	sl, r3
    6182:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    6184:	4b2b      	ldr	r3, [pc, #172]	; (6234 <spi_write_reg+0xdc>)
    6186:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    6188:	46d1      	mov	r9, sl
    618a:	e033      	b.n	61f4 <spi_write_reg+0x9c>
    618c:	4b2a      	ldr	r3, [pc, #168]	; (6238 <spi_write_reg+0xe0>)
    618e:	781f      	ldrb	r7, [r3, #0]
    6190:	e7ee      	b.n	6170 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    6192:	9805      	ldr	r0, [sp, #20]
    6194:	4b29      	ldr	r3, [pc, #164]	; (623c <spi_write_reg+0xe4>)
    6196:	4798      	blx	r3
    6198:	0004      	movs	r4, r0
	if (result != N_OK) {
    619a:	2801      	cmp	r0, #1
    619c:	d041      	beq.n	6222 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    619e:	4a28      	ldr	r2, [pc, #160]	; (6240 <spi_write_reg+0xe8>)
    61a0:	4928      	ldr	r1, [pc, #160]	; (6244 <spi_write_reg+0xec>)
    61a2:	4829      	ldr	r0, [pc, #164]	; (6248 <spi_write_reg+0xf0>)
    61a4:	4e29      	ldr	r6, [pc, #164]	; (624c <spi_write_reg+0xf4>)
    61a6:	47b0      	blx	r6
    61a8:	9903      	ldr	r1, [sp, #12]
    61aa:	4829      	ldr	r0, [pc, #164]	; (6250 <spi_write_reg+0xf8>)
    61ac:	47b0      	blx	r6
    61ae:	200d      	movs	r0, #13
    61b0:	4b28      	ldr	r3, [pc, #160]	; (6254 <spi_write_reg+0xfc>)
    61b2:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    61b4:	2001      	movs	r0, #1
    61b6:	4e28      	ldr	r6, [pc, #160]	; (6258 <spi_write_reg+0x100>)
    61b8:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    61ba:	2300      	movs	r3, #0
    61bc:	9300      	str	r3, [sp, #0]
    61be:	2200      	movs	r2, #0
    61c0:	2100      	movs	r1, #0
    61c2:	20cf      	movs	r0, #207	; 0xcf
    61c4:	4f1b      	ldr	r7, [pc, #108]	; (6234 <spi_write_reg+0xdc>)
    61c6:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    61c8:	20cf      	movs	r0, #207	; 0xcf
    61ca:	4b1c      	ldr	r3, [pc, #112]	; (623c <spi_write_reg+0xe4>)
    61cc:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    61ce:	22ea      	movs	r2, #234	; 0xea
    61d0:	0092      	lsls	r2, r2, #2
    61d2:	491c      	ldr	r1, [pc, #112]	; (6244 <spi_write_reg+0xec>)
    61d4:	481c      	ldr	r0, [pc, #112]	; (6248 <spi_write_reg+0xf0>)
    61d6:	4f1d      	ldr	r7, [pc, #116]	; (624c <spi_write_reg+0xf4>)
    61d8:	47b8      	blx	r7
    61da:	9b04      	ldr	r3, [sp, #16]
    61dc:	9a03      	ldr	r2, [sp, #12]
    61de:	0029      	movs	r1, r5
    61e0:	481e      	ldr	r0, [pc, #120]	; (625c <spi_write_reg+0x104>)
    61e2:	47b8      	blx	r7
    61e4:	200d      	movs	r0, #13
    61e6:	4b1b      	ldr	r3, [pc, #108]	; (6254 <spi_write_reg+0xfc>)
    61e8:	4798      	blx	r3
		nm_bsp_sleep(1);
    61ea:	2001      	movs	r0, #1
    61ec:	47b0      	blx	r6
    61ee:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    61f0:	2d00      	cmp	r5, #0
    61f2:	d016      	beq.n	6222 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    61f4:	464b      	mov	r3, r9
    61f6:	9300      	str	r3, [sp, #0]
    61f8:	2304      	movs	r3, #4
    61fa:	9a04      	ldr	r2, [sp, #16]
    61fc:	9f03      	ldr	r7, [sp, #12]
    61fe:	0039      	movs	r1, r7
    6200:	9805      	ldr	r0, [sp, #20]
    6202:	47c0      	blx	r8
    6204:	0004      	movs	r4, r0
	if (result != N_OK) {
    6206:	2801      	cmp	r0, #1
    6208:	d0c3      	beq.n	6192 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    620a:	4a15      	ldr	r2, [pc, #84]	; (6260 <spi_write_reg+0x108>)
    620c:	490d      	ldr	r1, [pc, #52]	; (6244 <spi_write_reg+0xec>)
    620e:	480e      	ldr	r0, [pc, #56]	; (6248 <spi_write_reg+0xf0>)
    6210:	4e0e      	ldr	r6, [pc, #56]	; (624c <spi_write_reg+0xf4>)
    6212:	47b0      	blx	r6
    6214:	0039      	movs	r1, r7
    6216:	4813      	ldr	r0, [pc, #76]	; (6264 <spi_write_reg+0x10c>)
    6218:	47b0      	blx	r6
    621a:	200d      	movs	r0, #13
    621c:	4b0d      	ldr	r3, [pc, #52]	; (6254 <spi_write_reg+0xfc>)
    621e:	4798      	blx	r3
		goto _FAIL_;
    6220:	e7c8      	b.n	61b4 <spi_write_reg+0x5c>
	}

	return result;
}
    6222:	0020      	movs	r0, r4
    6224:	b006      	add	sp, #24
    6226:	bc1c      	pop	{r2, r3, r4}
    6228:	4690      	mov	r8, r2
    622a:	4699      	mov	r9, r3
    622c:	46a2      	mov	sl, r4
    622e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6230:	0000f62c 	.word	0x0000f62c
    6234:	00005da1 	.word	0x00005da1
    6238:	0000f62d 	.word	0x0000f62d
    623c:	00005f41 	.word	0x00005f41
    6240:	00000395 	.word	0x00000395
    6244:	0000f674 	.word	0x0000f674
    6248:	0000ee54 	.word	0x0000ee54
    624c:	0000d4d5 	.word	0x0000d4d5
    6250:	0000fcac 	.word	0x0000fcac
    6254:	0000d509 	.word	0x0000d509
    6258:	0000391d 	.word	0x0000391d
    625c:	0000fce4 	.word	0x0000fce4
    6260:	0000038f 	.word	0x0000038f
    6264:	0000fc80 	.word	0x0000fc80

00006268 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    6268:	b5f0      	push	{r4, r5, r6, r7, lr}
    626a:	46de      	mov	lr, fp
    626c:	4657      	mov	r7, sl
    626e:	464e      	mov	r6, r9
    6270:	4645      	mov	r5, r8
    6272:	b5e0      	push	{r5, r6, r7, lr}
    6274:	b087      	sub	sp, #28
    6276:	9002      	str	r0, [sp, #8]
    6278:	468b      	mov	fp, r1
    627a:	28ff      	cmp	r0, #255	; 0xff
    627c:	d80f      	bhi.n	629e <spi_read_reg+0x36>
    627e:	4b41      	ldr	r3, [pc, #260]	; (6384 <spi_read_reg+0x11c>)
    6280:	781f      	ldrb	r7, [r3, #0]
    6282:	b2fb      	uxtb	r3, r7
    6284:	9303      	str	r3, [sp, #12]
    6286:	2300      	movs	r3, #0
    6288:	22ff      	movs	r2, #255	; 0xff
    628a:	9902      	ldr	r1, [sp, #8]
    628c:	428a      	cmp	r2, r1
    628e:	415b      	adcs	r3, r3
    6290:	b2db      	uxtb	r3, r3
    6292:	469a      	mov	sl, r3
    6294:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    6296:	4b3c      	ldr	r3, [pc, #240]	; (6388 <spi_read_reg+0x120>)
    6298:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianness issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    629a:	46d1      	mov	r9, sl
    629c:	e031      	b.n	6302 <spi_read_reg+0x9a>
    629e:	4b3b      	ldr	r3, [pc, #236]	; (638c <spi_read_reg+0x124>)
    62a0:	781f      	ldrb	r7, [r3, #0]
    62a2:	e7ee      	b.n	6282 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    62a4:	9803      	ldr	r0, [sp, #12]
    62a6:	4b3a      	ldr	r3, [pc, #232]	; (6390 <spi_read_reg+0x128>)
    62a8:	4798      	blx	r3
    62aa:	0004      	movs	r4, r0
	if (result != N_OK) {
    62ac:	2801      	cmp	r0, #1
    62ae:	d040      	beq.n	6332 <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    62b0:	4a38      	ldr	r2, [pc, #224]	; (6394 <spi_read_reg+0x12c>)
    62b2:	4939      	ldr	r1, [pc, #228]	; (6398 <spi_read_reg+0x130>)
    62b4:	4839      	ldr	r0, [pc, #228]	; (639c <spi_read_reg+0x134>)
    62b6:	4e3a      	ldr	r6, [pc, #232]	; (63a0 <spi_read_reg+0x138>)
    62b8:	47b0      	blx	r6
    62ba:	9902      	ldr	r1, [sp, #8]
    62bc:	4839      	ldr	r0, [pc, #228]	; (63a4 <spi_read_reg+0x13c>)
    62be:	47b0      	blx	r6
    62c0:	200d      	movs	r0, #13
    62c2:	4b39      	ldr	r3, [pc, #228]	; (63a8 <spi_read_reg+0x140>)
    62c4:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    62c6:	2001      	movs	r0, #1
    62c8:	4e38      	ldr	r6, [pc, #224]	; (63ac <spi_read_reg+0x144>)
    62ca:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    62cc:	2300      	movs	r3, #0
    62ce:	9300      	str	r3, [sp, #0]
    62d0:	2200      	movs	r2, #0
    62d2:	2100      	movs	r1, #0
    62d4:	20cf      	movs	r0, #207	; 0xcf
    62d6:	4f2c      	ldr	r7, [pc, #176]	; (6388 <spi_read_reg+0x120>)
    62d8:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    62da:	20cf      	movs	r0, #207	; 0xcf
    62dc:	4b2c      	ldr	r3, [pc, #176]	; (6390 <spi_read_reg+0x128>)
    62de:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    62e0:	4a33      	ldr	r2, [pc, #204]	; (63b0 <spi_read_reg+0x148>)
    62e2:	492d      	ldr	r1, [pc, #180]	; (6398 <spi_read_reg+0x130>)
    62e4:	482d      	ldr	r0, [pc, #180]	; (639c <spi_read_reg+0x134>)
    62e6:	4f2e      	ldr	r7, [pc, #184]	; (63a0 <spi_read_reg+0x138>)
    62e8:	47b8      	blx	r7
    62ea:	9a02      	ldr	r2, [sp, #8]
    62ec:	0029      	movs	r1, r5
    62ee:	4831      	ldr	r0, [pc, #196]	; (63b4 <spi_read_reg+0x14c>)
    62f0:	47b8      	blx	r7
    62f2:	200d      	movs	r0, #13
    62f4:	4b2c      	ldr	r3, [pc, #176]	; (63a8 <spi_read_reg+0x140>)
    62f6:	4798      	blx	r3
		nm_bsp_sleep(1);
    62f8:	2001      	movs	r0, #1
    62fa:	47b0      	blx	r6
    62fc:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    62fe:	2d00      	cmp	r5, #0
    6300:	d038      	beq.n	6374 <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    6302:	464b      	mov	r3, r9
    6304:	9300      	str	r3, [sp, #0]
    6306:	2304      	movs	r3, #4
    6308:	2200      	movs	r2, #0
    630a:	9f02      	ldr	r7, [sp, #8]
    630c:	0039      	movs	r1, r7
    630e:	9803      	ldr	r0, [sp, #12]
    6310:	47c0      	blx	r8
    6312:	0004      	movs	r4, r0
	if (result != N_OK) {
    6314:	2801      	cmp	r0, #1
    6316:	d0c5      	beq.n	62a4 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    6318:	2282      	movs	r2, #130	; 0x82
    631a:	00d2      	lsls	r2, r2, #3
    631c:	491e      	ldr	r1, [pc, #120]	; (6398 <spi_read_reg+0x130>)
    631e:	481f      	ldr	r0, [pc, #124]	; (639c <spi_read_reg+0x134>)
    6320:	4e1f      	ldr	r6, [pc, #124]	; (63a0 <spi_read_reg+0x138>)
    6322:	47b0      	blx	r6
    6324:	0039      	movs	r1, r7
    6326:	4824      	ldr	r0, [pc, #144]	; (63b8 <spi_read_reg+0x150>)
    6328:	47b0      	blx	r6
    632a:	200d      	movs	r0, #13
    632c:	4b1e      	ldr	r3, [pc, #120]	; (63a8 <spi_read_reg+0x140>)
    632e:	4798      	blx	r3
		goto _FAIL_;
    6330:	e7c9      	b.n	62c6 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    6332:	464a      	mov	r2, r9
    6334:	2104      	movs	r1, #4
    6336:	a805      	add	r0, sp, #20
    6338:	4b20      	ldr	r3, [pc, #128]	; (63bc <spi_read_reg+0x154>)
    633a:	4798      	blx	r3
    633c:	0004      	movs	r4, r0
	if (result != N_OK) {
    633e:	2801      	cmp	r0, #1
    6340:	d00b      	beq.n	635a <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    6342:	4a1f      	ldr	r2, [pc, #124]	; (63c0 <spi_read_reg+0x158>)
    6344:	4914      	ldr	r1, [pc, #80]	; (6398 <spi_read_reg+0x130>)
    6346:	4815      	ldr	r0, [pc, #84]	; (639c <spi_read_reg+0x134>)
    6348:	4b15      	ldr	r3, [pc, #84]	; (63a0 <spi_read_reg+0x138>)
    634a:	4798      	blx	r3
    634c:	481d      	ldr	r0, [pc, #116]	; (63c4 <spi_read_reg+0x15c>)
    634e:	4b1e      	ldr	r3, [pc, #120]	; (63c8 <spi_read_reg+0x160>)
    6350:	4798      	blx	r3
    6352:	200d      	movs	r0, #13
    6354:	4b14      	ldr	r3, [pc, #80]	; (63a8 <spi_read_reg+0x140>)
    6356:	4798      	blx	r3
		goto _FAIL_;
    6358:	e7b5      	b.n	62c6 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    635a:	aa05      	add	r2, sp, #20
    635c:	7853      	ldrb	r3, [r2, #1]
    635e:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    6360:	7891      	ldrb	r1, [r2, #2]
    6362:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    6364:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    6366:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    6368:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    636a:	78d2      	ldrb	r2, [r2, #3]
    636c:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    636e:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    6370:	465a      	mov	r2, fp
    6372:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    6374:	0020      	movs	r0, r4
    6376:	b007      	add	sp, #28
    6378:	bc3c      	pop	{r2, r3, r4, r5}
    637a:	4690      	mov	r8, r2
    637c:	4699      	mov	r9, r3
    637e:	46a2      	mov	sl, r4
    6380:	46ab      	mov	fp, r5
    6382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6384:	0000f62e 	.word	0x0000f62e
    6388:	00005da1 	.word	0x00005da1
    638c:	0000f62f 	.word	0x0000f62f
    6390:	00005f41 	.word	0x00005f41
    6394:	00000416 	.word	0x00000416
    6398:	0000f694 	.word	0x0000f694
    639c:	0000ee54 	.word	0x0000ee54
    63a0:	0000d4d5 	.word	0x0000d4d5
    63a4:	0000fc14 	.word	0x0000fc14
    63a8:	0000d509 	.word	0x0000d509
    63ac:	0000391d 	.word	0x0000391d
    63b0:	00000435 	.word	0x00000435
    63b4:	0000fc68 	.word	0x0000fc68
    63b8:	0000fbe8 	.word	0x0000fbe8
    63bc:	00006015 	.word	0x00006015
    63c0:	0000041d 	.word	0x0000041d
    63c4:	0000fc48 	.word	0x0000fc48
    63c8:	0000d5f1 	.word	0x0000d5f1

000063cc <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    63cc:	b510      	push	{r4, lr}
    63ce:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    63d0:	2300      	movs	r3, #0
    63d2:	9300      	str	r3, [sp, #0]
    63d4:	2200      	movs	r2, #0
    63d6:	2100      	movs	r1, #0
    63d8:	20cf      	movs	r0, #207	; 0xcf
    63da:	4c04      	ldr	r4, [pc, #16]	; (63ec <nm_spi_reset+0x20>)
    63dc:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    63de:	20cf      	movs	r0, #207	; 0xcf
    63e0:	4b03      	ldr	r3, [pc, #12]	; (63f0 <nm_spi_reset+0x24>)
    63e2:	4798      	blx	r3
	return M2M_SUCCESS;
}
    63e4:	2000      	movs	r0, #0
    63e6:	b002      	add	sp, #8
    63e8:	bd10      	pop	{r4, pc}
    63ea:	46c0      	nop			; (mov r8, r8)
    63ec:	00005da1 	.word	0x00005da1
    63f0:	00005f41 	.word	0x00005f41

000063f4 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    63f4:	2200      	movs	r2, #0
    63f6:	4b02      	ldr	r3, [pc, #8]	; (6400 <nm_spi_deinit+0xc>)
    63f8:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    63fa:	2000      	movs	r0, #0
    63fc:	4770      	bx	lr
    63fe:	46c0      	nop			; (mov r8, r8)
    6400:	20000470 	.word	0x20000470

00006404 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    6404:	b500      	push	{lr}
    6406:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    6408:	a901      	add	r1, sp, #4
    640a:	4b02      	ldr	r3, [pc, #8]	; (6414 <nm_spi_read_reg+0x10>)
    640c:	4798      	blx	r3

	return u32Val;
}
    640e:	9801      	ldr	r0, [sp, #4]
    6410:	b003      	add	sp, #12
    6412:	bd00      	pop	{pc}
    6414:	00006269 	.word	0x00006269

00006418 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    6418:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    641a:	4b04      	ldr	r3, [pc, #16]	; (642c <nm_spi_read_reg_with_ret+0x14>)
    641c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    641e:	2300      	movs	r3, #0
    6420:	2801      	cmp	r0, #1
    6422:	d101      	bne.n	6428 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    6424:	0018      	movs	r0, r3
    6426:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    6428:	3b06      	subs	r3, #6
    642a:	e7fb      	b.n	6424 <nm_spi_read_reg_with_ret+0xc>
    642c:	00006269 	.word	0x00006269

00006430 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    6430:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    6432:	4b04      	ldr	r3, [pc, #16]	; (6444 <nm_spi_write_reg+0x14>)
    6434:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    6436:	2300      	movs	r3, #0
    6438:	2801      	cmp	r0, #1
    643a:	d101      	bne.n	6440 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    643c:	0018      	movs	r0, r3
    643e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    6440:	3b06      	subs	r3, #6
    6442:	e7fb      	b.n	643c <nm_spi_write_reg+0xc>
    6444:	00006159 	.word	0x00006159

00006448 <nm_spi_init>:
{
    6448:	b510      	push	{r4, lr}
    644a:	b082      	sub	sp, #8
	uint32 reg = 0;
    644c:	2300      	movs	r3, #0
    644e:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    6450:	4a35      	ldr	r2, [pc, #212]	; (6528 <nm_spi_init+0xe0>)
    6452:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    6454:	4669      	mov	r1, sp
    6456:	4835      	ldr	r0, [pc, #212]	; (652c <nm_spi_init+0xe4>)
    6458:	4b35      	ldr	r3, [pc, #212]	; (6530 <nm_spi_init+0xe8>)
    645a:	4798      	blx	r3
    645c:	2800      	cmp	r0, #0
    645e:	d028      	beq.n	64b2 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    6460:	4b31      	ldr	r3, [pc, #196]	; (6528 <nm_spi_init+0xe0>)
    6462:	781b      	ldrb	r3, [r3, #0]
    6464:	2b00      	cmp	r3, #0
    6466:	d10d      	bne.n	6484 <nm_spi_init+0x3c>
		reg &= ~0x70;
    6468:	337c      	adds	r3, #124	; 0x7c
    646a:	9900      	ldr	r1, [sp, #0]
    646c:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    646e:	3b2c      	subs	r3, #44	; 0x2c
    6470:	4319      	orrs	r1, r3
    6472:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    6474:	482d      	ldr	r0, [pc, #180]	; (652c <nm_spi_init+0xe4>)
    6476:	4b2f      	ldr	r3, [pc, #188]	; (6534 <nm_spi_init+0xec>)
    6478:	4798      	blx	r3
    647a:	1e04      	subs	r4, r0, #0
    647c:	d03a      	beq.n	64f4 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    647e:	2201      	movs	r2, #1
    6480:	4b29      	ldr	r3, [pc, #164]	; (6528 <nm_spi_init+0xe0>)
    6482:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    6484:	a901      	add	r1, sp, #4
    6486:	2080      	movs	r0, #128	; 0x80
    6488:	0140      	lsls	r0, r0, #5
    648a:	4b29      	ldr	r3, [pc, #164]	; (6530 <nm_spi_init+0xe8>)
    648c:	4798      	blx	r3
    648e:	2800      	cmp	r0, #0
    6490:	d03c      	beq.n	650c <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    6492:	4c26      	ldr	r4, [pc, #152]	; (652c <nm_spi_init+0xe4>)
    6494:	0020      	movs	r0, r4
    6496:	4b28      	ldr	r3, [pc, #160]	; (6538 <nm_spi_init+0xf0>)
    6498:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    649a:	2370      	movs	r3, #112	; 0x70
    649c:	0001      	movs	r1, r0
    649e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    64a0:	2050      	movs	r0, #80	; 0x50
    64a2:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    64a4:	0020      	movs	r0, r4
    64a6:	4b25      	ldr	r3, [pc, #148]	; (653c <nm_spi_init+0xf4>)
    64a8:	4798      	blx	r3
	return M2M_SUCCESS;
    64aa:	2400      	movs	r4, #0
}
    64ac:	0020      	movs	r0, r4
    64ae:	b002      	add	sp, #8
    64b0:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    64b2:	2201      	movs	r2, #1
    64b4:	4b1c      	ldr	r3, [pc, #112]	; (6528 <nm_spi_init+0xe0>)
    64b6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retrying with CRC off...\n");
    64b8:	2298      	movs	r2, #152	; 0x98
    64ba:	00d2      	lsls	r2, r2, #3
    64bc:	4920      	ldr	r1, [pc, #128]	; (6540 <nm_spi_init+0xf8>)
    64be:	4821      	ldr	r0, [pc, #132]	; (6544 <nm_spi_init+0xfc>)
    64c0:	4b21      	ldr	r3, [pc, #132]	; (6548 <nm_spi_init+0x100>)
    64c2:	4798      	blx	r3
    64c4:	4821      	ldr	r0, [pc, #132]	; (654c <nm_spi_init+0x104>)
    64c6:	4b22      	ldr	r3, [pc, #136]	; (6550 <nm_spi_init+0x108>)
    64c8:	4798      	blx	r3
    64ca:	200d      	movs	r0, #13
    64cc:	4b21      	ldr	r3, [pc, #132]	; (6554 <nm_spi_init+0x10c>)
    64ce:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    64d0:	4669      	mov	r1, sp
    64d2:	4816      	ldr	r0, [pc, #88]	; (652c <nm_spi_init+0xe4>)
    64d4:	4b16      	ldr	r3, [pc, #88]	; (6530 <nm_spi_init+0xe8>)
    64d6:	4798      	blx	r3
    64d8:	1e04      	subs	r4, r0, #0
    64da:	d1c1      	bne.n	6460 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    64dc:	4a1e      	ldr	r2, [pc, #120]	; (6558 <nm_spi_init+0x110>)
    64de:	4918      	ldr	r1, [pc, #96]	; (6540 <nm_spi_init+0xf8>)
    64e0:	4818      	ldr	r0, [pc, #96]	; (6544 <nm_spi_init+0xfc>)
    64e2:	4b19      	ldr	r3, [pc, #100]	; (6548 <nm_spi_init+0x100>)
    64e4:	4798      	blx	r3
    64e6:	481d      	ldr	r0, [pc, #116]	; (655c <nm_spi_init+0x114>)
    64e8:	4b19      	ldr	r3, [pc, #100]	; (6550 <nm_spi_init+0x108>)
    64ea:	4798      	blx	r3
    64ec:	200d      	movs	r0, #13
    64ee:	4b19      	ldr	r3, [pc, #100]	; (6554 <nm_spi_init+0x10c>)
    64f0:	4798      	blx	r3
			return 0;
    64f2:	e7db      	b.n	64ac <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    64f4:	4a1a      	ldr	r2, [pc, #104]	; (6560 <nm_spi_init+0x118>)
    64f6:	4912      	ldr	r1, [pc, #72]	; (6540 <nm_spi_init+0xf8>)
    64f8:	4812      	ldr	r0, [pc, #72]	; (6544 <nm_spi_init+0xfc>)
    64fa:	4b13      	ldr	r3, [pc, #76]	; (6548 <nm_spi_init+0x100>)
    64fc:	4798      	blx	r3
    64fe:	4819      	ldr	r0, [pc, #100]	; (6564 <nm_spi_init+0x11c>)
    6500:	4b13      	ldr	r3, [pc, #76]	; (6550 <nm_spi_init+0x108>)
    6502:	4798      	blx	r3
    6504:	200d      	movs	r0, #13
    6506:	4b13      	ldr	r3, [pc, #76]	; (6554 <nm_spi_init+0x10c>)
    6508:	4798      	blx	r3
			return 0;
    650a:	e7cf      	b.n	64ac <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    650c:	4a16      	ldr	r2, [pc, #88]	; (6568 <nm_spi_init+0x120>)
    650e:	490c      	ldr	r1, [pc, #48]	; (6540 <nm_spi_init+0xf8>)
    6510:	480c      	ldr	r0, [pc, #48]	; (6544 <nm_spi_init+0xfc>)
    6512:	4b0d      	ldr	r3, [pc, #52]	; (6548 <nm_spi_init+0x100>)
    6514:	4798      	blx	r3
    6516:	4815      	ldr	r0, [pc, #84]	; (656c <nm_spi_init+0x124>)
    6518:	4b0d      	ldr	r3, [pc, #52]	; (6550 <nm_spi_init+0x108>)
    651a:	4798      	blx	r3
    651c:	200d      	movs	r0, #13
    651e:	4b0d      	ldr	r3, [pc, #52]	; (6554 <nm_spi_init+0x10c>)
    6520:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    6522:	2406      	movs	r4, #6
    6524:	4264      	negs	r4, r4
    6526:	e7c1      	b.n	64ac <nm_spi_init+0x64>
    6528:	20000470 	.word	0x20000470
    652c:	0000e824 	.word	0x0000e824
    6530:	00006269 	.word	0x00006269
    6534:	00006159 	.word	0x00006159
    6538:	00006405 	.word	0x00006405
    653c:	00006431 	.word	0x00006431
    6540:	0000f6b0 	.word	0x0000f6b0
    6544:	0000ee54 	.word	0x0000ee54
    6548:	0000d4d5 	.word	0x0000d4d5
    654c:	0000f7bc 	.word	0x0000f7bc
    6550:	0000d5f1 	.word	0x0000d5f1
    6554:	0000d509 	.word	0x0000d509
    6558:	000004c3 	.word	0x000004c3
    655c:	0000f80c 	.word	0x0000f80c
    6560:	000004cd 	.word	0x000004cd
    6564:	0000f838 	.word	0x0000f838
    6568:	000004d7 	.word	0x000004d7
    656c:	0000f86c 	.word	0x0000f86c

00006570 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6570:	b5f0      	push	{r4, r5, r6, r7, lr}
    6572:	46de      	mov	lr, fp
    6574:	4657      	mov	r7, sl
    6576:	464e      	mov	r6, r9
    6578:	4645      	mov	r5, r8
    657a:	b5e0      	push	{r5, r6, r7, lr}
    657c:	b087      	sub	sp, #28
    657e:	9002      	str	r0, [sp, #8]
    6580:	9103      	str	r1, [sp, #12]
    6582:	0016      	movs	r6, r2
    6584:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    6586:	2300      	movs	r3, #0
    6588:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    658a:	2400      	movs	r4, #0
    658c:	4b3e      	ldr	r3, [pc, #248]	; (6688 <nm_spi_read_block+0x118>)
    658e:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    6590:	46a9      	mov	r9, r5
    6592:	e037      	b.n	6604 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    6594:	2301      	movs	r3, #1
    6596:	469b      	mov	fp, r3
		size = 2;
    6598:	3601      	adds	r6, #1
    659a:	e035      	b.n	6608 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    659c:	20c8      	movs	r0, #200	; 0xc8
    659e:	4b3b      	ldr	r3, [pc, #236]	; (668c <nm_spi_read_block+0x11c>)
    65a0:	4798      	blx	r3
	if (result != N_OK) {
    65a2:	2801      	cmp	r0, #1
    65a4:	d045      	beq.n	6632 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    65a6:	4a3a      	ldr	r2, [pc, #232]	; (6690 <nm_spi_read_block+0x120>)
    65a8:	493a      	ldr	r1, [pc, #232]	; (6694 <nm_spi_read_block+0x124>)
    65aa:	483b      	ldr	r0, [pc, #236]	; (6698 <nm_spi_read_block+0x128>)
    65ac:	4f3b      	ldr	r7, [pc, #236]	; (669c <nm_spi_read_block+0x12c>)
    65ae:	47b8      	blx	r7
    65b0:	9902      	ldr	r1, [sp, #8]
    65b2:	483b      	ldr	r0, [pc, #236]	; (66a0 <nm_spi_read_block+0x130>)
    65b4:	47b8      	blx	r7
    65b6:	200d      	movs	r0, #13
    65b8:	4b3a      	ldr	r3, [pc, #232]	; (66a4 <nm_spi_read_block+0x134>)
    65ba:	4798      	blx	r3
		nm_bsp_sleep(1);
    65bc:	2001      	movs	r0, #1
    65be:	4f3a      	ldr	r7, [pc, #232]	; (66a8 <nm_spi_read_block+0x138>)
    65c0:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    65c2:	9400      	str	r4, [sp, #0]
    65c4:	0023      	movs	r3, r4
    65c6:	0022      	movs	r2, r4
    65c8:	0021      	movs	r1, r4
    65ca:	20cf      	movs	r0, #207	; 0xcf
    65cc:	4d2e      	ldr	r5, [pc, #184]	; (6688 <nm_spi_read_block+0x118>)
    65ce:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    65d0:	20cf      	movs	r0, #207	; 0xcf
    65d2:	4b2e      	ldr	r3, [pc, #184]	; (668c <nm_spi_read_block+0x11c>)
    65d4:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    65d6:	4a35      	ldr	r2, [pc, #212]	; (66ac <nm_spi_read_block+0x13c>)
    65d8:	492e      	ldr	r1, [pc, #184]	; (6694 <nm_spi_read_block+0x124>)
    65da:	482f      	ldr	r0, [pc, #188]	; (6698 <nm_spi_read_block+0x128>)
    65dc:	4b2f      	ldr	r3, [pc, #188]	; (669c <nm_spi_read_block+0x12c>)
    65de:	469a      	mov	sl, r3
    65e0:	4798      	blx	r3
    65e2:	0033      	movs	r3, r6
    65e4:	9a02      	ldr	r2, [sp, #8]
    65e6:	4649      	mov	r1, r9
    65e8:	4831      	ldr	r0, [pc, #196]	; (66b0 <nm_spi_read_block+0x140>)
    65ea:	47d0      	blx	sl
    65ec:	200d      	movs	r0, #13
    65ee:	4b2d      	ldr	r3, [pc, #180]	; (66a4 <nm_spi_read_block+0x134>)
    65f0:	4798      	blx	r3
		nm_bsp_sleep(1);
    65f2:	2001      	movs	r0, #1
    65f4:	47b8      	blx	r7
    65f6:	2301      	movs	r3, #1
    65f8:	425b      	negs	r3, r3
    65fa:	469c      	mov	ip, r3
    65fc:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    65fe:	464b      	mov	r3, r9
    6600:	2b00      	cmp	r3, #0
    6602:	d038      	beq.n	6676 <nm_spi_read_block+0x106>
	if (size == 1)
    6604:	2e01      	cmp	r6, #1
    6606:	d0c5      	beq.n	6594 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    6608:	9400      	str	r4, [sp, #0]
    660a:	0033      	movs	r3, r6
    660c:	0022      	movs	r2, r4
    660e:	9d02      	ldr	r5, [sp, #8]
    6610:	0029      	movs	r1, r5
    6612:	20c8      	movs	r0, #200	; 0xc8
    6614:	47c0      	blx	r8
	if (result != N_OK) {
    6616:	2801      	cmp	r0, #1
    6618:	d0c0      	beq.n	659c <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    661a:	4a26      	ldr	r2, [pc, #152]	; (66b4 <nm_spi_read_block+0x144>)
    661c:	491d      	ldr	r1, [pc, #116]	; (6694 <nm_spi_read_block+0x124>)
    661e:	481e      	ldr	r0, [pc, #120]	; (6698 <nm_spi_read_block+0x128>)
    6620:	4f1e      	ldr	r7, [pc, #120]	; (669c <nm_spi_read_block+0x12c>)
    6622:	47b8      	blx	r7
    6624:	0029      	movs	r1, r5
    6626:	4824      	ldr	r0, [pc, #144]	; (66b8 <nm_spi_read_block+0x148>)
    6628:	47b8      	blx	r7
    662a:	200d      	movs	r0, #13
    662c:	4b1d      	ldr	r3, [pc, #116]	; (66a4 <nm_spi_read_block+0x134>)
    662e:	4798      	blx	r3
    6630:	e7c4      	b.n	65bc <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    6632:	465b      	mov	r3, fp
    6634:	2b00      	cmp	r3, #0
    6636:	d016      	beq.n	6666 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    6638:	af05      	add	r7, sp, #20
    663a:	0022      	movs	r2, r4
    663c:	0031      	movs	r1, r6
    663e:	0038      	movs	r0, r7
    6640:	4b1e      	ldr	r3, [pc, #120]	; (66bc <nm_spi_read_block+0x14c>)
    6642:	4798      	blx	r3
		buf[0] = tmp[0];
    6644:	783b      	ldrb	r3, [r7, #0]
    6646:	9a03      	ldr	r2, [sp, #12]
    6648:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    664a:	2801      	cmp	r0, #1
    664c:	d011      	beq.n	6672 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    664e:	4a1c      	ldr	r2, [pc, #112]	; (66c0 <nm_spi_read_block+0x150>)
    6650:	4910      	ldr	r1, [pc, #64]	; (6694 <nm_spi_read_block+0x124>)
    6652:	4811      	ldr	r0, [pc, #68]	; (6698 <nm_spi_read_block+0x128>)
    6654:	4b11      	ldr	r3, [pc, #68]	; (669c <nm_spi_read_block+0x12c>)
    6656:	4798      	blx	r3
    6658:	481a      	ldr	r0, [pc, #104]	; (66c4 <nm_spi_read_block+0x154>)
    665a:	4b1b      	ldr	r3, [pc, #108]	; (66c8 <nm_spi_read_block+0x158>)
    665c:	4798      	blx	r3
    665e:	200d      	movs	r0, #13
    6660:	4b10      	ldr	r3, [pc, #64]	; (66a4 <nm_spi_read_block+0x134>)
    6662:	4798      	blx	r3
    6664:	e7aa      	b.n	65bc <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    6666:	0022      	movs	r2, r4
    6668:	0031      	movs	r1, r6
    666a:	9803      	ldr	r0, [sp, #12]
    666c:	4b13      	ldr	r3, [pc, #76]	; (66bc <nm_spi_read_block+0x14c>)
    666e:	4798      	blx	r3
    6670:	e7eb      	b.n	664a <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    6672:	2000      	movs	r0, #0
    6674:	e001      	b.n	667a <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    6676:	2006      	movs	r0, #6
    6678:	4240      	negs	r0, r0

	return s8Ret;
}
    667a:	b007      	add	sp, #28
    667c:	bc3c      	pop	{r2, r3, r4, r5}
    667e:	4690      	mov	r8, r2
    6680:	4699      	mov	r9, r3
    6682:	46a2      	mov	sl, r4
    6684:	46ab      	mov	fp, r5
    6686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6688:	00005da1 	.word	0x00005da1
    668c:	00005f41 	.word	0x00005f41
    6690:	0000045c 	.word	0x0000045c
    6694:	0000f6a4 	.word	0x0000f6a4
    6698:	0000ee54 	.word	0x0000ee54
    669c:	0000d4d5 	.word	0x0000d4d5
    66a0:	0000f8c0 	.word	0x0000f8c0
    66a4:	0000d509 	.word	0x0000d509
    66a8:	0000391d 	.word	0x0000391d
    66ac:	0000047d 	.word	0x0000047d
    66b0:	0000f920 	.word	0x0000f920
    66b4:	00000456 	.word	0x00000456
    66b8:	0000f890 	.word	0x0000f890
    66bc:	00006015 	.word	0x00006015
    66c0:	0000046c 	.word	0x0000046c
    66c4:	0000f8f8 	.word	0x0000f8f8
    66c8:	0000d5f1 	.word	0x0000d5f1

000066cc <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    66cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    66ce:	46de      	mov	lr, fp
    66d0:	4647      	mov	r7, r8
    66d2:	b580      	push	{r7, lr}
    66d4:	b089      	sub	sp, #36	; 0x24
    66d6:	9004      	str	r0, [sp, #16]
    66d8:	468b      	mov	fp, r1
    66da:	9203      	str	r2, [sp, #12]
    66dc:	260a      	movs	r6, #10
    66de:	2780      	movs	r7, #128	; 0x80
    66e0:	01bf      	lsls	r7, r7, #6
    66e2:	466b      	mov	r3, sp
    66e4:	82df      	strh	r7, [r3, #22]
    66e6:	0035      	movs	r5, r6
    66e8:	e02d      	b.n	6746 <nm_spi_write_block+0x7a>
		size = 2;
    66ea:	3301      	adds	r3, #1
    66ec:	9303      	str	r3, [sp, #12]
    66ee:	e02d      	b.n	674c <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    66f0:	4a82      	ldr	r2, [pc, #520]	; (68fc <nm_spi_write_block+0x230>)
    66f2:	4983      	ldr	r1, [pc, #524]	; (6900 <nm_spi_write_block+0x234>)
    66f4:	4883      	ldr	r0, [pc, #524]	; (6904 <nm_spi_write_block+0x238>)
    66f6:	4c84      	ldr	r4, [pc, #528]	; (6908 <nm_spi_write_block+0x23c>)
    66f8:	47a0      	blx	r4
    66fa:	0031      	movs	r1, r6
    66fc:	4883      	ldr	r0, [pc, #524]	; (690c <nm_spi_write_block+0x240>)
    66fe:	47a0      	blx	r4
    6700:	200d      	movs	r0, #13
    6702:	4b83      	ldr	r3, [pc, #524]	; (6910 <nm_spi_write_block+0x244>)
    6704:	4798      	blx	r3
		nm_bsp_sleep(1);
    6706:	2001      	movs	r0, #1
    6708:	4c82      	ldr	r4, [pc, #520]	; (6914 <nm_spi_write_block+0x248>)
    670a:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    670c:	2300      	movs	r3, #0
    670e:	9300      	str	r3, [sp, #0]
    6710:	2200      	movs	r2, #0
    6712:	2100      	movs	r1, #0
    6714:	20cf      	movs	r0, #207	; 0xcf
    6716:	4e80      	ldr	r6, [pc, #512]	; (6918 <nm_spi_write_block+0x24c>)
    6718:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    671a:	20cf      	movs	r0, #207	; 0xcf
    671c:	4b7f      	ldr	r3, [pc, #508]	; (691c <nm_spi_write_block+0x250>)
    671e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    6720:	4a7f      	ldr	r2, [pc, #508]	; (6920 <nm_spi_write_block+0x254>)
    6722:	4977      	ldr	r1, [pc, #476]	; (6900 <nm_spi_write_block+0x234>)
    6724:	4877      	ldr	r0, [pc, #476]	; (6904 <nm_spi_write_block+0x238>)
    6726:	4e78      	ldr	r6, [pc, #480]	; (6908 <nm_spi_write_block+0x23c>)
    6728:	47b0      	blx	r6
    672a:	9b03      	ldr	r3, [sp, #12]
    672c:	9a04      	ldr	r2, [sp, #16]
    672e:	0029      	movs	r1, r5
    6730:	487c      	ldr	r0, [pc, #496]	; (6924 <nm_spi_write_block+0x258>)
    6732:	47b0      	blx	r6
    6734:	200d      	movs	r0, #13
    6736:	4b76      	ldr	r3, [pc, #472]	; (6910 <nm_spi_write_block+0x244>)
    6738:	4798      	blx	r3
		nm_bsp_sleep(1);
    673a:	2001      	movs	r0, #1
    673c:	47a0      	blx	r4
    673e:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    6740:	2d00      	cmp	r5, #0
    6742:	d100      	bne.n	6746 <nm_spi_write_block+0x7a>
    6744:	e0d2      	b.n	68ec <nm_spi_write_block+0x220>
	if (size == 1)
    6746:	9b03      	ldr	r3, [sp, #12]
    6748:	2b01      	cmp	r3, #1
    674a:	d0ce      	beq.n	66ea <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    674c:	2300      	movs	r3, #0
    674e:	9300      	str	r3, [sp, #0]
    6750:	9b03      	ldr	r3, [sp, #12]
    6752:	2200      	movs	r2, #0
    6754:	9e04      	ldr	r6, [sp, #16]
    6756:	0031      	movs	r1, r6
    6758:	20c7      	movs	r0, #199	; 0xc7
    675a:	4c6f      	ldr	r4, [pc, #444]	; (6918 <nm_spi_write_block+0x24c>)
    675c:	47a0      	blx	r4
	if (result != N_OK) {
    675e:	2801      	cmp	r0, #1
    6760:	d1c6      	bne.n	66f0 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    6762:	20c7      	movs	r0, #199	; 0xc7
    6764:	4b6d      	ldr	r3, [pc, #436]	; (691c <nm_spi_write_block+0x250>)
    6766:	4798      	blx	r3
	if (result != N_OK) {
    6768:	2801      	cmp	r0, #1
    676a:	d00b      	beq.n	6784 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    676c:	4a6e      	ldr	r2, [pc, #440]	; (6928 <nm_spi_write_block+0x25c>)
    676e:	4964      	ldr	r1, [pc, #400]	; (6900 <nm_spi_write_block+0x234>)
    6770:	4864      	ldr	r0, [pc, #400]	; (6904 <nm_spi_write_block+0x238>)
    6772:	4c65      	ldr	r4, [pc, #404]	; (6908 <nm_spi_write_block+0x23c>)
    6774:	47a0      	blx	r4
    6776:	9904      	ldr	r1, [sp, #16]
    6778:	486c      	ldr	r0, [pc, #432]	; (692c <nm_spi_write_block+0x260>)
    677a:	47a0      	blx	r4
    677c:	200d      	movs	r0, #13
    677e:	4b64      	ldr	r3, [pc, #400]	; (6910 <nm_spi_write_block+0x244>)
    6780:	4798      	blx	r3
    6782:	e7c0      	b.n	6706 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    6784:	2200      	movs	r2, #0
    6786:	ab07      	add	r3, sp, #28
    6788:	801a      	strh	r2, [r3, #0]
    678a:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    678c:	2600      	movs	r6, #0
				order = 0x1;
    678e:	46a8      	mov	r8, r5
    6790:	0035      	movs	r5, r6
    6792:	0026      	movs	r6, r4
    6794:	e021      	b.n	67da <nm_spi_write_block+0x10e>
				order = 0x2;
    6796:	2300      	movs	r3, #0
    6798:	42b7      	cmp	r7, r6
    679a:	415b      	adcs	r3, r3
    679c:	3302      	adds	r3, #2
		cmd |= order;
    679e:	200b      	movs	r0, #11
    67a0:	aa04      	add	r2, sp, #16
    67a2:	4694      	mov	ip, r2
    67a4:	4460      	add	r0, ip
    67a6:	2210      	movs	r2, #16
    67a8:	4252      	negs	r2, r2
    67aa:	4313      	orrs	r3, r2
    67ac:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    67ae:	2101      	movs	r1, #1
    67b0:	4b5f      	ldr	r3, [pc, #380]	; (6930 <nm_spi_write_block+0x264>)
    67b2:	4798      	blx	r3
    67b4:	2800      	cmp	r0, #0
    67b6:	d11d      	bne.n	67f4 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    67b8:	465b      	mov	r3, fp
    67ba:	1958      	adds	r0, r3, r5
    67bc:	0021      	movs	r1, r4
    67be:	4b5c      	ldr	r3, [pc, #368]	; (6930 <nm_spi_write_block+0x264>)
    67c0:	4798      	blx	r3
    67c2:	2800      	cmp	r0, #0
    67c4:	d12e      	bne.n	6824 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    67c6:	4b5b      	ldr	r3, [pc, #364]	; (6934 <nm_spi_write_block+0x268>)
    67c8:	781b      	ldrb	r3, [r3, #0]
    67ca:	2b00      	cmp	r3, #0
    67cc:	d037      	beq.n	683e <nm_spi_write_block+0x172>
		ix += nbytes;
    67ce:	1965      	adds	r5, r4, r5
    67d0:	b22d      	sxth	r5, r5
		sz -= nbytes;
    67d2:	1b36      	subs	r6, r6, r4
    67d4:	b2b6      	uxth	r6, r6
	} while (sz);
    67d6:	2e00      	cmp	r6, #0
    67d8:	d052      	beq.n	6880 <nm_spi_write_block+0x1b4>
    67da:	1c34      	adds	r4, r6, #0
    67dc:	42be      	cmp	r6, r7
    67de:	d901      	bls.n	67e4 <nm_spi_write_block+0x118>
    67e0:	466b      	mov	r3, sp
    67e2:	8adc      	ldrh	r4, [r3, #22]
    67e4:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    67e6:	2d00      	cmp	r5, #0
    67e8:	d1d5      	bne.n	6796 <nm_spi_write_block+0xca>
				order = 0x3;
    67ea:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    67ec:	42be      	cmp	r6, r7
    67ee:	d9d6      	bls.n	679e <nm_spi_write_block+0xd2>
				order = 0x1;
    67f0:	3b02      	subs	r3, #2
    67f2:	e7d4      	b.n	679e <nm_spi_write_block+0xd2>
    67f4:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    67f6:	4a50      	ldr	r2, [pc, #320]	; (6938 <nm_spi_write_block+0x26c>)
    67f8:	4950      	ldr	r1, [pc, #320]	; (693c <nm_spi_write_block+0x270>)
    67fa:	4842      	ldr	r0, [pc, #264]	; (6904 <nm_spi_write_block+0x238>)
    67fc:	4b42      	ldr	r3, [pc, #264]	; (6908 <nm_spi_write_block+0x23c>)
    67fe:	4798      	blx	r3
    6800:	484f      	ldr	r0, [pc, #316]	; (6940 <nm_spi_write_block+0x274>)
    6802:	4b50      	ldr	r3, [pc, #320]	; (6944 <nm_spi_write_block+0x278>)
    6804:	4798      	blx	r3
    6806:	200d      	movs	r0, #13
    6808:	4b41      	ldr	r3, [pc, #260]	; (6910 <nm_spi_write_block+0x244>)
    680a:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    680c:	4a4e      	ldr	r2, [pc, #312]	; (6948 <nm_spi_write_block+0x27c>)
    680e:	493c      	ldr	r1, [pc, #240]	; (6900 <nm_spi_write_block+0x234>)
    6810:	483c      	ldr	r0, [pc, #240]	; (6904 <nm_spi_write_block+0x238>)
    6812:	4b3d      	ldr	r3, [pc, #244]	; (6908 <nm_spi_write_block+0x23c>)
    6814:	4798      	blx	r3
    6816:	484d      	ldr	r0, [pc, #308]	; (694c <nm_spi_write_block+0x280>)
    6818:	4b4a      	ldr	r3, [pc, #296]	; (6944 <nm_spi_write_block+0x278>)
    681a:	4798      	blx	r3
    681c:	200d      	movs	r0, #13
    681e:	4b3c      	ldr	r3, [pc, #240]	; (6910 <nm_spi_write_block+0x244>)
    6820:	4798      	blx	r3
    6822:	e770      	b.n	6706 <nm_spi_write_block+0x3a>
    6824:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    6826:	4a4a      	ldr	r2, [pc, #296]	; (6950 <nm_spi_write_block+0x284>)
    6828:	4944      	ldr	r1, [pc, #272]	; (693c <nm_spi_write_block+0x270>)
    682a:	4836      	ldr	r0, [pc, #216]	; (6904 <nm_spi_write_block+0x238>)
    682c:	4b36      	ldr	r3, [pc, #216]	; (6908 <nm_spi_write_block+0x23c>)
    682e:	4798      	blx	r3
    6830:	4848      	ldr	r0, [pc, #288]	; (6954 <nm_spi_write_block+0x288>)
    6832:	4b44      	ldr	r3, [pc, #272]	; (6944 <nm_spi_write_block+0x278>)
    6834:	4798      	blx	r3
    6836:	200d      	movs	r0, #13
    6838:	4b35      	ldr	r3, [pc, #212]	; (6910 <nm_spi_write_block+0x244>)
    683a:	4798      	blx	r3
    683c:	e7e6      	b.n	680c <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    683e:	2102      	movs	r1, #2
    6840:	a807      	add	r0, sp, #28
    6842:	4b3b      	ldr	r3, [pc, #236]	; (6930 <nm_spi_write_block+0x264>)
    6844:	4798      	blx	r3
    6846:	2800      	cmp	r0, #0
    6848:	d0c1      	beq.n	67ce <nm_spi_write_block+0x102>
    684a:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    684c:	22d7      	movs	r2, #215	; 0xd7
    684e:	0092      	lsls	r2, r2, #2
    6850:	493a      	ldr	r1, [pc, #232]	; (693c <nm_spi_write_block+0x270>)
    6852:	482c      	ldr	r0, [pc, #176]	; (6904 <nm_spi_write_block+0x238>)
    6854:	4b2c      	ldr	r3, [pc, #176]	; (6908 <nm_spi_write_block+0x23c>)
    6856:	4798      	blx	r3
    6858:	483f      	ldr	r0, [pc, #252]	; (6958 <nm_spi_write_block+0x28c>)
    685a:	4b3a      	ldr	r3, [pc, #232]	; (6944 <nm_spi_write_block+0x278>)
    685c:	4798      	blx	r3
    685e:	200d      	movs	r0, #13
    6860:	4b2b      	ldr	r3, [pc, #172]	; (6910 <nm_spi_write_block+0x244>)
    6862:	4798      	blx	r3
    6864:	e7d2      	b.n	680c <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    6866:	229a      	movs	r2, #154	; 0x9a
    6868:	0052      	lsls	r2, r2, #1
    686a:	493c      	ldr	r1, [pc, #240]	; (695c <nm_spi_write_block+0x290>)
    686c:	4825      	ldr	r0, [pc, #148]	; (6904 <nm_spi_write_block+0x238>)
    686e:	4b26      	ldr	r3, [pc, #152]	; (6908 <nm_spi_write_block+0x23c>)
    6870:	4798      	blx	r3
    6872:	483b      	ldr	r0, [pc, #236]	; (6960 <nm_spi_write_block+0x294>)
    6874:	4b33      	ldr	r3, [pc, #204]	; (6944 <nm_spi_write_block+0x278>)
    6876:	4798      	blx	r3
    6878:	200d      	movs	r0, #13
    687a:	4b25      	ldr	r3, [pc, #148]	; (6910 <nm_spi_write_block+0x244>)
    687c:	4798      	blx	r3
    687e:	e027      	b.n	68d0 <nm_spi_write_block+0x204>
    6880:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    6882:	4b2c      	ldr	r3, [pc, #176]	; (6934 <nm_spi_write_block+0x268>)
    6884:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    6886:	1e63      	subs	r3, r4, #1
    6888:	419c      	sbcs	r4, r3
    688a:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    688c:	b2a1      	uxth	r1, r4
    688e:	a807      	add	r0, sp, #28
    6890:	4b34      	ldr	r3, [pc, #208]	; (6964 <nm_spi_write_block+0x298>)
    6892:	4798      	blx	r3
    6894:	2800      	cmp	r0, #0
    6896:	d1e6      	bne.n	6866 <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    6898:	ab08      	add	r3, sp, #32
    689a:	191b      	adds	r3, r3, r4
    689c:	3b05      	subs	r3, #5
    689e:	781b      	ldrb	r3, [r3, #0]
    68a0:	2b00      	cmp	r3, #0
    68a2:	d106      	bne.n	68b2 <nm_spi_write_block+0x1e6>
    68a4:	ab08      	add	r3, sp, #32
    68a6:	469c      	mov	ip, r3
    68a8:	4464      	add	r4, ip
    68aa:	3c06      	subs	r4, #6
    68ac:	7823      	ldrb	r3, [r4, #0]
    68ae:	2bc3      	cmp	r3, #195	; 0xc3
    68b0:	d01a      	beq.n	68e8 <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    68b2:	223c      	movs	r2, #60	; 0x3c
    68b4:	32ff      	adds	r2, #255	; 0xff
    68b6:	4929      	ldr	r1, [pc, #164]	; (695c <nm_spi_write_block+0x290>)
    68b8:	4812      	ldr	r0, [pc, #72]	; (6904 <nm_spi_write_block+0x238>)
    68ba:	4c13      	ldr	r4, [pc, #76]	; (6908 <nm_spi_write_block+0x23c>)
    68bc:	47a0      	blx	r4
    68be:	a907      	add	r1, sp, #28
    68c0:	788b      	ldrb	r3, [r1, #2]
    68c2:	784a      	ldrb	r2, [r1, #1]
    68c4:	7809      	ldrb	r1, [r1, #0]
    68c6:	4828      	ldr	r0, [pc, #160]	; (6968 <nm_spi_write_block+0x29c>)
    68c8:	47a0      	blx	r4
    68ca:	200d      	movs	r0, #13
    68cc:	4b10      	ldr	r3, [pc, #64]	; (6910 <nm_spi_write_block+0x244>)
    68ce:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    68d0:	4a26      	ldr	r2, [pc, #152]	; (696c <nm_spi_write_block+0x2a0>)
    68d2:	490b      	ldr	r1, [pc, #44]	; (6900 <nm_spi_write_block+0x234>)
    68d4:	480b      	ldr	r0, [pc, #44]	; (6904 <nm_spi_write_block+0x238>)
    68d6:	4b0c      	ldr	r3, [pc, #48]	; (6908 <nm_spi_write_block+0x23c>)
    68d8:	4798      	blx	r3
    68da:	481c      	ldr	r0, [pc, #112]	; (694c <nm_spi_write_block+0x280>)
    68dc:	4b19      	ldr	r3, [pc, #100]	; (6944 <nm_spi_write_block+0x278>)
    68de:	4798      	blx	r3
    68e0:	200d      	movs	r0, #13
    68e2:	4b0b      	ldr	r3, [pc, #44]	; (6910 <nm_spi_write_block+0x244>)
    68e4:	4798      	blx	r3
    68e6:	e70e      	b.n	6706 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    68e8:	2000      	movs	r0, #0
    68ea:	e001      	b.n	68f0 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    68ec:	2006      	movs	r0, #6
    68ee:	4240      	negs	r0, r0

	return s8Ret;
}
    68f0:	b009      	add	sp, #36	; 0x24
    68f2:	bc0c      	pop	{r2, r3}
    68f4:	4690      	mov	r8, r2
    68f6:	469b      	mov	fp, r3
    68f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68fa:	46c0      	nop			; (mov r8, r8)
    68fc:	000003c3 	.word	0x000003c3
    6900:	0000f684 	.word	0x0000f684
    6904:	0000ee54 	.word	0x0000ee54
    6908:	0000d4d5 	.word	0x0000d4d5
    690c:	0000f93c 	.word	0x0000f93c
    6910:	0000d509 	.word	0x0000d509
    6914:	0000391d 	.word	0x0000391d
    6918:	00005da1 	.word	0x00005da1
    691c:	00005f41 	.word	0x00005f41
    6920:	000003eb 	.word	0x000003eb
    6924:	0000f920 	.word	0x0000f920
    6928:	000003c9 	.word	0x000003c9
    692c:	0000f96c 	.word	0x0000f96c
    6930:	00005d81 	.word	0x00005d81
    6934:	20000470 	.word	0x20000470
    6938:	00000349 	.word	0x00000349
    693c:	0000f664 	.word	0x0000f664
    6940:	0000f9a4 	.word	0x0000f9a4
    6944:	0000d5f1 	.word	0x0000d5f1
    6948:	000003d9 	.word	0x000003d9
    694c:	0000fa98 	.word	0x0000fa98
    6950:	00000352 	.word	0x00000352
    6954:	0000f9dc 	.word	0x0000f9dc
    6958:	0000fa10 	.word	0x0000fa10
    695c:	0000f638 	.word	0x0000f638
    6960:	0000fa48 	.word	0x0000fa48
    6964:	00005f21 	.word	0x00005f21
    6968:	0000fa68 	.word	0x0000fa68
    696c:	000003e1 	.word	0x000003e1

00006970 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    6970:	b5f0      	push	{r4, r5, r6, r7, lr}
    6972:	46de      	mov	lr, fp
    6974:	4657      	mov	r7, sl
    6976:	464e      	mov	r6, r9
    6978:	4645      	mov	r5, r8
    697a:	b5e0      	push	{r5, r6, r7, lr}
    697c:	b085      	sub	sp, #20
    697e:	9001      	str	r0, [sp, #4]
    6980:	000e      	movs	r6, r1
    6982:	9202      	str	r2, [sp, #8]
    6984:	001d      	movs	r5, r3
    6986:	ab0e      	add	r3, sp, #56	; 0x38
    6988:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    698a:	2c00      	cmp	r4, #0
    698c:	d064      	beq.n	6a58 <Socket_ReadSocketData+0xe8>
    698e:	0103      	lsls	r3, r0, #4
    6990:	4935      	ldr	r1, [pc, #212]	; (6a68 <Socket_ReadSocketData+0xf8>)
    6992:	585b      	ldr	r3, [r3, r1]
    6994:	2b00      	cmp	r3, #0
    6996:	d05f      	beq.n	6a58 <Socket_ReadSocketData+0xe8>
    6998:	0101      	lsls	r1, r0, #4
    699a:	4b33      	ldr	r3, [pc, #204]	; (6a68 <Socket_ReadSocketData+0xf8>)
    699c:	185b      	adds	r3, r3, r1
    699e:	889b      	ldrh	r3, [r3, #4]
    69a0:	b29b      	uxth	r3, r3
    69a2:	2b00      	cmp	r3, #0
    69a4:	d058      	beq.n	6a58 <Socket_ReadSocketData+0xe8>
    69a6:	4b30      	ldr	r3, [pc, #192]	; (6a68 <Socket_ReadSocketData+0xf8>)
    69a8:	185b      	adds	r3, r3, r1
    69aa:	7a9b      	ldrb	r3, [r3, #10]
    69ac:	2b01      	cmp	r3, #1
    69ae:	d153      	bne.n	6a58 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    69b0:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    69b2:	4b2d      	ldr	r3, [pc, #180]	; (6a68 <Socket_ReadSocketData+0xf8>)
    69b4:	469b      	mov	fp, r3
    69b6:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    69b8:	465b      	mov	r3, fp
    69ba:	220a      	movs	r2, #10
    69bc:	4690      	mov	r8, r2
    69be:	44d8      	add	r8, fp
    69c0:	468a      	mov	sl, r1
    69c2:	9500      	str	r5, [sp, #0]
    69c4:	9303      	str	r3, [sp, #12]
    69c6:	e015      	b.n	69f4 <Socket_ReadSocketData+0x84>
    69c8:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    69ca:	2301      	movs	r3, #1
    69cc:	e01c      	b.n	6a08 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    69ce:	3301      	adds	r3, #1
    69d0:	2200      	movs	r2, #0
    69d2:	2100      	movs	r1, #0
    69d4:	2000      	movs	r0, #0
    69d6:	4c25      	ldr	r4, [pc, #148]	; (6a6c <Socket_ReadSocketData+0xfc>)
    69d8:	47a0      	blx	r4
    69da:	e03d      	b.n	6a58 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    69dc:	4824      	ldr	r0, [pc, #144]	; (6a70 <Socket_ReadSocketData+0x100>)
    69de:	4d25      	ldr	r5, [pc, #148]	; (6a74 <Socket_ReadSocketData+0x104>)
    69e0:	47a8      	blx	r5
    69e2:	0021      	movs	r1, r4
    69e4:	4824      	ldr	r0, [pc, #144]	; (6a78 <Socket_ReadSocketData+0x108>)
    69e6:	47a8      	blx	r5
    69e8:	200d      	movs	r0, #13
    69ea:	4b24      	ldr	r3, [pc, #144]	; (6a7c <Socket_ReadSocketData+0x10c>)
    69ec:	4798      	blx	r3
				break;
    69ee:	e033      	b.n	6a58 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    69f0:	2c00      	cmp	r4, #0
    69f2:	d031      	beq.n	6a58 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    69f4:	465b      	mov	r3, fp
    69f6:	889b      	ldrh	r3, [r3, #4]
    69f8:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    69fa:	b21b      	sxth	r3, r3
    69fc:	2b00      	cmp	r3, #0
    69fe:	dde3      	ble.n	69c8 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    6a00:	9b03      	ldr	r3, [sp, #12]
    6a02:	889d      	ldrh	r5, [r3, #4]
    6a04:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    6a06:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    6a08:	4a17      	ldr	r2, [pc, #92]	; (6a68 <Socket_ReadSocketData+0xf8>)
    6a0a:	4651      	mov	r1, sl
    6a0c:	5889      	ldr	r1, [r1, r2]
    6a0e:	002a      	movs	r2, r5
    6a10:	9800      	ldr	r0, [sp, #0]
    6a12:	4f16      	ldr	r7, [pc, #88]	; (6a6c <Socket_ReadSocketData+0xfc>)
    6a14:	47b8      	blx	r7
    6a16:	2800      	cmp	r0, #0
    6a18:	d1e0      	bne.n	69dc <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    6a1a:	4b13      	ldr	r3, [pc, #76]	; (6a68 <Socket_ReadSocketData+0xf8>)
    6a1c:	4652      	mov	r2, sl
    6a1e:	58d3      	ldr	r3, [r2, r3]
    6a20:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    6a22:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    6a24:	88f3      	ldrh	r3, [r6, #6]
    6a26:	1b5b      	subs	r3, r3, r5
    6a28:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    6a2a:	4b15      	ldr	r3, [pc, #84]	; (6a80 <Socket_ReadSocketData+0x110>)
    6a2c:	681b      	ldr	r3, [r3, #0]
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d005      	beq.n	6a3e <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    6a32:	4b13      	ldr	r3, [pc, #76]	; (6a80 <Socket_ReadSocketData+0x110>)
    6a34:	681b      	ldr	r3, [r3, #0]
    6a36:	0032      	movs	r2, r6
    6a38:	9902      	ldr	r1, [sp, #8]
    6a3a:	9801      	ldr	r0, [sp, #4]
    6a3c:	4798      	blx	r3
				u16ReadCount -= u16Read;
    6a3e:	1b64      	subs	r4, r4, r5
    6a40:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    6a42:	9b00      	ldr	r3, [sp, #0]
    6a44:	469c      	mov	ip, r3
    6a46:	44ac      	add	ip, r5
    6a48:	4663      	mov	r3, ip
    6a4a:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    6a4c:	4643      	mov	r3, r8
    6a4e:	781b      	ldrb	r3, [r3, #0]
    6a50:	2b00      	cmp	r3, #0
    6a52:	d1cd      	bne.n	69f0 <Socket_ReadSocketData+0x80>
    6a54:	2c00      	cmp	r4, #0
    6a56:	d1ba      	bne.n	69ce <Socket_ReadSocketData+0x5e>
	}
}
    6a58:	b005      	add	sp, #20
    6a5a:	bc3c      	pop	{r2, r3, r4, r5}
    6a5c:	4690      	mov	r8, r2
    6a5e:	4699      	mov	r9, r3
    6a60:	46a2      	mov	sl, r4
    6a62:	46ab      	mov	fp, r5
    6a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a66:	46c0      	nop			; (mov r8, r8)
    6a68:	2000156c 	.word	0x2000156c
    6a6c:	00004465 	.word	0x00004465
    6a70:	0000f1f4 	.word	0x0000f1f4
    6a74:	0000d4d5 	.word	0x0000d4d5
    6a78:	0000fd00 	.word	0x0000fd00
    6a7c:	0000d509 	.word	0x0000d509
    6a80:	2000161c 	.word	0x2000161c

00006a84 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    6a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a86:	46d6      	mov	lr, sl
    6a88:	464f      	mov	r7, r9
    6a8a:	4646      	mov	r6, r8
    6a8c:	b5c0      	push	{r6, r7, lr}
    6a8e:	b09a      	sub	sp, #104	; 0x68
    6a90:	000d      	movs	r5, r1
    6a92:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    6a94:	2841      	cmp	r0, #65	; 0x41
    6a96:	d039      	beq.n	6b0c <m2m_ip_cb+0x88>
    6a98:	2854      	cmp	r0, #84	; 0x54
    6a9a:	d037      	beq.n	6b0c <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    6a9c:	2842      	cmp	r0, #66	; 0x42
    6a9e:	d053      	beq.n	6b48 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    6aa0:	2843      	cmp	r0, #67	; 0x43
    6aa2:	d06a      	beq.n	6b7a <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    6aa4:	2844      	cmp	r0, #68	; 0x44
    6aa6:	d100      	bne.n	6aaa <m2m_ip_cb+0x26>
    6aa8:	e0af      	b.n	6c0a <m2m_ip_cb+0x186>
    6aaa:	284b      	cmp	r0, #75	; 0x4b
    6aac:	d100      	bne.n	6ab0 <m2m_ip_cb+0x2c>
    6aae:	e0ac      	b.n	6c0a <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    6ab0:	284a      	cmp	r0, #74	; 0x4a
    6ab2:	d100      	bne.n	6ab6 <m2m_ip_cb+0x32>
    6ab4:	e0cf      	b.n	6c56 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    6ab6:	2846      	cmp	r0, #70	; 0x46
    6ab8:	d100      	bne.n	6abc <m2m_ip_cb+0x38>
    6aba:	e0e5      	b.n	6c88 <m2m_ip_cb+0x204>
    6abc:	2848      	cmp	r0, #72	; 0x48
    6abe:	d100      	bne.n	6ac2 <m2m_ip_cb+0x3e>
    6ac0:	e10e      	b.n	6ce0 <m2m_ip_cb+0x25c>
    6ac2:	284d      	cmp	r0, #77	; 0x4d
    6ac4:	d100      	bne.n	6ac8 <m2m_ip_cb+0x44>
    6ac6:	e0dc      	b.n	6c82 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    6ac8:	2845      	cmp	r0, #69	; 0x45
    6aca:	d100      	bne.n	6ace <m2m_ip_cb+0x4a>
    6acc:	e12c      	b.n	6d28 <m2m_ip_cb+0x2a4>
    6ace:	2847      	cmp	r0, #71	; 0x47
    6ad0:	d100      	bne.n	6ad4 <m2m_ip_cb+0x50>
    6ad2:	e14d      	b.n	6d70 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    6ad4:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    6ad6:	284c      	cmp	r0, #76	; 0x4c
    6ad8:	d100      	bne.n	6adc <m2m_ip_cb+0x58>
    6ada:	e126      	b.n	6d2a <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    6adc:	2852      	cmp	r0, #82	; 0x52
    6ade:	d12d      	bne.n	6b3c <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    6ae0:	2301      	movs	r3, #1
    6ae2:	2214      	movs	r2, #20
    6ae4:	a909      	add	r1, sp, #36	; 0x24
    6ae6:	0020      	movs	r0, r4
    6ae8:	4ca2      	ldr	r4, [pc, #648]	; (6d74 <m2m_ip_cb+0x2f0>)
    6aea:	47a0      	blx	r4
    6aec:	2800      	cmp	r0, #0
    6aee:	d125      	bne.n	6b3c <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    6af0:	4ba1      	ldr	r3, [pc, #644]	; (6d78 <m2m_ip_cb+0x2f4>)
    6af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6af4:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    6af6:	681b      	ldr	r3, [r3, #0]
    6af8:	2b00      	cmp	r3, #0
    6afa:	d01f      	beq.n	6b3c <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    6afc:	4b9e      	ldr	r3, [pc, #632]	; (6d78 <m2m_ip_cb+0x2f4>)
    6afe:	681c      	ldr	r4, [r3, #0]
    6b00:	ab09      	add	r3, sp, #36	; 0x24
    6b02:	7c1a      	ldrb	r2, [r3, #16]
    6b04:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6b06:	9809      	ldr	r0, [sp, #36]	; 0x24
    6b08:	47a0      	blx	r4
			}
		}
	}
}
    6b0a:	e017      	b.n	6b3c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    6b0c:	2300      	movs	r3, #0
    6b0e:	2204      	movs	r2, #4
    6b10:	a909      	add	r1, sp, #36	; 0x24
    6b12:	0020      	movs	r0, r4
    6b14:	4c97      	ldr	r4, [pc, #604]	; (6d74 <m2m_ip_cb+0x2f0>)
    6b16:	47a0      	blx	r4
    6b18:	2800      	cmp	r0, #0
    6b1a:	d10f      	bne.n	6b3c <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    6b1c:	ab09      	add	r3, sp, #36	; 0x24
    6b1e:	785a      	ldrb	r2, [r3, #1]
    6b20:	ab05      	add	r3, sp, #20
    6b22:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    6b24:	4b95      	ldr	r3, [pc, #596]	; (6d7c <m2m_ip_cb+0x2f8>)
    6b26:	681b      	ldr	r3, [r3, #0]
    6b28:	2b00      	cmp	r3, #0
    6b2a:	d007      	beq.n	6b3c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    6b2c:	4b93      	ldr	r3, [pc, #588]	; (6d7c <m2m_ip_cb+0x2f8>)
    6b2e:	681b      	ldr	r3, [r3, #0]
    6b30:	aa09      	add	r2, sp, #36	; 0x24
    6b32:	2000      	movs	r0, #0
    6b34:	5610      	ldrsb	r0, [r2, r0]
    6b36:	aa05      	add	r2, sp, #20
    6b38:	2101      	movs	r1, #1
    6b3a:	4798      	blx	r3
}
    6b3c:	b01a      	add	sp, #104	; 0x68
    6b3e:	bc1c      	pop	{r2, r3, r4}
    6b40:	4690      	mov	r8, r2
    6b42:	4699      	mov	r9, r3
    6b44:	46a2      	mov	sl, r4
    6b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    6b48:	2300      	movs	r3, #0
    6b4a:	2204      	movs	r2, #4
    6b4c:	a909      	add	r1, sp, #36	; 0x24
    6b4e:	0020      	movs	r0, r4
    6b50:	4c88      	ldr	r4, [pc, #544]	; (6d74 <m2m_ip_cb+0x2f0>)
    6b52:	47a0      	blx	r4
    6b54:	2800      	cmp	r0, #0
    6b56:	d1f1      	bne.n	6b3c <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    6b58:	ab09      	add	r3, sp, #36	; 0x24
    6b5a:	785a      	ldrb	r2, [r3, #1]
    6b5c:	ab05      	add	r3, sp, #20
    6b5e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    6b60:	4b86      	ldr	r3, [pc, #536]	; (6d7c <m2m_ip_cb+0x2f8>)
    6b62:	681b      	ldr	r3, [r3, #0]
    6b64:	2b00      	cmp	r3, #0
    6b66:	d0e9      	beq.n	6b3c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    6b68:	4b84      	ldr	r3, [pc, #528]	; (6d7c <m2m_ip_cb+0x2f8>)
    6b6a:	681b      	ldr	r3, [r3, #0]
    6b6c:	aa09      	add	r2, sp, #36	; 0x24
    6b6e:	2000      	movs	r0, #0
    6b70:	5610      	ldrsb	r0, [r2, r0]
    6b72:	aa05      	add	r2, sp, #20
    6b74:	2102      	movs	r1, #2
    6b76:	4798      	blx	r3
    6b78:	e7e0      	b.n	6b3c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    6b7a:	2300      	movs	r3, #0
    6b7c:	220c      	movs	r2, #12
    6b7e:	a905      	add	r1, sp, #20
    6b80:	0020      	movs	r0, r4
    6b82:	4c7c      	ldr	r4, [pc, #496]	; (6d74 <m2m_ip_cb+0x2f0>)
    6b84:	47a0      	blx	r4
    6b86:	2800      	cmp	r0, #0
    6b88:	d1d8      	bne.n	6b3c <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    6b8a:	ab05      	add	r3, sp, #20
    6b8c:	2209      	movs	r2, #9
    6b8e:	569a      	ldrsb	r2, [r3, r2]
    6b90:	2a00      	cmp	r2, #0
    6b92:	db24      	blt.n	6bde <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    6b94:	0018      	movs	r0, r3
    6b96:	2108      	movs	r1, #8
    6b98:	5659      	ldrsb	r1, [r3, r1]
    6b9a:	4b79      	ldr	r3, [pc, #484]	; (6d80 <m2m_ip_cb+0x2fc>)
    6b9c:	0109      	lsls	r1, r1, #4
    6b9e:	1859      	adds	r1, r3, r1
    6ba0:	7ac9      	ldrb	r1, [r1, #11]
    6ba2:	b2c9      	uxtb	r1, r1
    6ba4:	0114      	lsls	r4, r2, #4
    6ba6:	191b      	adds	r3, r3, r4
    6ba8:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    6baa:	2101      	movs	r1, #1
    6bac:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    6bae:	8941      	ldrh	r1, [r0, #10]
    6bb0:	3908      	subs	r1, #8
    6bb2:	b289      	uxth	r1, r1
    6bb4:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    6bb6:	4973      	ldr	r1, [pc, #460]	; (6d84 <m2m_ip_cb+0x300>)
    6bb8:	880b      	ldrh	r3, [r1, #0]
    6bba:	3301      	adds	r3, #1
    6bbc:	b29b      	uxth	r3, r3
    6bbe:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    6bc0:	880b      	ldrh	r3, [r1, #0]
    6bc2:	b29b      	uxth	r3, r3
    6bc4:	2b00      	cmp	r3, #0
    6bc6:	d103      	bne.n	6bd0 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    6bc8:	880b      	ldrh	r3, [r1, #0]
    6bca:	3301      	adds	r3, #1
    6bcc:	b29b      	uxth	r3, r3
    6bce:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    6bd0:	4b6c      	ldr	r3, [pc, #432]	; (6d84 <m2m_ip_cb+0x300>)
    6bd2:	8819      	ldrh	r1, [r3, #0]
    6bd4:	b289      	uxth	r1, r1
    6bd6:	0110      	lsls	r0, r2, #4
    6bd8:	4b69      	ldr	r3, [pc, #420]	; (6d80 <m2m_ip_cb+0x2fc>)
    6bda:	181b      	adds	r3, r3, r0
    6bdc:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    6bde:	ab09      	add	r3, sp, #36	; 0x24
    6be0:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    6be2:	2202      	movs	r2, #2
    6be4:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    6be6:	aa05      	add	r2, sp, #20
    6be8:	8851      	ldrh	r1, [r2, #2]
    6bea:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    6bec:	9a06      	ldr	r2, [sp, #24]
    6bee:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    6bf0:	4b62      	ldr	r3, [pc, #392]	; (6d7c <m2m_ip_cb+0x2f8>)
    6bf2:	681b      	ldr	r3, [r3, #0]
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	d0a1      	beq.n	6b3c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    6bf8:	4b60      	ldr	r3, [pc, #384]	; (6d7c <m2m_ip_cb+0x2f8>)
    6bfa:	681b      	ldr	r3, [r3, #0]
    6bfc:	aa05      	add	r2, sp, #20
    6bfe:	2008      	movs	r0, #8
    6c00:	5610      	ldrsb	r0, [r2, r0]
    6c02:	aa09      	add	r2, sp, #36	; 0x24
    6c04:	2104      	movs	r1, #4
    6c06:	4798      	blx	r3
    6c08:	e798      	b.n	6b3c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    6c0a:	2300      	movs	r3, #0
    6c0c:	2204      	movs	r2, #4
    6c0e:	a909      	add	r1, sp, #36	; 0x24
    6c10:	0020      	movs	r0, r4
    6c12:	4c58      	ldr	r4, [pc, #352]	; (6d74 <m2m_ip_cb+0x2f0>)
    6c14:	47a0      	blx	r4
    6c16:	2800      	cmp	r0, #0
    6c18:	d000      	beq.n	6c1c <m2m_ip_cb+0x198>
    6c1a:	e78f      	b.n	6b3c <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    6c1c:	ab09      	add	r3, sp, #36	; 0x24
    6c1e:	2000      	movs	r0, #0
    6c20:	5618      	ldrsb	r0, [r3, r0]
    6c22:	aa05      	add	r2, sp, #20
    6c24:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    6c26:	785b      	ldrb	r3, [r3, #1]
    6c28:	b25b      	sxtb	r3, r3
    6c2a:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    6c2c:	2b00      	cmp	r3, #0
    6c2e:	d107      	bne.n	6c40 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    6c30:	ab09      	add	r3, sp, #36	; 0x24
    6c32:	885b      	ldrh	r3, [r3, #2]
    6c34:	3b08      	subs	r3, #8
    6c36:	b29b      	uxth	r3, r3
    6c38:	0101      	lsls	r1, r0, #4
    6c3a:	4a51      	ldr	r2, [pc, #324]	; (6d80 <m2m_ip_cb+0x2fc>)
    6c3c:	1852      	adds	r2, r2, r1
    6c3e:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    6c40:	4b4e      	ldr	r3, [pc, #312]	; (6d7c <m2m_ip_cb+0x2f8>)
    6c42:	681b      	ldr	r3, [r3, #0]
    6c44:	2b00      	cmp	r3, #0
    6c46:	d100      	bne.n	6c4a <m2m_ip_cb+0x1c6>
    6c48:	e778      	b.n	6b3c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    6c4a:	4b4c      	ldr	r3, [pc, #304]	; (6d7c <m2m_ip_cb+0x2f8>)
    6c4c:	681b      	ldr	r3, [r3, #0]
    6c4e:	aa05      	add	r2, sp, #20
    6c50:	2105      	movs	r1, #5
    6c52:	4798      	blx	r3
	{
    6c54:	e772      	b.n	6b3c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    6c56:	2300      	movs	r3, #0
    6c58:	2244      	movs	r2, #68	; 0x44
    6c5a:	a909      	add	r1, sp, #36	; 0x24
    6c5c:	0020      	movs	r0, r4
    6c5e:	4c45      	ldr	r4, [pc, #276]	; (6d74 <m2m_ip_cb+0x2f0>)
    6c60:	47a0      	blx	r4
    6c62:	2800      	cmp	r0, #0
    6c64:	d000      	beq.n	6c68 <m2m_ip_cb+0x1e4>
    6c66:	e769      	b.n	6b3c <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    6c68:	4b47      	ldr	r3, [pc, #284]	; (6d88 <m2m_ip_cb+0x304>)
    6c6a:	681b      	ldr	r3, [r3, #0]
    6c6c:	2b00      	cmp	r3, #0
    6c6e:	d100      	bne.n	6c72 <m2m_ip_cb+0x1ee>
    6c70:	e764      	b.n	6b3c <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    6c72:	4b45      	ldr	r3, [pc, #276]	; (6d88 <m2m_ip_cb+0x304>)
    6c74:	681b      	ldr	r3, [r3, #0]
    6c76:	9a19      	ldr	r2, [sp, #100]	; 0x64
    6c78:	9203      	str	r2, [sp, #12]
    6c7a:	0011      	movs	r1, r2
    6c7c:	a809      	add	r0, sp, #36	; 0x24
    6c7e:	4798      	blx	r3
    6c80:	e75c      	b.n	6b3c <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    6c82:	2306      	movs	r3, #6
    6c84:	469a      	mov	sl, r3
    6c86:	e001      	b.n	6c8c <m2m_ip_cb+0x208>
    6c88:	2306      	movs	r3, #6
    6c8a:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    6c8c:	2300      	movs	r3, #0
    6c8e:	2210      	movs	r2, #16
    6c90:	a905      	add	r1, sp, #20
    6c92:	0020      	movs	r0, r4
    6c94:	4f37      	ldr	r7, [pc, #220]	; (6d74 <m2m_ip_cb+0x2f0>)
    6c96:	47b8      	blx	r7
    6c98:	2800      	cmp	r0, #0
    6c9a:	d000      	beq.n	6c9e <m2m_ip_cb+0x21a>
    6c9c:	e74e      	b.n	6b3c <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    6c9e:	aa05      	add	r2, sp, #20
    6ca0:	200c      	movs	r0, #12
    6ca2:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    6ca4:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    6ca6:	0107      	lsls	r7, r0, #4
    6ca8:	4935      	ldr	r1, [pc, #212]	; (6d80 <m2m_ip_cb+0x2fc>)
    6caa:	19c9      	adds	r1, r1, r7
    6cac:	2700      	movs	r7, #0
    6cae:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    6cb0:	2608      	movs	r6, #8
    6cb2:	5f97      	ldrsh	r7, [r2, r6]
    6cb4:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    6cb6:	8957      	ldrh	r7, [r2, #10]
    6cb8:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    6cba:	af09      	add	r7, sp, #36	; 0x24
    6cbc:	8856      	ldrh	r6, [r2, #2]
    6cbe:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    6cc0:	9a06      	ldr	r2, [sp, #24]
    6cc2:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    6cc4:	88ca      	ldrh	r2, [r1, #6]
    6cc6:	b292      	uxth	r2, r2
    6cc8:	4293      	cmp	r3, r2
    6cca:	d00c      	beq.n	6ce6 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    6ccc:	2d10      	cmp	r5, #16
    6cce:	d800      	bhi.n	6cd2 <m2m_ip_cb+0x24e>
    6cd0:	e734      	b.n	6b3c <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    6cd2:	2301      	movs	r3, #1
    6cd4:	2200      	movs	r2, #0
    6cd6:	2100      	movs	r1, #0
    6cd8:	2000      	movs	r0, #0
    6cda:	4c26      	ldr	r4, [pc, #152]	; (6d74 <m2m_ip_cb+0x2f0>)
    6cdc:	47a0      	blx	r4
	{
    6cde:	e72d      	b.n	6b3c <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    6ce0:	2309      	movs	r3, #9
    6ce2:	469a      	mov	sl, r3
    6ce4:	e7d2      	b.n	6c8c <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    6ce6:	4643      	mov	r3, r8
    6ce8:	2b00      	cmp	r3, #0
    6cea:	dd01      	ble.n	6cf0 <m2m_ip_cb+0x26c>
    6cec:	45a8      	cmp	r8, r5
    6cee:	db0f      	blt.n	6d10 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    6cf0:	ab09      	add	r3, sp, #36	; 0x24
    6cf2:	4642      	mov	r2, r8
    6cf4:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    6cf6:	2300      	movs	r3, #0
    6cf8:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    6cfa:	4b20      	ldr	r3, [pc, #128]	; (6d7c <m2m_ip_cb+0x2f8>)
    6cfc:	681b      	ldr	r3, [r3, #0]
    6cfe:	2b00      	cmp	r3, #0
    6d00:	d100      	bne.n	6d04 <m2m_ip_cb+0x280>
    6d02:	e71b      	b.n	6b3c <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    6d04:	4b1d      	ldr	r3, [pc, #116]	; (6d7c <m2m_ip_cb+0x2f8>)
    6d06:	681b      	ldr	r3, [r3, #0]
    6d08:	aa09      	add	r2, sp, #36	; 0x24
    6d0a:	4651      	mov	r1, sl
    6d0c:	4798      	blx	r3
    6d0e:	e715      	b.n	6b3c <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    6d10:	0023      	movs	r3, r4
    6d12:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    6d14:	4642      	mov	r2, r8
    6d16:	4669      	mov	r1, sp
    6d18:	818a      	strh	r2, [r1, #12]
    6d1a:	898a      	ldrh	r2, [r1, #12]
    6d1c:	9200      	str	r2, [sp, #0]
    6d1e:	4652      	mov	r2, sl
    6d20:	0039      	movs	r1, r7
    6d22:	4c1a      	ldr	r4, [pc, #104]	; (6d8c <m2m_ip_cb+0x308>)
    6d24:	47a0      	blx	r4
    6d26:	e709      	b.n	6b3c <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    6d28:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    6d2a:	2300      	movs	r3, #0
    6d2c:	2208      	movs	r2, #8
    6d2e:	a909      	add	r1, sp, #36	; 0x24
    6d30:	0020      	movs	r0, r4
    6d32:	4c10      	ldr	r4, [pc, #64]	; (6d74 <m2m_ip_cb+0x2f0>)
    6d34:	47a0      	blx	r4
    6d36:	2800      	cmp	r0, #0
    6d38:	d000      	beq.n	6d3c <m2m_ip_cb+0x2b8>
    6d3a:	e6ff      	b.n	6b3c <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    6d3c:	ab09      	add	r3, sp, #36	; 0x24
    6d3e:	2000      	movs	r0, #0
    6d40:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    6d42:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    6d44:	8859      	ldrh	r1, [r3, #2]
    6d46:	ab05      	add	r3, sp, #20
    6d48:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    6d4a:	0101      	lsls	r1, r0, #4
    6d4c:	4b0c      	ldr	r3, [pc, #48]	; (6d80 <m2m_ip_cb+0x2fc>)
    6d4e:	185b      	adds	r3, r3, r1
    6d50:	88db      	ldrh	r3, [r3, #6]
    6d52:	b29b      	uxth	r3, r3
    6d54:	429a      	cmp	r2, r3
    6d56:	d000      	beq.n	6d5a <m2m_ip_cb+0x2d6>
    6d58:	e6f0      	b.n	6b3c <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    6d5a:	4b08      	ldr	r3, [pc, #32]	; (6d7c <m2m_ip_cb+0x2f8>)
    6d5c:	681b      	ldr	r3, [r3, #0]
    6d5e:	2b00      	cmp	r3, #0
    6d60:	d100      	bne.n	6d64 <m2m_ip_cb+0x2e0>
    6d62:	e6eb      	b.n	6b3c <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    6d64:	4b05      	ldr	r3, [pc, #20]	; (6d7c <m2m_ip_cb+0x2f8>)
    6d66:	681b      	ldr	r3, [r3, #0]
    6d68:	aa05      	add	r2, sp, #20
    6d6a:	0029      	movs	r1, r5
    6d6c:	4798      	blx	r3
	{
    6d6e:	e6e5      	b.n	6b3c <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    6d70:	2508      	movs	r5, #8
    6d72:	e7da      	b.n	6d2a <m2m_ip_cb+0x2a6>
    6d74:	00004465 	.word	0x00004465
    6d78:	20001620 	.word	0x20001620
    6d7c:	2000161c 	.word	0x2000161c
    6d80:	2000156c 	.word	0x2000156c
    6d84:	20000472 	.word	0x20000472
    6d88:	20001624 	.word	0x20001624
    6d8c:	00006971 	.word	0x00006971

00006d90 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    6d90:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    6d92:	4b0a      	ldr	r3, [pc, #40]	; (6dbc <socketInit+0x2c>)
    6d94:	781b      	ldrb	r3, [r3, #0]
    6d96:	2b00      	cmp	r3, #0
    6d98:	d000      	beq.n	6d9c <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    6d9a:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    6d9c:	22b0      	movs	r2, #176	; 0xb0
    6d9e:	2100      	movs	r1, #0
    6da0:	4807      	ldr	r0, [pc, #28]	; (6dc0 <socketInit+0x30>)
    6da2:	4b08      	ldr	r3, [pc, #32]	; (6dc4 <socketInit+0x34>)
    6da4:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    6da6:	4908      	ldr	r1, [pc, #32]	; (6dc8 <socketInit+0x38>)
    6da8:	2002      	movs	r0, #2
    6daa:	4b08      	ldr	r3, [pc, #32]	; (6dcc <socketInit+0x3c>)
    6dac:	4798      	blx	r3
		gbSocketInit	= 1;
    6dae:	2201      	movs	r2, #1
    6db0:	4b02      	ldr	r3, [pc, #8]	; (6dbc <socketInit+0x2c>)
    6db2:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    6db4:	2200      	movs	r2, #0
    6db6:	4b06      	ldr	r3, [pc, #24]	; (6dd0 <socketInit+0x40>)
    6db8:	801a      	strh	r2, [r3, #0]
}
    6dba:	e7ee      	b.n	6d9a <socketInit+0xa>
    6dbc:	20000471 	.word	0x20000471
    6dc0:	2000156c 	.word	0x2000156c
    6dc4:	00003cc1 	.word	0x00003cc1
    6dc8:	00006a85 	.word	0x00006a85
    6dcc:	0000454d 	.word	0x0000454d
    6dd0:	20000472 	.word	0x20000472

00006dd4 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    6dd4:	4b02      	ldr	r3, [pc, #8]	; (6de0 <registerSocketCallback+0xc>)
    6dd6:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    6dd8:	4b02      	ldr	r3, [pc, #8]	; (6de4 <registerSocketCallback+0x10>)
    6dda:	6019      	str	r1, [r3, #0]
}
    6ddc:	4770      	bx	lr
    6dde:	46c0      	nop			; (mov r8, r8)
    6de0:	2000161c 	.word	0x2000161c
    6de4:	20001624 	.word	0x20001624

00006de8 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    6de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dea:	46d6      	mov	lr, sl
    6dec:	4647      	mov	r7, r8
    6dee:	b580      	push	{r7, lr}
    6df0:	b089      	sub	sp, #36	; 0x24
    6df2:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    6df4:	2802      	cmp	r0, #2
    6df6:	d000      	beq.n	6dfa <socket+0x12>
    6df8:	e09c      	b.n	6f34 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    6dfa:	2901      	cmp	r1, #1
    6dfc:	d00a      	beq.n	6e14 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    6dfe:	2902      	cmp	r1, #2
    6e00:	d100      	bne.n	6e04 <socket+0x1c>
    6e02:	e070      	b.n	6ee6 <socket+0xfe>
	SOCKET					sock = -1;
    6e04:	2501      	movs	r5, #1
    6e06:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    6e08:	0028      	movs	r0, r5
    6e0a:	b009      	add	sp, #36	; 0x24
    6e0c:	bc0c      	pop	{r2, r3}
    6e0e:	4690      	mov	r8, r2
    6e10:	469a      	mov	sl, r3
    6e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    6e14:	4c49      	ldr	r4, [pc, #292]	; (6f3c <socket+0x154>)
    6e16:	7827      	ldrb	r7, [r4, #0]
    6e18:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    6e1a:	7826      	ldrb	r6, [r4, #0]
    6e1c:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    6e1e:	7820      	ldrb	r0, [r4, #0]
    6e20:	3001      	adds	r0, #1
    6e22:	3106      	adds	r1, #6
    6e24:	4b46      	ldr	r3, [pc, #280]	; (6f40 <socket+0x158>)
    6e26:	4798      	blx	r3
    6e28:	b2c9      	uxtb	r1, r1
    6e2a:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    6e2c:	0132      	lsls	r2, r6, #4
    6e2e:	4b45      	ldr	r3, [pc, #276]	; (6f44 <socket+0x15c>)
    6e30:	189b      	adds	r3, r3, r2
    6e32:	7a9b      	ldrb	r3, [r3, #10]
    6e34:	2506      	movs	r5, #6
    6e36:	2b00      	cmp	r3, #0
    6e38:	d018      	beq.n	6e6c <socket+0x84>
				u8SockID	= u8NextTcpSock;
    6e3a:	4e40      	ldr	r6, [pc, #256]	; (6f3c <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    6e3c:	4b40      	ldr	r3, [pc, #256]	; (6f40 <socket+0x158>)
    6e3e:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    6e40:	4b40      	ldr	r3, [pc, #256]	; (6f44 <socket+0x15c>)
    6e42:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    6e44:	7837      	ldrb	r7, [r6, #0]
    6e46:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    6e48:	7834      	ldrb	r4, [r6, #0]
    6e4a:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    6e4c:	7830      	ldrb	r0, [r6, #0]
    6e4e:	3001      	adds	r0, #1
    6e50:	2107      	movs	r1, #7
    6e52:	47d0      	blx	sl
    6e54:	b2c9      	uxtb	r1, r1
    6e56:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    6e58:	0123      	lsls	r3, r4, #4
    6e5a:	4443      	add	r3, r8
    6e5c:	7a9b      	ldrb	r3, [r3, #10]
    6e5e:	2b00      	cmp	r3, #0
    6e60:	d007      	beq.n	6e72 <socket+0x8a>
    6e62:	3d01      	subs	r5, #1
    6e64:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    6e66:	2d00      	cmp	r5, #0
    6e68:	d1ec      	bne.n	6e44 <socket+0x5c>
    6e6a:	e7cb      	b.n	6e04 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    6e6c:	4b35      	ldr	r3, [pc, #212]	; (6f44 <socket+0x15c>)
    6e6e:	18d4      	adds	r4, r2, r3
    6e70:	e002      	b.n	6e78 <socket+0x90>
    6e72:	0124      	lsls	r4, r4, #4
    6e74:	4b33      	ldr	r3, [pc, #204]	; (6f44 <socket+0x15c>)
    6e76:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    6e78:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    6e7a:	2d00      	cmp	r5, #0
    6e7c:	dbc4      	blt.n	6e08 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    6e7e:	2210      	movs	r2, #16
    6e80:	2100      	movs	r1, #0
    6e82:	0020      	movs	r0, r4
    6e84:	4b30      	ldr	r3, [pc, #192]	; (6f48 <socket+0x160>)
    6e86:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    6e88:	2301      	movs	r3, #1
    6e8a:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    6e8c:	4a2f      	ldr	r2, [pc, #188]	; (6f4c <socket+0x164>)
    6e8e:	8813      	ldrh	r3, [r2, #0]
    6e90:	3301      	adds	r3, #1
    6e92:	b29b      	uxth	r3, r3
    6e94:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    6e96:	8813      	ldrh	r3, [r2, #0]
    6e98:	b29b      	uxth	r3, r3
    6e9a:	2b00      	cmp	r3, #0
    6e9c:	d103      	bne.n	6ea6 <socket+0xbe>
				++gu16SessionID;
    6e9e:	8813      	ldrh	r3, [r2, #0]
    6ea0:	3301      	adds	r3, #1
    6ea2:	b29b      	uxth	r3, r3
    6ea4:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    6ea6:	4e29      	ldr	r6, [pc, #164]	; (6f4c <socket+0x164>)
    6ea8:	8833      	ldrh	r3, [r6, #0]
    6eaa:	b29b      	uxth	r3, r3
    6eac:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    6eae:	4828      	ldr	r0, [pc, #160]	; (6f50 <socket+0x168>)
    6eb0:	4f28      	ldr	r7, [pc, #160]	; (6f54 <socket+0x16c>)
    6eb2:	47b8      	blx	r7
    6eb4:	8832      	ldrh	r2, [r6, #0]
    6eb6:	b292      	uxth	r2, r2
    6eb8:	0029      	movs	r1, r5
    6eba:	4827      	ldr	r0, [pc, #156]	; (6f58 <socket+0x170>)
    6ebc:	47b8      	blx	r7
    6ebe:	200d      	movs	r0, #13
    6ec0:	4b26      	ldr	r3, [pc, #152]	; (6f5c <socket+0x174>)
    6ec2:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    6ec4:	9b05      	ldr	r3, [sp, #20]
    6ec6:	07db      	lsls	r3, r3, #31
    6ec8:	d59e      	bpl.n	6e08 <socket+0x20>
				strSSLCreate.sslSock = sock;
    6eca:	aa07      	add	r2, sp, #28
    6ecc:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    6ece:	2321      	movs	r3, #33	; 0x21
    6ed0:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    6ed2:	2300      	movs	r3, #0
    6ed4:	9302      	str	r3, [sp, #8]
    6ed6:	9301      	str	r3, [sp, #4]
    6ed8:	9300      	str	r3, [sp, #0]
    6eda:	3304      	adds	r3, #4
    6edc:	2150      	movs	r1, #80	; 0x50
    6ede:	2002      	movs	r0, #2
    6ee0:	4c1f      	ldr	r4, [pc, #124]	; (6f60 <socket+0x178>)
    6ee2:	47a0      	blx	r4
    6ee4:	e790      	b.n	6e08 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    6ee6:	4b1f      	ldr	r3, [pc, #124]	; (6f64 <socket+0x17c>)
    6ee8:	781d      	ldrb	r5, [r3, #0]
    6eea:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    6eec:	781c      	ldrb	r4, [r3, #0]
    6eee:	0124      	lsls	r4, r4, #4
    6ef0:	4a1d      	ldr	r2, [pc, #116]	; (6f68 <socket+0x180>)
    6ef2:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    6ef4:	7819      	ldrb	r1, [r3, #0]
    6ef6:	3101      	adds	r1, #1
    6ef8:	2203      	movs	r2, #3
    6efa:	400a      	ands	r2, r1
    6efc:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    6efe:	7aa3      	ldrb	r3, [r4, #10]
    6f00:	2b00      	cmp	r3, #0
    6f02:	d014      	beq.n	6f2e <socket+0x146>
    6f04:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    6f06:	4917      	ldr	r1, [pc, #92]	; (6f64 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    6f08:	4f17      	ldr	r7, [pc, #92]	; (6f68 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    6f0a:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    6f0c:	780d      	ldrb	r5, [r1, #0]
    6f0e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    6f10:	780c      	ldrb	r4, [r1, #0]
    6f12:	0124      	lsls	r4, r4, #4
    6f14:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    6f16:	780b      	ldrb	r3, [r1, #0]
    6f18:	3301      	adds	r3, #1
    6f1a:	4003      	ands	r3, r0
    6f1c:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    6f1e:	7aa3      	ldrb	r3, [r4, #10]
    6f20:	2b00      	cmp	r3, #0
    6f22:	d004      	beq.n	6f2e <socket+0x146>
    6f24:	3a01      	subs	r2, #1
    6f26:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    6f28:	2a00      	cmp	r2, #0
    6f2a:	d1ef      	bne.n	6f0c <socket+0x124>
    6f2c:	e76a      	b.n	6e04 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    6f2e:	3507      	adds	r5, #7
    6f30:	b26d      	sxtb	r5, r5
					break;
    6f32:	e7a2      	b.n	6e7a <socket+0x92>
	SOCKET					sock = -1;
    6f34:	2501      	movs	r5, #1
    6f36:	426d      	negs	r5, r5
    6f38:	e766      	b.n	6e08 <socket+0x20>
    6f3a:	46c0      	nop			; (mov r8, r8)
    6f3c:	20000474 	.word	0x20000474
    6f40:	0000b93d 	.word	0x0000b93d
    6f44:	2000156c 	.word	0x2000156c
    6f48:	00003cc1 	.word	0x00003cc1
    6f4c:	20000472 	.word	0x20000472
    6f50:	0000f1f4 	.word	0x0000f1f4
    6f54:	0000d4d5 	.word	0x0000d4d5
    6f58:	0000fd2c 	.word	0x0000fd2c
    6f5c:	0000d509 	.word	0x0000d509
    6f60:	00003dd5 	.word	0x00003dd5
    6f64:	20000475 	.word	0x20000475
    6f68:	200015dc 	.word	0x200015dc

00006f6c <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    6f6c:	b570      	push	{r4, r5, r6, lr}
    6f6e:	b088      	sub	sp, #32
    6f70:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    6f72:	2900      	cmp	r1, #0
    6f74:	d02b      	beq.n	6fce <bind+0x62>
    6f76:	2800      	cmp	r0, #0
    6f78:	db2c      	blt.n	6fd4 <bind+0x68>
    6f7a:	0100      	lsls	r0, r0, #4
    6f7c:	4b1a      	ldr	r3, [pc, #104]	; (6fe8 <bind+0x7c>)
    6f7e:	181b      	adds	r3, r3, r0
    6f80:	7a9b      	ldrb	r3, [r3, #10]
    6f82:	2b01      	cmp	r3, #1
    6f84:	d129      	bne.n	6fda <bind+0x6e>
    6f86:	2a00      	cmp	r2, #0
    6f88:	d02a      	beq.n	6fe0 <bind+0x74>
	{
		tstrBindCmd			strBind;
		uint8				u8CMD = SOCKET_CMD_BIND;
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    6f8a:	4b17      	ldr	r3, [pc, #92]	; (6fe8 <bind+0x7c>)
    6f8c:	181b      	adds	r3, r3, r0
    6f8e:	7adb      	ldrb	r3, [r3, #11]
		uint8				u8CMD = SOCKET_CMD_BIND;
    6f90:	2641      	movs	r6, #65	; 0x41
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    6f92:	07db      	lsls	r3, r3, #31
    6f94:	d500      	bpl.n	6f98 <bind+0x2c>
		{
			u8CMD = SOCKET_CMD_SSL_BIND;
    6f96:	3613      	adds	r6, #19
		}

		/* Build the bind request. */
		strBind.sock = sock;
    6f98:	ad05      	add	r5, sp, #20
    6f9a:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    6f9c:	2208      	movs	r2, #8
    6f9e:	0028      	movs	r0, r5
    6fa0:	4b12      	ldr	r3, [pc, #72]	; (6fec <bind+0x80>)
    6fa2:	4798      	blx	r3
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
    6fa4:	0124      	lsls	r4, r4, #4
    6fa6:	4b10      	ldr	r3, [pc, #64]	; (6fe8 <bind+0x7c>)
    6fa8:	191c      	adds	r4, r3, r4
    6faa:	88e3      	ldrh	r3, [r4, #6]
    6fac:	816b      	strh	r3, [r5, #10]
		
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
    6fae:	2300      	movs	r3, #0
    6fb0:	9302      	str	r3, [sp, #8]
    6fb2:	9301      	str	r3, [sp, #4]
    6fb4:	9300      	str	r3, [sp, #0]
    6fb6:	330c      	adds	r3, #12
    6fb8:	002a      	movs	r2, r5
    6fba:	0031      	movs	r1, r6
    6fbc:	2002      	movs	r0, #2
    6fbe:	4c0c      	ldr	r4, [pc, #48]	; (6ff0 <bind+0x84>)
    6fc0:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    6fc2:	2800      	cmp	r0, #0
    6fc4:	d001      	beq.n	6fca <bind+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    6fc6:	2009      	movs	r0, #9
    6fc8:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    6fca:	b008      	add	sp, #32
    6fcc:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    6fce:	2006      	movs	r0, #6
    6fd0:	4240      	negs	r0, r0
    6fd2:	e7fa      	b.n	6fca <bind+0x5e>
    6fd4:	2006      	movs	r0, #6
    6fd6:	4240      	negs	r0, r0
    6fd8:	e7f7      	b.n	6fca <bind+0x5e>
    6fda:	2006      	movs	r0, #6
    6fdc:	4240      	negs	r0, r0
    6fde:	e7f4      	b.n	6fca <bind+0x5e>
    6fe0:	2006      	movs	r0, #6
    6fe2:	4240      	negs	r0, r0
    6fe4:	e7f1      	b.n	6fca <bind+0x5e>
    6fe6:	46c0      	nop			; (mov r8, r8)
    6fe8:	2000156c 	.word	0x2000156c
    6fec:	00003cad 	.word	0x00003cad
    6ff0:	00003dd5 	.word	0x00003dd5

00006ff4 <listen>:

Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
    6ff4:	b510      	push	{r4, lr}
    6ff6:	b086      	sub	sp, #24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    6ff8:	2800      	cmp	r0, #0
    6ffa:	db1c      	blt.n	7036 <listen+0x42>
    6ffc:	0102      	lsls	r2, r0, #4
    6ffe:	4b11      	ldr	r3, [pc, #68]	; (7044 <listen+0x50>)
    7000:	189b      	adds	r3, r3, r2
    7002:	7a9b      	ldrb	r3, [r3, #10]
    7004:	2b01      	cmp	r3, #1
    7006:	d119      	bne.n	703c <listen+0x48>
	{
		tstrListenCmd		strListen;

		strListen.sock = sock;
    7008:	aa05      	add	r2, sp, #20
    700a:	7010      	strb	r0, [r2, #0]
		strListen.u8BackLog = backlog;
    700c:	7051      	strb	r1, [r2, #1]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
    700e:	0100      	lsls	r0, r0, #4
    7010:	4b0c      	ldr	r3, [pc, #48]	; (7044 <listen+0x50>)
    7012:	1818      	adds	r0, r3, r0
    7014:	88c3      	ldrh	r3, [r0, #6]
    7016:	8053      	strh	r3, [r2, #2]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
    7018:	2300      	movs	r3, #0
    701a:	9302      	str	r3, [sp, #8]
    701c:	9301      	str	r3, [sp, #4]
    701e:	9300      	str	r3, [sp, #0]
    7020:	3304      	adds	r3, #4
    7022:	2142      	movs	r1, #66	; 0x42
    7024:	2002      	movs	r0, #2
    7026:	4c08      	ldr	r4, [pc, #32]	; (7048 <listen+0x54>)
    7028:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    702a:	2800      	cmp	r0, #0
    702c:	d001      	beq.n	7032 <listen+0x3e>
		{
			s8Ret = SOCK_ERR_INVALID;
    702e:	2009      	movs	r0, #9
    7030:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    7032:	b006      	add	sp, #24
    7034:	bd10      	pop	{r4, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    7036:	2006      	movs	r0, #6
    7038:	4240      	negs	r0, r0
    703a:	e7fa      	b.n	7032 <listen+0x3e>
    703c:	2006      	movs	r0, #6
    703e:	4240      	negs	r0, r0
    7040:	e7f7      	b.n	7032 <listen+0x3e>
    7042:	46c0      	nop			; (mov r8, r8)
    7044:	2000156c 	.word	0x2000156c
    7048:	00003dd5 	.word	0x00003dd5

0000704c <accept>:
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
    704c:	2800      	cmp	r0, #0
    704e:	db07      	blt.n	7060 <accept+0x14>
    7050:	0100      	lsls	r0, r0, #4
    7052:	4b06      	ldr	r3, [pc, #24]	; (706c <accept+0x20>)
    7054:	1818      	adds	r0, r3, r0
    7056:	7a83      	ldrb	r3, [r0, #10]
    7058:	2b01      	cmp	r3, #1
    705a:	d104      	bne.n	7066 <accept+0x1a>
	{
		s8Ret = SOCK_ERR_NO_ERROR;
    705c:	2000      	movs	r0, #0
	}
	return s8Ret;
}
    705e:	4770      	bx	lr
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    7060:	2006      	movs	r0, #6
    7062:	4240      	negs	r0, r0
    7064:	e7fb      	b.n	705e <accept+0x12>
    7066:	2006      	movs	r0, #6
    7068:	4240      	negs	r0, r0
    706a:	e7f8      	b.n	705e <accept+0x12>
    706c:	2000156c 	.word	0x2000156c

00007070 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    7070:	b570      	push	{r4, r5, r6, lr}
    7072:	b088      	sub	sp, #32
    7074:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    7076:	db30      	blt.n	70da <connect+0x6a>
    7078:	2900      	cmp	r1, #0
    707a:	d031      	beq.n	70e0 <connect+0x70>
    707c:	0100      	lsls	r0, r0, #4
    707e:	4b1d      	ldr	r3, [pc, #116]	; (70f4 <connect+0x84>)
    7080:	181b      	adds	r3, r3, r0
    7082:	7a9b      	ldrb	r3, [r3, #10]
    7084:	2b01      	cmp	r3, #1
    7086:	d12e      	bne.n	70e6 <connect+0x76>
    7088:	2a00      	cmp	r2, #0
    708a:	d02f      	beq.n	70ec <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    708c:	4b19      	ldr	r3, [pc, #100]	; (70f4 <connect+0x84>)
    708e:	181b      	adds	r3, r3, r0
    7090:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    7092:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    7094:	07db      	lsls	r3, r3, #31
    7096:	d505      	bpl.n	70a4 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    7098:	4b16      	ldr	r3, [pc, #88]	; (70f4 <connect+0x84>)
    709a:	181b      	adds	r3, r3, r0
    709c:	7ada      	ldrb	r2, [r3, #11]
    709e:	ab05      	add	r3, sp, #20
    70a0:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    70a2:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    70a4:	ad05      	add	r5, sp, #20
    70a6:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    70a8:	2208      	movs	r2, #8
    70aa:	0028      	movs	r0, r5
    70ac:	4b12      	ldr	r3, [pc, #72]	; (70f8 <connect+0x88>)
    70ae:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    70b0:	0124      	lsls	r4, r4, #4
    70b2:	4b10      	ldr	r3, [pc, #64]	; (70f4 <connect+0x84>)
    70b4:	191c      	adds	r4, r3, r4
    70b6:	88e3      	ldrh	r3, [r4, #6]
    70b8:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    70ba:	2300      	movs	r3, #0
    70bc:	9302      	str	r3, [sp, #8]
    70be:	9301      	str	r3, [sp, #4]
    70c0:	9300      	str	r3, [sp, #0]
    70c2:	330c      	adds	r3, #12
    70c4:	002a      	movs	r2, r5
    70c6:	0031      	movs	r1, r6
    70c8:	2002      	movs	r0, #2
    70ca:	4c0c      	ldr	r4, [pc, #48]	; (70fc <connect+0x8c>)
    70cc:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    70ce:	2800      	cmp	r0, #0
    70d0:	d001      	beq.n	70d6 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    70d2:	2009      	movs	r0, #9
    70d4:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    70d6:	b008      	add	sp, #32
    70d8:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    70da:	2006      	movs	r0, #6
    70dc:	4240      	negs	r0, r0
    70de:	e7fa      	b.n	70d6 <connect+0x66>
    70e0:	2006      	movs	r0, #6
    70e2:	4240      	negs	r0, r0
    70e4:	e7f7      	b.n	70d6 <connect+0x66>
    70e6:	2006      	movs	r0, #6
    70e8:	4240      	negs	r0, r0
    70ea:	e7f4      	b.n	70d6 <connect+0x66>
    70ec:	2006      	movs	r0, #6
    70ee:	4240      	negs	r0, r0
    70f0:	e7f1      	b.n	70d6 <connect+0x66>
    70f2:	46c0      	nop			; (mov r8, r8)
    70f4:	2000156c 	.word	0x2000156c
    70f8:	00003cad 	.word	0x00003cad
    70fc:	00003dd5 	.word	0x00003dd5

00007100 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    7100:	b530      	push	{r4, r5, lr}
    7102:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    7104:	2800      	cmp	r0, #0
    7106:	db36      	blt.n	7176 <send+0x76>
    7108:	2900      	cmp	r1, #0
    710a:	d037      	beq.n	717c <send+0x7c>
    710c:	23af      	movs	r3, #175	; 0xaf
    710e:	00db      	lsls	r3, r3, #3
    7110:	429a      	cmp	r2, r3
    7112:	d836      	bhi.n	7182 <send+0x82>
    7114:	0104      	lsls	r4, r0, #4
    7116:	4b1e      	ldr	r3, [pc, #120]	; (7190 <send+0x90>)
    7118:	191b      	adds	r3, r3, r4
    711a:	7a9b      	ldrb	r3, [r3, #10]
    711c:	2b01      	cmp	r3, #1
    711e:	d133      	bne.n	7188 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    7120:	ab04      	add	r3, sp, #16
    7122:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    7124:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    7126:	0025      	movs	r5, r4
    7128:	4c19      	ldr	r4, [pc, #100]	; (7190 <send+0x90>)
    712a:	1964      	adds	r4, r4, r5
    712c:	88e4      	ldrh	r4, [r4, #6]
    712e:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    7130:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    7132:	2806      	cmp	r0, #6
    7134:	dd00      	ble.n	7138 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    7136:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    7138:	0104      	lsls	r4, r0, #4
    713a:	4b15      	ldr	r3, [pc, #84]	; (7190 <send+0x90>)
    713c:	191b      	adds	r3, r3, r4
    713e:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    7140:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    7142:	07e4      	lsls	r4, r4, #31
    7144:	d505      	bpl.n	7152 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    7146:	0100      	lsls	r0, r0, #4
    7148:	4b11      	ldr	r3, [pc, #68]	; (7190 <send+0x90>)
    714a:	1818      	adds	r0, r3, r0
    714c:	8905      	ldrh	r5, [r0, #8]
    714e:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    7150:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    7152:	2080      	movs	r0, #128	; 0x80
    7154:	4318      	orrs	r0, r3
    7156:	9502      	str	r5, [sp, #8]
    7158:	9201      	str	r2, [sp, #4]
    715a:	9100      	str	r1, [sp, #0]
    715c:	2310      	movs	r3, #16
    715e:	aa04      	add	r2, sp, #16
    7160:	0001      	movs	r1, r0
    7162:	2002      	movs	r0, #2
    7164:	4c0b      	ldr	r4, [pc, #44]	; (7194 <send+0x94>)
    7166:	47a0      	blx	r4
    7168:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    716a:	2800      	cmp	r0, #0
    716c:	d000      	beq.n	7170 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    716e:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    7170:	0018      	movs	r0, r3
    7172:	b009      	add	sp, #36	; 0x24
    7174:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    7176:	2306      	movs	r3, #6
    7178:	425b      	negs	r3, r3
    717a:	e7f9      	b.n	7170 <send+0x70>
    717c:	2306      	movs	r3, #6
    717e:	425b      	negs	r3, r3
    7180:	e7f6      	b.n	7170 <send+0x70>
    7182:	2306      	movs	r3, #6
    7184:	425b      	negs	r3, r3
    7186:	e7f3      	b.n	7170 <send+0x70>
    7188:	2306      	movs	r3, #6
    718a:	425b      	negs	r3, r3
    718c:	e7f0      	b.n	7170 <send+0x70>
    718e:	46c0      	nop			; (mov r8, r8)
    7190:	2000156c 	.word	0x2000156c
    7194:	00003dd5 	.word	0x00003dd5

00007198 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    7198:	b530      	push	{r4, r5, lr}
    719a:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    719c:	2800      	cmp	r0, #0
    719e:	db34      	blt.n	720a <recv+0x72>
    71a0:	2900      	cmp	r1, #0
    71a2:	d035      	beq.n	7210 <recv+0x78>
    71a4:	2a00      	cmp	r2, #0
    71a6:	d036      	beq.n	7216 <recv+0x7e>
    71a8:	0105      	lsls	r5, r0, #4
    71aa:	4c1e      	ldr	r4, [pc, #120]	; (7224 <recv+0x8c>)
    71ac:	1964      	adds	r4, r4, r5
    71ae:	7aa4      	ldrb	r4, [r4, #10]
    71b0:	2c01      	cmp	r4, #1
    71b2:	d133      	bne.n	721c <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    71b4:	4c1b      	ldr	r4, [pc, #108]	; (7224 <recv+0x8c>)
    71b6:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    71b8:	1964      	adds	r4, r4, r5
    71ba:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    71bc:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    71be:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    71c0:	2900      	cmp	r1, #0
    71c2:	d11d      	bne.n	7200 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    71c4:	2101      	movs	r1, #1
    71c6:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    71c8:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    71ca:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    71cc:	07d2      	lsls	r2, r2, #31
    71ce:	d500      	bpl.n	71d2 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    71d0:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    71d2:	2b00      	cmp	r3, #0
    71d4:	d117      	bne.n	7206 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    71d6:	3b01      	subs	r3, #1
    71d8:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    71da:	aa04      	add	r2, sp, #16
    71dc:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    71de:	0100      	lsls	r0, r0, #4
    71e0:	4b10      	ldr	r3, [pc, #64]	; (7224 <recv+0x8c>)
    71e2:	1818      	adds	r0, r3, r0
    71e4:	88c3      	ldrh	r3, [r0, #6]
    71e6:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    71e8:	2300      	movs	r3, #0
    71ea:	9302      	str	r3, [sp, #8]
    71ec:	9301      	str	r3, [sp, #4]
    71ee:	9300      	str	r3, [sp, #0]
    71f0:	3308      	adds	r3, #8
    71f2:	2002      	movs	r0, #2
    71f4:	4c0c      	ldr	r4, [pc, #48]	; (7228 <recv+0x90>)
    71f6:	47a0      	blx	r4
    71f8:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    71fa:	2800      	cmp	r0, #0
    71fc:	d000      	beq.n	7200 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    71fe:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    7200:	0010      	movs	r0, r2
    7202:	b007      	add	sp, #28
    7204:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    7206:	9304      	str	r3, [sp, #16]
    7208:	e7e7      	b.n	71da <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    720a:	2206      	movs	r2, #6
    720c:	4252      	negs	r2, r2
    720e:	e7f7      	b.n	7200 <recv+0x68>
    7210:	2206      	movs	r2, #6
    7212:	4252      	negs	r2, r2
    7214:	e7f4      	b.n	7200 <recv+0x68>
    7216:	2206      	movs	r2, #6
    7218:	4252      	negs	r2, r2
    721a:	e7f1      	b.n	7200 <recv+0x68>
    721c:	2206      	movs	r2, #6
    721e:	4252      	negs	r2, r2
    7220:	e7ee      	b.n	7200 <recv+0x68>
    7222:	46c0      	nop			; (mov r8, r8)
    7224:	2000156c 	.word	0x2000156c
    7228:	00003dd5 	.word	0x00003dd5

0000722c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    722c:	b530      	push	{r4, r5, lr}
    722e:	b087      	sub	sp, #28
    7230:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    7232:	481c      	ldr	r0, [pc, #112]	; (72a4 <close+0x78>)
    7234:	4d1c      	ldr	r5, [pc, #112]	; (72a8 <close+0x7c>)
    7236:	47a8      	blx	r5
    7238:	0021      	movs	r1, r4
    723a:	481c      	ldr	r0, [pc, #112]	; (72ac <close+0x80>)
    723c:	47a8      	blx	r5
    723e:	200d      	movs	r0, #13
    7240:	4b1b      	ldr	r3, [pc, #108]	; (72b0 <close+0x84>)
    7242:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    7244:	2c00      	cmp	r4, #0
    7246:	db27      	blt.n	7298 <close+0x6c>
    7248:	0122      	lsls	r2, r4, #4
    724a:	4b1a      	ldr	r3, [pc, #104]	; (72b4 <close+0x88>)
    724c:	189b      	adds	r3, r3, r2
    724e:	7a9b      	ldrb	r3, [r3, #10]
    7250:	2b01      	cmp	r3, #1
    7252:	d124      	bne.n	729e <close+0x72>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    7254:	a905      	add	r1, sp, #20
    7256:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    7258:	4b16      	ldr	r3, [pc, #88]	; (72b4 <close+0x88>)
    725a:	189b      	adds	r3, r3, r2
    725c:	88da      	ldrh	r2, [r3, #6]
    725e:	804a      	strh	r2, [r1, #2]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    7260:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    7262:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    7264:	07db      	lsls	r3, r3, #31
    7266:	d500      	bpl.n	726a <close+0x3e>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    7268:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    726a:	2300      	movs	r3, #0
    726c:	9302      	str	r3, [sp, #8]
    726e:	9301      	str	r3, [sp, #4]
    7270:	9300      	str	r3, [sp, #0]
    7272:	3304      	adds	r3, #4
    7274:	aa05      	add	r2, sp, #20
    7276:	2002      	movs	r0, #2
    7278:	4d0f      	ldr	r5, [pc, #60]	; (72b8 <close+0x8c>)
    727a:	47a8      	blx	r5
    727c:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    727e:	d001      	beq.n	7284 <close+0x58>
		{
			s8Ret = SOCK_ERR_INVALID;
    7280:	2509      	movs	r5, #9
    7282:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    7284:	0124      	lsls	r4, r4, #4
    7286:	480b      	ldr	r0, [pc, #44]	; (72b4 <close+0x88>)
    7288:	1820      	adds	r0, r4, r0
    728a:	2210      	movs	r2, #16
    728c:	2100      	movs	r1, #0
    728e:	4b0b      	ldr	r3, [pc, #44]	; (72bc <close+0x90>)
    7290:	4798      	blx	r3
	}
	return s8Ret;
}
    7292:	0028      	movs	r0, r5
    7294:	b007      	add	sp, #28
    7296:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    7298:	2506      	movs	r5, #6
    729a:	426d      	negs	r5, r5
    729c:	e7f9      	b.n	7292 <close+0x66>
    729e:	2506      	movs	r5, #6
    72a0:	426d      	negs	r5, r5
    72a2:	e7f6      	b.n	7292 <close+0x66>
    72a4:	0000f1f4 	.word	0x0000f1f4
    72a8:	0000d4d5 	.word	0x0000d4d5
    72ac:	0000fd14 	.word	0x0000fd14
    72b0:	0000d509 	.word	0x0000d509
    72b4:	2000156c 	.word	0x2000156c
    72b8:	00003dd5 	.word	0x00003dd5
    72bc:	00003cc1 	.word	0x00003cc1

000072c0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    72c0:	b510      	push	{r4, lr}
    72c2:	b084      	sub	sp, #16
    72c4:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    72c6:	4b0b      	ldr	r3, [pc, #44]	; (72f4 <gethostbyname+0x34>)
    72c8:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    72ca:	b2c3      	uxtb	r3, r0
    72cc:	2b40      	cmp	r3, #64	; 0x40
    72ce:	d80d      	bhi.n	72ec <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    72d0:	23ff      	movs	r3, #255	; 0xff
    72d2:	4003      	ands	r3, r0
    72d4:	3301      	adds	r3, #1
    72d6:	2200      	movs	r2, #0
    72d8:	9202      	str	r2, [sp, #8]
    72da:	9201      	str	r2, [sp, #4]
    72dc:	9200      	str	r2, [sp, #0]
    72de:	0022      	movs	r2, r4
    72e0:	214a      	movs	r1, #74	; 0x4a
    72e2:	2002      	movs	r0, #2
    72e4:	4c04      	ldr	r4, [pc, #16]	; (72f8 <gethostbyname+0x38>)
    72e6:	47a0      	blx	r4
	}
	return s8Err;
}
    72e8:	b004      	add	sp, #16
    72ea:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    72ec:	2006      	movs	r0, #6
    72ee:	4240      	negs	r0, r0
    72f0:	e7fa      	b.n	72e8 <gethostbyname+0x28>
    72f2:	46c0      	nop			; (mov r8, r8)
    72f4:	00003cd1 	.word	0x00003cd1
    72f8:	00003dd5 	.word	0x00003dd5

000072fc <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    72fc:	b570      	push	{r4, r5, r6, lr}
    72fe:	b082      	sub	sp, #8
    7300:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    7302:	4b2a      	ldr	r3, [pc, #168]	; (73ac <spi_flash_enable+0xb0>)
    7304:	4798      	blx	r3
    7306:	0500      	lsls	r0, r0, #20
    7308:	0d00      	lsrs	r0, r0, #20
    730a:	4b29      	ldr	r3, [pc, #164]	; (73b0 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    730c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    730e:	4298      	cmp	r0, r3
    7310:	d802      	bhi.n	7318 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    7312:	0028      	movs	r0, r5
    7314:	b002      	add	sp, #8
    7316:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    7318:	a901      	add	r1, sp, #4
    731a:	4826      	ldr	r0, [pc, #152]	; (73b4 <spi_flash_enable+0xb8>)
    731c:	4b26      	ldr	r3, [pc, #152]	; (73b8 <spi_flash_enable+0xbc>)
    731e:	4798      	blx	r3
    7320:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    7322:	d1f6      	bne.n	7312 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    7324:	4b25      	ldr	r3, [pc, #148]	; (73bc <spi_flash_enable+0xc0>)
    7326:	9a01      	ldr	r2, [sp, #4]
    7328:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    732a:	4925      	ldr	r1, [pc, #148]	; (73c0 <spi_flash_enable+0xc4>)
    732c:	4319      	orrs	r1, r3
    732e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    7330:	4820      	ldr	r0, [pc, #128]	; (73b4 <spi_flash_enable+0xb8>)
    7332:	4b24      	ldr	r3, [pc, #144]	; (73c4 <spi_flash_enable+0xc8>)
    7334:	4798      	blx	r3
		if(enable) {
    7336:	2c00      	cmp	r4, #0
    7338:	d020      	beq.n	737c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    733a:	2100      	movs	r1, #0
    733c:	4822      	ldr	r0, [pc, #136]	; (73c8 <spi_flash_enable+0xcc>)
    733e:	4c21      	ldr	r4, [pc, #132]	; (73c4 <spi_flash_enable+0xc8>)
    7340:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    7342:	21ab      	movs	r1, #171	; 0xab
    7344:	4821      	ldr	r0, [pc, #132]	; (73cc <spi_flash_enable+0xd0>)
    7346:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    7348:	2101      	movs	r1, #1
    734a:	4821      	ldr	r0, [pc, #132]	; (73d0 <spi_flash_enable+0xd4>)
    734c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    734e:	2100      	movs	r1, #0
    7350:	4820      	ldr	r0, [pc, #128]	; (73d4 <spi_flash_enable+0xd8>)
    7352:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    7354:	2181      	movs	r1, #129	; 0x81
    7356:	4820      	ldr	r0, [pc, #128]	; (73d8 <spi_flash_enable+0xdc>)
    7358:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    735a:	4e20      	ldr	r6, [pc, #128]	; (73dc <spi_flash_enable+0xe0>)
    735c:	4c20      	ldr	r4, [pc, #128]	; (73e0 <spi_flash_enable+0xe4>)
    735e:	0030      	movs	r0, r6
    7360:	47a0      	blx	r4
    7362:	2801      	cmp	r0, #1
    7364:	d1fb      	bne.n	735e <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    7366:	4b15      	ldr	r3, [pc, #84]	; (73bc <spi_flash_enable+0xc0>)
    7368:	9a01      	ldr	r2, [sp, #4]
    736a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    736c:	2180      	movs	r1, #128	; 0x80
    736e:	0249      	lsls	r1, r1, #9
    7370:	4319      	orrs	r1, r3
    7372:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    7374:	480f      	ldr	r0, [pc, #60]	; (73b4 <spi_flash_enable+0xb8>)
    7376:	4b13      	ldr	r3, [pc, #76]	; (73c4 <spi_flash_enable+0xc8>)
    7378:	4798      	blx	r3
    737a:	e7ca      	b.n	7312 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    737c:	2100      	movs	r1, #0
    737e:	4812      	ldr	r0, [pc, #72]	; (73c8 <spi_flash_enable+0xcc>)
    7380:	4c10      	ldr	r4, [pc, #64]	; (73c4 <spi_flash_enable+0xc8>)
    7382:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    7384:	21b9      	movs	r1, #185	; 0xb9
    7386:	4811      	ldr	r0, [pc, #68]	; (73cc <spi_flash_enable+0xd0>)
    7388:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    738a:	2101      	movs	r1, #1
    738c:	4810      	ldr	r0, [pc, #64]	; (73d0 <spi_flash_enable+0xd4>)
    738e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    7390:	2100      	movs	r1, #0
    7392:	4810      	ldr	r0, [pc, #64]	; (73d4 <spi_flash_enable+0xd8>)
    7394:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    7396:	2181      	movs	r1, #129	; 0x81
    7398:	480f      	ldr	r0, [pc, #60]	; (73d8 <spi_flash_enable+0xdc>)
    739a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    739c:	4e0f      	ldr	r6, [pc, #60]	; (73dc <spi_flash_enable+0xe0>)
    739e:	4c10      	ldr	r4, [pc, #64]	; (73e0 <spi_flash_enable+0xe4>)
    73a0:	0030      	movs	r0, r6
    73a2:	47a0      	blx	r4
    73a4:	2801      	cmp	r0, #1
    73a6:	d1fb      	bne.n	73a0 <spi_flash_enable+0xa4>
    73a8:	e7dd      	b.n	7366 <spi_flash_enable+0x6a>
    73aa:	46c0      	nop			; (mov r8, r8)
    73ac:	000054a1 	.word	0x000054a1
    73b0:	0000039f 	.word	0x0000039f
    73b4:	00001410 	.word	0x00001410
    73b8:	00005a1d 	.word	0x00005a1d
    73bc:	f8888fff 	.word	0xf8888fff
    73c0:	01111000 	.word	0x01111000
    73c4:	00005a29 	.word	0x00005a29
    73c8:	00010208 	.word	0x00010208
    73cc:	0001020c 	.word	0x0001020c
    73d0:	00010214 	.word	0x00010214
    73d4:	0001021c 	.word	0x0001021c
    73d8:	00010204 	.word	0x00010204
    73dc:	00010218 	.word	0x00010218
    73e0:	00005a11 	.word	0x00005a11

000073e4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    73e4:	4b0c      	ldr	r3, [pc, #48]	; (7418 <cpu_irq_enter_critical+0x34>)
    73e6:	681b      	ldr	r3, [r3, #0]
    73e8:	2b00      	cmp	r3, #0
    73ea:	d106      	bne.n	73fa <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    73ec:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    73f0:	2b00      	cmp	r3, #0
    73f2:	d007      	beq.n	7404 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    73f4:	2200      	movs	r2, #0
    73f6:	4b09      	ldr	r3, [pc, #36]	; (741c <cpu_irq_enter_critical+0x38>)
    73f8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    73fa:	4a07      	ldr	r2, [pc, #28]	; (7418 <cpu_irq_enter_critical+0x34>)
    73fc:	6813      	ldr	r3, [r2, #0]
    73fe:	3301      	adds	r3, #1
    7400:	6013      	str	r3, [r2, #0]
}
    7402:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    7404:	b672      	cpsid	i
    7406:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    740a:	2200      	movs	r2, #0
    740c:	4b04      	ldr	r3, [pc, #16]	; (7420 <cpu_irq_enter_critical+0x3c>)
    740e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    7410:	3201      	adds	r2, #1
    7412:	4b02      	ldr	r3, [pc, #8]	; (741c <cpu_irq_enter_critical+0x38>)
    7414:	701a      	strb	r2, [r3, #0]
    7416:	e7f0      	b.n	73fa <cpu_irq_enter_critical+0x16>
    7418:	20000478 	.word	0x20000478
    741c:	2000047c 	.word	0x2000047c
    7420:	20000022 	.word	0x20000022

00007424 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    7424:	4b08      	ldr	r3, [pc, #32]	; (7448 <cpu_irq_leave_critical+0x24>)
    7426:	681a      	ldr	r2, [r3, #0]
    7428:	3a01      	subs	r2, #1
    742a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    742c:	681b      	ldr	r3, [r3, #0]
    742e:	2b00      	cmp	r3, #0
    7430:	d109      	bne.n	7446 <cpu_irq_leave_critical+0x22>
    7432:	4b06      	ldr	r3, [pc, #24]	; (744c <cpu_irq_leave_critical+0x28>)
    7434:	781b      	ldrb	r3, [r3, #0]
    7436:	2b00      	cmp	r3, #0
    7438:	d005      	beq.n	7446 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    743a:	2201      	movs	r2, #1
    743c:	4b04      	ldr	r3, [pc, #16]	; (7450 <cpu_irq_leave_critical+0x2c>)
    743e:	701a      	strb	r2, [r3, #0]
    7440:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7444:	b662      	cpsie	i
	}
}
    7446:	4770      	bx	lr
    7448:	20000478 	.word	0x20000478
    744c:	2000047c 	.word	0x2000047c
    7450:	20000022 	.word	0x20000022

00007454 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    7454:	b5f0      	push	{r4, r5, r6, r7, lr}
    7456:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    7458:	ac01      	add	r4, sp, #4
    745a:	2501      	movs	r5, #1
    745c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    745e:	2700      	movs	r7, #0
    7460:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    7462:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    7464:	0021      	movs	r1, r4
    7466:	2017      	movs	r0, #23
    7468:	4e06      	ldr	r6, [pc, #24]	; (7484 <system_board_init+0x30>)
    746a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    746c:	2280      	movs	r2, #128	; 0x80
    746e:	0412      	lsls	r2, r2, #16
    7470:	4b05      	ldr	r3, [pc, #20]	; (7488 <system_board_init+0x34>)
    7472:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    7474:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    7476:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    7478:	0021      	movs	r1, r4
    747a:	2037      	movs	r0, #55	; 0x37
    747c:	47b0      	blx	r6
}
    747e:	b003      	add	sp, #12
    7480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7482:	46c0      	nop			; (mov r8, r8)
    7484:	0000765d 	.word	0x0000765d
    7488:	41004400 	.word	0x41004400

0000748c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    748c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    748e:	2a00      	cmp	r2, #0
    7490:	d001      	beq.n	7496 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    7492:	0018      	movs	r0, r3
    7494:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    7496:	008b      	lsls	r3, r1, #2
    7498:	4a06      	ldr	r2, [pc, #24]	; (74b4 <extint_register_callback+0x28>)
    749a:	589b      	ldr	r3, [r3, r2]
    749c:	2b00      	cmp	r3, #0
    749e:	d003      	beq.n	74a8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    74a0:	4283      	cmp	r3, r0
    74a2:	d005      	beq.n	74b0 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    74a4:	231d      	movs	r3, #29
    74a6:	e7f4      	b.n	7492 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    74a8:	0089      	lsls	r1, r1, #2
    74aa:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    74ac:	2300      	movs	r3, #0
    74ae:	e7f0      	b.n	7492 <extint_register_callback+0x6>
		return STATUS_OK;
    74b0:	2300      	movs	r3, #0
    74b2:	e7ee      	b.n	7492 <extint_register_callback+0x6>
    74b4:	2000162c 	.word	0x2000162c

000074b8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    74b8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    74ba:	2900      	cmp	r1, #0
    74bc:	d001      	beq.n	74c2 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    74be:	0018      	movs	r0, r3
    74c0:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    74c2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    74c4:	281f      	cmp	r0, #31
    74c6:	d800      	bhi.n	74ca <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    74c8:	4a02      	ldr	r2, [pc, #8]	; (74d4 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    74ca:	2301      	movs	r3, #1
    74cc:	4083      	lsls	r3, r0
    74ce:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    74d0:	2300      	movs	r3, #0
    74d2:	e7f4      	b.n	74be <extint_chan_enable_callback+0x6>
    74d4:	40001800 	.word	0x40001800

000074d8 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    74d8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    74da:	2900      	cmp	r1, #0
    74dc:	d001      	beq.n	74e2 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    74de:	0018      	movs	r0, r3
    74e0:	4770      	bx	lr
		return NULL;
    74e2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    74e4:	281f      	cmp	r0, #31
    74e6:	d800      	bhi.n	74ea <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    74e8:	4a02      	ldr	r2, [pc, #8]	; (74f4 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    74ea:	2301      	movs	r3, #1
    74ec:	4083      	lsls	r3, r0
    74ee:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    74f0:	2300      	movs	r3, #0
    74f2:	e7f4      	b.n	74de <extint_chan_disable_callback+0x6>
    74f4:	40001800 	.word	0x40001800

000074f8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    74f8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    74fa:	2200      	movs	r2, #0
    74fc:	4b10      	ldr	r3, [pc, #64]	; (7540 <EIC_Handler+0x48>)
    74fe:	701a      	strb	r2, [r3, #0]
    7500:	2300      	movs	r3, #0
    7502:	4910      	ldr	r1, [pc, #64]	; (7544 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    7504:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    7506:	4e10      	ldr	r6, [pc, #64]	; (7548 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    7508:	4c0d      	ldr	r4, [pc, #52]	; (7540 <EIC_Handler+0x48>)
    750a:	e00a      	b.n	7522 <EIC_Handler+0x2a>
		return eics[eic_index];
    750c:	490d      	ldr	r1, [pc, #52]	; (7544 <EIC_Handler+0x4c>)
    750e:	e008      	b.n	7522 <EIC_Handler+0x2a>
    7510:	7823      	ldrb	r3, [r4, #0]
    7512:	3301      	adds	r3, #1
    7514:	b2db      	uxtb	r3, r3
    7516:	7023      	strb	r3, [r4, #0]
    7518:	2b0f      	cmp	r3, #15
    751a:	d810      	bhi.n	753e <EIC_Handler+0x46>
		return NULL;
    751c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    751e:	2b1f      	cmp	r3, #31
    7520:	d9f4      	bls.n	750c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    7522:	0028      	movs	r0, r5
    7524:	4018      	ands	r0, r3
    7526:	2201      	movs	r2, #1
    7528:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    752a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    752c:	4210      	tst	r0, r2
    752e:	d0ef      	beq.n	7510 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    7530:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    7532:	009b      	lsls	r3, r3, #2
    7534:	599b      	ldr	r3, [r3, r6]
    7536:	2b00      	cmp	r3, #0
    7538:	d0ea      	beq.n	7510 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    753a:	4798      	blx	r3
    753c:	e7e8      	b.n	7510 <EIC_Handler+0x18>
			}
		}
	}
}
    753e:	bd70      	pop	{r4, r5, r6, pc}
    7540:	20001628 	.word	0x20001628
    7544:	40001800 	.word	0x40001800
    7548:	2000162c 	.word	0x2000162c

0000754c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    754c:	4a04      	ldr	r2, [pc, #16]	; (7560 <_extint_enable+0x14>)
    754e:	7813      	ldrb	r3, [r2, #0]
    7550:	2102      	movs	r1, #2
    7552:	430b      	orrs	r3, r1
    7554:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    7556:	7853      	ldrb	r3, [r2, #1]
    7558:	b25b      	sxtb	r3, r3
    755a:	2b00      	cmp	r3, #0
    755c:	dbfb      	blt.n	7556 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    755e:	4770      	bx	lr
    7560:	40001800 	.word	0x40001800

00007564 <_system_extint_init>:
{
    7564:	b500      	push	{lr}
    7566:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    7568:	4a12      	ldr	r2, [pc, #72]	; (75b4 <_system_extint_init+0x50>)
    756a:	6993      	ldr	r3, [r2, #24]
    756c:	2140      	movs	r1, #64	; 0x40
    756e:	430b      	orrs	r3, r1
    7570:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    7572:	a901      	add	r1, sp, #4
    7574:	2300      	movs	r3, #0
    7576:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    7578:	2005      	movs	r0, #5
    757a:	4b0f      	ldr	r3, [pc, #60]	; (75b8 <_system_extint_init+0x54>)
    757c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    757e:	2005      	movs	r0, #5
    7580:	4b0e      	ldr	r3, [pc, #56]	; (75bc <_system_extint_init+0x58>)
    7582:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    7584:	4a0e      	ldr	r2, [pc, #56]	; (75c0 <_system_extint_init+0x5c>)
    7586:	7813      	ldrb	r3, [r2, #0]
    7588:	2101      	movs	r1, #1
    758a:	430b      	orrs	r3, r1
    758c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    758e:	7853      	ldrb	r3, [r2, #1]
    7590:	b25b      	sxtb	r3, r3
    7592:	2b00      	cmp	r3, #0
    7594:	dbfb      	blt.n	758e <_system_extint_init+0x2a>
    7596:	4b0b      	ldr	r3, [pc, #44]	; (75c4 <_system_extint_init+0x60>)
    7598:	0019      	movs	r1, r3
    759a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    759c:	2200      	movs	r2, #0
    759e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    75a0:	4299      	cmp	r1, r3
    75a2:	d1fc      	bne.n	759e <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    75a4:	2210      	movs	r2, #16
    75a6:	4b08      	ldr	r3, [pc, #32]	; (75c8 <_system_extint_init+0x64>)
    75a8:	601a      	str	r2, [r3, #0]
	_extint_enable();
    75aa:	4b08      	ldr	r3, [pc, #32]	; (75cc <_system_extint_init+0x68>)
    75ac:	4798      	blx	r3
}
    75ae:	b003      	add	sp, #12
    75b0:	bd00      	pop	{pc}
    75b2:	46c0      	nop			; (mov r8, r8)
    75b4:	40000400 	.word	0x40000400
    75b8:	00008d35 	.word	0x00008d35
    75bc:	00008ca9 	.word	0x00008ca9
    75c0:	40001800 	.word	0x40001800
    75c4:	2000162c 	.word	0x2000162c
    75c8:	e000e100 	.word	0xe000e100
    75cc:	0000754d 	.word	0x0000754d

000075d0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    75d0:	2300      	movs	r3, #0
    75d2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    75d4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    75d6:	2201      	movs	r2, #1
    75d8:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    75da:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    75dc:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    75de:	3302      	adds	r3, #2
    75e0:	72c3      	strb	r3, [r0, #11]
}
    75e2:	4770      	bx	lr

000075e4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    75e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    75e6:	b083      	sub	sp, #12
    75e8:	0005      	movs	r5, r0
    75ea:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    75ec:	a901      	add	r1, sp, #4
    75ee:	2300      	movs	r3, #0
    75f0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    75f2:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    75f4:	7923      	ldrb	r3, [r4, #4]
    75f6:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    75f8:	7a23      	ldrb	r3, [r4, #8]
    75fa:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    75fc:	7820      	ldrb	r0, [r4, #0]
    75fe:	4b15      	ldr	r3, [pc, #84]	; (7654 <extint_chan_set_config+0x70>)
    7600:	4798      	blx	r3
		return NULL;
    7602:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    7604:	2d1f      	cmp	r5, #31
    7606:	d800      	bhi.n	760a <extint_chan_set_config+0x26>
		return eics[eic_index];
    7608:	4813      	ldr	r0, [pc, #76]	; (7658 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    760a:	2207      	movs	r2, #7
    760c:	402a      	ands	r2, r5
    760e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    7610:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    7612:	7aa3      	ldrb	r3, [r4, #10]
    7614:	2b00      	cmp	r3, #0
    7616:	d001      	beq.n	761c <extint_chan_set_config+0x38>
    7618:	2308      	movs	r3, #8
    761a:	431f      	orrs	r7, r3
    761c:	08eb      	lsrs	r3, r5, #3
    761e:	009b      	lsls	r3, r3, #2
    7620:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    7622:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    7624:	260f      	movs	r6, #15
    7626:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    7628:	43b1      	bics	r1, r6
			(new_config << config_pos);
    762a:	4097      	lsls	r7, r2
    762c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    762e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    7630:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    7632:	7a63      	ldrb	r3, [r4, #9]
    7634:	2b00      	cmp	r3, #0
    7636:	d106      	bne.n	7646 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    7638:	6943      	ldr	r3, [r0, #20]
    763a:	2201      	movs	r2, #1
    763c:	40aa      	lsls	r2, r5
    763e:	4393      	bics	r3, r2
    7640:	6143      	str	r3, [r0, #20]
	}
}
    7642:	b003      	add	sp, #12
    7644:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    7646:	6942      	ldr	r2, [r0, #20]
    7648:	2301      	movs	r3, #1
    764a:	40ab      	lsls	r3, r5
    764c:	4313      	orrs	r3, r2
    764e:	6143      	str	r3, [r0, #20]
    7650:	e7f7      	b.n	7642 <extint_chan_set_config+0x5e>
    7652:	46c0      	nop			; (mov r8, r8)
    7654:	00008e2d 	.word	0x00008e2d
    7658:	40001800 	.word	0x40001800

0000765c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    765c:	b500      	push	{lr}
    765e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7660:	ab01      	add	r3, sp, #4
    7662:	2280      	movs	r2, #128	; 0x80
    7664:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    7666:	780a      	ldrb	r2, [r1, #0]
    7668:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    766a:	784a      	ldrb	r2, [r1, #1]
    766c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    766e:	788a      	ldrb	r2, [r1, #2]
    7670:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    7672:	0019      	movs	r1, r3
    7674:	4b01      	ldr	r3, [pc, #4]	; (767c <port_pin_set_config+0x20>)
    7676:	4798      	blx	r3
}
    7678:	b003      	add	sp, #12
    767a:	bd00      	pop	{pc}
    767c:	00008e2d 	.word	0x00008e2d

00007680 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    7680:	b5f0      	push	{r4, r5, r6, r7, lr}
    7682:	46de      	mov	lr, fp
    7684:	4657      	mov	r7, sl
    7686:	464e      	mov	r6, r9
    7688:	4645      	mov	r5, r8
    768a:	b5e0      	push	{r5, r6, r7, lr}
    768c:	b087      	sub	sp, #28
    768e:	4680      	mov	r8, r0
    7690:	9104      	str	r1, [sp, #16]
    7692:	0016      	movs	r6, r2
    7694:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    7696:	2200      	movs	r2, #0
    7698:	2300      	movs	r3, #0
    769a:	2100      	movs	r1, #0
    769c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    769e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    76a0:	2001      	movs	r0, #1
    76a2:	0021      	movs	r1, r4
    76a4:	9600      	str	r6, [sp, #0]
    76a6:	9701      	str	r7, [sp, #4]
    76a8:	465c      	mov	r4, fp
    76aa:	9403      	str	r4, [sp, #12]
    76ac:	4644      	mov	r4, r8
    76ae:	9405      	str	r4, [sp, #20]
    76b0:	e013      	b.n	76da <long_division+0x5a>
    76b2:	2420      	movs	r4, #32
    76b4:	1a64      	subs	r4, r4, r1
    76b6:	0005      	movs	r5, r0
    76b8:	40e5      	lsrs	r5, r4
    76ba:	46a8      	mov	r8, r5
    76bc:	e014      	b.n	76e8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    76be:	9c00      	ldr	r4, [sp, #0]
    76c0:	9d01      	ldr	r5, [sp, #4]
    76c2:	1b12      	subs	r2, r2, r4
    76c4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    76c6:	465c      	mov	r4, fp
    76c8:	464d      	mov	r5, r9
    76ca:	432c      	orrs	r4, r5
    76cc:	46a3      	mov	fp, r4
    76ce:	9c03      	ldr	r4, [sp, #12]
    76d0:	4645      	mov	r5, r8
    76d2:	432c      	orrs	r4, r5
    76d4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    76d6:	3901      	subs	r1, #1
    76d8:	d325      	bcc.n	7726 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    76da:	2420      	movs	r4, #32
    76dc:	4264      	negs	r4, r4
    76de:	190c      	adds	r4, r1, r4
    76e0:	d4e7      	bmi.n	76b2 <long_division+0x32>
    76e2:	0005      	movs	r5, r0
    76e4:	40a5      	lsls	r5, r4
    76e6:	46a8      	mov	r8, r5
    76e8:	0004      	movs	r4, r0
    76ea:	408c      	lsls	r4, r1
    76ec:	46a1      	mov	r9, r4
		r = r << 1;
    76ee:	1892      	adds	r2, r2, r2
    76f0:	415b      	adcs	r3, r3
    76f2:	0014      	movs	r4, r2
    76f4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    76f6:	9e05      	ldr	r6, [sp, #20]
    76f8:	464f      	mov	r7, r9
    76fa:	403e      	ands	r6, r7
    76fc:	46b4      	mov	ip, r6
    76fe:	9e04      	ldr	r6, [sp, #16]
    7700:	4647      	mov	r7, r8
    7702:	403e      	ands	r6, r7
    7704:	46b2      	mov	sl, r6
    7706:	4666      	mov	r6, ip
    7708:	4657      	mov	r7, sl
    770a:	433e      	orrs	r6, r7
    770c:	d003      	beq.n	7716 <long_division+0x96>
			r |= 0x01;
    770e:	0006      	movs	r6, r0
    7710:	4326      	orrs	r6, r4
    7712:	0032      	movs	r2, r6
    7714:	002b      	movs	r3, r5
		if (r >= d) {
    7716:	9c00      	ldr	r4, [sp, #0]
    7718:	9d01      	ldr	r5, [sp, #4]
    771a:	429d      	cmp	r5, r3
    771c:	d8db      	bhi.n	76d6 <long_division+0x56>
    771e:	d1ce      	bne.n	76be <long_division+0x3e>
    7720:	4294      	cmp	r4, r2
    7722:	d8d8      	bhi.n	76d6 <long_division+0x56>
    7724:	e7cb      	b.n	76be <long_division+0x3e>
    7726:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    7728:	4658      	mov	r0, fp
    772a:	0019      	movs	r1, r3
    772c:	b007      	add	sp, #28
    772e:	bc3c      	pop	{r2, r3, r4, r5}
    7730:	4690      	mov	r8, r2
    7732:	4699      	mov	r9, r3
    7734:	46a2      	mov	sl, r4
    7736:	46ab      	mov	fp, r5
    7738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000773a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    773a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    773c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    773e:	2340      	movs	r3, #64	; 0x40
    7740:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    7742:	4281      	cmp	r1, r0
    7744:	d202      	bcs.n	774c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    7746:	0018      	movs	r0, r3
    7748:	bd10      	pop	{r4, pc}
		baud_calculated++;
    774a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    774c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    774e:	1c63      	adds	r3, r4, #1
    7750:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    7752:	4288      	cmp	r0, r1
    7754:	d9f9      	bls.n	774a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7756:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    7758:	2cff      	cmp	r4, #255	; 0xff
    775a:	d8f4      	bhi.n	7746 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    775c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    775e:	2300      	movs	r3, #0
    7760:	e7f1      	b.n	7746 <_sercom_get_sync_baud_val+0xc>
	...

00007764 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    7764:	b5f0      	push	{r4, r5, r6, r7, lr}
    7766:	b083      	sub	sp, #12
    7768:	000f      	movs	r7, r1
    776a:	0016      	movs	r6, r2
    776c:	aa08      	add	r2, sp, #32
    776e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    7770:	0004      	movs	r4, r0
    7772:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7774:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    7776:	42bc      	cmp	r4, r7
    7778:	d902      	bls.n	7780 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    777a:	0010      	movs	r0, r2
    777c:	b003      	add	sp, #12
    777e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    7780:	2b00      	cmp	r3, #0
    7782:	d114      	bne.n	77ae <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    7784:	0002      	movs	r2, r0
    7786:	0008      	movs	r0, r1
    7788:	2100      	movs	r1, #0
    778a:	4c19      	ldr	r4, [pc, #100]	; (77f0 <_sercom_get_async_baud_val+0x8c>)
    778c:	47a0      	blx	r4
    778e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    7790:	003a      	movs	r2, r7
    7792:	2300      	movs	r3, #0
    7794:	2000      	movs	r0, #0
    7796:	4c17      	ldr	r4, [pc, #92]	; (77f4 <_sercom_get_async_baud_val+0x90>)
    7798:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    779a:	2200      	movs	r2, #0
    779c:	2301      	movs	r3, #1
    779e:	1a12      	subs	r2, r2, r0
    77a0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    77a2:	0c12      	lsrs	r2, r2, #16
    77a4:	041b      	lsls	r3, r3, #16
    77a6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    77a8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    77aa:	2200      	movs	r2, #0
    77ac:	e7e5      	b.n	777a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    77ae:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    77b0:	2b01      	cmp	r3, #1
    77b2:	d1f9      	bne.n	77a8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    77b4:	000a      	movs	r2, r1
    77b6:	2300      	movs	r3, #0
    77b8:	2100      	movs	r1, #0
    77ba:	4c0d      	ldr	r4, [pc, #52]	; (77f0 <_sercom_get_async_baud_val+0x8c>)
    77bc:	47a0      	blx	r4
    77be:	0002      	movs	r2, r0
    77c0:	000b      	movs	r3, r1
    77c2:	9200      	str	r2, [sp, #0]
    77c4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    77c6:	0038      	movs	r0, r7
    77c8:	2100      	movs	r1, #0
    77ca:	4c0a      	ldr	r4, [pc, #40]	; (77f4 <_sercom_get_async_baud_val+0x90>)
    77cc:	47a0      	blx	r4
    77ce:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    77d0:	2380      	movs	r3, #128	; 0x80
    77d2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    77d4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    77d6:	4298      	cmp	r0, r3
    77d8:	d8cf      	bhi.n	777a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    77da:	0f79      	lsrs	r1, r7, #29
    77dc:	00f8      	lsls	r0, r7, #3
    77de:	9a00      	ldr	r2, [sp, #0]
    77e0:	9b01      	ldr	r3, [sp, #4]
    77e2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    77e4:	00ea      	lsls	r2, r5, #3
    77e6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    77e8:	b2d2      	uxtb	r2, r2
    77ea:	0352      	lsls	r2, r2, #13
    77ec:	432a      	orrs	r2, r5
    77ee:	e7db      	b.n	77a8 <_sercom_get_async_baud_val+0x44>
    77f0:	0000b9c5 	.word	0x0000b9c5
    77f4:	00007681 	.word	0x00007681

000077f8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    77f8:	b510      	push	{r4, lr}
    77fa:	b082      	sub	sp, #8
    77fc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    77fe:	4b0e      	ldr	r3, [pc, #56]	; (7838 <sercom_set_gclk_generator+0x40>)
    7800:	781b      	ldrb	r3, [r3, #0]
    7802:	2b00      	cmp	r3, #0
    7804:	d007      	beq.n	7816 <sercom_set_gclk_generator+0x1e>
    7806:	2900      	cmp	r1, #0
    7808:	d105      	bne.n	7816 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    780a:	4b0b      	ldr	r3, [pc, #44]	; (7838 <sercom_set_gclk_generator+0x40>)
    780c:	785b      	ldrb	r3, [r3, #1]
    780e:	4283      	cmp	r3, r0
    7810:	d010      	beq.n	7834 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    7812:	201d      	movs	r0, #29
    7814:	e00c      	b.n	7830 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    7816:	a901      	add	r1, sp, #4
    7818:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    781a:	2013      	movs	r0, #19
    781c:	4b07      	ldr	r3, [pc, #28]	; (783c <sercom_set_gclk_generator+0x44>)
    781e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7820:	2013      	movs	r0, #19
    7822:	4b07      	ldr	r3, [pc, #28]	; (7840 <sercom_set_gclk_generator+0x48>)
    7824:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    7826:	4b04      	ldr	r3, [pc, #16]	; (7838 <sercom_set_gclk_generator+0x40>)
    7828:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    782a:	2201      	movs	r2, #1
    782c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    782e:	2000      	movs	r0, #0
}
    7830:	b002      	add	sp, #8
    7832:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    7834:	2000      	movs	r0, #0
    7836:	e7fb      	b.n	7830 <sercom_set_gclk_generator+0x38>
    7838:	20000480 	.word	0x20000480
    783c:	00008d35 	.word	0x00008d35
    7840:	00008ca9 	.word	0x00008ca9

00007844 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    7844:	4b40      	ldr	r3, [pc, #256]	; (7948 <_sercom_get_default_pad+0x104>)
    7846:	4298      	cmp	r0, r3
    7848:	d031      	beq.n	78ae <_sercom_get_default_pad+0x6a>
    784a:	d90a      	bls.n	7862 <_sercom_get_default_pad+0x1e>
    784c:	4b3f      	ldr	r3, [pc, #252]	; (794c <_sercom_get_default_pad+0x108>)
    784e:	4298      	cmp	r0, r3
    7850:	d04d      	beq.n	78ee <_sercom_get_default_pad+0xaa>
    7852:	4b3f      	ldr	r3, [pc, #252]	; (7950 <_sercom_get_default_pad+0x10c>)
    7854:	4298      	cmp	r0, r3
    7856:	d05a      	beq.n	790e <_sercom_get_default_pad+0xca>
    7858:	4b3e      	ldr	r3, [pc, #248]	; (7954 <_sercom_get_default_pad+0x110>)
    785a:	4298      	cmp	r0, r3
    785c:	d037      	beq.n	78ce <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    785e:	2000      	movs	r0, #0
}
    7860:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    7862:	4b3d      	ldr	r3, [pc, #244]	; (7958 <_sercom_get_default_pad+0x114>)
    7864:	4298      	cmp	r0, r3
    7866:	d00c      	beq.n	7882 <_sercom_get_default_pad+0x3e>
    7868:	4b3c      	ldr	r3, [pc, #240]	; (795c <_sercom_get_default_pad+0x118>)
    786a:	4298      	cmp	r0, r3
    786c:	d1f7      	bne.n	785e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    786e:	2901      	cmp	r1, #1
    7870:	d017      	beq.n	78a2 <_sercom_get_default_pad+0x5e>
    7872:	2900      	cmp	r1, #0
    7874:	d05d      	beq.n	7932 <_sercom_get_default_pad+0xee>
    7876:	2902      	cmp	r1, #2
    7878:	d015      	beq.n	78a6 <_sercom_get_default_pad+0x62>
    787a:	2903      	cmp	r1, #3
    787c:	d015      	beq.n	78aa <_sercom_get_default_pad+0x66>
	return 0;
    787e:	2000      	movs	r0, #0
    7880:	e7ee      	b.n	7860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7882:	2901      	cmp	r1, #1
    7884:	d007      	beq.n	7896 <_sercom_get_default_pad+0x52>
    7886:	2900      	cmp	r1, #0
    7888:	d051      	beq.n	792e <_sercom_get_default_pad+0xea>
    788a:	2902      	cmp	r1, #2
    788c:	d005      	beq.n	789a <_sercom_get_default_pad+0x56>
    788e:	2903      	cmp	r1, #3
    7890:	d005      	beq.n	789e <_sercom_get_default_pad+0x5a>
	return 0;
    7892:	2000      	movs	r0, #0
    7894:	e7e4      	b.n	7860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7896:	4832      	ldr	r0, [pc, #200]	; (7960 <_sercom_get_default_pad+0x11c>)
    7898:	e7e2      	b.n	7860 <_sercom_get_default_pad+0x1c>
    789a:	4832      	ldr	r0, [pc, #200]	; (7964 <_sercom_get_default_pad+0x120>)
    789c:	e7e0      	b.n	7860 <_sercom_get_default_pad+0x1c>
    789e:	4832      	ldr	r0, [pc, #200]	; (7968 <_sercom_get_default_pad+0x124>)
    78a0:	e7de      	b.n	7860 <_sercom_get_default_pad+0x1c>
    78a2:	4832      	ldr	r0, [pc, #200]	; (796c <_sercom_get_default_pad+0x128>)
    78a4:	e7dc      	b.n	7860 <_sercom_get_default_pad+0x1c>
    78a6:	4832      	ldr	r0, [pc, #200]	; (7970 <_sercom_get_default_pad+0x12c>)
    78a8:	e7da      	b.n	7860 <_sercom_get_default_pad+0x1c>
    78aa:	4832      	ldr	r0, [pc, #200]	; (7974 <_sercom_get_default_pad+0x130>)
    78ac:	e7d8      	b.n	7860 <_sercom_get_default_pad+0x1c>
    78ae:	2901      	cmp	r1, #1
    78b0:	d007      	beq.n	78c2 <_sercom_get_default_pad+0x7e>
    78b2:	2900      	cmp	r1, #0
    78b4:	d03f      	beq.n	7936 <_sercom_get_default_pad+0xf2>
    78b6:	2902      	cmp	r1, #2
    78b8:	d005      	beq.n	78c6 <_sercom_get_default_pad+0x82>
    78ba:	2903      	cmp	r1, #3
    78bc:	d005      	beq.n	78ca <_sercom_get_default_pad+0x86>
	return 0;
    78be:	2000      	movs	r0, #0
    78c0:	e7ce      	b.n	7860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    78c2:	482d      	ldr	r0, [pc, #180]	; (7978 <_sercom_get_default_pad+0x134>)
    78c4:	e7cc      	b.n	7860 <_sercom_get_default_pad+0x1c>
    78c6:	482d      	ldr	r0, [pc, #180]	; (797c <_sercom_get_default_pad+0x138>)
    78c8:	e7ca      	b.n	7860 <_sercom_get_default_pad+0x1c>
    78ca:	482d      	ldr	r0, [pc, #180]	; (7980 <_sercom_get_default_pad+0x13c>)
    78cc:	e7c8      	b.n	7860 <_sercom_get_default_pad+0x1c>
    78ce:	2901      	cmp	r1, #1
    78d0:	d007      	beq.n	78e2 <_sercom_get_default_pad+0x9e>
    78d2:	2900      	cmp	r1, #0
    78d4:	d031      	beq.n	793a <_sercom_get_default_pad+0xf6>
    78d6:	2902      	cmp	r1, #2
    78d8:	d005      	beq.n	78e6 <_sercom_get_default_pad+0xa2>
    78da:	2903      	cmp	r1, #3
    78dc:	d005      	beq.n	78ea <_sercom_get_default_pad+0xa6>
	return 0;
    78de:	2000      	movs	r0, #0
    78e0:	e7be      	b.n	7860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    78e2:	4828      	ldr	r0, [pc, #160]	; (7984 <_sercom_get_default_pad+0x140>)
    78e4:	e7bc      	b.n	7860 <_sercom_get_default_pad+0x1c>
    78e6:	4828      	ldr	r0, [pc, #160]	; (7988 <_sercom_get_default_pad+0x144>)
    78e8:	e7ba      	b.n	7860 <_sercom_get_default_pad+0x1c>
    78ea:	4828      	ldr	r0, [pc, #160]	; (798c <_sercom_get_default_pad+0x148>)
    78ec:	e7b8      	b.n	7860 <_sercom_get_default_pad+0x1c>
    78ee:	2901      	cmp	r1, #1
    78f0:	d007      	beq.n	7902 <_sercom_get_default_pad+0xbe>
    78f2:	2900      	cmp	r1, #0
    78f4:	d023      	beq.n	793e <_sercom_get_default_pad+0xfa>
    78f6:	2902      	cmp	r1, #2
    78f8:	d005      	beq.n	7906 <_sercom_get_default_pad+0xc2>
    78fa:	2903      	cmp	r1, #3
    78fc:	d005      	beq.n	790a <_sercom_get_default_pad+0xc6>
	return 0;
    78fe:	2000      	movs	r0, #0
    7900:	e7ae      	b.n	7860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7902:	4823      	ldr	r0, [pc, #140]	; (7990 <_sercom_get_default_pad+0x14c>)
    7904:	e7ac      	b.n	7860 <_sercom_get_default_pad+0x1c>
    7906:	4823      	ldr	r0, [pc, #140]	; (7994 <_sercom_get_default_pad+0x150>)
    7908:	e7aa      	b.n	7860 <_sercom_get_default_pad+0x1c>
    790a:	4823      	ldr	r0, [pc, #140]	; (7998 <_sercom_get_default_pad+0x154>)
    790c:	e7a8      	b.n	7860 <_sercom_get_default_pad+0x1c>
    790e:	2901      	cmp	r1, #1
    7910:	d007      	beq.n	7922 <_sercom_get_default_pad+0xde>
    7912:	2900      	cmp	r1, #0
    7914:	d015      	beq.n	7942 <_sercom_get_default_pad+0xfe>
    7916:	2902      	cmp	r1, #2
    7918:	d005      	beq.n	7926 <_sercom_get_default_pad+0xe2>
    791a:	2903      	cmp	r1, #3
    791c:	d005      	beq.n	792a <_sercom_get_default_pad+0xe6>
	return 0;
    791e:	2000      	movs	r0, #0
    7920:	e79e      	b.n	7860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7922:	481e      	ldr	r0, [pc, #120]	; (799c <_sercom_get_default_pad+0x158>)
    7924:	e79c      	b.n	7860 <_sercom_get_default_pad+0x1c>
    7926:	481e      	ldr	r0, [pc, #120]	; (79a0 <_sercom_get_default_pad+0x15c>)
    7928:	e79a      	b.n	7860 <_sercom_get_default_pad+0x1c>
    792a:	481e      	ldr	r0, [pc, #120]	; (79a4 <_sercom_get_default_pad+0x160>)
    792c:	e798      	b.n	7860 <_sercom_get_default_pad+0x1c>
    792e:	481e      	ldr	r0, [pc, #120]	; (79a8 <_sercom_get_default_pad+0x164>)
    7930:	e796      	b.n	7860 <_sercom_get_default_pad+0x1c>
    7932:	2003      	movs	r0, #3
    7934:	e794      	b.n	7860 <_sercom_get_default_pad+0x1c>
    7936:	481d      	ldr	r0, [pc, #116]	; (79ac <_sercom_get_default_pad+0x168>)
    7938:	e792      	b.n	7860 <_sercom_get_default_pad+0x1c>
    793a:	481d      	ldr	r0, [pc, #116]	; (79b0 <_sercom_get_default_pad+0x16c>)
    793c:	e790      	b.n	7860 <_sercom_get_default_pad+0x1c>
    793e:	481d      	ldr	r0, [pc, #116]	; (79b4 <_sercom_get_default_pad+0x170>)
    7940:	e78e      	b.n	7860 <_sercom_get_default_pad+0x1c>
    7942:	481d      	ldr	r0, [pc, #116]	; (79b8 <_sercom_get_default_pad+0x174>)
    7944:	e78c      	b.n	7860 <_sercom_get_default_pad+0x1c>
    7946:	46c0      	nop			; (mov r8, r8)
    7948:	42001000 	.word	0x42001000
    794c:	42001800 	.word	0x42001800
    7950:	42001c00 	.word	0x42001c00
    7954:	42001400 	.word	0x42001400
    7958:	42000800 	.word	0x42000800
    795c:	42000c00 	.word	0x42000c00
    7960:	00050003 	.word	0x00050003
    7964:	00060003 	.word	0x00060003
    7968:	00070003 	.word	0x00070003
    796c:	00010003 	.word	0x00010003
    7970:	001e0003 	.word	0x001e0003
    7974:	001f0003 	.word	0x001f0003
    7978:	00090003 	.word	0x00090003
    797c:	000a0003 	.word	0x000a0003
    7980:	000b0003 	.word	0x000b0003
    7984:	00110003 	.word	0x00110003
    7988:	00120003 	.word	0x00120003
    798c:	00130003 	.word	0x00130003
    7990:	000d0003 	.word	0x000d0003
    7994:	000e0003 	.word	0x000e0003
    7998:	000f0003 	.word	0x000f0003
    799c:	00170003 	.word	0x00170003
    79a0:	00180003 	.word	0x00180003
    79a4:	00190003 	.word	0x00190003
    79a8:	00040003 	.word	0x00040003
    79ac:	00080003 	.word	0x00080003
    79b0:	00100003 	.word	0x00100003
    79b4:	000c0003 	.word	0x000c0003
    79b8:	00160003 	.word	0x00160003

000079bc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    79bc:	b530      	push	{r4, r5, lr}
    79be:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    79c0:	4b0b      	ldr	r3, [pc, #44]	; (79f0 <_sercom_get_sercom_inst_index+0x34>)
    79c2:	466a      	mov	r2, sp
    79c4:	cb32      	ldmia	r3!, {r1, r4, r5}
    79c6:	c232      	stmia	r2!, {r1, r4, r5}
    79c8:	cb32      	ldmia	r3!, {r1, r4, r5}
    79ca:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    79cc:	9b00      	ldr	r3, [sp, #0]
    79ce:	4283      	cmp	r3, r0
    79d0:	d00b      	beq.n	79ea <_sercom_get_sercom_inst_index+0x2e>
    79d2:	2301      	movs	r3, #1
    79d4:	009a      	lsls	r2, r3, #2
    79d6:	4669      	mov	r1, sp
    79d8:	5852      	ldr	r2, [r2, r1]
    79da:	4282      	cmp	r2, r0
    79dc:	d006      	beq.n	79ec <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    79de:	3301      	adds	r3, #1
    79e0:	2b06      	cmp	r3, #6
    79e2:	d1f7      	bne.n	79d4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    79e4:	2000      	movs	r0, #0
}
    79e6:	b007      	add	sp, #28
    79e8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    79ea:	2300      	movs	r3, #0
			return i;
    79ec:	b2d8      	uxtb	r0, r3
    79ee:	e7fa      	b.n	79e6 <_sercom_get_sercom_inst_index+0x2a>
    79f0:	0000fd48 	.word	0x0000fd48

000079f4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    79f4:	4770      	bx	lr
	...

000079f8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    79f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    79fa:	4b0a      	ldr	r3, [pc, #40]	; (7a24 <_sercom_set_handler+0x2c>)
    79fc:	781b      	ldrb	r3, [r3, #0]
    79fe:	2b00      	cmp	r3, #0
    7a00:	d10c      	bne.n	7a1c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    7a02:	4f09      	ldr	r7, [pc, #36]	; (7a28 <_sercom_set_handler+0x30>)
    7a04:	4e09      	ldr	r6, [pc, #36]	; (7a2c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    7a06:	4d0a      	ldr	r5, [pc, #40]	; (7a30 <_sercom_set_handler+0x38>)
    7a08:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    7a0a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    7a0c:	195a      	adds	r2, r3, r5
    7a0e:	6014      	str	r4, [r2, #0]
    7a10:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a12:	2b18      	cmp	r3, #24
    7a14:	d1f9      	bne.n	7a0a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    7a16:	2201      	movs	r2, #1
    7a18:	4b02      	ldr	r3, [pc, #8]	; (7a24 <_sercom_set_handler+0x2c>)
    7a1a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    7a1c:	0080      	lsls	r0, r0, #2
    7a1e:	4b02      	ldr	r3, [pc, #8]	; (7a28 <_sercom_set_handler+0x30>)
    7a20:	50c1      	str	r1, [r0, r3]
}
    7a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a24:	20000482 	.word	0x20000482
    7a28:	20000484 	.word	0x20000484
    7a2c:	000079f5 	.word	0x000079f5
    7a30:	2000166c 	.word	0x2000166c

00007a34 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    7a34:	b500      	push	{lr}
    7a36:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    7a38:	2309      	movs	r3, #9
    7a3a:	466a      	mov	r2, sp
    7a3c:	7013      	strb	r3, [r2, #0]
    7a3e:	3301      	adds	r3, #1
    7a40:	7053      	strb	r3, [r2, #1]
    7a42:	3301      	adds	r3, #1
    7a44:	7093      	strb	r3, [r2, #2]
    7a46:	3301      	adds	r3, #1
    7a48:	70d3      	strb	r3, [r2, #3]
    7a4a:	3301      	adds	r3, #1
    7a4c:	7113      	strb	r3, [r2, #4]
    7a4e:	3301      	adds	r3, #1
    7a50:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    7a52:	4b03      	ldr	r3, [pc, #12]	; (7a60 <_sercom_get_interrupt_vector+0x2c>)
    7a54:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    7a56:	466b      	mov	r3, sp
    7a58:	5618      	ldrsb	r0, [r3, r0]
}
    7a5a:	b003      	add	sp, #12
    7a5c:	bd00      	pop	{pc}
    7a5e:	46c0      	nop			; (mov r8, r8)
    7a60:	000079bd 	.word	0x000079bd

00007a64 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    7a64:	b510      	push	{r4, lr}
    7a66:	4b02      	ldr	r3, [pc, #8]	; (7a70 <SERCOM0_Handler+0xc>)
    7a68:	681b      	ldr	r3, [r3, #0]
    7a6a:	2000      	movs	r0, #0
    7a6c:	4798      	blx	r3
    7a6e:	bd10      	pop	{r4, pc}
    7a70:	20000484 	.word	0x20000484

00007a74 <SERCOM1_Handler>:
    7a74:	b510      	push	{r4, lr}
    7a76:	4b02      	ldr	r3, [pc, #8]	; (7a80 <SERCOM1_Handler+0xc>)
    7a78:	685b      	ldr	r3, [r3, #4]
    7a7a:	2001      	movs	r0, #1
    7a7c:	4798      	blx	r3
    7a7e:	bd10      	pop	{r4, pc}
    7a80:	20000484 	.word	0x20000484

00007a84 <SERCOM2_Handler>:
    7a84:	b510      	push	{r4, lr}
    7a86:	4b02      	ldr	r3, [pc, #8]	; (7a90 <SERCOM2_Handler+0xc>)
    7a88:	689b      	ldr	r3, [r3, #8]
    7a8a:	2002      	movs	r0, #2
    7a8c:	4798      	blx	r3
    7a8e:	bd10      	pop	{r4, pc}
    7a90:	20000484 	.word	0x20000484

00007a94 <SERCOM3_Handler>:
    7a94:	b510      	push	{r4, lr}
    7a96:	4b02      	ldr	r3, [pc, #8]	; (7aa0 <SERCOM3_Handler+0xc>)
    7a98:	68db      	ldr	r3, [r3, #12]
    7a9a:	2003      	movs	r0, #3
    7a9c:	4798      	blx	r3
    7a9e:	bd10      	pop	{r4, pc}
    7aa0:	20000484 	.word	0x20000484

00007aa4 <SERCOM4_Handler>:
    7aa4:	b510      	push	{r4, lr}
    7aa6:	4b02      	ldr	r3, [pc, #8]	; (7ab0 <SERCOM4_Handler+0xc>)
    7aa8:	691b      	ldr	r3, [r3, #16]
    7aaa:	2004      	movs	r0, #4
    7aac:	4798      	blx	r3
    7aae:	bd10      	pop	{r4, pc}
    7ab0:	20000484 	.word	0x20000484

00007ab4 <SERCOM5_Handler>:
    7ab4:	b510      	push	{r4, lr}
    7ab6:	4b02      	ldr	r3, [pc, #8]	; (7ac0 <SERCOM5_Handler+0xc>)
    7ab8:	695b      	ldr	r3, [r3, #20]
    7aba:	2005      	movs	r0, #5
    7abc:	4798      	blx	r3
    7abe:	bd10      	pop	{r4, pc}
    7ac0:	20000484 	.word	0x20000484

00007ac4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    7ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ac6:	b08b      	sub	sp, #44	; 0x2c
    7ac8:	0005      	movs	r5, r0
    7aca:	000c      	movs	r4, r1
    7acc:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    7ace:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7ad0:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    7ad2:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7ad4:	079b      	lsls	r3, r3, #30
    7ad6:	d501      	bpl.n	7adc <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    7ad8:	b00b      	add	sp, #44	; 0x2c
    7ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7adc:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    7ade:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7ae0:	07db      	lsls	r3, r3, #31
    7ae2:	d4f9      	bmi.n	7ad8 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7ae4:	0008      	movs	r0, r1
    7ae6:	4b60      	ldr	r3, [pc, #384]	; (7c68 <spi_init+0x1a4>)
    7ae8:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    7aea:	4a60      	ldr	r2, [pc, #384]	; (7c6c <spi_init+0x1a8>)
    7aec:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7aee:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7af0:	2301      	movs	r3, #1
    7af2:	40bb      	lsls	r3, r7
    7af4:	430b      	orrs	r3, r1
    7af6:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    7af8:	a909      	add	r1, sp, #36	; 0x24
    7afa:	2724      	movs	r7, #36	; 0x24
    7afc:	5df3      	ldrb	r3, [r6, r7]
    7afe:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7b00:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7b02:	b2c3      	uxtb	r3, r0
    7b04:	9301      	str	r3, [sp, #4]
    7b06:	0018      	movs	r0, r3
    7b08:	4b59      	ldr	r3, [pc, #356]	; (7c70 <spi_init+0x1ac>)
    7b0a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7b0c:	9801      	ldr	r0, [sp, #4]
    7b0e:	4b59      	ldr	r3, [pc, #356]	; (7c74 <spi_init+0x1b0>)
    7b10:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7b12:	5df0      	ldrb	r0, [r6, r7]
    7b14:	2100      	movs	r1, #0
    7b16:	4b58      	ldr	r3, [pc, #352]	; (7c78 <spi_init+0x1b4>)
    7b18:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7b1a:	7833      	ldrb	r3, [r6, #0]
    7b1c:	2b01      	cmp	r3, #1
    7b1e:	d038      	beq.n	7b92 <spi_init+0xce>
    7b20:	002b      	movs	r3, r5
    7b22:	330c      	adds	r3, #12
    7b24:	0029      	movs	r1, r5
    7b26:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    7b28:	2200      	movs	r2, #0
    7b2a:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7b2c:	428b      	cmp	r3, r1
    7b2e:	d1fc      	bne.n	7b2a <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    7b30:	2300      	movs	r3, #0
    7b32:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    7b34:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    7b36:	2400      	movs	r4, #0
    7b38:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    7b3a:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    7b3c:	3336      	adds	r3, #54	; 0x36
    7b3e:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    7b40:	3301      	adds	r3, #1
    7b42:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    7b44:	3301      	adds	r3, #1
    7b46:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    7b48:	3b35      	subs	r3, #53	; 0x35
    7b4a:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    7b4c:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    7b4e:	6828      	ldr	r0, [r5, #0]
    7b50:	4b45      	ldr	r3, [pc, #276]	; (7c68 <spi_init+0x1a4>)
    7b52:	4798      	blx	r3
    7b54:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    7b56:	4949      	ldr	r1, [pc, #292]	; (7c7c <spi_init+0x1b8>)
    7b58:	4b49      	ldr	r3, [pc, #292]	; (7c80 <spi_init+0x1bc>)
    7b5a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7b5c:	00bf      	lsls	r7, r7, #2
    7b5e:	4b49      	ldr	r3, [pc, #292]	; (7c84 <spi_init+0x1c0>)
    7b60:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b62:	682f      	ldr	r7, [r5, #0]
    7b64:	ab04      	add	r3, sp, #16
    7b66:	2280      	movs	r2, #128	; 0x80
    7b68:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7b6a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7b6c:	3a7f      	subs	r2, #127	; 0x7f
    7b6e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7b70:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    7b72:	7833      	ldrb	r3, [r6, #0]
    7b74:	2b00      	cmp	r3, #0
    7b76:	d102      	bne.n	7b7e <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7b78:	2200      	movs	r2, #0
    7b7a:	ab04      	add	r3, sp, #16
    7b7c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7b7e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7b80:	9305      	str	r3, [sp, #20]
    7b82:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    7b84:	9306      	str	r3, [sp, #24]
    7b86:	6b33      	ldr	r3, [r6, #48]	; 0x30
    7b88:	9307      	str	r3, [sp, #28]
    7b8a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    7b8c:	9308      	str	r3, [sp, #32]
    7b8e:	2400      	movs	r4, #0
    7b90:	e00b      	b.n	7baa <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    7b92:	6823      	ldr	r3, [r4, #0]
    7b94:	220c      	movs	r2, #12
    7b96:	4313      	orrs	r3, r2
    7b98:	6023      	str	r3, [r4, #0]
    7b9a:	e7c1      	b.n	7b20 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7b9c:	0038      	movs	r0, r7
    7b9e:	4b3a      	ldr	r3, [pc, #232]	; (7c88 <spi_init+0x1c4>)
    7ba0:	4798      	blx	r3
    7ba2:	e00a      	b.n	7bba <spi_init+0xf6>
    7ba4:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7ba6:	2c04      	cmp	r4, #4
    7ba8:	d010      	beq.n	7bcc <spi_init+0x108>
    7baa:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7bac:	00a3      	lsls	r3, r4, #2
    7bae:	aa02      	add	r2, sp, #8
    7bb0:	200c      	movs	r0, #12
    7bb2:	1812      	adds	r2, r2, r0
    7bb4:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    7bb6:	2800      	cmp	r0, #0
    7bb8:	d0f0      	beq.n	7b9c <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    7bba:	1c43      	adds	r3, r0, #1
    7bbc:	d0f2      	beq.n	7ba4 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7bbe:	a904      	add	r1, sp, #16
    7bc0:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7bc2:	0c00      	lsrs	r0, r0, #16
    7bc4:	b2c0      	uxtb	r0, r0
    7bc6:	4b31      	ldr	r3, [pc, #196]	; (7c8c <spi_init+0x1c8>)
    7bc8:	4798      	blx	r3
    7bca:	e7eb      	b.n	7ba4 <spi_init+0xe0>
	module->mode             = config->mode;
    7bcc:	7833      	ldrb	r3, [r6, #0]
    7bce:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    7bd0:	7c33      	ldrb	r3, [r6, #16]
    7bd2:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    7bd4:	7cb3      	ldrb	r3, [r6, #18]
    7bd6:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    7bd8:	7d33      	ldrb	r3, [r6, #20]
    7bda:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    7bdc:	2200      	movs	r2, #0
    7bde:	ab02      	add	r3, sp, #8
    7be0:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    7be2:	7833      	ldrb	r3, [r6, #0]
    7be4:	2b01      	cmp	r3, #1
    7be6:	d028      	beq.n	7c3a <spi_init+0x176>
	ctrla |= config->transfer_mode;
    7be8:	6873      	ldr	r3, [r6, #4]
    7bea:	68b2      	ldr	r2, [r6, #8]
    7bec:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    7bee:	68f2      	ldr	r2, [r6, #12]
    7bf0:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    7bf2:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    7bf4:	7c72      	ldrb	r2, [r6, #17]
    7bf6:	2a00      	cmp	r2, #0
    7bf8:	d103      	bne.n	7c02 <spi_init+0x13e>
    7bfa:	4a25      	ldr	r2, [pc, #148]	; (7c90 <spi_init+0x1cc>)
    7bfc:	7892      	ldrb	r2, [r2, #2]
    7bfe:	0792      	lsls	r2, r2, #30
    7c00:	d501      	bpl.n	7c06 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7c02:	2280      	movs	r2, #128	; 0x80
    7c04:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    7c06:	7cb2      	ldrb	r2, [r6, #18]
    7c08:	2a00      	cmp	r2, #0
    7c0a:	d002      	beq.n	7c12 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7c0c:	2280      	movs	r2, #128	; 0x80
    7c0e:	0292      	lsls	r2, r2, #10
    7c10:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    7c12:	7cf2      	ldrb	r2, [r6, #19]
    7c14:	2a00      	cmp	r2, #0
    7c16:	d002      	beq.n	7c1e <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    7c18:	2280      	movs	r2, #128	; 0x80
    7c1a:	0092      	lsls	r2, r2, #2
    7c1c:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    7c1e:	7d32      	ldrb	r2, [r6, #20]
    7c20:	2a00      	cmp	r2, #0
    7c22:	d002      	beq.n	7c2a <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7c24:	2280      	movs	r2, #128	; 0x80
    7c26:	0192      	lsls	r2, r2, #6
    7c28:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    7c2a:	683a      	ldr	r2, [r7, #0]
    7c2c:	4313      	orrs	r3, r2
    7c2e:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	430b      	orrs	r3, r1
    7c34:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    7c36:	2000      	movs	r0, #0
    7c38:	e74e      	b.n	7ad8 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7c3a:	6828      	ldr	r0, [r5, #0]
    7c3c:	4b0a      	ldr	r3, [pc, #40]	; (7c68 <spi_init+0x1a4>)
    7c3e:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7c40:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7c42:	b2c0      	uxtb	r0, r0
    7c44:	4b13      	ldr	r3, [pc, #76]	; (7c94 <spi_init+0x1d0>)
    7c46:	4798      	blx	r3
    7c48:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    7c4a:	ab02      	add	r3, sp, #8
    7c4c:	1d9a      	adds	r2, r3, #6
    7c4e:	69b0      	ldr	r0, [r6, #24]
    7c50:	4b11      	ldr	r3, [pc, #68]	; (7c98 <spi_init+0x1d4>)
    7c52:	4798      	blx	r3
    7c54:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    7c56:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    7c58:	2b00      	cmp	r3, #0
    7c5a:	d000      	beq.n	7c5e <spi_init+0x19a>
    7c5c:	e73c      	b.n	7ad8 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    7c5e:	ab02      	add	r3, sp, #8
    7c60:	3306      	adds	r3, #6
    7c62:	781b      	ldrb	r3, [r3, #0]
    7c64:	733b      	strb	r3, [r7, #12]
    7c66:	e7bf      	b.n	7be8 <spi_init+0x124>
    7c68:	000079bd 	.word	0x000079bd
    7c6c:	40000400 	.word	0x40000400
    7c70:	00008d35 	.word	0x00008d35
    7c74:	00008ca9 	.word	0x00008ca9
    7c78:	000077f9 	.word	0x000077f9
    7c7c:	00007f31 	.word	0x00007f31
    7c80:	000079f9 	.word	0x000079f9
    7c84:	2000166c 	.word	0x2000166c
    7c88:	00007845 	.word	0x00007845
    7c8c:	00008e2d 	.word	0x00008e2d
    7c90:	41002000 	.word	0x41002000
    7c94:	00008d51 	.word	0x00008d51
    7c98:	0000773b 	.word	0x0000773b

00007c9c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    7c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c9e:	46d6      	mov	lr, sl
    7ca0:	4647      	mov	r7, r8
    7ca2:	b580      	push	{r7, lr}
    7ca4:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    7ca6:	2438      	movs	r4, #56	; 0x38
    7ca8:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    7caa:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    7cac:	2d05      	cmp	r5, #5
    7cae:	d002      	beq.n	7cb6 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7cb0:	3412      	adds	r4, #18
	if (length == 0) {
    7cb2:	2a00      	cmp	r2, #0
    7cb4:	d105      	bne.n	7cc2 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    7cb6:	0020      	movs	r0, r4
    7cb8:	b003      	add	sp, #12
    7cba:	bc0c      	pop	{r2, r3}
    7cbc:	4690      	mov	r8, r2
    7cbe:	469a      	mov	sl, r3
    7cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    7cc2:	79c4      	ldrb	r4, [r0, #7]
    7cc4:	2c00      	cmp	r4, #0
    7cc6:	d144      	bne.n	7d52 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    7cc8:	341c      	adds	r4, #28
    7cca:	e7f4      	b.n	7cb6 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7ccc:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7cce:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    7cd0:	423c      	tst	r4, r7
    7cd2:	d0fc      	beq.n	7cce <spi_read_buffer_wait+0x32>
    7cd4:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    7cd6:	423c      	tst	r4, r7
    7cd8:	d01a      	beq.n	7d10 <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7cda:	4644      	mov	r4, r8
    7cdc:	62ac      	str	r4, [r5, #40]	; 0x28
    7cde:	e017      	b.n	7d10 <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7ce0:	7984      	ldrb	r4, [r0, #6]
    7ce2:	2c01      	cmp	r4, #1
    7ce4:	d026      	beq.n	7d34 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7ce6:	6aad      	ldr	r5, [r5, #40]	; 0x28
    7ce8:	b2ec      	uxtb	r4, r5
    7cea:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    7cec:	9c01      	ldr	r4, [sp, #4]
    7cee:	2c00      	cmp	r4, #0
    7cf0:	d13a      	bne.n	7d68 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    7cf2:	1c75      	adds	r5, r6, #1
    7cf4:	b2ad      	uxth	r5, r5
    7cf6:	4664      	mov	r4, ip
    7cf8:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7cfa:	7984      	ldrb	r4, [r0, #6]
    7cfc:	2c01      	cmp	r4, #1
    7cfe:	d01e      	beq.n	7d3e <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    7d00:	002e      	movs	r6, r5
	while (length--) {
    7d02:	3a01      	subs	r2, #1
    7d04:	b292      	uxth	r2, r2
    7d06:	4552      	cmp	r2, sl
    7d08:	d01f      	beq.n	7d4a <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    7d0a:	7944      	ldrb	r4, [r0, #5]
    7d0c:	2c01      	cmp	r4, #1
    7d0e:	d0dd      	beq.n	7ccc <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7d10:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7d12:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    7d14:	421c      	tst	r4, r3
    7d16:	d0fc      	beq.n	7d12 <spi_read_buffer_wait+0x76>
    7d18:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    7d1a:	421c      	tst	r4, r3
    7d1c:	d017      	beq.n	7d4e <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7d1e:	8b6c      	ldrh	r4, [r5, #26]
    7d20:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    7d22:	2400      	movs	r4, #0
    7d24:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7d26:	4664      	mov	r4, ip
    7d28:	421c      	tst	r4, r3
    7d2a:	d0d9      	beq.n	7ce0 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7d2c:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    7d2e:	241e      	movs	r4, #30
    7d30:	9401      	str	r4, [sp, #4]
    7d32:	e7d5      	b.n	7ce0 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7d34:	6aac      	ldr	r4, [r5, #40]	; 0x28
    7d36:	05e4      	lsls	r4, r4, #23
    7d38:	0de4      	lsrs	r4, r4, #23
    7d3a:	46a4      	mov	ip, r4
    7d3c:	e7d6      	b.n	7cec <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    7d3e:	3602      	adds	r6, #2
    7d40:	b2b6      	uxth	r6, r6
    7d42:	4664      	mov	r4, ip
    7d44:	0a24      	lsrs	r4, r4, #8
    7d46:	554c      	strb	r4, [r1, r5]
    7d48:	e7db      	b.n	7d02 <spi_read_buffer_wait+0x66>
    7d4a:	9c01      	ldr	r4, [sp, #4]
    7d4c:	e7b3      	b.n	7cb6 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    7d4e:	2410      	movs	r4, #16
    7d50:	e7b1      	b.n	7cb6 <spi_read_buffer_wait+0x1a>
	while (length--) {
    7d52:	3a01      	subs	r2, #1
    7d54:	b292      	uxth	r2, r2
    7d56:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    7d58:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7d5a:	05db      	lsls	r3, r3, #23
    7d5c:	0ddb      	lsrs	r3, r3, #23
    7d5e:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    7d60:	2304      	movs	r3, #4
	while (length--) {
    7d62:	4c02      	ldr	r4, [pc, #8]	; (7d6c <spi_read_buffer_wait+0xd0>)
    7d64:	46a2      	mov	sl, r4
    7d66:	e7d0      	b.n	7d0a <spi_read_buffer_wait+0x6e>
    7d68:	9c01      	ldr	r4, [sp, #4]
    7d6a:	e7a4      	b.n	7cb6 <spi_read_buffer_wait+0x1a>
    7d6c:	0000ffff 	.word	0x0000ffff

00007d70 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    7d70:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    7d72:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    7d74:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    7d76:	2c01      	cmp	r4, #1
    7d78:	d001      	beq.n	7d7e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    7d7a:	0018      	movs	r0, r3
    7d7c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    7d7e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    7d80:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    7d82:	2c00      	cmp	r4, #0
    7d84:	d1f9      	bne.n	7d7a <spi_select_slave+0xa>
		if (select) {
    7d86:	2a00      	cmp	r2, #0
    7d88:	d058      	beq.n	7e3c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    7d8a:	784b      	ldrb	r3, [r1, #1]
    7d8c:	2b00      	cmp	r3, #0
    7d8e:	d044      	beq.n	7e1a <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7d90:	6803      	ldr	r3, [r0, #0]
    7d92:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    7d94:	07db      	lsls	r3, r3, #31
    7d96:	d410      	bmi.n	7dba <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    7d98:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7d9a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7d9c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7d9e:	2900      	cmp	r1, #0
    7da0:	d104      	bne.n	7dac <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    7da2:	0953      	lsrs	r3, r2, #5
    7da4:	01db      	lsls	r3, r3, #7
    7da6:	492e      	ldr	r1, [pc, #184]	; (7e60 <spi_select_slave+0xf0>)
    7da8:	468c      	mov	ip, r1
    7daa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7dac:	211f      	movs	r1, #31
    7dae:	4011      	ands	r1, r2
    7db0:	2201      	movs	r2, #1
    7db2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7db4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    7db6:	2305      	movs	r3, #5
    7db8:	e7df      	b.n	7d7a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7dba:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7dbc:	09d4      	lsrs	r4, r2, #7
		return NULL;
    7dbe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7dc0:	2c00      	cmp	r4, #0
    7dc2:	d104      	bne.n	7dce <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    7dc4:	0953      	lsrs	r3, r2, #5
    7dc6:	01db      	lsls	r3, r3, #7
    7dc8:	4c25      	ldr	r4, [pc, #148]	; (7e60 <spi_select_slave+0xf0>)
    7dca:	46a4      	mov	ip, r4
    7dcc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7dce:	241f      	movs	r4, #31
    7dd0:	4014      	ands	r4, r2
    7dd2:	2201      	movs	r2, #1
    7dd4:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    7dd6:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7dd8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7dda:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    7ddc:	07d2      	lsls	r2, r2, #31
    7dde:	d501      	bpl.n	7de4 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7de0:	788a      	ldrb	r2, [r1, #2]
    7de2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    7de4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    7de6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    7de8:	2a00      	cmp	r2, #0
    7dea:	d1c6      	bne.n	7d7a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7dec:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    7dee:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7df0:	7e13      	ldrb	r3, [r2, #24]
    7df2:	420b      	tst	r3, r1
    7df4:	d0fc      	beq.n	7df0 <spi_select_slave+0x80>
    7df6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    7df8:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    7dfa:	0749      	lsls	r1, r1, #29
    7dfc:	d5bd      	bpl.n	7d7a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7dfe:	8b53      	ldrh	r3, [r2, #26]
    7e00:	075b      	lsls	r3, r3, #29
    7e02:	d501      	bpl.n	7e08 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7e04:	2304      	movs	r3, #4
    7e06:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7e08:	7983      	ldrb	r3, [r0, #6]
    7e0a:	2b01      	cmp	r3, #1
    7e0c:	d002      	beq.n	7e14 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7e0e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7e10:	2300      	movs	r3, #0
    7e12:	e7b2      	b.n	7d7a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7e14:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7e16:	2300      	movs	r3, #0
    7e18:	e7af      	b.n	7d7a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7e1a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7e1c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7e1e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7e20:	2900      	cmp	r1, #0
    7e22:	d104      	bne.n	7e2e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    7e24:	0953      	lsrs	r3, r2, #5
    7e26:	01db      	lsls	r3, r3, #7
    7e28:	490d      	ldr	r1, [pc, #52]	; (7e60 <spi_select_slave+0xf0>)
    7e2a:	468c      	mov	ip, r1
    7e2c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7e2e:	211f      	movs	r1, #31
    7e30:	4011      	ands	r1, r2
    7e32:	2201      	movs	r2, #1
    7e34:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    7e36:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    7e38:	2300      	movs	r3, #0
    7e3a:	e79e      	b.n	7d7a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    7e3c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7e3e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7e40:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7e42:	2900      	cmp	r1, #0
    7e44:	d104      	bne.n	7e50 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    7e46:	0953      	lsrs	r3, r2, #5
    7e48:	01db      	lsls	r3, r3, #7
    7e4a:	4905      	ldr	r1, [pc, #20]	; (7e60 <spi_select_slave+0xf0>)
    7e4c:	468c      	mov	ip, r1
    7e4e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7e50:	211f      	movs	r1, #31
    7e52:	4011      	ands	r1, r2
    7e54:	2201      	movs	r2, #1
    7e56:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7e58:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    7e5a:	2300      	movs	r3, #0
    7e5c:	e78d      	b.n	7d7a <spi_select_slave+0xa>
    7e5e:	46c0      	nop			; (mov r8, r8)
    7e60:	41004400 	.word	0x41004400

00007e64 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    7e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e66:	46de      	mov	lr, fp
    7e68:	4657      	mov	r7, sl
    7e6a:	464e      	mov	r6, r9
    7e6c:	4645      	mov	r5, r8
    7e6e:	b5e0      	push	{r5, r6, r7, lr}
    7e70:	b083      	sub	sp, #12
    7e72:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    7e74:	2338      	movs	r3, #56	; 0x38
    7e76:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    7e78:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    7e7a:	2c05      	cmp	r4, #5
    7e7c:	d002      	beq.n	7e84 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7e7e:	3312      	adds	r3, #18
	if (length == 0) {
    7e80:	2a00      	cmp	r2, #0
    7e82:	d14b      	bne.n	7f1c <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    7e84:	0018      	movs	r0, r3
    7e86:	b003      	add	sp, #12
    7e88:	bc3c      	pop	{r2, r3, r4, r5}
    7e8a:	4690      	mov	r8, r2
    7e8c:	4699      	mov	r9, r3
    7e8e:	46a2      	mov	sl, r4
    7e90:	46ab      	mov	fp, r5
    7e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    7e94:	3702      	adds	r7, #2
    7e96:	b2bf      	uxth	r7, r7
    7e98:	4641      	mov	r1, r8
    7e9a:	4653      	mov	r3, sl
    7e9c:	5c59      	ldrb	r1, [r3, r1]
    7e9e:	0209      	lsls	r1, r1, #8
    7ea0:	465b      	mov	r3, fp
    7ea2:	430b      	orrs	r3, r1
    7ea4:	e018      	b.n	7ed8 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7ea6:	7983      	ldrb	r3, [r0, #6]
    7ea8:	2b01      	cmp	r3, #1
    7eaa:	d02a      	beq.n	7f02 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7eac:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    7eae:	3e01      	subs	r6, #1
    7eb0:	b2b6      	uxth	r6, r6
    7eb2:	4566      	cmp	r6, ip
    7eb4:	d027      	beq.n	7f06 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7eb6:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7eb8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    7eba:	4223      	tst	r3, r4
    7ebc:	d0fc      	beq.n	7eb8 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    7ebe:	1c7b      	adds	r3, r7, #1
    7ec0:	b29b      	uxth	r3, r3
    7ec2:	4698      	mov	r8, r3
    7ec4:	4653      	mov	r3, sl
    7ec6:	5ddb      	ldrb	r3, [r3, r7]
    7ec8:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7eca:	7981      	ldrb	r1, [r0, #6]
    7ecc:	2901      	cmp	r1, #1
    7ece:	d0e1      	beq.n	7e94 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    7ed0:	4669      	mov	r1, sp
    7ed2:	80cb      	strh	r3, [r1, #6]
    7ed4:	88cb      	ldrh	r3, [r1, #6]
    7ed6:	4647      	mov	r7, r8
    7ed8:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    7eda:	4221      	tst	r1, r4
    7edc:	d002      	beq.n	7ee4 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7ede:	05db      	lsls	r3, r3, #23
    7ee0:	0ddb      	lsrs	r3, r3, #23
    7ee2:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    7ee4:	79c3      	ldrb	r3, [r0, #7]
    7ee6:	2b00      	cmp	r3, #0
    7ee8:	d0e1      	beq.n	7eae <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7eea:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7eec:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    7eee:	422b      	tst	r3, r5
    7ef0:	d0fc      	beq.n	7eec <spi_write_buffer_wait+0x88>
    7ef2:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    7ef4:	422b      	tst	r3, r5
    7ef6:	d0da      	beq.n	7eae <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7ef8:	8b53      	ldrh	r3, [r2, #26]
    7efa:	422b      	tst	r3, r5
    7efc:	d0d3      	beq.n	7ea6 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7efe:	8355      	strh	r5, [r2, #26]
    7f00:	e7d1      	b.n	7ea6 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7f02:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7f04:	e7d3      	b.n	7eae <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    7f06:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    7f08:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    7f0a:	2a01      	cmp	r2, #1
    7f0c:	d1ba      	bne.n	7e84 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7f0e:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    7f10:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7f12:	7e0b      	ldrb	r3, [r1, #24]
    7f14:	4213      	tst	r3, r2
    7f16:	d0fc      	beq.n	7f12 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    7f18:	2300      	movs	r3, #0
    7f1a:	e7b3      	b.n	7e84 <spi_write_buffer_wait+0x20>
	while (length--) {
    7f1c:	3a01      	subs	r2, #1
    7f1e:	b296      	uxth	r6, r2
    7f20:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    7f22:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    7f24:	2504      	movs	r5, #4
	while (length--) {
    7f26:	4b01      	ldr	r3, [pc, #4]	; (7f2c <spi_write_buffer_wait+0xc8>)
    7f28:	469c      	mov	ip, r3
    7f2a:	e7c4      	b.n	7eb6 <spi_write_buffer_wait+0x52>
    7f2c:	0000ffff 	.word	0x0000ffff

00007f30 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    7f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    7f32:	0080      	lsls	r0, r0, #2
    7f34:	4b70      	ldr	r3, [pc, #448]	; (80f8 <_spi_interrupt_handler+0x1c8>)
    7f36:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7f38:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    7f3a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    7f3c:	5ce7      	ldrb	r7, [r4, r3]
    7f3e:	2236      	movs	r2, #54	; 0x36
    7f40:	5ca2      	ldrb	r2, [r4, r2]
    7f42:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    7f44:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    7f46:	7db5      	ldrb	r5, [r6, #22]
    7f48:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    7f4a:	07eb      	lsls	r3, r5, #31
    7f4c:	d502      	bpl.n	7f54 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    7f4e:	7963      	ldrb	r3, [r4, #5]
    7f50:	2b01      	cmp	r3, #1
    7f52:	d01e      	beq.n	7f92 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    7f54:	076b      	lsls	r3, r5, #29
    7f56:	d511      	bpl.n	7f7c <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7f58:	8b73      	ldrh	r3, [r6, #26]
    7f5a:	075b      	lsls	r3, r3, #29
    7f5c:	d55a      	bpl.n	8014 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    7f5e:	7a63      	ldrb	r3, [r4, #9]
    7f60:	2b01      	cmp	r3, #1
    7f62:	d008      	beq.n	7f76 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    7f64:	221e      	movs	r2, #30
    7f66:	2338      	movs	r3, #56	; 0x38
    7f68:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    7f6a:	3b35      	subs	r3, #53	; 0x35
    7f6c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    7f6e:	3302      	adds	r3, #2
    7f70:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    7f72:	073b      	lsls	r3, r7, #28
    7f74:	d44a      	bmi.n	800c <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    7f76:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7f78:	2304      	movs	r3, #4
    7f7a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    7f7c:	07ab      	lsls	r3, r5, #30
    7f7e:	d503      	bpl.n	7f88 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    7f80:	7963      	ldrb	r3, [r4, #5]
    7f82:	2b01      	cmp	r3, #1
    7f84:	d100      	bne.n	7f88 <_spi_interrupt_handler+0x58>
    7f86:	e097      	b.n	80b8 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    7f88:	b26d      	sxtb	r5, r5
    7f8a:	2d00      	cmp	r5, #0
    7f8c:	da00      	bge.n	7f90 <_spi_interrupt_handler+0x60>
    7f8e:	e0a9      	b.n	80e4 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    7f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    7f92:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    7f94:	2b00      	cmp	r3, #0
    7f96:	d022      	beq.n	7fde <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    7f98:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    7f9a:	2b00      	cmp	r3, #0
    7f9c:	d0da      	beq.n	7f54 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7f9e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    7fa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7fa2:	7813      	ldrb	r3, [r2, #0]
    7fa4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    7fa6:	1c50      	adds	r0, r2, #1
    7fa8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7faa:	79a0      	ldrb	r0, [r4, #6]
    7fac:	2801      	cmp	r0, #1
    7fae:	d027      	beq.n	8000 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    7fb0:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    7fb2:	05db      	lsls	r3, r3, #23
    7fb4:	0ddb      	lsrs	r3, r3, #23
    7fb6:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    7fb8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    7fba:	3b01      	subs	r3, #1
    7fbc:	b29b      	uxth	r3, r3
    7fbe:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    7fc0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    7fc2:	b29b      	uxth	r3, r3
    7fc4:	2b00      	cmp	r3, #0
    7fc6:	d1c5      	bne.n	7f54 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    7fc8:	3301      	adds	r3, #1
    7fca:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    7fcc:	7a63      	ldrb	r3, [r4, #9]
    7fce:	2b01      	cmp	r3, #1
    7fd0:	d1c0      	bne.n	7f54 <_spi_interrupt_handler+0x24>
    7fd2:	79e3      	ldrb	r3, [r4, #7]
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	d1bd      	bne.n	7f54 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7fd8:	3302      	adds	r3, #2
    7fda:	75b3      	strb	r3, [r6, #22]
    7fdc:	e7ba      	b.n	7f54 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    7fde:	4b47      	ldr	r3, [pc, #284]	; (80fc <_spi_interrupt_handler+0x1cc>)
    7fe0:	881b      	ldrh	r3, [r3, #0]
    7fe2:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    7fe4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    7fe6:	3b01      	subs	r3, #1
    7fe8:	b29b      	uxth	r3, r3
    7fea:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    7fec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    7fee:	b29b      	uxth	r3, r3
    7ff0:	2b00      	cmp	r3, #0
    7ff2:	d101      	bne.n	7ff8 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    7ff4:	3301      	adds	r3, #1
    7ff6:	7533      	strb	r3, [r6, #20]
		if (0
    7ff8:	7963      	ldrb	r3, [r4, #5]
    7ffa:	2b01      	cmp	r3, #1
    7ffc:	d0cc      	beq.n	7f98 <_spi_interrupt_handler+0x68>
    7ffe:	e7a9      	b.n	7f54 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    8000:	7850      	ldrb	r0, [r2, #1]
    8002:	0200      	lsls	r0, r0, #8
    8004:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    8006:	3202      	adds	r2, #2
    8008:	62e2      	str	r2, [r4, #44]	; 0x2c
    800a:	e7d2      	b.n	7fb2 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    800c:	0020      	movs	r0, r4
    800e:	69a3      	ldr	r3, [r4, #24]
    8010:	4798      	blx	r3
    8012:	e7b0      	b.n	7f76 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    8014:	7a63      	ldrb	r3, [r4, #9]
    8016:	2b01      	cmp	r3, #1
    8018:	d028      	beq.n	806c <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    801a:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    801c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    801e:	05db      	lsls	r3, r3, #23
    8020:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    8022:	b2da      	uxtb	r2, r3
    8024:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    8026:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    8028:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    802a:	1c51      	adds	r1, r2, #1
    802c:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    802e:	79a1      	ldrb	r1, [r4, #6]
    8030:	2901      	cmp	r1, #1
    8032:	d034      	beq.n	809e <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    8034:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    8036:	3b01      	subs	r3, #1
    8038:	b29b      	uxth	r3, r3
    803a:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    803c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    803e:	b29b      	uxth	r3, r3
    8040:	2b00      	cmp	r3, #0
    8042:	d000      	beq.n	8046 <_spi_interrupt_handler+0x116>
    8044:	e79a      	b.n	7f7c <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    8046:	2200      	movs	r2, #0
    8048:	3338      	adds	r3, #56	; 0x38
    804a:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    804c:	3b34      	subs	r3, #52	; 0x34
    804e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    8050:	7a63      	ldrb	r3, [r4, #9]
    8052:	2b02      	cmp	r3, #2
    8054:	d029      	beq.n	80aa <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    8056:	7a63      	ldrb	r3, [r4, #9]
    8058:	2b00      	cmp	r3, #0
    805a:	d000      	beq.n	805e <_spi_interrupt_handler+0x12e>
    805c:	e78e      	b.n	7f7c <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    805e:	07bb      	lsls	r3, r7, #30
    8060:	d400      	bmi.n	8064 <_spi_interrupt_handler+0x134>
    8062:	e78b      	b.n	7f7c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    8064:	0020      	movs	r0, r4
    8066:	6923      	ldr	r3, [r4, #16]
    8068:	4798      	blx	r3
    806a:	e787      	b.n	7f7c <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    806c:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    806e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    8070:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    8072:	3b01      	subs	r3, #1
    8074:	b29b      	uxth	r3, r3
    8076:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    8078:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    807a:	b29b      	uxth	r3, r3
    807c:	2b00      	cmp	r3, #0
    807e:	d000      	beq.n	8082 <_spi_interrupt_handler+0x152>
    8080:	e77c      	b.n	7f7c <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    8082:	3304      	adds	r3, #4
    8084:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    8086:	2200      	movs	r2, #0
    8088:	3334      	adds	r3, #52	; 0x34
    808a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    808c:	3b35      	subs	r3, #53	; 0x35
    808e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    8090:	07fb      	lsls	r3, r7, #31
    8092:	d400      	bmi.n	8096 <_spi_interrupt_handler+0x166>
    8094:	e772      	b.n	7f7c <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    8096:	0020      	movs	r0, r4
    8098:	68e3      	ldr	r3, [r4, #12]
    809a:	4798      	blx	r3
    809c:	e76e      	b.n	7f7c <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    809e:	0a1b      	lsrs	r3, r3, #8
    80a0:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    80a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    80a4:	3301      	adds	r3, #1
    80a6:	62a3      	str	r3, [r4, #40]	; 0x28
    80a8:	e7c4      	b.n	8034 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    80aa:	077b      	lsls	r3, r7, #29
    80ac:	d400      	bmi.n	80b0 <_spi_interrupt_handler+0x180>
    80ae:	e765      	b.n	7f7c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    80b0:	0020      	movs	r0, r4
    80b2:	6963      	ldr	r3, [r4, #20]
    80b4:	4798      	blx	r3
    80b6:	e761      	b.n	7f7c <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    80b8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    80ba:	2b01      	cmp	r3, #1
    80bc:	d000      	beq.n	80c0 <_spi_interrupt_handler+0x190>
    80be:	e763      	b.n	7f88 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    80c0:	79e3      	ldrb	r3, [r4, #7]
    80c2:	2b00      	cmp	r3, #0
    80c4:	d000      	beq.n	80c8 <_spi_interrupt_handler+0x198>
    80c6:	e75f      	b.n	7f88 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    80c8:	3302      	adds	r3, #2
    80ca:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    80cc:	3301      	adds	r3, #1
    80ce:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    80d0:	2200      	movs	r2, #0
    80d2:	3335      	adds	r3, #53	; 0x35
    80d4:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    80d6:	07fb      	lsls	r3, r7, #31
    80d8:	d400      	bmi.n	80dc <_spi_interrupt_handler+0x1ac>
    80da:	e755      	b.n	7f88 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    80dc:	0020      	movs	r0, r4
    80de:	68e3      	ldr	r3, [r4, #12]
    80e0:	4798      	blx	r3
    80e2:	e751      	b.n	7f88 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    80e4:	2380      	movs	r3, #128	; 0x80
    80e6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    80e8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    80ea:	067b      	lsls	r3, r7, #25
    80ec:	d400      	bmi.n	80f0 <_spi_interrupt_handler+0x1c0>
    80ee:	e74f      	b.n	7f90 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    80f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    80f2:	0020      	movs	r0, r4
    80f4:	4798      	blx	r3
}
    80f6:	e74b      	b.n	7f90 <_spi_interrupt_handler+0x60>
    80f8:	2000166c 	.word	0x2000166c
    80fc:	20001684 	.word	0x20001684

00008100 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    8100:	b5f0      	push	{r4, r5, r6, r7, lr}
    8102:	46de      	mov	lr, fp
    8104:	4657      	mov	r7, sl
    8106:	464e      	mov	r6, r9
    8108:	4645      	mov	r5, r8
    810a:	b5e0      	push	{r5, r6, r7, lr}
    810c:	b091      	sub	sp, #68	; 0x44
    810e:	0005      	movs	r5, r0
    8110:	000c      	movs	r4, r1
    8112:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    8114:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8116:	0008      	movs	r0, r1
    8118:	4bbc      	ldr	r3, [pc, #752]	; (840c <usart_init+0x30c>)
    811a:	4798      	blx	r3
    811c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    811e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    8120:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    8122:	07db      	lsls	r3, r3, #31
    8124:	d506      	bpl.n	8134 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    8126:	b011      	add	sp, #68	; 0x44
    8128:	bc3c      	pop	{r2, r3, r4, r5}
    812a:	4690      	mov	r8, r2
    812c:	4699      	mov	r9, r3
    812e:	46a2      	mov	sl, r4
    8130:	46ab      	mov	fp, r5
    8132:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    8134:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    8136:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    8138:	079b      	lsls	r3, r3, #30
    813a:	d4f4      	bmi.n	8126 <usart_init+0x26>
    813c:	49b4      	ldr	r1, [pc, #720]	; (8410 <usart_init+0x310>)
    813e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    8140:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    8142:	2301      	movs	r3, #1
    8144:	40bb      	lsls	r3, r7
    8146:	4303      	orrs	r3, r0
    8148:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    814a:	a90f      	add	r1, sp, #60	; 0x3c
    814c:	272d      	movs	r7, #45	; 0x2d
    814e:	5df3      	ldrb	r3, [r6, r7]
    8150:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8152:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    8154:	b2d3      	uxtb	r3, r2
    8156:	9302      	str	r3, [sp, #8]
    8158:	0018      	movs	r0, r3
    815a:	4bae      	ldr	r3, [pc, #696]	; (8414 <usart_init+0x314>)
    815c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    815e:	9802      	ldr	r0, [sp, #8]
    8160:	4bad      	ldr	r3, [pc, #692]	; (8418 <usart_init+0x318>)
    8162:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    8164:	5df0      	ldrb	r0, [r6, r7]
    8166:	2100      	movs	r1, #0
    8168:	4bac      	ldr	r3, [pc, #688]	; (841c <usart_init+0x31c>)
    816a:	4798      	blx	r3
	module->character_size = config->character_size;
    816c:	7af3      	ldrb	r3, [r6, #11]
    816e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    8170:	2324      	movs	r3, #36	; 0x24
    8172:	5cf3      	ldrb	r3, [r6, r3]
    8174:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    8176:	2325      	movs	r3, #37	; 0x25
    8178:	5cf3      	ldrb	r3, [r6, r3]
    817a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    817c:	7ef3      	ldrb	r3, [r6, #27]
    817e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    8180:	7f33      	ldrb	r3, [r6, #28]
    8182:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8184:	682b      	ldr	r3, [r5, #0]
    8186:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8188:	0018      	movs	r0, r3
    818a:	4ba0      	ldr	r3, [pc, #640]	; (840c <usart_init+0x30c>)
    818c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    818e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    8190:	2200      	movs	r2, #0
    8192:	230e      	movs	r3, #14
    8194:	a906      	add	r1, sp, #24
    8196:	468c      	mov	ip, r1
    8198:	4463      	add	r3, ip
    819a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    819c:	8a32      	ldrh	r2, [r6, #16]
    819e:	9202      	str	r2, [sp, #8]
    81a0:	2380      	movs	r3, #128	; 0x80
    81a2:	01db      	lsls	r3, r3, #7
    81a4:	429a      	cmp	r2, r3
    81a6:	d100      	bne.n	81aa <usart_init+0xaa>
    81a8:	e09e      	b.n	82e8 <usart_init+0x1e8>
    81aa:	d90f      	bls.n	81cc <usart_init+0xcc>
    81ac:	23c0      	movs	r3, #192	; 0xc0
    81ae:	01db      	lsls	r3, r3, #7
    81b0:	9a02      	ldr	r2, [sp, #8]
    81b2:	429a      	cmp	r2, r3
    81b4:	d100      	bne.n	81b8 <usart_init+0xb8>
    81b6:	e092      	b.n	82de <usart_init+0x1de>
    81b8:	2380      	movs	r3, #128	; 0x80
    81ba:	021b      	lsls	r3, r3, #8
    81bc:	429a      	cmp	r2, r3
    81be:	d000      	beq.n	81c2 <usart_init+0xc2>
    81c0:	e11f      	b.n	8402 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    81c2:	2303      	movs	r3, #3
    81c4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    81c6:	2300      	movs	r3, #0
    81c8:	9307      	str	r3, [sp, #28]
    81ca:	e008      	b.n	81de <usart_init+0xde>
	switch (config->sample_rate) {
    81cc:	2380      	movs	r3, #128	; 0x80
    81ce:	019b      	lsls	r3, r3, #6
    81d0:	429a      	cmp	r2, r3
    81d2:	d000      	beq.n	81d6 <usart_init+0xd6>
    81d4:	e115      	b.n	8402 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    81d6:	2310      	movs	r3, #16
    81d8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    81da:	3b0f      	subs	r3, #15
    81dc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    81de:	6833      	ldr	r3, [r6, #0]
    81e0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    81e2:	68f3      	ldr	r3, [r6, #12]
    81e4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    81e6:	6973      	ldr	r3, [r6, #20]
    81e8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    81ea:	7e33      	ldrb	r3, [r6, #24]
    81ec:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    81ee:	2326      	movs	r3, #38	; 0x26
    81f0:	5cf3      	ldrb	r3, [r6, r3]
    81f2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    81f4:	6873      	ldr	r3, [r6, #4]
    81f6:	4699      	mov	r9, r3
	switch (transfer_mode)
    81f8:	2b00      	cmp	r3, #0
    81fa:	d100      	bne.n	81fe <usart_init+0xfe>
    81fc:	e0a0      	b.n	8340 <usart_init+0x240>
    81fe:	2380      	movs	r3, #128	; 0x80
    8200:	055b      	lsls	r3, r3, #21
    8202:	4599      	cmp	r9, r3
    8204:	d100      	bne.n	8208 <usart_init+0x108>
    8206:	e084      	b.n	8312 <usart_init+0x212>
	if(config->encoding_format_enable) {
    8208:	7e73      	ldrb	r3, [r6, #25]
    820a:	2b00      	cmp	r3, #0
    820c:	d002      	beq.n	8214 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    820e:	7eb3      	ldrb	r3, [r6, #26]
    8210:	4642      	mov	r2, r8
    8212:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    8214:	682a      	ldr	r2, [r5, #0]
    8216:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    8218:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    821a:	2b00      	cmp	r3, #0
    821c:	d1fc      	bne.n	8218 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    821e:	330e      	adds	r3, #14
    8220:	aa06      	add	r2, sp, #24
    8222:	4694      	mov	ip, r2
    8224:	4463      	add	r3, ip
    8226:	881b      	ldrh	r3, [r3, #0]
    8228:	4642      	mov	r2, r8
    822a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    822c:	9b05      	ldr	r3, [sp, #20]
    822e:	9a03      	ldr	r2, [sp, #12]
    8230:	4313      	orrs	r3, r2
    8232:	9a04      	ldr	r2, [sp, #16]
    8234:	4313      	orrs	r3, r2
    8236:	464a      	mov	r2, r9
    8238:	4313      	orrs	r3, r2
    823a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    823c:	465b      	mov	r3, fp
    823e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    8240:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    8242:	4653      	mov	r3, sl
    8244:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    8246:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    8248:	2327      	movs	r3, #39	; 0x27
    824a:	5cf3      	ldrb	r3, [r6, r3]
    824c:	2b00      	cmp	r3, #0
    824e:	d101      	bne.n	8254 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    8250:	3304      	adds	r3, #4
    8252:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    8254:	7e73      	ldrb	r3, [r6, #25]
    8256:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    8258:	7f32      	ldrb	r2, [r6, #28]
    825a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    825c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    825e:	7f72      	ldrb	r2, [r6, #29]
    8260:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    8262:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    8264:	2224      	movs	r2, #36	; 0x24
    8266:	5cb2      	ldrb	r2, [r6, r2]
    8268:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    826a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    826c:	2225      	movs	r2, #37	; 0x25
    826e:	5cb2      	ldrb	r2, [r6, r2]
    8270:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    8272:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    8274:	7ab1      	ldrb	r1, [r6, #10]
    8276:	7af2      	ldrb	r2, [r6, #11]
    8278:	4311      	orrs	r1, r2
    827a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    827c:	8933      	ldrh	r3, [r6, #8]
    827e:	2bff      	cmp	r3, #255	; 0xff
    8280:	d100      	bne.n	8284 <usart_init+0x184>
    8282:	e081      	b.n	8388 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    8284:	2280      	movs	r2, #128	; 0x80
    8286:	0452      	lsls	r2, r2, #17
    8288:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    828a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    828c:	232c      	movs	r3, #44	; 0x2c
    828e:	5cf3      	ldrb	r3, [r6, r3]
    8290:	2b00      	cmp	r3, #0
    8292:	d103      	bne.n	829c <usart_init+0x19c>
    8294:	4b62      	ldr	r3, [pc, #392]	; (8420 <usart_init+0x320>)
    8296:	789b      	ldrb	r3, [r3, #2]
    8298:	079b      	lsls	r3, r3, #30
    829a:	d501      	bpl.n	82a0 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    829c:	2380      	movs	r3, #128	; 0x80
    829e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    82a0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    82a2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    82a4:	2b00      	cmp	r3, #0
    82a6:	d1fc      	bne.n	82a2 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    82a8:	4643      	mov	r3, r8
    82aa:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    82ac:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    82ae:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    82b0:	2b00      	cmp	r3, #0
    82b2:	d1fc      	bne.n	82ae <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    82b4:	4643      	mov	r3, r8
    82b6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    82b8:	ab0e      	add	r3, sp, #56	; 0x38
    82ba:	2280      	movs	r2, #128	; 0x80
    82bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    82be:	2200      	movs	r2, #0
    82c0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    82c2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    82c4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    82c6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    82c8:	930a      	str	r3, [sp, #40]	; 0x28
    82ca:	6b73      	ldr	r3, [r6, #52]	; 0x34
    82cc:	930b      	str	r3, [sp, #44]	; 0x2c
    82ce:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    82d0:	930c      	str	r3, [sp, #48]	; 0x30
    82d2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    82d4:	9302      	str	r3, [sp, #8]
    82d6:	930d      	str	r3, [sp, #52]	; 0x34
    82d8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    82da:	ae0a      	add	r6, sp, #40	; 0x28
    82dc:	e063      	b.n	83a6 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    82de:	2308      	movs	r3, #8
    82e0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    82e2:	3b07      	subs	r3, #7
    82e4:	9307      	str	r3, [sp, #28]
    82e6:	e77a      	b.n	81de <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    82e8:	6833      	ldr	r3, [r6, #0]
    82ea:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    82ec:	68f3      	ldr	r3, [r6, #12]
    82ee:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    82f0:	6973      	ldr	r3, [r6, #20]
    82f2:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    82f4:	7e33      	ldrb	r3, [r6, #24]
    82f6:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    82f8:	2326      	movs	r3, #38	; 0x26
    82fa:	5cf3      	ldrb	r3, [r6, r3]
    82fc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    82fe:	6873      	ldr	r3, [r6, #4]
    8300:	4699      	mov	r9, r3
	switch (transfer_mode)
    8302:	2b00      	cmp	r3, #0
    8304:	d018      	beq.n	8338 <usart_init+0x238>
    8306:	2380      	movs	r3, #128	; 0x80
    8308:	055b      	lsls	r3, r3, #21
    830a:	4599      	cmp	r9, r3
    830c:	d001      	beq.n	8312 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    830e:	2000      	movs	r0, #0
    8310:	e025      	b.n	835e <usart_init+0x25e>
			if (!config->use_external_clock) {
    8312:	2327      	movs	r3, #39	; 0x27
    8314:	5cf3      	ldrb	r3, [r6, r3]
    8316:	2b00      	cmp	r3, #0
    8318:	d000      	beq.n	831c <usart_init+0x21c>
    831a:	e775      	b.n	8208 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    831c:	6a33      	ldr	r3, [r6, #32]
    831e:	001f      	movs	r7, r3
    8320:	b2c0      	uxtb	r0, r0
    8322:	4b40      	ldr	r3, [pc, #256]	; (8424 <usart_init+0x324>)
    8324:	4798      	blx	r3
    8326:	0001      	movs	r1, r0
    8328:	220e      	movs	r2, #14
    832a:	ab06      	add	r3, sp, #24
    832c:	469c      	mov	ip, r3
    832e:	4462      	add	r2, ip
    8330:	0038      	movs	r0, r7
    8332:	4b3d      	ldr	r3, [pc, #244]	; (8428 <usart_init+0x328>)
    8334:	4798      	blx	r3
    8336:	e012      	b.n	835e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    8338:	2308      	movs	r3, #8
    833a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    833c:	2300      	movs	r3, #0
    833e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    8340:	2327      	movs	r3, #39	; 0x27
    8342:	5cf3      	ldrb	r3, [r6, r3]
    8344:	2b00      	cmp	r3, #0
    8346:	d00e      	beq.n	8366 <usart_init+0x266>
				status_code =
    8348:	9b06      	ldr	r3, [sp, #24]
    834a:	9300      	str	r3, [sp, #0]
    834c:	9b07      	ldr	r3, [sp, #28]
    834e:	220e      	movs	r2, #14
    8350:	a906      	add	r1, sp, #24
    8352:	468c      	mov	ip, r1
    8354:	4462      	add	r2, ip
    8356:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    8358:	6a30      	ldr	r0, [r6, #32]
    835a:	4f34      	ldr	r7, [pc, #208]	; (842c <usart_init+0x32c>)
    835c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    835e:	2800      	cmp	r0, #0
    8360:	d000      	beq.n	8364 <usart_init+0x264>
    8362:	e6e0      	b.n	8126 <usart_init+0x26>
    8364:	e750      	b.n	8208 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    8366:	6a33      	ldr	r3, [r6, #32]
    8368:	001f      	movs	r7, r3
    836a:	b2c0      	uxtb	r0, r0
    836c:	4b2d      	ldr	r3, [pc, #180]	; (8424 <usart_init+0x324>)
    836e:	4798      	blx	r3
    8370:	0001      	movs	r1, r0
				status_code =
    8372:	9b06      	ldr	r3, [sp, #24]
    8374:	9300      	str	r3, [sp, #0]
    8376:	9b07      	ldr	r3, [sp, #28]
    8378:	220e      	movs	r2, #14
    837a:	a806      	add	r0, sp, #24
    837c:	4684      	mov	ip, r0
    837e:	4462      	add	r2, ip
    8380:	0038      	movs	r0, r7
    8382:	4f2a      	ldr	r7, [pc, #168]	; (842c <usart_init+0x32c>)
    8384:	47b8      	blx	r7
    8386:	e7ea      	b.n	835e <usart_init+0x25e>
		if(config->lin_slave_enable) {
    8388:	7ef3      	ldrb	r3, [r6, #27]
    838a:	2b00      	cmp	r3, #0
    838c:	d100      	bne.n	8390 <usart_init+0x290>
    838e:	e77d      	b.n	828c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    8390:	2380      	movs	r3, #128	; 0x80
    8392:	04db      	lsls	r3, r3, #19
    8394:	431f      	orrs	r7, r3
    8396:	e779      	b.n	828c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    8398:	0020      	movs	r0, r4
    839a:	4b25      	ldr	r3, [pc, #148]	; (8430 <usart_init+0x330>)
    839c:	4798      	blx	r3
    839e:	e007      	b.n	83b0 <usart_init+0x2b0>
    83a0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    83a2:	2f04      	cmp	r7, #4
    83a4:	d00d      	beq.n	83c2 <usart_init+0x2c2>
    83a6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    83a8:	00bb      	lsls	r3, r7, #2
    83aa:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    83ac:	2800      	cmp	r0, #0
    83ae:	d0f3      	beq.n	8398 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    83b0:	1c43      	adds	r3, r0, #1
    83b2:	d0f5      	beq.n	83a0 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    83b4:	a90e      	add	r1, sp, #56	; 0x38
    83b6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    83b8:	0c00      	lsrs	r0, r0, #16
    83ba:	b2c0      	uxtb	r0, r0
    83bc:	4b1d      	ldr	r3, [pc, #116]	; (8434 <usart_init+0x334>)
    83be:	4798      	blx	r3
    83c0:	e7ee      	b.n	83a0 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    83c2:	2300      	movs	r3, #0
    83c4:	60eb      	str	r3, [r5, #12]
    83c6:	612b      	str	r3, [r5, #16]
    83c8:	616b      	str	r3, [r5, #20]
    83ca:	61ab      	str	r3, [r5, #24]
    83cc:	61eb      	str	r3, [r5, #28]
    83ce:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    83d0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    83d2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    83d4:	2200      	movs	r2, #0
    83d6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    83d8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    83da:	3330      	adds	r3, #48	; 0x30
    83dc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    83de:	3301      	adds	r3, #1
    83e0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    83e2:	3301      	adds	r3, #1
    83e4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    83e6:	3301      	adds	r3, #1
    83e8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    83ea:	6828      	ldr	r0, [r5, #0]
    83ec:	4b07      	ldr	r3, [pc, #28]	; (840c <usart_init+0x30c>)
    83ee:	4798      	blx	r3
    83f0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    83f2:	4911      	ldr	r1, [pc, #68]	; (8438 <usart_init+0x338>)
    83f4:	4b11      	ldr	r3, [pc, #68]	; (843c <usart_init+0x33c>)
    83f6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    83f8:	00a4      	lsls	r4, r4, #2
    83fa:	4b11      	ldr	r3, [pc, #68]	; (8440 <usart_init+0x340>)
    83fc:	50e5      	str	r5, [r4, r3]
	return status_code;
    83fe:	2000      	movs	r0, #0
    8400:	e691      	b.n	8126 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    8402:	2310      	movs	r3, #16
    8404:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    8406:	2300      	movs	r3, #0
    8408:	9307      	str	r3, [sp, #28]
    840a:	e6e8      	b.n	81de <usart_init+0xde>
    840c:	000079bd 	.word	0x000079bd
    8410:	40000400 	.word	0x40000400
    8414:	00008d35 	.word	0x00008d35
    8418:	00008ca9 	.word	0x00008ca9
    841c:	000077f9 	.word	0x000077f9
    8420:	41002000 	.word	0x41002000
    8424:	00008d51 	.word	0x00008d51
    8428:	0000773b 	.word	0x0000773b
    842c:	00007765 	.word	0x00007765
    8430:	00007845 	.word	0x00007845
    8434:	00008e2d 	.word	0x00008e2d
    8438:	00008559 	.word	0x00008559
    843c:	000079f9 	.word	0x000079f9
    8440:	2000166c 	.word	0x2000166c

00008444 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    8444:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    8446:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    8448:	2a00      	cmp	r2, #0
    844a:	d101      	bne.n	8450 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    844c:	0018      	movs	r0, r3
    844e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    8450:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    8452:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    8454:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    8456:	2a00      	cmp	r2, #0
    8458:	d1f8      	bne.n	844c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    845a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    845c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    845e:	2a00      	cmp	r2, #0
    8460:	d1fc      	bne.n	845c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    8462:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    8464:	2102      	movs	r1, #2
    8466:	7e1a      	ldrb	r2, [r3, #24]
    8468:	420a      	tst	r2, r1
    846a:	d0fc      	beq.n	8466 <usart_write_wait+0x22>
	return STATUS_OK;
    846c:	2300      	movs	r3, #0
    846e:	e7ed      	b.n	844c <usart_write_wait+0x8>

00008470 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    8470:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    8472:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    8474:	2a00      	cmp	r2, #0
    8476:	d101      	bne.n	847c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    8478:	0018      	movs	r0, r3
    847a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    847c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    847e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    8480:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    8482:	2a00      	cmp	r2, #0
    8484:	d1f8      	bne.n	8478 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    8486:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    8488:	7e10      	ldrb	r0, [r2, #24]
    848a:	0740      	lsls	r0, r0, #29
    848c:	d5f4      	bpl.n	8478 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    848e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    8490:	2b00      	cmp	r3, #0
    8492:	d1fc      	bne.n	848e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    8494:	8b53      	ldrh	r3, [r2, #26]
    8496:	b2db      	uxtb	r3, r3
	if (error_code) {
    8498:	0698      	lsls	r0, r3, #26
    849a:	d01d      	beq.n	84d8 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    849c:	0798      	lsls	r0, r3, #30
    849e:	d503      	bpl.n	84a8 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    84a0:	2302      	movs	r3, #2
    84a2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    84a4:	3318      	adds	r3, #24
    84a6:	e7e7      	b.n	8478 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    84a8:	0758      	lsls	r0, r3, #29
    84aa:	d503      	bpl.n	84b4 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    84ac:	2304      	movs	r3, #4
    84ae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    84b0:	331a      	adds	r3, #26
    84b2:	e7e1      	b.n	8478 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    84b4:	07d8      	lsls	r0, r3, #31
    84b6:	d503      	bpl.n	84c0 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    84b8:	2301      	movs	r3, #1
    84ba:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    84bc:	3312      	adds	r3, #18
    84be:	e7db      	b.n	8478 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    84c0:	06d8      	lsls	r0, r3, #27
    84c2:	d503      	bpl.n	84cc <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    84c4:	2310      	movs	r3, #16
    84c6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    84c8:	3332      	adds	r3, #50	; 0x32
    84ca:	e7d5      	b.n	8478 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    84cc:	069b      	lsls	r3, r3, #26
    84ce:	d503      	bpl.n	84d8 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    84d0:	2320      	movs	r3, #32
    84d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    84d4:	3321      	adds	r3, #33	; 0x21
    84d6:	e7cf      	b.n	8478 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    84d8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    84da:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    84dc:	2300      	movs	r3, #0
    84de:	e7cb      	b.n	8478 <usart_read_wait+0x8>

000084e0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    84e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    84e2:	0004      	movs	r4, r0
    84e4:	000d      	movs	r5, r1
    84e6:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    84e8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    84ea:	4b0f      	ldr	r3, [pc, #60]	; (8528 <_usart_read_buffer+0x48>)
    84ec:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    84ee:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    84f0:	b29b      	uxth	r3, r3
    84f2:	2b00      	cmp	r3, #0
    84f4:	d003      	beq.n	84fe <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    84f6:	4b0d      	ldr	r3, [pc, #52]	; (852c <_usart_read_buffer+0x4c>)
    84f8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    84fa:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    84fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    84fe:	85a6      	strh	r6, [r4, #44]	; 0x2c
    8500:	4b0a      	ldr	r3, [pc, #40]	; (852c <_usart_read_buffer+0x4c>)
    8502:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    8504:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    8506:	2205      	movs	r2, #5
    8508:	2332      	movs	r3, #50	; 0x32
    850a:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    850c:	3b2e      	subs	r3, #46	; 0x2e
    850e:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    8510:	7a23      	ldrb	r3, [r4, #8]
    8512:	2b00      	cmp	r3, #0
    8514:	d001      	beq.n	851a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    8516:	2320      	movs	r3, #32
    8518:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    851a:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    851c:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    851e:	2b00      	cmp	r3, #0
    8520:	d0ec      	beq.n	84fc <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    8522:	2308      	movs	r3, #8
    8524:	75bb      	strb	r3, [r7, #22]
    8526:	e7e9      	b.n	84fc <_usart_read_buffer+0x1c>
    8528:	000073e5 	.word	0x000073e5
    852c:	00007425 	.word	0x00007425

00008530 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    8530:	1c93      	adds	r3, r2, #2
    8532:	009b      	lsls	r3, r3, #2
    8534:	18c3      	adds	r3, r0, r3
    8536:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    8538:	2130      	movs	r1, #48	; 0x30
    853a:	2301      	movs	r3, #1
    853c:	4093      	lsls	r3, r2
    853e:	001a      	movs	r2, r3
    8540:	5c43      	ldrb	r3, [r0, r1]
    8542:	4313      	orrs	r3, r2
    8544:	5443      	strb	r3, [r0, r1]
}
    8546:	4770      	bx	lr

00008548 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    8548:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    854a:	2201      	movs	r2, #1
    854c:	4b01      	ldr	r3, [pc, #4]	; (8554 <usart_read_job+0xc>)
    854e:	4798      	blx	r3
}
    8550:	bd10      	pop	{r4, pc}
    8552:	46c0      	nop			; (mov r8, r8)
    8554:	000084e1 	.word	0x000084e1

00008558 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    8558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    855a:	0080      	lsls	r0, r0, #2
    855c:	4b62      	ldr	r3, [pc, #392]	; (86e8 <_usart_interrupt_handler+0x190>)
    855e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    8560:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    8562:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    8564:	2b00      	cmp	r3, #0
    8566:	d1fc      	bne.n	8562 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    8568:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    856a:	7da6      	ldrb	r6, [r4, #22]
    856c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    856e:	2330      	movs	r3, #48	; 0x30
    8570:	5ceb      	ldrb	r3, [r5, r3]
    8572:	2231      	movs	r2, #49	; 0x31
    8574:	5caf      	ldrb	r7, [r5, r2]
    8576:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    8578:	07f3      	lsls	r3, r6, #31
    857a:	d522      	bpl.n	85c2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    857c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    857e:	b29b      	uxth	r3, r3
    8580:	2b00      	cmp	r3, #0
    8582:	d01c      	beq.n	85be <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    8584:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    8586:	7813      	ldrb	r3, [r2, #0]
    8588:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    858a:	1c51      	adds	r1, r2, #1
    858c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    858e:	7969      	ldrb	r1, [r5, #5]
    8590:	2901      	cmp	r1, #1
    8592:	d00e      	beq.n	85b2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    8594:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    8596:	05db      	lsls	r3, r3, #23
    8598:	0ddb      	lsrs	r3, r3, #23
    859a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    859c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    859e:	3b01      	subs	r3, #1
    85a0:	b29b      	uxth	r3, r3
    85a2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    85a4:	2b00      	cmp	r3, #0
    85a6:	d10c      	bne.n	85c2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    85a8:	3301      	adds	r3, #1
    85aa:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    85ac:	3301      	adds	r3, #1
    85ae:	75a3      	strb	r3, [r4, #22]
    85b0:	e007      	b.n	85c2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    85b2:	7851      	ldrb	r1, [r2, #1]
    85b4:	0209      	lsls	r1, r1, #8
    85b6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    85b8:	3202      	adds	r2, #2
    85ba:	62aa      	str	r2, [r5, #40]	; 0x28
    85bc:	e7eb      	b.n	8596 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    85be:	2301      	movs	r3, #1
    85c0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    85c2:	07b3      	lsls	r3, r6, #30
    85c4:	d506      	bpl.n	85d4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    85c6:	2302      	movs	r3, #2
    85c8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    85ca:	2200      	movs	r2, #0
    85cc:	3331      	adds	r3, #49	; 0x31
    85ce:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    85d0:	07fb      	lsls	r3, r7, #31
    85d2:	d41a      	bmi.n	860a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    85d4:	0773      	lsls	r3, r6, #29
    85d6:	d565      	bpl.n	86a4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    85d8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    85da:	b29b      	uxth	r3, r3
    85dc:	2b00      	cmp	r3, #0
    85de:	d05f      	beq.n	86a0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    85e0:	8b63      	ldrh	r3, [r4, #26]
    85e2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    85e4:	071a      	lsls	r2, r3, #28
    85e6:	d414      	bmi.n	8612 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    85e8:	223f      	movs	r2, #63	; 0x3f
    85ea:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    85ec:	2b00      	cmp	r3, #0
    85ee:	d034      	beq.n	865a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    85f0:	079a      	lsls	r2, r3, #30
    85f2:	d511      	bpl.n	8618 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    85f4:	221a      	movs	r2, #26
    85f6:	2332      	movs	r3, #50	; 0x32
    85f8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    85fa:	3b30      	subs	r3, #48	; 0x30
    85fc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    85fe:	077b      	lsls	r3, r7, #29
    8600:	d550      	bpl.n	86a4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    8602:	0028      	movs	r0, r5
    8604:	696b      	ldr	r3, [r5, #20]
    8606:	4798      	blx	r3
    8608:	e04c      	b.n	86a4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    860a:	0028      	movs	r0, r5
    860c:	68eb      	ldr	r3, [r5, #12]
    860e:	4798      	blx	r3
    8610:	e7e0      	b.n	85d4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    8612:	2237      	movs	r2, #55	; 0x37
    8614:	4013      	ands	r3, r2
    8616:	e7e9      	b.n	85ec <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    8618:	075a      	lsls	r2, r3, #29
    861a:	d505      	bpl.n	8628 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    861c:	221e      	movs	r2, #30
    861e:	2332      	movs	r3, #50	; 0x32
    8620:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    8622:	3b2e      	subs	r3, #46	; 0x2e
    8624:	8363      	strh	r3, [r4, #26]
    8626:	e7ea      	b.n	85fe <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    8628:	07da      	lsls	r2, r3, #31
    862a:	d505      	bpl.n	8638 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    862c:	2213      	movs	r2, #19
    862e:	2332      	movs	r3, #50	; 0x32
    8630:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    8632:	3b31      	subs	r3, #49	; 0x31
    8634:	8363      	strh	r3, [r4, #26]
    8636:	e7e2      	b.n	85fe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    8638:	06da      	lsls	r2, r3, #27
    863a:	d505      	bpl.n	8648 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    863c:	2242      	movs	r2, #66	; 0x42
    863e:	2332      	movs	r3, #50	; 0x32
    8640:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    8642:	3b22      	subs	r3, #34	; 0x22
    8644:	8363      	strh	r3, [r4, #26]
    8646:	e7da      	b.n	85fe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    8648:	2220      	movs	r2, #32
    864a:	421a      	tst	r2, r3
    864c:	d0d7      	beq.n	85fe <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    864e:	3221      	adds	r2, #33	; 0x21
    8650:	2332      	movs	r3, #50	; 0x32
    8652:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    8654:	3b12      	subs	r3, #18
    8656:	8363      	strh	r3, [r4, #26]
    8658:	e7d1      	b.n	85fe <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    865a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    865c:	05db      	lsls	r3, r3, #23
    865e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    8660:	b2da      	uxtb	r2, r3
    8662:	6a69      	ldr	r1, [r5, #36]	; 0x24
    8664:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    8666:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    8668:	1c51      	adds	r1, r2, #1
    866a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    866c:	7969      	ldrb	r1, [r5, #5]
    866e:	2901      	cmp	r1, #1
    8670:	d010      	beq.n	8694 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    8672:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    8674:	3b01      	subs	r3, #1
    8676:	b29b      	uxth	r3, r3
    8678:	85ab      	strh	r3, [r5, #44]	; 0x2c
    867a:	2b00      	cmp	r3, #0
    867c:	d112      	bne.n	86a4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    867e:	3304      	adds	r3, #4
    8680:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    8682:	2200      	movs	r2, #0
    8684:	332e      	adds	r3, #46	; 0x2e
    8686:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    8688:	07bb      	lsls	r3, r7, #30
    868a:	d50b      	bpl.n	86a4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    868c:	0028      	movs	r0, r5
    868e:	692b      	ldr	r3, [r5, #16]
    8690:	4798      	blx	r3
    8692:	e007      	b.n	86a4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    8694:	0a1b      	lsrs	r3, r3, #8
    8696:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    8698:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    869a:	3301      	adds	r3, #1
    869c:	626b      	str	r3, [r5, #36]	; 0x24
    869e:	e7e8      	b.n	8672 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    86a0:	2304      	movs	r3, #4
    86a2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    86a4:	06f3      	lsls	r3, r6, #27
    86a6:	d504      	bpl.n	86b2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    86a8:	2310      	movs	r3, #16
    86aa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    86ac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    86ae:	06fb      	lsls	r3, r7, #27
    86b0:	d40e      	bmi.n	86d0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    86b2:	06b3      	lsls	r3, r6, #26
    86b4:	d504      	bpl.n	86c0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    86b6:	2320      	movs	r3, #32
    86b8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    86ba:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    86bc:	073b      	lsls	r3, r7, #28
    86be:	d40b      	bmi.n	86d8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    86c0:	0733      	lsls	r3, r6, #28
    86c2:	d504      	bpl.n	86ce <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    86c4:	2308      	movs	r3, #8
    86c6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    86c8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    86ca:	06bb      	lsls	r3, r7, #26
    86cc:	d408      	bmi.n	86e0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    86ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    86d0:	0028      	movs	r0, r5
    86d2:	69eb      	ldr	r3, [r5, #28]
    86d4:	4798      	blx	r3
    86d6:	e7ec      	b.n	86b2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    86d8:	0028      	movs	r0, r5
    86da:	69ab      	ldr	r3, [r5, #24]
    86dc:	4798      	blx	r3
    86de:	e7ef      	b.n	86c0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    86e0:	6a2b      	ldr	r3, [r5, #32]
    86e2:	0028      	movs	r0, r5
    86e4:	4798      	blx	r3
}
    86e6:	e7f2      	b.n	86ce <_usart_interrupt_handler+0x176>
    86e8:	2000166c 	.word	0x2000166c

000086ec <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    86ec:	b510      	push	{r4, lr}
	switch (clock_source) {
    86ee:	2808      	cmp	r0, #8
    86f0:	d803      	bhi.n	86fa <system_clock_source_get_hz+0xe>
    86f2:	0080      	lsls	r0, r0, #2
    86f4:	4b1c      	ldr	r3, [pc, #112]	; (8768 <system_clock_source_get_hz+0x7c>)
    86f6:	581b      	ldr	r3, [r3, r0]
    86f8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    86fa:	2000      	movs	r0, #0
    86fc:	e032      	b.n	8764 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    86fe:	4b1b      	ldr	r3, [pc, #108]	; (876c <system_clock_source_get_hz+0x80>)
    8700:	6918      	ldr	r0, [r3, #16]
    8702:	e02f      	b.n	8764 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    8704:	4b1a      	ldr	r3, [pc, #104]	; (8770 <system_clock_source_get_hz+0x84>)
    8706:	6a1b      	ldr	r3, [r3, #32]
    8708:	059b      	lsls	r3, r3, #22
    870a:	0f9b      	lsrs	r3, r3, #30
    870c:	4819      	ldr	r0, [pc, #100]	; (8774 <system_clock_source_get_hz+0x88>)
    870e:	40d8      	lsrs	r0, r3
    8710:	e028      	b.n	8764 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    8712:	4b16      	ldr	r3, [pc, #88]	; (876c <system_clock_source_get_hz+0x80>)
    8714:	6958      	ldr	r0, [r3, #20]
    8716:	e025      	b.n	8764 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    8718:	4b14      	ldr	r3, [pc, #80]	; (876c <system_clock_source_get_hz+0x80>)
    871a:	681b      	ldr	r3, [r3, #0]
			return 0;
    871c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    871e:	079b      	lsls	r3, r3, #30
    8720:	d520      	bpl.n	8764 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    8722:	4913      	ldr	r1, [pc, #76]	; (8770 <system_clock_source_get_hz+0x84>)
    8724:	2210      	movs	r2, #16
    8726:	68cb      	ldr	r3, [r1, #12]
    8728:	421a      	tst	r2, r3
    872a:	d0fc      	beq.n	8726 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    872c:	4b0f      	ldr	r3, [pc, #60]	; (876c <system_clock_source_get_hz+0x80>)
    872e:	681a      	ldr	r2, [r3, #0]
    8730:	2324      	movs	r3, #36	; 0x24
    8732:	4013      	ands	r3, r2
    8734:	2b04      	cmp	r3, #4
    8736:	d001      	beq.n	873c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    8738:	480f      	ldr	r0, [pc, #60]	; (8778 <system_clock_source_get_hz+0x8c>)
    873a:	e013      	b.n	8764 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    873c:	2000      	movs	r0, #0
    873e:	4b0f      	ldr	r3, [pc, #60]	; (877c <system_clock_source_get_hz+0x90>)
    8740:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    8742:	4b0a      	ldr	r3, [pc, #40]	; (876c <system_clock_source_get_hz+0x80>)
    8744:	689b      	ldr	r3, [r3, #8]
    8746:	041b      	lsls	r3, r3, #16
    8748:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    874a:	4358      	muls	r0, r3
    874c:	e00a      	b.n	8764 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    874e:	2350      	movs	r3, #80	; 0x50
    8750:	4a07      	ldr	r2, [pc, #28]	; (8770 <system_clock_source_get_hz+0x84>)
    8752:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    8754:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    8756:	075b      	lsls	r3, r3, #29
    8758:	d504      	bpl.n	8764 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    875a:	4b04      	ldr	r3, [pc, #16]	; (876c <system_clock_source_get_hz+0x80>)
    875c:	68d8      	ldr	r0, [r3, #12]
    875e:	e001      	b.n	8764 <system_clock_source_get_hz+0x78>
		return 32768UL;
    8760:	2080      	movs	r0, #128	; 0x80
    8762:	0200      	lsls	r0, r0, #8
	}
}
    8764:	bd10      	pop	{r4, pc}
    8766:	46c0      	nop			; (mov r8, r8)
    8768:	0000fd60 	.word	0x0000fd60
    876c:	2000049c 	.word	0x2000049c
    8770:	40000800 	.word	0x40000800
    8774:	007a1200 	.word	0x007a1200
    8778:	02dc6c00 	.word	0x02dc6c00
    877c:	00008d51 	.word	0x00008d51

00008780 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    8780:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    8782:	490c      	ldr	r1, [pc, #48]	; (87b4 <system_clock_source_osc8m_set_config+0x34>)
    8784:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    8786:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    8788:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    878a:	7840      	ldrb	r0, [r0, #1]
    878c:	2201      	movs	r2, #1
    878e:	4010      	ands	r0, r2
    8790:	0180      	lsls	r0, r0, #6
    8792:	2640      	movs	r6, #64	; 0x40
    8794:	43b3      	bics	r3, r6
    8796:	4303      	orrs	r3, r0
    8798:	402a      	ands	r2, r5
    879a:	01d2      	lsls	r2, r2, #7
    879c:	2080      	movs	r0, #128	; 0x80
    879e:	4383      	bics	r3, r0
    87a0:	4313      	orrs	r3, r2
    87a2:	2203      	movs	r2, #3
    87a4:	4022      	ands	r2, r4
    87a6:	0212      	lsls	r2, r2, #8
    87a8:	4803      	ldr	r0, [pc, #12]	; (87b8 <system_clock_source_osc8m_set_config+0x38>)
    87aa:	4003      	ands	r3, r0
    87ac:	4313      	orrs	r3, r2
    87ae:	620b      	str	r3, [r1, #32]
}
    87b0:	bd70      	pop	{r4, r5, r6, pc}
    87b2:	46c0      	nop			; (mov r8, r8)
    87b4:	40000800 	.word	0x40000800
    87b8:	fffffcff 	.word	0xfffffcff

000087bc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    87bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    87be:	46de      	mov	lr, fp
    87c0:	4657      	mov	r7, sl
    87c2:	464e      	mov	r6, r9
    87c4:	4645      	mov	r5, r8
    87c6:	b5e0      	push	{r5, r6, r7, lr}
    87c8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    87ca:	4b26      	ldr	r3, [pc, #152]	; (8864 <system_clock_source_xosc32k_set_config+0xa8>)
    87cc:	469b      	mov	fp, r3
    87ce:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    87d0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    87d2:	7800      	ldrb	r0, [r0, #0]
    87d4:	4242      	negs	r2, r0
    87d6:	4142      	adcs	r2, r0
    87d8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    87da:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    87dc:	78ca      	ldrb	r2, [r1, #3]
    87de:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    87e0:	790a      	ldrb	r2, [r1, #4]
    87e2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    87e4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    87e6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    87e8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    87ea:	688a      	ldr	r2, [r1, #8]
    87ec:	491e      	ldr	r1, [pc, #120]	; (8868 <system_clock_source_xosc32k_set_config+0xac>)
    87ee:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    87f0:	2101      	movs	r1, #1
    87f2:	464a      	mov	r2, r9
    87f4:	0092      	lsls	r2, r2, #2
    87f6:	4691      	mov	r9, r2
    87f8:	2204      	movs	r2, #4
    87fa:	4393      	bics	r3, r2
    87fc:	464a      	mov	r2, r9
    87fe:	4313      	orrs	r3, r2
    8800:	4642      	mov	r2, r8
    8802:	400a      	ands	r2, r1
    8804:	00d2      	lsls	r2, r2, #3
    8806:	4690      	mov	r8, r2
    8808:	2208      	movs	r2, #8
    880a:	4393      	bics	r3, r2
    880c:	4642      	mov	r2, r8
    880e:	4313      	orrs	r3, r2
    8810:	4662      	mov	r2, ip
    8812:	400a      	ands	r2, r1
    8814:	0112      	lsls	r2, r2, #4
    8816:	4694      	mov	ip, r2
    8818:	2210      	movs	r2, #16
    881a:	4393      	bics	r3, r2
    881c:	4662      	mov	r2, ip
    881e:	4313      	orrs	r3, r2
    8820:	4008      	ands	r0, r1
    8822:	0140      	lsls	r0, r0, #5
    8824:	2220      	movs	r2, #32
    8826:	4393      	bics	r3, r2
    8828:	4303      	orrs	r3, r0
    882a:	400f      	ands	r7, r1
    882c:	01bf      	lsls	r7, r7, #6
    882e:	2040      	movs	r0, #64	; 0x40
    8830:	4383      	bics	r3, r0
    8832:	433b      	orrs	r3, r7
    8834:	400e      	ands	r6, r1
    8836:	01f6      	lsls	r6, r6, #7
    8838:	3040      	adds	r0, #64	; 0x40
    883a:	4383      	bics	r3, r0
    883c:	4333      	orrs	r3, r6
    883e:	3879      	subs	r0, #121	; 0x79
    8840:	4005      	ands	r5, r0
    8842:	022d      	lsls	r5, r5, #8
    8844:	4809      	ldr	r0, [pc, #36]	; (886c <system_clock_source_xosc32k_set_config+0xb0>)
    8846:	4003      	ands	r3, r0
    8848:	432b      	orrs	r3, r5
    884a:	4021      	ands	r1, r4
    884c:	0309      	lsls	r1, r1, #12
    884e:	4808      	ldr	r0, [pc, #32]	; (8870 <system_clock_source_xosc32k_set_config+0xb4>)
    8850:	4003      	ands	r3, r0
    8852:	430b      	orrs	r3, r1
    8854:	465a      	mov	r2, fp
    8856:	8293      	strh	r3, [r2, #20]
}
    8858:	bc3c      	pop	{r2, r3, r4, r5}
    885a:	4690      	mov	r8, r2
    885c:	4699      	mov	r9, r3
    885e:	46a2      	mov	sl, r4
    8860:	46ab      	mov	fp, r5
    8862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8864:	40000800 	.word	0x40000800
    8868:	2000049c 	.word	0x2000049c
    886c:	fffff8ff 	.word	0xfffff8ff
    8870:	ffffefff 	.word	0xffffefff

00008874 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    8874:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    8876:	7a03      	ldrb	r3, [r0, #8]
    8878:	069b      	lsls	r3, r3, #26
    887a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    887c:	8942      	ldrh	r2, [r0, #10]
    887e:	0592      	lsls	r2, r2, #22
    8880:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    8882:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    8884:	4918      	ldr	r1, [pc, #96]	; (88e8 <system_clock_source_dfll_set_config+0x74>)
    8886:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    8888:	7983      	ldrb	r3, [r0, #6]
    888a:	79c2      	ldrb	r2, [r0, #7]
    888c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    888e:	8842      	ldrh	r2, [r0, #2]
    8890:	8884      	ldrh	r4, [r0, #4]
    8892:	4322      	orrs	r2, r4
    8894:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    8896:	7842      	ldrb	r2, [r0, #1]
    8898:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    889a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    889c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    889e:	7803      	ldrb	r3, [r0, #0]
    88a0:	2b04      	cmp	r3, #4
    88a2:	d011      	beq.n	88c8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    88a4:	2b20      	cmp	r3, #32
    88a6:	d10e      	bne.n	88c6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    88a8:	7b03      	ldrb	r3, [r0, #12]
    88aa:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    88ac:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    88ae:	4313      	orrs	r3, r2
    88b0:	89c2      	ldrh	r2, [r0, #14]
    88b2:	0412      	lsls	r2, r2, #16
    88b4:	490d      	ldr	r1, [pc, #52]	; (88ec <system_clock_source_dfll_set_config+0x78>)
    88b6:	400a      	ands	r2, r1
    88b8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    88ba:	4a0b      	ldr	r2, [pc, #44]	; (88e8 <system_clock_source_dfll_set_config+0x74>)
    88bc:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    88be:	6811      	ldr	r1, [r2, #0]
    88c0:	4b0b      	ldr	r3, [pc, #44]	; (88f0 <system_clock_source_dfll_set_config+0x7c>)
    88c2:	430b      	orrs	r3, r1
    88c4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    88c6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    88c8:	7b03      	ldrb	r3, [r0, #12]
    88ca:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    88cc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    88ce:	4313      	orrs	r3, r2
    88d0:	89c2      	ldrh	r2, [r0, #14]
    88d2:	0412      	lsls	r2, r2, #16
    88d4:	4905      	ldr	r1, [pc, #20]	; (88ec <system_clock_source_dfll_set_config+0x78>)
    88d6:	400a      	ands	r2, r1
    88d8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    88da:	4a03      	ldr	r2, [pc, #12]	; (88e8 <system_clock_source_dfll_set_config+0x74>)
    88dc:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    88de:	6813      	ldr	r3, [r2, #0]
    88e0:	2104      	movs	r1, #4
    88e2:	430b      	orrs	r3, r1
    88e4:	6013      	str	r3, [r2, #0]
    88e6:	e7ee      	b.n	88c6 <system_clock_source_dfll_set_config+0x52>
    88e8:	2000049c 	.word	0x2000049c
    88ec:	03ff0000 	.word	0x03ff0000
    88f0:	00000424 	.word	0x00000424

000088f4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    88f4:	2808      	cmp	r0, #8
    88f6:	d803      	bhi.n	8900 <system_clock_source_enable+0xc>
    88f8:	0080      	lsls	r0, r0, #2
    88fa:	4b25      	ldr	r3, [pc, #148]	; (8990 <system_clock_source_enable+0x9c>)
    88fc:	581b      	ldr	r3, [r3, r0]
    88fe:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8900:	2017      	movs	r0, #23
    8902:	e044      	b.n	898e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    8904:	4a23      	ldr	r2, [pc, #140]	; (8994 <system_clock_source_enable+0xa0>)
    8906:	6a13      	ldr	r3, [r2, #32]
    8908:	2102      	movs	r1, #2
    890a:	430b      	orrs	r3, r1
    890c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    890e:	2000      	movs	r0, #0
    8910:	e03d      	b.n	898e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    8912:	4a20      	ldr	r2, [pc, #128]	; (8994 <system_clock_source_enable+0xa0>)
    8914:	6993      	ldr	r3, [r2, #24]
    8916:	2102      	movs	r1, #2
    8918:	430b      	orrs	r3, r1
    891a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    891c:	2000      	movs	r0, #0
		break;
    891e:	e036      	b.n	898e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    8920:	4a1c      	ldr	r2, [pc, #112]	; (8994 <system_clock_source_enable+0xa0>)
    8922:	8a13      	ldrh	r3, [r2, #16]
    8924:	2102      	movs	r1, #2
    8926:	430b      	orrs	r3, r1
    8928:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    892a:	2000      	movs	r0, #0
		break;
    892c:	e02f      	b.n	898e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    892e:	4a19      	ldr	r2, [pc, #100]	; (8994 <system_clock_source_enable+0xa0>)
    8930:	8a93      	ldrh	r3, [r2, #20]
    8932:	2102      	movs	r1, #2
    8934:	430b      	orrs	r3, r1
    8936:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    8938:	2000      	movs	r0, #0
		break;
    893a:	e028      	b.n	898e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    893c:	4916      	ldr	r1, [pc, #88]	; (8998 <system_clock_source_enable+0xa4>)
    893e:	680b      	ldr	r3, [r1, #0]
    8940:	2202      	movs	r2, #2
    8942:	4313      	orrs	r3, r2
    8944:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    8946:	4b13      	ldr	r3, [pc, #76]	; (8994 <system_clock_source_enable+0xa0>)
    8948:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    894a:	0019      	movs	r1, r3
    894c:	320e      	adds	r2, #14
    894e:	68cb      	ldr	r3, [r1, #12]
    8950:	421a      	tst	r2, r3
    8952:	d0fc      	beq.n	894e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    8954:	4a10      	ldr	r2, [pc, #64]	; (8998 <system_clock_source_enable+0xa4>)
    8956:	6891      	ldr	r1, [r2, #8]
    8958:	4b0e      	ldr	r3, [pc, #56]	; (8994 <system_clock_source_enable+0xa0>)
    895a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    895c:	6852      	ldr	r2, [r2, #4]
    895e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    8960:	2200      	movs	r2, #0
    8962:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    8964:	0019      	movs	r1, r3
    8966:	3210      	adds	r2, #16
    8968:	68cb      	ldr	r3, [r1, #12]
    896a:	421a      	tst	r2, r3
    896c:	d0fc      	beq.n	8968 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    896e:	4b0a      	ldr	r3, [pc, #40]	; (8998 <system_clock_source_enable+0xa4>)
    8970:	681b      	ldr	r3, [r3, #0]
    8972:	b29b      	uxth	r3, r3
    8974:	4a07      	ldr	r2, [pc, #28]	; (8994 <system_clock_source_enable+0xa0>)
    8976:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    8978:	2000      	movs	r0, #0
    897a:	e008      	b.n	898e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    897c:	4905      	ldr	r1, [pc, #20]	; (8994 <system_clock_source_enable+0xa0>)
    897e:	2244      	movs	r2, #68	; 0x44
    8980:	5c8b      	ldrb	r3, [r1, r2]
    8982:	2002      	movs	r0, #2
    8984:	4303      	orrs	r3, r0
    8986:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    8988:	2000      	movs	r0, #0
		break;
    898a:	e000      	b.n	898e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    898c:	2000      	movs	r0, #0
}
    898e:	4770      	bx	lr
    8990:	0000fd84 	.word	0x0000fd84
    8994:	40000800 	.word	0x40000800
    8998:	2000049c 	.word	0x2000049c

0000899c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    899c:	b5f0      	push	{r4, r5, r6, r7, lr}
    899e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    89a0:	22c2      	movs	r2, #194	; 0xc2
    89a2:	00d2      	lsls	r2, r2, #3
    89a4:	4b47      	ldr	r3, [pc, #284]	; (8ac4 <system_clock_init+0x128>)
    89a6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    89a8:	4a47      	ldr	r2, [pc, #284]	; (8ac8 <system_clock_init+0x12c>)
    89aa:	6853      	ldr	r3, [r2, #4]
    89ac:	211e      	movs	r1, #30
    89ae:	438b      	bics	r3, r1
    89b0:	391a      	subs	r1, #26
    89b2:	430b      	orrs	r3, r1
    89b4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    89b6:	2202      	movs	r2, #2
    89b8:	ab01      	add	r3, sp, #4
    89ba:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    89bc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    89be:	4d43      	ldr	r5, [pc, #268]	; (8acc <system_clock_init+0x130>)
    89c0:	b2e0      	uxtb	r0, r4
    89c2:	a901      	add	r1, sp, #4
    89c4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    89c6:	3401      	adds	r4, #1
    89c8:	2c25      	cmp	r4, #37	; 0x25
    89ca:	d1f9      	bne.n	89c0 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    89cc:	a80a      	add	r0, sp, #40	; 0x28
    89ce:	2300      	movs	r3, #0
    89d0:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    89d2:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    89d4:	2280      	movs	r2, #128	; 0x80
    89d6:	0212      	lsls	r2, r2, #8
    89d8:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    89da:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    89dc:	2201      	movs	r2, #1
    89de:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    89e0:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    89e2:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    89e4:	3202      	adds	r2, #2
    89e6:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    89e8:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    89ea:	4b39      	ldr	r3, [pc, #228]	; (8ad0 <system_clock_init+0x134>)
    89ec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    89ee:	2005      	movs	r0, #5
    89f0:	4b38      	ldr	r3, [pc, #224]	; (8ad4 <system_clock_init+0x138>)
    89f2:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    89f4:	4933      	ldr	r1, [pc, #204]	; (8ac4 <system_clock_init+0x128>)
    89f6:	2202      	movs	r2, #2
    89f8:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    89fa:	421a      	tst	r2, r3
    89fc:	d0fc      	beq.n	89f8 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    89fe:	4a31      	ldr	r2, [pc, #196]	; (8ac4 <system_clock_init+0x128>)
    8a00:	8a93      	ldrh	r3, [r2, #20]
    8a02:	2180      	movs	r1, #128	; 0x80
    8a04:	430b      	orrs	r3, r1
    8a06:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    8a08:	ab05      	add	r3, sp, #20
    8a0a:	2100      	movs	r1, #0
    8a0c:	2200      	movs	r2, #0
    8a0e:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    8a10:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    8a12:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    8a14:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    8a16:	313f      	adds	r1, #63	; 0x3f
    8a18:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    8a1a:	393b      	subs	r1, #59	; 0x3b
    8a1c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    8a1e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    8a20:	4b2d      	ldr	r3, [pc, #180]	; (8ad8 <system_clock_init+0x13c>)
    8a22:	681b      	ldr	r3, [r3, #0]
    8a24:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    8a26:	2b3f      	cmp	r3, #63	; 0x3f
    8a28:	d04a      	beq.n	8ac0 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    8a2a:	a805      	add	r0, sp, #20
    8a2c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    8a2e:	4b2b      	ldr	r3, [pc, #172]	; (8adc <system_clock_init+0x140>)
    8a30:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    8a32:	2307      	movs	r3, #7
    8a34:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    8a36:	3338      	adds	r3, #56	; 0x38
    8a38:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    8a3a:	4b29      	ldr	r3, [pc, #164]	; (8ae0 <system_clock_init+0x144>)
    8a3c:	4798      	blx	r3
	config->run_in_standby  = false;
    8a3e:	a804      	add	r0, sp, #16
    8a40:	2500      	movs	r5, #0
    8a42:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    8a44:	2601      	movs	r6, #1
    8a46:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    8a48:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    8a4a:	4b26      	ldr	r3, [pc, #152]	; (8ae4 <system_clock_init+0x148>)
    8a4c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    8a4e:	2006      	movs	r0, #6
    8a50:	4f20      	ldr	r7, [pc, #128]	; (8ad4 <system_clock_init+0x138>)
    8a52:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    8a54:	4b24      	ldr	r3, [pc, #144]	; (8ae8 <system_clock_init+0x14c>)
    8a56:	4798      	blx	r3
	config->division_factor    = 1;
    8a58:	ac01      	add	r4, sp, #4
    8a5a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    8a5c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    8a5e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    8a60:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    8a62:	2305      	movs	r3, #5
    8a64:	7023      	strb	r3, [r4, #0]
    8a66:	0021      	movs	r1, r4
    8a68:	2001      	movs	r0, #1
    8a6a:	4b20      	ldr	r3, [pc, #128]	; (8aec <system_clock_init+0x150>)
    8a6c:	4798      	blx	r3
    8a6e:	2001      	movs	r0, #1
    8a70:	4b1f      	ldr	r3, [pc, #124]	; (8af0 <system_clock_init+0x154>)
    8a72:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    8a74:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    8a76:	0021      	movs	r1, r4
    8a78:	2000      	movs	r0, #0
    8a7a:	4b14      	ldr	r3, [pc, #80]	; (8acc <system_clock_init+0x130>)
    8a7c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    8a7e:	2000      	movs	r0, #0
    8a80:	4b1c      	ldr	r3, [pc, #112]	; (8af4 <system_clock_init+0x158>)
    8a82:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    8a84:	2007      	movs	r0, #7
    8a86:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    8a88:	490e      	ldr	r1, [pc, #56]	; (8ac4 <system_clock_init+0x128>)
    8a8a:	22d0      	movs	r2, #208	; 0xd0
    8a8c:	68cb      	ldr	r3, [r1, #12]
    8a8e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    8a90:	2bd0      	cmp	r3, #208	; 0xd0
    8a92:	d1fb      	bne.n	8a8c <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    8a94:	4a18      	ldr	r2, [pc, #96]	; (8af8 <system_clock_init+0x15c>)
    8a96:	2300      	movs	r3, #0
    8a98:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    8a9a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    8a9c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    8a9e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    8aa0:	a901      	add	r1, sp, #4
    8aa2:	2201      	movs	r2, #1
    8aa4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    8aa6:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    8aa8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    8aaa:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    8aac:	3307      	adds	r3, #7
    8aae:	700b      	strb	r3, [r1, #0]
    8ab0:	2000      	movs	r0, #0
    8ab2:	4b0e      	ldr	r3, [pc, #56]	; (8aec <system_clock_init+0x150>)
    8ab4:	4798      	blx	r3
    8ab6:	2000      	movs	r0, #0
    8ab8:	4b0d      	ldr	r3, [pc, #52]	; (8af0 <system_clock_init+0x154>)
    8aba:	4798      	blx	r3
#endif
}
    8abc:	b00f      	add	sp, #60	; 0x3c
    8abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    8ac0:	3b20      	subs	r3, #32
    8ac2:	e7b2      	b.n	8a2a <system_clock_init+0x8e>
    8ac4:	40000800 	.word	0x40000800
    8ac8:	41004000 	.word	0x41004000
    8acc:	00008d35 	.word	0x00008d35
    8ad0:	000087bd 	.word	0x000087bd
    8ad4:	000088f5 	.word	0x000088f5
    8ad8:	00806024 	.word	0x00806024
    8adc:	000005b9 	.word	0x000005b9
    8ae0:	00008875 	.word	0x00008875
    8ae4:	00008781 	.word	0x00008781
    8ae8:	00008afd 	.word	0x00008afd
    8aec:	00008b21 	.word	0x00008b21
    8af0:	00008bd9 	.word	0x00008bd9
    8af4:	00008ca9 	.word	0x00008ca9
    8af8:	40000400 	.word	0x40000400

00008afc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    8afc:	4a06      	ldr	r2, [pc, #24]	; (8b18 <system_gclk_init+0x1c>)
    8afe:	6993      	ldr	r3, [r2, #24]
    8b00:	2108      	movs	r1, #8
    8b02:	430b      	orrs	r3, r1
    8b04:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    8b06:	2201      	movs	r2, #1
    8b08:	4b04      	ldr	r3, [pc, #16]	; (8b1c <system_gclk_init+0x20>)
    8b0a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8b0c:	0019      	movs	r1, r3
    8b0e:	780b      	ldrb	r3, [r1, #0]
    8b10:	4213      	tst	r3, r2
    8b12:	d1fc      	bne.n	8b0e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    8b14:	4770      	bx	lr
    8b16:	46c0      	nop			; (mov r8, r8)
    8b18:	40000400 	.word	0x40000400
    8b1c:	40000c00 	.word	0x40000c00

00008b20 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8b20:	b570      	push	{r4, r5, r6, lr}
    8b22:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    8b24:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    8b26:	780d      	ldrb	r5, [r1, #0]
    8b28:	022d      	lsls	r5, r5, #8
    8b2a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    8b2c:	784b      	ldrb	r3, [r1, #1]
    8b2e:	2b00      	cmp	r3, #0
    8b30:	d002      	beq.n	8b38 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    8b32:	2380      	movs	r3, #128	; 0x80
    8b34:	02db      	lsls	r3, r3, #11
    8b36:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    8b38:	7a4b      	ldrb	r3, [r1, #9]
    8b3a:	2b00      	cmp	r3, #0
    8b3c:	d002      	beq.n	8b44 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    8b3e:	2380      	movs	r3, #128	; 0x80
    8b40:	031b      	lsls	r3, r3, #12
    8b42:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    8b44:	6848      	ldr	r0, [r1, #4]
    8b46:	2801      	cmp	r0, #1
    8b48:	d910      	bls.n	8b6c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    8b4a:	1e43      	subs	r3, r0, #1
    8b4c:	4218      	tst	r0, r3
    8b4e:	d134      	bne.n	8bba <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8b50:	2802      	cmp	r0, #2
    8b52:	d930      	bls.n	8bb6 <system_gclk_gen_set_config+0x96>
    8b54:	2302      	movs	r3, #2
    8b56:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    8b58:	3201      	adds	r2, #1
						mask <<= 1) {
    8b5a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    8b5c:	4298      	cmp	r0, r3
    8b5e:	d8fb      	bhi.n	8b58 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8b60:	0212      	lsls	r2, r2, #8
    8b62:	4332      	orrs	r2, r6
    8b64:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    8b66:	2380      	movs	r3, #128	; 0x80
    8b68:	035b      	lsls	r3, r3, #13
    8b6a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8b6c:	7a0b      	ldrb	r3, [r1, #8]
    8b6e:	2b00      	cmp	r3, #0
    8b70:	d002      	beq.n	8b78 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8b72:	2380      	movs	r3, #128	; 0x80
    8b74:	039b      	lsls	r3, r3, #14
    8b76:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8b78:	4a13      	ldr	r2, [pc, #76]	; (8bc8 <system_gclk_gen_set_config+0xa8>)
    8b7a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    8b7c:	b25b      	sxtb	r3, r3
    8b7e:	2b00      	cmp	r3, #0
    8b80:	dbfb      	blt.n	8b7a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    8b82:	4b12      	ldr	r3, [pc, #72]	; (8bcc <system_gclk_gen_set_config+0xac>)
    8b84:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8b86:	4b12      	ldr	r3, [pc, #72]	; (8bd0 <system_gclk_gen_set_config+0xb0>)
    8b88:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8b8a:	4a0f      	ldr	r2, [pc, #60]	; (8bc8 <system_gclk_gen_set_config+0xa8>)
    8b8c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    8b8e:	b25b      	sxtb	r3, r3
    8b90:	2b00      	cmp	r3, #0
    8b92:	dbfb      	blt.n	8b8c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8b94:	4b0c      	ldr	r3, [pc, #48]	; (8bc8 <system_gclk_gen_set_config+0xa8>)
    8b96:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8b98:	001a      	movs	r2, r3
    8b9a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    8b9c:	b25b      	sxtb	r3, r3
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	dbfb      	blt.n	8b9a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8ba2:	4a09      	ldr	r2, [pc, #36]	; (8bc8 <system_gclk_gen_set_config+0xa8>)
    8ba4:	6853      	ldr	r3, [r2, #4]
    8ba6:	2180      	movs	r1, #128	; 0x80
    8ba8:	0249      	lsls	r1, r1, #9
    8baa:	400b      	ands	r3, r1
    8bac:	431d      	orrs	r5, r3
    8bae:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    8bb0:	4b08      	ldr	r3, [pc, #32]	; (8bd4 <system_gclk_gen_set_config+0xb4>)
    8bb2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8bb4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    8bb6:	2200      	movs	r2, #0
    8bb8:	e7d2      	b.n	8b60 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    8bba:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    8bbc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8bbe:	2380      	movs	r3, #128	; 0x80
    8bc0:	029b      	lsls	r3, r3, #10
    8bc2:	431d      	orrs	r5, r3
    8bc4:	e7d2      	b.n	8b6c <system_gclk_gen_set_config+0x4c>
    8bc6:	46c0      	nop			; (mov r8, r8)
    8bc8:	40000c00 	.word	0x40000c00
    8bcc:	000073e5 	.word	0x000073e5
    8bd0:	40000c08 	.word	0x40000c08
    8bd4:	00007425 	.word	0x00007425

00008bd8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    8bd8:	b510      	push	{r4, lr}
    8bda:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8bdc:	4a0b      	ldr	r2, [pc, #44]	; (8c0c <system_gclk_gen_enable+0x34>)
    8bde:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8be0:	b25b      	sxtb	r3, r3
    8be2:	2b00      	cmp	r3, #0
    8be4:	dbfb      	blt.n	8bde <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    8be6:	4b0a      	ldr	r3, [pc, #40]	; (8c10 <system_gclk_gen_enable+0x38>)
    8be8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8bea:	4b0a      	ldr	r3, [pc, #40]	; (8c14 <system_gclk_gen_enable+0x3c>)
    8bec:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8bee:	4a07      	ldr	r2, [pc, #28]	; (8c0c <system_gclk_gen_enable+0x34>)
    8bf0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8bf2:	b25b      	sxtb	r3, r3
    8bf4:	2b00      	cmp	r3, #0
    8bf6:	dbfb      	blt.n	8bf0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    8bf8:	4a04      	ldr	r2, [pc, #16]	; (8c0c <system_gclk_gen_enable+0x34>)
    8bfa:	6851      	ldr	r1, [r2, #4]
    8bfc:	2380      	movs	r3, #128	; 0x80
    8bfe:	025b      	lsls	r3, r3, #9
    8c00:	430b      	orrs	r3, r1
    8c02:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    8c04:	4b04      	ldr	r3, [pc, #16]	; (8c18 <system_gclk_gen_enable+0x40>)
    8c06:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8c08:	bd10      	pop	{r4, pc}
    8c0a:	46c0      	nop			; (mov r8, r8)
    8c0c:	40000c00 	.word	0x40000c00
    8c10:	000073e5 	.word	0x000073e5
    8c14:	40000c04 	.word	0x40000c04
    8c18:	00007425 	.word	0x00007425

00008c1c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8c1c:	b570      	push	{r4, r5, r6, lr}
    8c1e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8c20:	4a1a      	ldr	r2, [pc, #104]	; (8c8c <system_gclk_gen_get_hz+0x70>)
    8c22:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8c24:	b25b      	sxtb	r3, r3
    8c26:	2b00      	cmp	r3, #0
    8c28:	dbfb      	blt.n	8c22 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    8c2a:	4b19      	ldr	r3, [pc, #100]	; (8c90 <system_gclk_gen_get_hz+0x74>)
    8c2c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8c2e:	4b19      	ldr	r3, [pc, #100]	; (8c94 <system_gclk_gen_get_hz+0x78>)
    8c30:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8c32:	4a16      	ldr	r2, [pc, #88]	; (8c8c <system_gclk_gen_get_hz+0x70>)
    8c34:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8c36:	b25b      	sxtb	r3, r3
    8c38:	2b00      	cmp	r3, #0
    8c3a:	dbfb      	blt.n	8c34 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    8c3c:	4e13      	ldr	r6, [pc, #76]	; (8c8c <system_gclk_gen_get_hz+0x70>)
    8c3e:	6870      	ldr	r0, [r6, #4]
    8c40:	04c0      	lsls	r0, r0, #19
    8c42:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    8c44:	4b14      	ldr	r3, [pc, #80]	; (8c98 <system_gclk_gen_get_hz+0x7c>)
    8c46:	4798      	blx	r3
    8c48:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8c4a:	4b12      	ldr	r3, [pc, #72]	; (8c94 <system_gclk_gen_get_hz+0x78>)
    8c4c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    8c4e:	6876      	ldr	r6, [r6, #4]
    8c50:	02f6      	lsls	r6, r6, #11
    8c52:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8c54:	4b11      	ldr	r3, [pc, #68]	; (8c9c <system_gclk_gen_get_hz+0x80>)
    8c56:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8c58:	4a0c      	ldr	r2, [pc, #48]	; (8c8c <system_gclk_gen_get_hz+0x70>)
    8c5a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8c5c:	b25b      	sxtb	r3, r3
    8c5e:	2b00      	cmp	r3, #0
    8c60:	dbfb      	blt.n	8c5a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    8c62:	4b0a      	ldr	r3, [pc, #40]	; (8c8c <system_gclk_gen_get_hz+0x70>)
    8c64:	689c      	ldr	r4, [r3, #8]
    8c66:	0224      	lsls	r4, r4, #8
    8c68:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    8c6a:	4b0d      	ldr	r3, [pc, #52]	; (8ca0 <system_gclk_gen_get_hz+0x84>)
    8c6c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    8c6e:	2e00      	cmp	r6, #0
    8c70:	d107      	bne.n	8c82 <system_gclk_gen_get_hz+0x66>
    8c72:	2c01      	cmp	r4, #1
    8c74:	d907      	bls.n	8c86 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    8c76:	0021      	movs	r1, r4
    8c78:	0028      	movs	r0, r5
    8c7a:	4b0a      	ldr	r3, [pc, #40]	; (8ca4 <system_gclk_gen_get_hz+0x88>)
    8c7c:	4798      	blx	r3
    8c7e:	0005      	movs	r5, r0
    8c80:	e001      	b.n	8c86 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    8c82:	3401      	adds	r4, #1
    8c84:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    8c86:	0028      	movs	r0, r5
    8c88:	bd70      	pop	{r4, r5, r6, pc}
    8c8a:	46c0      	nop			; (mov r8, r8)
    8c8c:	40000c00 	.word	0x40000c00
    8c90:	000073e5 	.word	0x000073e5
    8c94:	40000c04 	.word	0x40000c04
    8c98:	000086ed 	.word	0x000086ed
    8c9c:	40000c08 	.word	0x40000c08
    8ca0:	00007425 	.word	0x00007425
    8ca4:	0000b65d 	.word	0x0000b65d

00008ca8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8ca8:	b510      	push	{r4, lr}
    8caa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8cac:	4b06      	ldr	r3, [pc, #24]	; (8cc8 <system_gclk_chan_enable+0x20>)
    8cae:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8cb0:	4b06      	ldr	r3, [pc, #24]	; (8ccc <system_gclk_chan_enable+0x24>)
    8cb2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8cb4:	4a06      	ldr	r2, [pc, #24]	; (8cd0 <system_gclk_chan_enable+0x28>)
    8cb6:	8853      	ldrh	r3, [r2, #2]
    8cb8:	2180      	movs	r1, #128	; 0x80
    8cba:	01c9      	lsls	r1, r1, #7
    8cbc:	430b      	orrs	r3, r1
    8cbe:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    8cc0:	4b04      	ldr	r3, [pc, #16]	; (8cd4 <system_gclk_chan_enable+0x2c>)
    8cc2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8cc4:	bd10      	pop	{r4, pc}
    8cc6:	46c0      	nop			; (mov r8, r8)
    8cc8:	000073e5 	.word	0x000073e5
    8ccc:	40000c02 	.word	0x40000c02
    8cd0:	40000c00 	.word	0x40000c00
    8cd4:	00007425 	.word	0x00007425

00008cd8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8cd8:	b510      	push	{r4, lr}
    8cda:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8cdc:	4b0f      	ldr	r3, [pc, #60]	; (8d1c <system_gclk_chan_disable+0x44>)
    8cde:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8ce0:	4b0f      	ldr	r3, [pc, #60]	; (8d20 <system_gclk_chan_disable+0x48>)
    8ce2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8ce4:	4a0f      	ldr	r2, [pc, #60]	; (8d24 <system_gclk_chan_disable+0x4c>)
    8ce6:	8853      	ldrh	r3, [r2, #2]
    8ce8:	051b      	lsls	r3, r3, #20
    8cea:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    8cec:	8853      	ldrh	r3, [r2, #2]
    8cee:	490e      	ldr	r1, [pc, #56]	; (8d28 <system_gclk_chan_disable+0x50>)
    8cf0:	400b      	ands	r3, r1
    8cf2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8cf4:	8853      	ldrh	r3, [r2, #2]
    8cf6:	490d      	ldr	r1, [pc, #52]	; (8d2c <system_gclk_chan_disable+0x54>)
    8cf8:	400b      	ands	r3, r1
    8cfa:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8cfc:	0011      	movs	r1, r2
    8cfe:	2280      	movs	r2, #128	; 0x80
    8d00:	01d2      	lsls	r2, r2, #7
    8d02:	884b      	ldrh	r3, [r1, #2]
    8d04:	4213      	tst	r3, r2
    8d06:	d1fc      	bne.n	8d02 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8d08:	4906      	ldr	r1, [pc, #24]	; (8d24 <system_gclk_chan_disable+0x4c>)
    8d0a:	884a      	ldrh	r2, [r1, #2]
    8d0c:	0203      	lsls	r3, r0, #8
    8d0e:	4806      	ldr	r0, [pc, #24]	; (8d28 <system_gclk_chan_disable+0x50>)
    8d10:	4002      	ands	r2, r0
    8d12:	4313      	orrs	r3, r2
    8d14:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    8d16:	4b06      	ldr	r3, [pc, #24]	; (8d30 <system_gclk_chan_disable+0x58>)
    8d18:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8d1a:	bd10      	pop	{r4, pc}
    8d1c:	000073e5 	.word	0x000073e5
    8d20:	40000c02 	.word	0x40000c02
    8d24:	40000c00 	.word	0x40000c00
    8d28:	fffff0ff 	.word	0xfffff0ff
    8d2c:	ffffbfff 	.word	0xffffbfff
    8d30:	00007425 	.word	0x00007425

00008d34 <system_gclk_chan_set_config>:
{
    8d34:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8d36:	780c      	ldrb	r4, [r1, #0]
    8d38:	0224      	lsls	r4, r4, #8
    8d3a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    8d3c:	4b02      	ldr	r3, [pc, #8]	; (8d48 <system_gclk_chan_set_config+0x14>)
    8d3e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8d40:	b2a4      	uxth	r4, r4
    8d42:	4b02      	ldr	r3, [pc, #8]	; (8d4c <system_gclk_chan_set_config+0x18>)
    8d44:	805c      	strh	r4, [r3, #2]
}
    8d46:	bd10      	pop	{r4, pc}
    8d48:	00008cd9 	.word	0x00008cd9
    8d4c:	40000c00 	.word	0x40000c00

00008d50 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8d50:	b510      	push	{r4, lr}
    8d52:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8d54:	4b06      	ldr	r3, [pc, #24]	; (8d70 <system_gclk_chan_get_hz+0x20>)
    8d56:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8d58:	4b06      	ldr	r3, [pc, #24]	; (8d74 <system_gclk_chan_get_hz+0x24>)
    8d5a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8d5c:	4b06      	ldr	r3, [pc, #24]	; (8d78 <system_gclk_chan_get_hz+0x28>)
    8d5e:	885c      	ldrh	r4, [r3, #2]
    8d60:	0524      	lsls	r4, r4, #20
    8d62:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8d64:	4b05      	ldr	r3, [pc, #20]	; (8d7c <system_gclk_chan_get_hz+0x2c>)
    8d66:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8d68:	0020      	movs	r0, r4
    8d6a:	4b05      	ldr	r3, [pc, #20]	; (8d80 <system_gclk_chan_get_hz+0x30>)
    8d6c:	4798      	blx	r3
}
    8d6e:	bd10      	pop	{r4, pc}
    8d70:	000073e5 	.word	0x000073e5
    8d74:	40000c02 	.word	0x40000c02
    8d78:	40000c00 	.word	0x40000c00
    8d7c:	00007425 	.word	0x00007425
    8d80:	00008c1d 	.word	0x00008c1d

00008d84 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8d84:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8d86:	78d3      	ldrb	r3, [r2, #3]
    8d88:	2b00      	cmp	r3, #0
    8d8a:	d135      	bne.n	8df8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8d8c:	7813      	ldrb	r3, [r2, #0]
    8d8e:	2b80      	cmp	r3, #128	; 0x80
    8d90:	d029      	beq.n	8de6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8d92:	061b      	lsls	r3, r3, #24
    8d94:	2480      	movs	r4, #128	; 0x80
    8d96:	0264      	lsls	r4, r4, #9
    8d98:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8d9a:	7854      	ldrb	r4, [r2, #1]
    8d9c:	2502      	movs	r5, #2
    8d9e:	43ac      	bics	r4, r5
    8da0:	d106      	bne.n	8db0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8da2:	7894      	ldrb	r4, [r2, #2]
    8da4:	2c00      	cmp	r4, #0
    8da6:	d120      	bne.n	8dea <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    8da8:	2480      	movs	r4, #128	; 0x80
    8daa:	02a4      	lsls	r4, r4, #10
    8dac:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    8dae:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8db0:	7854      	ldrb	r4, [r2, #1]
    8db2:	3c01      	subs	r4, #1
    8db4:	2c01      	cmp	r4, #1
    8db6:	d91c      	bls.n	8df2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8db8:	040d      	lsls	r5, r1, #16
    8dba:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8dbc:	24a0      	movs	r4, #160	; 0xa0
    8dbe:	05e4      	lsls	r4, r4, #23
    8dc0:	432c      	orrs	r4, r5
    8dc2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8dc4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8dc6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8dc8:	24d0      	movs	r4, #208	; 0xd0
    8dca:	0624      	lsls	r4, r4, #24
    8dcc:	432c      	orrs	r4, r5
    8dce:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8dd0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8dd2:	78d4      	ldrb	r4, [r2, #3]
    8dd4:	2c00      	cmp	r4, #0
    8dd6:	d122      	bne.n	8e1e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8dd8:	035b      	lsls	r3, r3, #13
    8dda:	d51c      	bpl.n	8e16 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    8ddc:	7893      	ldrb	r3, [r2, #2]
    8dde:	2b01      	cmp	r3, #1
    8de0:	d01e      	beq.n	8e20 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    8de2:	6141      	str	r1, [r0, #20]
    8de4:	e017      	b.n	8e16 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    8de6:	2300      	movs	r3, #0
    8de8:	e7d7      	b.n	8d9a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8dea:	24c0      	movs	r4, #192	; 0xc0
    8dec:	02e4      	lsls	r4, r4, #11
    8dee:	4323      	orrs	r3, r4
    8df0:	e7dd      	b.n	8dae <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    8df2:	4c0d      	ldr	r4, [pc, #52]	; (8e28 <_system_pinmux_config+0xa4>)
    8df4:	4023      	ands	r3, r4
    8df6:	e7df      	b.n	8db8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    8df8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8dfa:	040c      	lsls	r4, r1, #16
    8dfc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8dfe:	23a0      	movs	r3, #160	; 0xa0
    8e00:	05db      	lsls	r3, r3, #23
    8e02:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8e04:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8e06:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8e08:	23d0      	movs	r3, #208	; 0xd0
    8e0a:	061b      	lsls	r3, r3, #24
    8e0c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8e0e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    8e10:	78d3      	ldrb	r3, [r2, #3]
    8e12:	2b00      	cmp	r3, #0
    8e14:	d103      	bne.n	8e1e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8e16:	7853      	ldrb	r3, [r2, #1]
    8e18:	3b01      	subs	r3, #1
    8e1a:	2b01      	cmp	r3, #1
    8e1c:	d902      	bls.n	8e24 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    8e1e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    8e20:	6181      	str	r1, [r0, #24]
    8e22:	e7f8      	b.n	8e16 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    8e24:	6081      	str	r1, [r0, #8]
}
    8e26:	e7fa      	b.n	8e1e <_system_pinmux_config+0x9a>
    8e28:	fffbffff 	.word	0xfffbffff

00008e2c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8e2c:	b510      	push	{r4, lr}
    8e2e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    8e30:	09c1      	lsrs	r1, r0, #7
		return NULL;
    8e32:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8e34:	2900      	cmp	r1, #0
    8e36:	d104      	bne.n	8e42 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    8e38:	0943      	lsrs	r3, r0, #5
    8e3a:	01db      	lsls	r3, r3, #7
    8e3c:	4905      	ldr	r1, [pc, #20]	; (8e54 <system_pinmux_pin_set_config+0x28>)
    8e3e:	468c      	mov	ip, r1
    8e40:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    8e42:	241f      	movs	r4, #31
    8e44:	4020      	ands	r0, r4
    8e46:	2101      	movs	r1, #1
    8e48:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    8e4a:	0018      	movs	r0, r3
    8e4c:	4b02      	ldr	r3, [pc, #8]	; (8e58 <system_pinmux_pin_set_config+0x2c>)
    8e4e:	4798      	blx	r3
}
    8e50:	bd10      	pop	{r4, pc}
    8e52:	46c0      	nop			; (mov r8, r8)
    8e54:	41004400 	.word	0x41004400
    8e58:	00008d85 	.word	0x00008d85

00008e5c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    8e5c:	4770      	bx	lr
	...

00008e60 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8e60:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8e62:	4b05      	ldr	r3, [pc, #20]	; (8e78 <system_init+0x18>)
    8e64:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8e66:	4b05      	ldr	r3, [pc, #20]	; (8e7c <system_init+0x1c>)
    8e68:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8e6a:	4b05      	ldr	r3, [pc, #20]	; (8e80 <system_init+0x20>)
    8e6c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    8e6e:	4b05      	ldr	r3, [pc, #20]	; (8e84 <system_init+0x24>)
    8e70:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8e72:	4b05      	ldr	r3, [pc, #20]	; (8e88 <system_init+0x28>)
    8e74:	4798      	blx	r3
}
    8e76:	bd10      	pop	{r4, pc}
    8e78:	0000899d 	.word	0x0000899d
    8e7c:	00007455 	.word	0x00007455
    8e80:	00000d61 	.word	0x00000d61
    8e84:	00007565 	.word	0x00007565
    8e88:	00008e5d 	.word	0x00008e5d

00008e8c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    8e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e8e:	46c6      	mov	lr, r8
    8e90:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    8e92:	0080      	lsls	r0, r0, #2
    8e94:	4b0e      	ldr	r3, [pc, #56]	; (8ed0 <_tcc_interrupt_handler+0x44>)
    8e96:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    8e98:	683b      	ldr	r3, [r7, #0]
    8e9a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    8e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8ea0:	4013      	ands	r3, r2
    8ea2:	401e      	ands	r6, r3
    8ea4:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    8ea6:	4b0b      	ldr	r3, [pc, #44]	; (8ed4 <_tcc_interrupt_handler+0x48>)
    8ea8:	4698      	mov	r8, r3
    8eaa:	e002      	b.n	8eb2 <_tcc_interrupt_handler+0x26>
    8eac:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    8eae:	2c30      	cmp	r4, #48	; 0x30
    8eb0:	d00a      	beq.n	8ec8 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    8eb2:	4643      	mov	r3, r8
    8eb4:	58e5      	ldr	r5, [r4, r3]
    8eb6:	4235      	tst	r5, r6
    8eb8:	d0f8      	beq.n	8eac <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    8eba:	193b      	adds	r3, r7, r4
    8ebc:	685b      	ldr	r3, [r3, #4]
    8ebe:	0038      	movs	r0, r7
    8ec0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    8ec2:	683b      	ldr	r3, [r7, #0]
    8ec4:	62dd      	str	r5, [r3, #44]	; 0x2c
    8ec6:	e7f1      	b.n	8eac <_tcc_interrupt_handler+0x20>
		}
	}
}
    8ec8:	bc04      	pop	{r2}
    8eca:	4690      	mov	r8, r2
    8ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ece:	46c0      	nop			; (mov r8, r8)
    8ed0:	20001688 	.word	0x20001688
    8ed4:	0000fda8 	.word	0x0000fda8

00008ed8 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    8ed8:	b510      	push	{r4, lr}
    8eda:	2000      	movs	r0, #0
    8edc:	4b01      	ldr	r3, [pc, #4]	; (8ee4 <TCC0_Handler+0xc>)
    8ede:	4798      	blx	r3
    8ee0:	bd10      	pop	{r4, pc}
    8ee2:	46c0      	nop			; (mov r8, r8)
    8ee4:	00008e8d 	.word	0x00008e8d

00008ee8 <TCC1_Handler>:
    8ee8:	b510      	push	{r4, lr}
    8eea:	2001      	movs	r0, #1
    8eec:	4b01      	ldr	r3, [pc, #4]	; (8ef4 <TCC1_Handler+0xc>)
    8eee:	4798      	blx	r3
    8ef0:	bd10      	pop	{r4, pc}
    8ef2:	46c0      	nop			; (mov r8, r8)
    8ef4:	00008e8d 	.word	0x00008e8d

00008ef8 <TCC2_Handler>:
    8ef8:	b510      	push	{r4, lr}
    8efa:	2002      	movs	r0, #2
    8efc:	4b01      	ldr	r3, [pc, #4]	; (8f04 <TCC2_Handler+0xc>)
    8efe:	4798      	blx	r3
    8f00:	bd10      	pop	{r4, pc}
    8f02:	46c0      	nop			; (mov r8, r8)
    8f04:	00008e8d 	.word	0x00008e8d

00008f08 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8f08:	e7fe      	b.n	8f08 <Dummy_Handler>
	...

00008f0c <Reset_Handler>:
{
    8f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    8f0e:	4a2a      	ldr	r2, [pc, #168]	; (8fb8 <Reset_Handler+0xac>)
    8f10:	4b2a      	ldr	r3, [pc, #168]	; (8fbc <Reset_Handler+0xb0>)
    8f12:	429a      	cmp	r2, r3
    8f14:	d011      	beq.n	8f3a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    8f16:	001a      	movs	r2, r3
    8f18:	4b29      	ldr	r3, [pc, #164]	; (8fc0 <Reset_Handler+0xb4>)
    8f1a:	429a      	cmp	r2, r3
    8f1c:	d20d      	bcs.n	8f3a <Reset_Handler+0x2e>
    8f1e:	4a29      	ldr	r2, [pc, #164]	; (8fc4 <Reset_Handler+0xb8>)
    8f20:	3303      	adds	r3, #3
    8f22:	1a9b      	subs	r3, r3, r2
    8f24:	089b      	lsrs	r3, r3, #2
    8f26:	3301      	adds	r3, #1
    8f28:	009b      	lsls	r3, r3, #2
    8f2a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8f2c:	4823      	ldr	r0, [pc, #140]	; (8fbc <Reset_Handler+0xb0>)
    8f2e:	4922      	ldr	r1, [pc, #136]	; (8fb8 <Reset_Handler+0xac>)
    8f30:	588c      	ldr	r4, [r1, r2]
    8f32:	5084      	str	r4, [r0, r2]
    8f34:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    8f36:	429a      	cmp	r2, r3
    8f38:	d1fa      	bne.n	8f30 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8f3a:	4a23      	ldr	r2, [pc, #140]	; (8fc8 <Reset_Handler+0xbc>)
    8f3c:	4b23      	ldr	r3, [pc, #140]	; (8fcc <Reset_Handler+0xc0>)
    8f3e:	429a      	cmp	r2, r3
    8f40:	d20a      	bcs.n	8f58 <Reset_Handler+0x4c>
    8f42:	43d3      	mvns	r3, r2
    8f44:	4921      	ldr	r1, [pc, #132]	; (8fcc <Reset_Handler+0xc0>)
    8f46:	185b      	adds	r3, r3, r1
    8f48:	2103      	movs	r1, #3
    8f4a:	438b      	bics	r3, r1
    8f4c:	3304      	adds	r3, #4
    8f4e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8f50:	2100      	movs	r1, #0
    8f52:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    8f54:	4293      	cmp	r3, r2
    8f56:	d1fc      	bne.n	8f52 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8f58:	4a1d      	ldr	r2, [pc, #116]	; (8fd0 <Reset_Handler+0xc4>)
    8f5a:	21ff      	movs	r1, #255	; 0xff
    8f5c:	4b1d      	ldr	r3, [pc, #116]	; (8fd4 <Reset_Handler+0xc8>)
    8f5e:	438b      	bics	r3, r1
    8f60:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8f62:	39fd      	subs	r1, #253	; 0xfd
    8f64:	2390      	movs	r3, #144	; 0x90
    8f66:	005b      	lsls	r3, r3, #1
    8f68:	4a1b      	ldr	r2, [pc, #108]	; (8fd8 <Reset_Handler+0xcc>)
    8f6a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8f6c:	4a1b      	ldr	r2, [pc, #108]	; (8fdc <Reset_Handler+0xd0>)
    8f6e:	78d3      	ldrb	r3, [r2, #3]
    8f70:	2503      	movs	r5, #3
    8f72:	43ab      	bics	r3, r5
    8f74:	2402      	movs	r4, #2
    8f76:	4323      	orrs	r3, r4
    8f78:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8f7a:	78d3      	ldrb	r3, [r2, #3]
    8f7c:	270c      	movs	r7, #12
    8f7e:	43bb      	bics	r3, r7
    8f80:	2608      	movs	r6, #8
    8f82:	4333      	orrs	r3, r6
    8f84:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    8f86:	4b16      	ldr	r3, [pc, #88]	; (8fe0 <Reset_Handler+0xd4>)
    8f88:	7b98      	ldrb	r0, [r3, #14]
    8f8a:	2230      	movs	r2, #48	; 0x30
    8f8c:	4390      	bics	r0, r2
    8f8e:	2220      	movs	r2, #32
    8f90:	4310      	orrs	r0, r2
    8f92:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8f94:	7b99      	ldrb	r1, [r3, #14]
    8f96:	43b9      	bics	r1, r7
    8f98:	4331      	orrs	r1, r6
    8f9a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8f9c:	7b9a      	ldrb	r2, [r3, #14]
    8f9e:	43aa      	bics	r2, r5
    8fa0:	4322      	orrs	r2, r4
    8fa2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    8fa4:	4a0f      	ldr	r2, [pc, #60]	; (8fe4 <Reset_Handler+0xd8>)
    8fa6:	6853      	ldr	r3, [r2, #4]
    8fa8:	2180      	movs	r1, #128	; 0x80
    8faa:	430b      	orrs	r3, r1
    8fac:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8fae:	4b0e      	ldr	r3, [pc, #56]	; (8fe8 <Reset_Handler+0xdc>)
    8fb0:	4798      	blx	r3
        main();
    8fb2:	4b0e      	ldr	r3, [pc, #56]	; (8fec <Reset_Handler+0xe0>)
    8fb4:	4798      	blx	r3
    8fb6:	e7fe      	b.n	8fb6 <Reset_Handler+0xaa>
    8fb8:	0001089c 	.word	0x0001089c
    8fbc:	20000000 	.word	0x20000000
    8fc0:	20000360 	.word	0x20000360
    8fc4:	20000004 	.word	0x20000004
    8fc8:	20000360 	.word	0x20000360
    8fcc:	20002168 	.word	0x20002168
    8fd0:	e000ed00 	.word	0xe000ed00
    8fd4:	00000000 	.word	0x00000000
    8fd8:	41007000 	.word	0x41007000
    8fdc:	41005000 	.word	0x41005000
    8fe0:	41004800 	.word	0x41004800
    8fe4:	41004000 	.word	0x41004000
    8fe8:	0000d2b1 	.word	0x0000d2b1
    8fec:	0000af51 	.word	0x0000af51

00008ff0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    8ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ff2:	46c6      	mov	lr, r8
    8ff4:	b500      	push	{lr}
    8ff6:	000c      	movs	r4, r1
    8ff8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    8ffa:	2800      	cmp	r0, #0
    8ffc:	d10f      	bne.n	901e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    8ffe:	2a00      	cmp	r2, #0
    9000:	dd11      	ble.n	9026 <_read+0x36>
    9002:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    9004:	4e09      	ldr	r6, [pc, #36]	; (902c <_read+0x3c>)
    9006:	4d0a      	ldr	r5, [pc, #40]	; (9030 <_read+0x40>)
    9008:	6830      	ldr	r0, [r6, #0]
    900a:	0021      	movs	r1, r4
    900c:	682b      	ldr	r3, [r5, #0]
    900e:	4798      	blx	r3
		ptr++;
    9010:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    9012:	42bc      	cmp	r4, r7
    9014:	d1f8      	bne.n	9008 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    9016:	4640      	mov	r0, r8
    9018:	bc04      	pop	{r2}
    901a:	4690      	mov	r8, r2
    901c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    901e:	2301      	movs	r3, #1
    9020:	425b      	negs	r3, r3
    9022:	4698      	mov	r8, r3
    9024:	e7f7      	b.n	9016 <_read+0x26>
	for (; len > 0; --len) {
    9026:	4680      	mov	r8, r0
    9028:	e7f5      	b.n	9016 <_read+0x26>
    902a:	46c0      	nop			; (mov r8, r8)
    902c:	2000169c 	.word	0x2000169c
    9030:	20001694 	.word	0x20001694

00009034 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    9034:	b5f0      	push	{r4, r5, r6, r7, lr}
    9036:	46c6      	mov	lr, r8
    9038:	b500      	push	{lr}
    903a:	000e      	movs	r6, r1
    903c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    903e:	3801      	subs	r0, #1
    9040:	2802      	cmp	r0, #2
    9042:	d810      	bhi.n	9066 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    9044:	2a00      	cmp	r2, #0
    9046:	d011      	beq.n	906c <_write+0x38>
    9048:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    904a:	4b0c      	ldr	r3, [pc, #48]	; (907c <_write+0x48>)
    904c:	4698      	mov	r8, r3
    904e:	4f0c      	ldr	r7, [pc, #48]	; (9080 <_write+0x4c>)
    9050:	4643      	mov	r3, r8
    9052:	6818      	ldr	r0, [r3, #0]
    9054:	5d31      	ldrb	r1, [r6, r4]
    9056:	683b      	ldr	r3, [r7, #0]
    9058:	4798      	blx	r3
    905a:	2800      	cmp	r0, #0
    905c:	db08      	blt.n	9070 <_write+0x3c>
			return -1;
		}
		++nChars;
    905e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    9060:	42a5      	cmp	r5, r4
    9062:	d1f5      	bne.n	9050 <_write+0x1c>
    9064:	e006      	b.n	9074 <_write+0x40>
		return -1;
    9066:	2401      	movs	r4, #1
    9068:	4264      	negs	r4, r4
    906a:	e003      	b.n	9074 <_write+0x40>
	for (; len != 0; --len) {
    906c:	0014      	movs	r4, r2
    906e:	e001      	b.n	9074 <_write+0x40>
			return -1;
    9070:	2401      	movs	r4, #1
    9072:	4264      	negs	r4, r4
	}
	return nChars;
}
    9074:	0020      	movs	r0, r4
    9076:	bc04      	pop	{r2}
    9078:	4690      	mov	r8, r2
    907a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    907c:	2000169c 	.word	0x2000169c
    9080:	20001698 	.word	0x20001698

00009084 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    9084:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    9086:	4a06      	ldr	r2, [pc, #24]	; (90a0 <_sbrk+0x1c>)
    9088:	6812      	ldr	r2, [r2, #0]
    908a:	2a00      	cmp	r2, #0
    908c:	d004      	beq.n	9098 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    908e:	4a04      	ldr	r2, [pc, #16]	; (90a0 <_sbrk+0x1c>)
    9090:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    9092:	18c3      	adds	r3, r0, r3
    9094:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    9096:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    9098:	4902      	ldr	r1, [pc, #8]	; (90a4 <_sbrk+0x20>)
    909a:	4a01      	ldr	r2, [pc, #4]	; (90a0 <_sbrk+0x1c>)
    909c:	6011      	str	r1, [r2, #0]
    909e:	e7f6      	b.n	908e <_sbrk+0xa>
    90a0:	200004b4 	.word	0x200004b4
    90a4:	20004168 	.word	0x20004168

000090a8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    90a8:	2001      	movs	r0, #1
    90aa:	4240      	negs	r0, r0
    90ac:	4770      	bx	lr

000090ae <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    90ae:	2380      	movs	r3, #128	; 0x80
    90b0:	019b      	lsls	r3, r3, #6
    90b2:	604b      	str	r3, [r1, #4]

	return 0;
}
    90b4:	2000      	movs	r0, #0
    90b6:	4770      	bx	lr

000090b8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    90b8:	2001      	movs	r0, #1
    90ba:	4770      	bx	lr

000090bc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    90bc:	2000      	movs	r0, #0
    90be:	4770      	bx	lr

000090c0 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
    90c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    90c2:	46de      	mov	lr, fp
    90c4:	4657      	mov	r7, sl
    90c6:	464e      	mov	r6, r9
    90c8:	4645      	mov	r5, r8
    90ca:	b5e0      	push	{r5, r6, r7, lr}
    90cc:	b083      	sub	sp, #12
    90ce:	0007      	movs	r7, r0
    90d0:	4688      	mov	r8, r1
    90d2:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
    90d4:	2400      	movs	r4, #0
    90d6:	2900      	cmp	r1, #0
    90d8:	dd18      	ble.n	910c <sendPacket+0x4c>
    90da:	4b15      	ldr	r3, [pc, #84]	; (9130 <sendPacket+0x70>)
    90dc:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
    90de:	4b15      	ldr	r3, [pc, #84]	; (9134 <sendPacket+0x74>)
    90e0:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
    90e2:	9801      	ldr	r0, [sp, #4]
    90e4:	47d0      	blx	sl
    90e6:	2800      	cmp	r0, #0
    90e8:	d110      	bne.n	910c <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
    90ea:	6d3e      	ldr	r6, [r7, #80]	; 0x50
    90ec:	68f3      	ldr	r3, [r6, #12]
    90ee:	4699      	mov	r9, r3
    90f0:	693b      	ldr	r3, [r7, #16]
    90f2:	191d      	adds	r5, r3, r4
    90f4:	9801      	ldr	r0, [sp, #4]
    90f6:	47d8      	blx	fp
    90f8:	0003      	movs	r3, r0
    90fa:	4642      	mov	r2, r8
    90fc:	0029      	movs	r1, r5
    90fe:	0030      	movs	r0, r6
    9100:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
    9102:	2800      	cmp	r0, #0
    9104:	db02      	blt.n	910c <sendPacket+0x4c>
            break;
        sent += rc;
    9106:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
    9108:	45a0      	cmp	r8, r4
    910a:	dcea      	bgt.n	90e2 <sendPacket+0x22>
    }
    if (sent == length)
    910c:	45a0      	cmp	r8, r4
    910e:	d10c      	bne.n	912a <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
    9110:	69b9      	ldr	r1, [r7, #24]
    9112:	0038      	movs	r0, r7
    9114:	3054      	adds	r0, #84	; 0x54
    9116:	4b08      	ldr	r3, [pc, #32]	; (9138 <sendPacket+0x78>)
    9118:	4798      	blx	r3
        rc = SUCCESS;
    911a:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
    911c:	b003      	add	sp, #12
    911e:	bc3c      	pop	{r2, r3, r4, r5}
    9120:	4690      	mov	r8, r2
    9122:	4699      	mov	r9, r3
    9124:	46a2      	mov	sl, r4
    9126:	46ab      	mov	fp, r5
    9128:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
    912a:	2001      	movs	r0, #1
    912c:	4240      	negs	r0, r0
    return rc;
    912e:	e7f5      	b.n	911c <sendPacket+0x5c>
    9130:	000098ad 	.word	0x000098ad
    9134:	000098e1 	.word	0x000098e1
    9138:	000098cd 	.word	0x000098cd

0000913c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
    913c:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
    913e:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
    9140:	2100      	movs	r1, #0
    9142:	6241      	str	r1, [r0, #36]	; 0x24
    9144:	62c1      	str	r1, [r0, #44]	; 0x2c
    9146:	6341      	str	r1, [r0, #52]	; 0x34
    9148:	63c1      	str	r1, [r0, #60]	; 0x3c
    914a:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
    914c:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
    914e:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
    9150:	9b02      	ldr	r3, [sp, #8]
    9152:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
    9154:	9b03      	ldr	r3, [sp, #12]
    9156:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
    9158:	9b04      	ldr	r3, [sp, #16]
    915a:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
    915c:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
    915e:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
    9160:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
    9162:	2301      	movs	r3, #1
    9164:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
    9166:	3054      	adds	r0, #84	; 0x54
    9168:	4b01      	ldr	r3, [pc, #4]	; (9170 <MQTTClientInit+0x34>)
    916a:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
    916c:	bd10      	pop	{r4, pc}
    916e:	46c0      	nop			; (mov r8, r8)
    9170:	000098f5 	.word	0x000098f5

00009174 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
    9174:	b5f0      	push	{r4, r5, r6, r7, lr}
    9176:	46de      	mov	lr, fp
    9178:	4657      	mov	r7, sl
    917a:	464e      	mov	r6, r9
    917c:	4645      	mov	r5, r8
    917e:	b5e0      	push	{r5, r6, r7, lr}
    9180:	b085      	sub	sp, #20
    9182:	4682      	mov	sl, r0
    9184:	000f      	movs	r7, r1
    9186:	4691      	mov	r9, r2
    9188:	0004      	movs	r4, r0
    918a:	3424      	adds	r4, #36	; 0x24
    918c:	234c      	movs	r3, #76	; 0x4c
    918e:	4453      	add	r3, sl
    9190:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
    9192:	2301      	movs	r3, #1
    9194:	425b      	negs	r3, r3
    9196:	9301      	str	r3, [sp, #4]
    9198:	e056      	b.n	9248 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
    919a:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
    919c:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
    919e:	687a      	ldr	r2, [r7, #4]
    91a0:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
    91a2:	780a      	ldrb	r2, [r1, #0]
    91a4:	2a00      	cmp	r2, #0
    91a6:	d04a      	beq.n	923e <deliverMessage+0xca>
    91a8:	42b3      	cmp	r3, r6
    91aa:	d24a      	bcs.n	9242 <deliverMessage+0xce>
    91ac:	3101      	adds	r1, #1
    91ae:	1e70      	subs	r0, r6, #1
    91b0:	e008      	b.n	91c4 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
    91b2:	2a2f      	cmp	r2, #47	; 0x2f
    91b4:	d10f      	bne.n	91d6 <deliverMessage+0x62>
        curn++;
    91b6:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
    91b8:	780a      	ldrb	r2, [r1, #0]
    91ba:	2a00      	cmp	r2, #0
    91bc:	d03f      	beq.n	923e <deliverMessage+0xca>
    91be:	429e      	cmp	r6, r3
    91c0:	d93f      	bls.n	9242 <deliverMessage+0xce>
    91c2:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
    91c4:	781d      	ldrb	r5, [r3, #0]
    91c6:	2d2f      	cmp	r5, #47	; 0x2f
    91c8:	d0f3      	beq.n	91b2 <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
    91ca:	2a2b      	cmp	r2, #43	; 0x2b
    91cc:	d008      	beq.n	91e0 <deliverMessage+0x6c>
    91ce:	2a23      	cmp	r2, #35	; 0x23
    91d0:	d013      	beq.n	91fa <deliverMessage+0x86>
    91d2:	4295      	cmp	r5, r2
    91d4:	d0ef      	beq.n	91b6 <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
    91d6:	429e      	cmp	r6, r3
    91d8:	d133      	bne.n	9242 <deliverMessage+0xce>
    91da:	2a00      	cmp	r2, #0
    91dc:	d03d      	beq.n	925a <deliverMessage+0xe6>
    91de:	e030      	b.n	9242 <deliverMessage+0xce>
            char* nextpos = curn + 1;
    91e0:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
    91e2:	42ae      	cmp	r6, r5
    91e4:	d927      	bls.n	9236 <deliverMessage+0xc2>
    91e6:	785a      	ldrb	r2, [r3, #1]
    91e8:	2a2f      	cmp	r2, #47	; 0x2f
    91ea:	d01f      	beq.n	922c <deliverMessage+0xb8>
                nextpos = ++curn + 1;
    91ec:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
    91ee:	4283      	cmp	r3, r0
    91f0:	d0e1      	beq.n	91b6 <deliverMessage+0x42>
    91f2:	785a      	ldrb	r2, [r3, #1]
    91f4:	2a2f      	cmp	r2, #47	; 0x2f
    91f6:	d1f9      	bne.n	91ec <deliverMessage+0x78>
    91f8:	e7dd      	b.n	91b6 <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
    91fa:	1e73      	subs	r3, r6, #1
    91fc:	e7db      	b.n	91b6 <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
    91fe:	9b01      	ldr	r3, [sp, #4]
    9200:	3301      	adds	r3, #1
    9202:	d007      	beq.n	9214 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
    9204:	9801      	ldr	r0, [sp, #4]
    9206:	b005      	add	sp, #20
    9208:	bc3c      	pop	{r2, r3, r4, r5}
    920a:	4690      	mov	r8, r2
    920c:	4699      	mov	r9, r3
    920e:	46a2      	mov	sl, r4
    9210:	46ab      	mov	fp, r5
    9212:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
    9214:	4653      	mov	r3, sl
    9216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9218:	2b00      	cmp	r3, #0
    921a:	d0f3      	beq.n	9204 <deliverMessage+0x90>
    md->topicName = aTopicName;
    921c:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
    921e:	464a      	mov	r2, r9
    9220:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
    9222:	a802      	add	r0, sp, #8
    9224:	4798      	blx	r3
        rc = SUCCESS;
    9226:	2300      	movs	r3, #0
    9228:	9301      	str	r3, [sp, #4]
    return rc;
    922a:	e7eb      	b.n	9204 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
    922c:	780a      	ldrb	r2, [r1, #0]
    922e:	2a00      	cmp	r2, #0
    9230:	d007      	beq.n	9242 <deliverMessage+0xce>
        curn++;
    9232:	002b      	movs	r3, r5
    9234:	e7c5      	b.n	91c2 <deliverMessage+0x4e>
    9236:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
    9238:	780a      	ldrb	r2, [r1, #0]
    923a:	2a00      	cmp	r2, #0
    923c:	d101      	bne.n	9242 <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
    923e:	429e      	cmp	r6, r3
    9240:	d00b      	beq.n	925a <deliverMessage+0xe6>
    9242:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    9244:	4544      	cmp	r4, r8
    9246:	d0da      	beq.n	91fe <deliverMessage+0x8a>
    9248:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
    924a:	6821      	ldr	r1, [r4, #0]
    924c:	2900      	cmp	r1, #0
    924e:	d0f8      	beq.n	9242 <deliverMessage+0xce>
    9250:	0038      	movs	r0, r7
    9252:	4b08      	ldr	r3, [pc, #32]	; (9274 <deliverMessage+0x100>)
    9254:	4798      	blx	r3
    9256:	2800      	cmp	r0, #0
    9258:	d09f      	beq.n	919a <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
    925a:	465b      	mov	r3, fp
    925c:	685b      	ldr	r3, [r3, #4]
    925e:	2b00      	cmp	r3, #0
    9260:	d0ef      	beq.n	9242 <deliverMessage+0xce>
    md->topicName = aTopicName;
    9262:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
    9264:	464a      	mov	r2, r9
    9266:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
    9268:	a802      	add	r0, sp, #8
    926a:	4798      	blx	r3
                rc = SUCCESS;
    926c:	2300      	movs	r3, #0
    926e:	9301      	str	r3, [sp, #4]
    9270:	e7e7      	b.n	9242 <deliverMessage+0xce>
    9272:	46c0      	nop			; (mov r8, r8)
    9274:	0000a155 	.word	0x0000a155

00009278 <keepalive>:


int keepalive(MQTTClient* c)
{
    9278:	b510      	push	{r4, lr}
    927a:	b082      	sub	sp, #8
    927c:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
    927e:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
    9280:	69a3      	ldr	r3, [r4, #24]
    9282:	2b00      	cmp	r3, #0
    9284:	d101      	bne.n	928a <keepalive+0x12>
        }
    }

exit:
    return rc;
}
    9286:	b002      	add	sp, #8
    9288:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
    928a:	0020      	movs	r0, r4
    928c:	3054      	adds	r0, #84	; 0x54
    928e:	4b14      	ldr	r3, [pc, #80]	; (92e0 <keepalive+0x68>)
    9290:	4798      	blx	r3
    9292:	2800      	cmp	r0, #0
    9294:	d01d      	beq.n	92d2 <keepalive+0x5a>
        if (!c->ping_outstanding)
    9296:	7f23      	ldrb	r3, [r4, #28]
    9298:	2b00      	cmp	r3, #0
    929a:	d11d      	bne.n	92d8 <keepalive+0x60>
            TimerInit(&timer);
    929c:	4668      	mov	r0, sp
    929e:	4b11      	ldr	r3, [pc, #68]	; (92e4 <keepalive+0x6c>)
    92a0:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
    92a2:	21fa      	movs	r1, #250	; 0xfa
    92a4:	0089      	lsls	r1, r1, #2
    92a6:	4668      	mov	r0, sp
    92a8:	4b0f      	ldr	r3, [pc, #60]	; (92e8 <keepalive+0x70>)
    92aa:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
    92ac:	68a1      	ldr	r1, [r4, #8]
    92ae:	6920      	ldr	r0, [r4, #16]
    92b0:	4b0e      	ldr	r3, [pc, #56]	; (92ec <keepalive+0x74>)
    92b2:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
    92b4:	2800      	cmp	r0, #0
    92b6:	dd09      	ble.n	92cc <keepalive+0x54>
    92b8:	466a      	mov	r2, sp
    92ba:	0001      	movs	r1, r0
    92bc:	0020      	movs	r0, r4
    92be:	4b0c      	ldr	r3, [pc, #48]	; (92f0 <keepalive+0x78>)
    92c0:	4798      	blx	r3
    92c2:	2800      	cmp	r0, #0
    92c4:	d1df      	bne.n	9286 <keepalive+0xe>
                c->ping_outstanding = 1;
    92c6:	2301      	movs	r3, #1
    92c8:	7723      	strb	r3, [r4, #28]
    92ca:	e7dc      	b.n	9286 <keepalive+0xe>
    int rc = FAILURE;
    92cc:	2001      	movs	r0, #1
    92ce:	4240      	negs	r0, r0
    92d0:	e7d9      	b.n	9286 <keepalive+0xe>
    92d2:	2001      	movs	r0, #1
    92d4:	4240      	negs	r0, r0
    92d6:	e7d6      	b.n	9286 <keepalive+0xe>
    92d8:	2001      	movs	r0, #1
    92da:	4240      	negs	r0, r0
    return rc;
    92dc:	e7d3      	b.n	9286 <keepalive+0xe>
    92de:	46c0      	nop			; (mov r8, r8)
    92e0:	000098ad 	.word	0x000098ad
    92e4:	000098f5 	.word	0x000098f5
    92e8:	000098bd 	.word	0x000098bd
    92ec:	00009e3d 	.word	0x00009e3d
    92f0:	000090c1 	.word	0x000090c1

000092f4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
    92f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    92f6:	46de      	mov	lr, fp
    92f8:	464f      	mov	r7, r9
    92fa:	4646      	mov	r6, r8
    92fc:	b5c0      	push	{r6, r7, lr}
    92fe:	b090      	sub	sp, #64	; 0x40
    9300:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
    9302:	6d05      	ldr	r5, [r0, #80]	; 0x50
    9304:	68ae      	ldr	r6, [r5, #8]
    9306:	6947      	ldr	r7, [r0, #20]
    9308:	9107      	str	r1, [sp, #28]
    930a:	0008      	movs	r0, r1
    930c:	4b65      	ldr	r3, [pc, #404]	; (94a4 <cycle+0x1b0>)
    930e:	4798      	blx	r3
    9310:	0003      	movs	r3, r0
    9312:	2201      	movs	r2, #1
    9314:	0039      	movs	r1, r7
    9316:	0028      	movs	r0, r5
    9318:	47b0      	blx	r6
    931a:	0005      	movs	r5, r0
    931c:	2801      	cmp	r0, #1
    931e:	d000      	beq.n	9322 <cycle+0x2e>
    9320:	e0bd      	b.n	949e <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
    9322:	9807      	ldr	r0, [sp, #28]
    9324:	4b5f      	ldr	r3, [pc, #380]	; (94a4 <cycle+0x1b0>)
    9326:	4798      	blx	r3
    9328:	9006      	str	r0, [sp, #24]
    932a:	2604      	movs	r6, #4
    *value = 0;
    932c:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
    932e:	237f      	movs	r3, #127	; 0x7f
    9330:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
    9332:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9334:	6883      	ldr	r3, [r0, #8]
    9336:	4698      	mov	r8, r3
    9338:	9b06      	ldr	r3, [sp, #24]
    933a:	2201      	movs	r2, #1
    933c:	a90c      	add	r1, sp, #48	; 0x30
    933e:	47c0      	blx	r8
        if (rc != 1)
    9340:	2801      	cmp	r0, #1
    9342:	d10e      	bne.n	9362 <cycle+0x6e>
        *value += (i & 127) * multiplier;
    9344:	ab02      	add	r3, sp, #8
    9346:	2228      	movs	r2, #40	; 0x28
    9348:	189b      	adds	r3, r3, r2
    934a:	781b      	ldrb	r3, [r3, #0]
    934c:	465a      	mov	r2, fp
    934e:	401a      	ands	r2, r3
    9350:	436a      	muls	r2, r5
    9352:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
    9354:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
    9356:	b25b      	sxtb	r3, r3
    9358:	2b00      	cmp	r3, #0
    935a:	da02      	bge.n	9362 <cycle+0x6e>
    935c:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    935e:	2e00      	cmp	r6, #0
    9360:	d1e7      	bne.n	9332 <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    9362:	6963      	ldr	r3, [r4, #20]
    9364:	1c58      	adds	r0, r3, #1
    9366:	0039      	movs	r1, r7
    9368:	4b4f      	ldr	r3, [pc, #316]	; (94a8 <cycle+0x1b4>)
    936a:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
    936c:	2f00      	cmp	r7, #0
    936e:	dd10      	ble.n	9392 <cycle+0x9e>
    9370:	6d26      	ldr	r6, [r4, #80]	; 0x50
    9372:	68b3      	ldr	r3, [r6, #8]
    9374:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    9376:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
    9378:	6963      	ldr	r3, [r4, #20]
    937a:	181d      	adds	r5, r3, r0
    937c:	9807      	ldr	r0, [sp, #28]
    937e:	4b49      	ldr	r3, [pc, #292]	; (94a4 <cycle+0x1b0>)
    9380:	4798      	blx	r3
    9382:	0003      	movs	r3, r0
    9384:	003a      	movs	r2, r7
    9386:	0029      	movs	r1, r5
    9388:	0030      	movs	r0, r6
    938a:	47c8      	blx	r9
    938c:	42b8      	cmp	r0, r7
    938e:	d000      	beq.n	9392 <cycle+0x9e>
    9390:	e085      	b.n	949e <cycle+0x1aa>
    header.byte = c->readbuf[0];
    9392:	6963      	ldr	r3, [r4, #20]
    9394:	781d      	ldrb	r5, [r3, #0]
    9396:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
    9398:	2d05      	cmp	r5, #5
    939a:	d051      	beq.n	9440 <cycle+0x14c>
    939c:	2d0d      	cmp	r5, #13
    939e:	d06e      	beq.n	947e <cycle+0x18a>
        rc = SUCCESS;
    93a0:	2600      	movs	r6, #0
    switch (packet_type)
    93a2:	2d03      	cmp	r5, #3
    93a4:	d16e      	bne.n	9484 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
    93a6:	68e2      	ldr	r2, [r4, #12]
    93a8:	9204      	str	r2, [sp, #16]
    93aa:	9303      	str	r3, [sp, #12]
    93ac:	ab0f      	add	r3, sp, #60	; 0x3c
    93ae:	9302      	str	r3, [sp, #8]
    93b0:	ab0e      	add	r3, sp, #56	; 0x38
    93b2:	9301      	str	r3, [sp, #4]
    93b4:	ab09      	add	r3, sp, #36	; 0x24
    93b6:	9300      	str	r3, [sp, #0]
    93b8:	ab0d      	add	r3, sp, #52	; 0x34
    93ba:	2229      	movs	r2, #41	; 0x29
    93bc:	a902      	add	r1, sp, #8
    93be:	468c      	mov	ip, r1
    93c0:	4462      	add	r2, ip
    93c2:	a908      	add	r1, sp, #32
    93c4:	202a      	movs	r0, #42	; 0x2a
    93c6:	4460      	add	r0, ip
    93c8:	4e38      	ldr	r6, [pc, #224]	; (94ac <cycle+0x1b8>)
    93ca:	47b0      	blx	r6
        rc = SUCCESS;
    93cc:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
    93ce:	2801      	cmp	r0, #1
    93d0:	d15b      	bne.n	948a <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
    93d2:	ae0c      	add	r6, sp, #48	; 0x30
    93d4:	ab02      	add	r3, sp, #8
    93d6:	7e1b      	ldrb	r3, [r3, #24]
    93d8:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
    93da:	0032      	movs	r2, r6
    93dc:	a909      	add	r1, sp, #36	; 0x24
    93de:	0020      	movs	r0, r4
    93e0:	4b33      	ldr	r3, [pc, #204]	; (94b0 <cycle+0x1bc>)
    93e2:	4798      	blx	r3
            if (msg.qos != QOS0)
    93e4:	7833      	ldrb	r3, [r6, #0]
    93e6:	2b00      	cmp	r3, #0
    93e8:	d028      	beq.n	943c <cycle+0x148>
            {
                if (msg.qos == QOS1)
    93ea:	2b01      	cmp	r3, #1
    93ec:	d004      	beq.n	93f8 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
    93ee:	2b02      	cmp	r3, #2
    93f0:	d016      	beq.n	9420 <cycle+0x12c>
    93f2:	2601      	movs	r6, #1
    93f4:	4276      	negs	r6, r6
    93f6:	e048      	b.n	948a <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
    93f8:	ab0c      	add	r3, sp, #48	; 0x30
    93fa:	889b      	ldrh	r3, [r3, #4]
    93fc:	9300      	str	r3, [sp, #0]
    93fe:	2300      	movs	r3, #0
    9400:	2204      	movs	r2, #4
    9402:	68a1      	ldr	r1, [r4, #8]
    9404:	6920      	ldr	r0, [r4, #16]
    9406:	4e2b      	ldr	r6, [pc, #172]	; (94b4 <cycle+0x1c0>)
    9408:	47b0      	blx	r6
    940a:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
    940c:	2900      	cmp	r1, #0
    940e:	dd12      	ble.n	9436 <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
    9410:	9a07      	ldr	r2, [sp, #28]
    9412:	0020      	movs	r0, r4
    9414:	4b28      	ldr	r3, [pc, #160]	; (94b8 <cycle+0x1c4>)
    9416:	4798      	blx	r3
    9418:	0006      	movs	r6, r0
                if (rc == FAILURE)
    941a:	1c43      	adds	r3, r0, #1
    941c:	d132      	bne.n	9484 <cycle+0x190>
    941e:	e034      	b.n	948a <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
    9420:	ab0c      	add	r3, sp, #48	; 0x30
    9422:	889b      	ldrh	r3, [r3, #4]
    9424:	9300      	str	r3, [sp, #0]
    9426:	2300      	movs	r3, #0
    9428:	2205      	movs	r2, #5
    942a:	68a1      	ldr	r1, [r4, #8]
    942c:	6920      	ldr	r0, [r4, #16]
    942e:	4e21      	ldr	r6, [pc, #132]	; (94b4 <cycle+0x1c0>)
    9430:	47b0      	blx	r6
    9432:	0001      	movs	r1, r0
    9434:	e7ea      	b.n	940c <cycle+0x118>
    9436:	2601      	movs	r6, #1
    9438:	4276      	negs	r6, r6
    943a:	e026      	b.n	948a <cycle+0x196>
        rc = SUCCESS;
    943c:	2600      	movs	r6, #0
    943e:	e021      	b.n	9484 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    9440:	68e2      	ldr	r2, [r4, #12]
    9442:	9200      	str	r2, [sp, #0]
    9444:	aa0c      	add	r2, sp, #48	; 0x30
    9446:	a908      	add	r1, sp, #32
    9448:	a809      	add	r0, sp, #36	; 0x24
    944a:	4e1c      	ldr	r6, [pc, #112]	; (94bc <cycle+0x1c8>)
    944c:	47b0      	blx	r6
    944e:	2801      	cmp	r0, #1
    9450:	d002      	beq.n	9458 <cycle+0x164>
    9452:	2601      	movs	r6, #1
    9454:	4276      	negs	r6, r6
    9456:	e01b      	b.n	9490 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
    9458:	ab0c      	add	r3, sp, #48	; 0x30
    945a:	881b      	ldrh	r3, [r3, #0]
    945c:	9300      	str	r3, [sp, #0]
    945e:	2300      	movs	r3, #0
    9460:	2206      	movs	r2, #6
    9462:	68a1      	ldr	r1, [r4, #8]
    9464:	6920      	ldr	r0, [r4, #16]
    9466:	4e13      	ldr	r6, [pc, #76]	; (94b4 <cycle+0x1c0>)
    9468:	47b0      	blx	r6
    946a:	2800      	cmp	r0, #0
    946c:	ddf1      	ble.n	9452 <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
    946e:	9a07      	ldr	r2, [sp, #28]
    9470:	0001      	movs	r1, r0
    9472:	0020      	movs	r0, r4
    9474:	4b10      	ldr	r3, [pc, #64]	; (94b8 <cycle+0x1c4>)
    9476:	4798      	blx	r3
    9478:	1e06      	subs	r6, r0, #0
    947a:	d1ea      	bne.n	9452 <cycle+0x15e>
    947c:	e002      	b.n	9484 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
    947e:	2300      	movs	r3, #0
    9480:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
    9482:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
    9484:	0020      	movs	r0, r4
    9486:	4b0e      	ldr	r3, [pc, #56]	; (94c0 <cycle+0x1cc>)
    9488:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
    948a:	2e00      	cmp	r6, #0
    948c:	d100      	bne.n	9490 <cycle+0x19c>
    948e:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
    9490:	0030      	movs	r0, r6
    9492:	b010      	add	sp, #64	; 0x40
    9494:	bc1c      	pop	{r2, r3, r4}
    9496:	4690      	mov	r8, r2
    9498:	4699      	mov	r9, r3
    949a:	46a3      	mov	fp, r4
    949c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    949e:	4d09      	ldr	r5, [pc, #36]	; (94c4 <cycle+0x1d0>)
        rc = SUCCESS;
    94a0:	2600      	movs	r6, #0
    94a2:	e7ef      	b.n	9484 <cycle+0x190>
    94a4:	000098e1 	.word	0x000098e1
    94a8:	00009f55 	.word	0x00009f55
    94ac:	00009e4d 	.word	0x00009e4d
    94b0:	00009175 	.word	0x00009175
    94b4:	0000a289 	.word	0x0000a289
    94b8:	000090c1 	.word	0x000090c1
    94bc:	00009ee5 	.word	0x00009ee5
    94c0:	00009279 	.word	0x00009279
    94c4:	0000ffff 	.word	0x0000ffff

000094c8 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
    94c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    94ca:	b083      	sub	sp, #12
    94cc:	9001      	str	r0, [sp, #4]
    94ce:	000e      	movs	r6, r1
    94d0:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
    94d2:	2401      	movs	r4, #1
    94d4:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
    94d6:	4f08      	ldr	r7, [pc, #32]	; (94f8 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
    94d8:	4d08      	ldr	r5, [pc, #32]	; (94fc <waitfor+0x34>)
        if (TimerIsExpired(timer))
    94da:	9800      	ldr	r0, [sp, #0]
    94dc:	47b8      	blx	r7
    94de:	2800      	cmp	r0, #0
    94e0:	d106      	bne.n	94f0 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
    94e2:	9900      	ldr	r1, [sp, #0]
    94e4:	9801      	ldr	r0, [sp, #4]
    94e6:	47a8      	blx	r5
    94e8:	0004      	movs	r4, r0
    94ea:	42b0      	cmp	r0, r6
    94ec:	d1f5      	bne.n	94da <waitfor+0x12>
    94ee:	0034      	movs	r4, r6
    
    return rc;
}
    94f0:	0020      	movs	r0, r4
    94f2:	b003      	add	sp, #12
    94f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94f6:	46c0      	nop			; (mov r8, r8)
    94f8:	000098ad 	.word	0x000098ad
    94fc:	000092f5 	.word	0x000092f5

00009500 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
    9500:	b530      	push	{r4, r5, lr}
    9502:	b09b      	sub	sp, #108	; 0x6c
    9504:	0004      	movs	r4, r0
    9506:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
    9508:	2258      	movs	r2, #88	; 0x58
    950a:	4928      	ldr	r1, [pc, #160]	; (95ac <MQTTConnect+0xac>)
    950c:	a802      	add	r0, sp, #8
    950e:	4b28      	ldr	r3, [pc, #160]	; (95b0 <MQTTConnect+0xb0>)
    9510:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
    9512:	6a23      	ldr	r3, [r4, #32]
    9514:	2b00      	cmp	r3, #0
    9516:	d13f      	bne.n	9598 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
    9518:	a818      	add	r0, sp, #96	; 0x60
    951a:	4b26      	ldr	r3, [pc, #152]	; (95b4 <MQTTConnect+0xb4>)
    951c:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
    951e:	6861      	ldr	r1, [r4, #4]
    9520:	a818      	add	r0, sp, #96	; 0x60
    9522:	4b25      	ldr	r3, [pc, #148]	; (95b8 <MQTTConnect+0xb8>)
    9524:	4798      	blx	r3

    if (options == 0)
    9526:	2d00      	cmp	r5, #0
    9528:	d015      	beq.n	9556 <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
    952a:	8b29      	ldrh	r1, [r5, #24]
    952c:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
    952e:	0020      	movs	r0, r4
    9530:	3054      	adds	r0, #84	; 0x54
    9532:	4b22      	ldr	r3, [pc, #136]	; (95bc <MQTTConnect+0xbc>)
    9534:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
    9536:	002a      	movs	r2, r5
    9538:	68a1      	ldr	r1, [r4, #8]
    953a:	6920      	ldr	r0, [r4, #16]
    953c:	4b20      	ldr	r3, [pc, #128]	; (95c0 <MQTTConnect+0xc0>)
    953e:	4798      	blx	r3
    9540:	2800      	cmp	r0, #0
    9542:	dd2c      	ble.n	959e <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
    9544:	aa18      	add	r2, sp, #96	; 0x60
    9546:	0001      	movs	r1, r0
    9548:	0020      	movs	r0, r4
    954a:	4b1e      	ldr	r3, [pc, #120]	; (95c4 <MQTTConnect+0xc4>)
    954c:	4798      	blx	r3
    954e:	2800      	cmp	r0, #0
    9550:	d003      	beq.n	955a <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
    9552:	b01b      	add	sp, #108	; 0x6c
    9554:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
    9556:	ad02      	add	r5, sp, #8
    9558:	e7e7      	b.n	952a <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
    955a:	aa18      	add	r2, sp, #96	; 0x60
    955c:	2102      	movs	r1, #2
    955e:	0020      	movs	r0, r4
    9560:	4b19      	ldr	r3, [pc, #100]	; (95c8 <MQTTConnect+0xc8>)
    9562:	4798      	blx	r3
    9564:	2802      	cmp	r0, #2
    9566:	d11d      	bne.n	95a4 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
    9568:	466b      	mov	r3, sp
    956a:	1d99      	adds	r1, r3, #6
    956c:	23ff      	movs	r3, #255	; 0xff
    956e:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
    9570:	466b      	mov	r3, sp
    9572:	1dd8      	adds	r0, r3, #7
    9574:	2300      	movs	r3, #0
    9576:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
    9578:	68e3      	ldr	r3, [r4, #12]
    957a:	6962      	ldr	r2, [r4, #20]
    957c:	4d13      	ldr	r5, [pc, #76]	; (95cc <MQTTConnect+0xcc>)
    957e:	47a8      	blx	r5
    9580:	2801      	cmp	r0, #1
    9582:	d002      	beq.n	958a <MQTTConnect+0x8a>
            rc = FAILURE;
    9584:	2001      	movs	r0, #1
    9586:	4240      	negs	r0, r0
    9588:	e7e3      	b.n	9552 <MQTTConnect+0x52>
            rc = connack_rc;
    958a:	466b      	mov	r3, sp
    958c:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
    958e:	2800      	cmp	r0, #0
    9590:	d1df      	bne.n	9552 <MQTTConnect+0x52>
        c->isconnected = 1;
    9592:	2301      	movs	r3, #1
    9594:	6223      	str	r3, [r4, #32]
    return rc;
    9596:	e7dc      	b.n	9552 <MQTTConnect+0x52>
    int rc = FAILURE;
    9598:	2001      	movs	r0, #1
    959a:	4240      	negs	r0, r0
    959c:	e7d9      	b.n	9552 <MQTTConnect+0x52>
    959e:	2001      	movs	r0, #1
    95a0:	4240      	negs	r0, r0
    95a2:	e7d6      	b.n	9552 <MQTTConnect+0x52>
        rc = FAILURE;
    95a4:	2001      	movs	r0, #1
    95a6:	4240      	negs	r0, r0
    95a8:	e7d3      	b.n	9552 <MQTTConnect+0x52>
    95aa:	46c0      	nop			; (mov r8, r8)
    95ac:	0000fdd8 	.word	0x0000fdd8
    95b0:	0000d33f 	.word	0x0000d33f
    95b4:	000098f5 	.word	0x000098f5
    95b8:	000098bd 	.word	0x000098bd
    95bc:	000098cd 	.word	0x000098cd
    95c0:	00009c69 	.word	0x00009c69
    95c4:	000090c1 	.word	0x000090c1
    95c8:	000094c9 	.word	0x000094c9
    95cc:	00009db1 	.word	0x00009db1

000095d0 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
    95d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    95d2:	b08f      	sub	sp, #60	; 0x3c
    95d4:	0005      	movs	r5, r0
    95d6:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
    95d8:	2300      	movs	r3, #0
    95da:	930a      	str	r3, [sp, #40]	; 0x28
    95dc:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
    95de:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
    95e0:	6a03      	ldr	r3, [r0, #32]
    95e2:	2b00      	cmp	r3, #0
    95e4:	d062      	beq.n	96ac <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
    95e6:	a80c      	add	r0, sp, #48	; 0x30
    95e8:	4b36      	ldr	r3, [pc, #216]	; (96c4 <MQTTPublish+0xf4>)
    95ea:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    95ec:	6869      	ldr	r1, [r5, #4]
    95ee:	a80c      	add	r0, sp, #48	; 0x30
    95f0:	4b35      	ldr	r3, [pc, #212]	; (96c8 <MQTTPublish+0xf8>)
    95f2:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
    95f4:	7823      	ldrb	r3, [r4, #0]
    95f6:	3b01      	subs	r3, #1
    95f8:	2b01      	cmp	r3, #1
    95fa:	d921      	bls.n	9640 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
    95fc:	7823      	ldrb	r3, [r4, #0]
    95fe:	68e2      	ldr	r2, [r4, #12]
    9600:	9206      	str	r2, [sp, #24]
    9602:	68a2      	ldr	r2, [r4, #8]
    9604:	9205      	str	r2, [sp, #20]
    9606:	aa09      	add	r2, sp, #36	; 0x24
    9608:	a902      	add	r1, sp, #8
    960a:	cac1      	ldmia	r2!, {r0, r6, r7}
    960c:	c1c1      	stmia	r1!, {r0, r6, r7}
    960e:	88a2      	ldrh	r2, [r4, #4]
    9610:	9201      	str	r2, [sp, #4]
    9612:	7862      	ldrb	r2, [r4, #1]
    9614:	9200      	str	r2, [sp, #0]
    9616:	2200      	movs	r2, #0
    9618:	68a9      	ldr	r1, [r5, #8]
    961a:	6928      	ldr	r0, [r5, #16]
    961c:	4e2b      	ldr	r6, [pc, #172]	; (96cc <MQTTPublish+0xfc>)
    961e:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
    9620:	2800      	cmp	r0, #0
    9622:	dd46      	ble.n	96b2 <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
    9624:	aa0c      	add	r2, sp, #48	; 0x30
    9626:	0001      	movs	r1, r0
    9628:	0028      	movs	r0, r5
    962a:	4b29      	ldr	r3, [pc, #164]	; (96d0 <MQTTPublish+0x100>)
    962c:	4798      	blx	r3
    962e:	2800      	cmp	r0, #0
    9630:	d104      	bne.n	963c <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
    9632:	7823      	ldrb	r3, [r4, #0]
    9634:	2b01      	cmp	r3, #1
    9636:	d00d      	beq.n	9654 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
    9638:	2b02      	cmp	r3, #2
    963a:	d021      	beq.n	9680 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    963c:	b00f      	add	sp, #60	; 0x3c
    963e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    9640:	682b      	ldr	r3, [r5, #0]
    9642:	4a24      	ldr	r2, [pc, #144]	; (96d4 <MQTTPublish+0x104>)
    9644:	4293      	cmp	r3, r2
    9646:	d003      	beq.n	9650 <MQTTPublish+0x80>
    9648:	3301      	adds	r3, #1
    964a:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
    964c:	80a3      	strh	r3, [r4, #4]
    964e:	e7d5      	b.n	95fc <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    9650:	2301      	movs	r3, #1
    9652:	e7fa      	b.n	964a <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
    9654:	aa0c      	add	r2, sp, #48	; 0x30
    9656:	2104      	movs	r1, #4
    9658:	0028      	movs	r0, r5
    965a:	4b1f      	ldr	r3, [pc, #124]	; (96d8 <MQTTPublish+0x108>)
    965c:	4798      	blx	r3
    965e:	2804      	cmp	r0, #4
    9660:	d12a      	bne.n	96b8 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    9662:	696b      	ldr	r3, [r5, #20]
    9664:	68ea      	ldr	r2, [r5, #12]
    9666:	9200      	str	r2, [sp, #0]
    9668:	2222      	movs	r2, #34	; 0x22
    966a:	446a      	add	r2, sp
    966c:	a908      	add	r1, sp, #32
    966e:	301d      	adds	r0, #29
    9670:	4468      	add	r0, sp
    9672:	4c1a      	ldr	r4, [pc, #104]	; (96dc <MQTTPublish+0x10c>)
    9674:	47a0      	blx	r4
    9676:	3801      	subs	r0, #1
    9678:	1e43      	subs	r3, r0, #1
    967a:	4198      	sbcs	r0, r3
    967c:	4240      	negs	r0, r0
    967e:	e7dd      	b.n	963c <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
    9680:	aa0c      	add	r2, sp, #48	; 0x30
    9682:	2107      	movs	r1, #7
    9684:	0028      	movs	r0, r5
    9686:	4b14      	ldr	r3, [pc, #80]	; (96d8 <MQTTPublish+0x108>)
    9688:	4798      	blx	r3
    968a:	2807      	cmp	r0, #7
    968c:	d117      	bne.n	96be <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    968e:	696b      	ldr	r3, [r5, #20]
    9690:	68ea      	ldr	r2, [r5, #12]
    9692:	9200      	str	r2, [sp, #0]
    9694:	2222      	movs	r2, #34	; 0x22
    9696:	446a      	add	r2, sp
    9698:	a908      	add	r1, sp, #32
    969a:	301a      	adds	r0, #26
    969c:	4468      	add	r0, sp
    969e:	4c0f      	ldr	r4, [pc, #60]	; (96dc <MQTTPublish+0x10c>)
    96a0:	47a0      	blx	r4
    96a2:	3801      	subs	r0, #1
    96a4:	1e43      	subs	r3, r0, #1
    96a6:	4198      	sbcs	r0, r3
    96a8:	4240      	negs	r0, r0
    96aa:	e7c7      	b.n	963c <MQTTPublish+0x6c>
    int rc = FAILURE;
    96ac:	2001      	movs	r0, #1
    96ae:	4240      	negs	r0, r0
    96b0:	e7c4      	b.n	963c <MQTTPublish+0x6c>
    96b2:	2001      	movs	r0, #1
    96b4:	4240      	negs	r0, r0
    96b6:	e7c1      	b.n	963c <MQTTPublish+0x6c>
            rc = FAILURE;
    96b8:	2001      	movs	r0, #1
    96ba:	4240      	negs	r0, r0
    96bc:	e7be      	b.n	963c <MQTTPublish+0x6c>
            rc = FAILURE;
    96be:	2001      	movs	r0, #1
    96c0:	4240      	negs	r0, r0
    return rc;
    96c2:	e7bb      	b.n	963c <MQTTPublish+0x6c>
    96c4:	000098f5 	.word	0x000098f5
    96c8:	000098bd 	.word	0x000098bd
    96cc:	0000a1c1 	.word	0x0000a1c1
    96d0:	000090c1 	.word	0x000090c1
    96d4:	0000ffff 	.word	0x0000ffff
    96d8:	000094c9 	.word	0x000094c9
    96dc:	00009ee5 	.word	0x00009ee5

000096e0 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
    96e0:	b510      	push	{r4, lr}
    96e2:	0004      	movs	r4, r0
	close(n->socket);
    96e4:	2000      	movs	r0, #0
    96e6:	5620      	ldrsb	r0, [r4, r0]
    96e8:	4b04      	ldr	r3, [pc, #16]	; (96fc <WINC1500_disconnect+0x1c>)
    96ea:	4798      	blx	r3
	n->socket=-1;
    96ec:	2301      	movs	r3, #1
    96ee:	425b      	negs	r3, r3
    96f0:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
    96f2:	2200      	movs	r2, #0
    96f4:	4b02      	ldr	r3, [pc, #8]	; (9700 <WINC1500_disconnect+0x20>)
    96f6:	701a      	strb	r2, [r3, #0]
}
    96f8:	bd10      	pop	{r4, pc}
    96fa:	46c0      	nop			; (mov r8, r8)
    96fc:	0000722d 	.word	0x0000722d
    9700:	200004bc 	.word	0x200004bc

00009704 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
    9704:	b570      	push	{r4, r5, r6, lr}
    9706:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
    9708:	2200      	movs	r2, #0
    970a:	4b0d      	ldr	r3, [pc, #52]	; (9740 <WINC1500_write+0x3c>)
    970c:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
    970e:	b2b2      	uxth	r2, r6
    9710:	7800      	ldrb	r0, [r0, #0]
    9712:	b240      	sxtb	r0, r0
    9714:	2300      	movs	r3, #0
    9716:	4c0b      	ldr	r4, [pc, #44]	; (9744 <WINC1500_write+0x40>)
    9718:	47a0      	blx	r4
    971a:	2800      	cmp	r0, #0
    971c:	d10c      	bne.n	9738 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
    971e:	4b08      	ldr	r3, [pc, #32]	; (9740 <WINC1500_write+0x3c>)
    9720:	781b      	ldrb	r3, [r3, #0]
    9722:	2b00      	cmp	r3, #0
    9724:	d106      	bne.n	9734 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
    9726:	4d08      	ldr	r5, [pc, #32]	; (9748 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
    9728:	4c05      	ldr	r4, [pc, #20]	; (9740 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
    972a:	2000      	movs	r0, #0
    972c:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
    972e:	7823      	ldrb	r3, [r4, #0]
    9730:	2b00      	cmp	r3, #0
    9732:	d0fa      	beq.n	972a <WINC1500_write+0x26>
}
    9734:	0030      	movs	r0, r6
    9736:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
    9738:	2601      	movs	r6, #1
    973a:	4276      	negs	r6, r6
    973c:	e7fa      	b.n	9734 <WINC1500_write+0x30>
    973e:	46c0      	nop			; (mov r8, r8)
    9740:	200004bf 	.word	0x200004bf
    9744:	00007101 	.word	0x00007101
    9748:	00004dc1 	.word	0x00004dc1

0000974c <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
    974c:	b5f0      	push	{r4, r5, r6, r7, lr}
    974e:	b083      	sub	sp, #12
    9750:	9101      	str	r1, [sp, #4]
    9752:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
    9754:	2b00      	cmp	r3, #0
    9756:	d100      	bne.n	975a <WINC1500_read+0xe>
    9758:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
    975a:	4a22      	ldr	r2, [pc, #136]	; (97e4 <WINC1500_read+0x98>)
    975c:	6812      	ldr	r2, [r2, #0]
    975e:	2a00      	cmp	r2, #0
    9760:	d013      	beq.n	978a <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
    9762:	4b20      	ldr	r3, [pc, #128]	; (97e4 <WINC1500_read+0x98>)
    9764:	681d      	ldr	r5, [r3, #0]
    9766:	42a5      	cmp	r5, r4
    9768:	db39      	blt.n	97de <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
    976a:	4e1f      	ldr	r6, [pc, #124]	; (97e8 <WINC1500_read+0x9c>)
    976c:	6837      	ldr	r7, [r6, #0]
    976e:	491f      	ldr	r1, [pc, #124]	; (97ec <WINC1500_read+0xa0>)
    9770:	19c9      	adds	r1, r1, r7
    9772:	0022      	movs	r2, r4
    9774:	9801      	ldr	r0, [sp, #4]
    9776:	4b1e      	ldr	r3, [pc, #120]	; (97f0 <WINC1500_read+0xa4>)
    9778:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
    977a:	1b2d      	subs	r5, r5, r4
    977c:	4b19      	ldr	r3, [pc, #100]	; (97e4 <WINC1500_read+0x98>)
    977e:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
    9780:	193f      	adds	r7, r7, r4
    9782:	6037      	str	r7, [r6, #0]
  return len;
    9784:	0020      	movs	r0, r4
}
    9786:	b003      	add	sp, #12
    9788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
    978a:	2100      	movs	r1, #0
    978c:	4a19      	ldr	r2, [pc, #100]	; (97f4 <WINC1500_read+0xa8>)
    978e:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
    9790:	7800      	ldrb	r0, [r0, #0]
    9792:	b240      	sxtb	r0, r0
    9794:	2280      	movs	r2, #128	; 0x80
    9796:	0052      	lsls	r2, r2, #1
    9798:	4914      	ldr	r1, [pc, #80]	; (97ec <WINC1500_read+0xa0>)
    979a:	4d17      	ldr	r5, [pc, #92]	; (97f8 <WINC1500_read+0xac>)
    979c:	47a8      	blx	r5
    979e:	2800      	cmp	r0, #0
    97a0:	d11a      	bne.n	97d8 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
    97a2:	4b14      	ldr	r3, [pc, #80]	; (97f4 <WINC1500_read+0xa8>)
    97a4:	781b      	ldrb	r3, [r3, #0]
    97a6:	2b00      	cmp	r3, #0
    97a8:	d106      	bne.n	97b8 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
    97aa:	4f14      	ldr	r7, [pc, #80]	; (97fc <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
    97ac:	4d11      	ldr	r5, [pc, #68]	; (97f4 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
    97ae:	2000      	movs	r0, #0
    97b0:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
    97b2:	782b      	ldrb	r3, [r5, #0]
    97b4:	2b00      	cmp	r3, #0
    97b6:	d0fa      	beq.n	97ae <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
    97b8:	4b11      	ldr	r3, [pc, #68]	; (9800 <WINC1500_read+0xb4>)
    97ba:	6818      	ldr	r0, [r3, #0]
    97bc:	2800      	cmp	r0, #0
    97be:	dd05      	ble.n	97cc <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
    97c0:	4b08      	ldr	r3, [pc, #32]	; (97e4 <WINC1500_read+0x98>)
    97c2:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
    97c4:	2200      	movs	r2, #0
    97c6:	4b08      	ldr	r3, [pc, #32]	; (97e8 <WINC1500_read+0x9c>)
    97c8:	601a      	str	r2, [r3, #0]
    97ca:	e7ca      	b.n	9762 <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
    97cc:	2300      	movs	r3, #0
    97ce:	4a05      	ldr	r2, [pc, #20]	; (97e4 <WINC1500_read+0x98>)
    97d0:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
    97d2:	4a05      	ldr	r2, [pc, #20]	; (97e8 <WINC1500_read+0x9c>)
    97d4:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
    97d6:	e7d6      	b.n	9786 <WINC1500_read+0x3a>
		  return -1;
    97d8:	2001      	movs	r0, #1
    97da:	4240      	negs	r0, r0
    97dc:	e7d3      	b.n	9786 <WINC1500_read+0x3a>
	  return -1;
    97de:	2001      	movs	r0, #1
    97e0:	4240      	negs	r0, r0
    97e2:	e7d0      	b.n	9786 <WINC1500_read+0x3a>
    97e4:	200005cc 	.word	0x200005cc
    97e8:	200005d0 	.word	0x200005d0
    97ec:	200004c0 	.word	0x200004c0
    97f0:	0000d33f 	.word	0x0000d33f
    97f4:	200004be 	.word	0x200004be
    97f8:	00007199 	.word	0x00007199
    97fc:	00004dc1 	.word	0x00004dc1
    9800:	200005c4 	.word	0x200005c4

00009804 <dnsResolveCallback>:
{
    9804:	b510      	push	{r4, lr}
    9806:	0002      	movs	r2, r0
    9808:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
    980a:	4b08      	ldr	r3, [pc, #32]	; (982c <dnsResolveCallback+0x28>)
    980c:	781b      	ldrb	r3, [r3, #0]
    980e:	2b00      	cmp	r3, #0
    9810:	d10b      	bne.n	982a <dnsResolveCallback+0x26>
    9812:	4b07      	ldr	r3, [pc, #28]	; (9830 <dnsResolveCallback+0x2c>)
    9814:	6818      	ldr	r0, [r3, #0]
    9816:	0011      	movs	r1, r2
    9818:	4b06      	ldr	r3, [pc, #24]	; (9834 <dnsResolveCallback+0x30>)
    981a:	4798      	blx	r3
    981c:	2800      	cmp	r0, #0
    981e:	d104      	bne.n	982a <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
    9820:	4b05      	ldr	r3, [pc, #20]	; (9838 <dnsResolveCallback+0x34>)
    9822:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
    9824:	2201      	movs	r2, #1
    9826:	4b01      	ldr	r3, [pc, #4]	; (982c <dnsResolveCallback+0x28>)
    9828:	701a      	strb	r2, [r3, #0]
}
    982a:	bd10      	pop	{r4, pc}
    982c:	200004bd 	.word	0x200004bd
    9830:	200005c8 	.word	0x200005c8
    9834:	0000d83d 	.word	0x0000d83d
    9838:	200005c0 	.word	0x200005c0

0000983c <tcpClientSocketEventHandler>:
{
    983c:	b530      	push	{r4, r5, lr}
    983e:	4b12      	ldr	r3, [pc, #72]	; (9888 <tcpClientSocketEventHandler+0x4c>)
    9840:	24a8      	movs	r4, #168	; 0xa8
    9842:	00a4      	lsls	r4, r4, #2
    9844:	191d      	adds	r5, r3, r4
    9846:	e002      	b.n	984e <tcpClientSocketEventHandler+0x12>
    9848:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    984a:	42ab      	cmp	r3, r5
    984c:	d00b      	beq.n	9866 <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
    984e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    9850:	2c00      	cmp	r4, #0
    9852:	d0f9      	beq.n	9848 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
    9854:	6a24      	ldr	r4, [r4, #32]
    9856:	4284      	cmp	r4, r0
    9858:	d1f6      	bne.n	9848 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
    985a:	2906      	cmp	r1, #6
    985c:	d00c      	beq.n	9878 <tcpClientSocketEventHandler+0x3c>
    985e:	2907      	cmp	r1, #7
    9860:	d006      	beq.n	9870 <tcpClientSocketEventHandler+0x34>
    9862:	2905      	cmp	r1, #5
    9864:	d000      	beq.n	9868 <tcpClientSocketEventHandler+0x2c>
}
    9866:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
    9868:	2201      	movs	r2, #1
    986a:	4b08      	ldr	r3, [pc, #32]	; (988c <tcpClientSocketEventHandler+0x50>)
    986c:	701a      	strb	r2, [r3, #0]
			break;
    986e:	e7fa      	b.n	9866 <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
    9870:	2201      	movs	r2, #1
    9872:	4b07      	ldr	r3, [pc, #28]	; (9890 <tcpClientSocketEventHandler+0x54>)
    9874:	701a      	strb	r2, [r3, #0]
			break;
    9876:	e7f6      	b.n	9866 <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
    9878:	2304      	movs	r3, #4
    987a:	5ed2      	ldrsh	r2, [r2, r3]
    987c:	4b05      	ldr	r3, [pc, #20]	; (9894 <tcpClientSocketEventHandler+0x58>)
    987e:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
    9880:	2201      	movs	r2, #1
    9882:	4b05      	ldr	r3, [pc, #20]	; (9898 <tcpClientSocketEventHandler+0x5c>)
    9884:	701a      	strb	r2, [r3, #0]
}
    9886:	e7ee      	b.n	9866 <tcpClientSocketEventHandler+0x2a>
    9888:	200005d4 	.word	0x200005d4
    988c:	200004bc 	.word	0x200004bc
    9890:	200004bf 	.word	0x200004bf
    9894:	200005c4 	.word	0x200005c4
    9898:	200004be 	.word	0x200004be

0000989c <SysTick_Handler>:
	MilliTimer++;
    989c:	4a02      	ldr	r2, [pc, #8]	; (98a8 <SysTick_Handler+0xc>)
    989e:	6813      	ldr	r3, [r2, #0]
    98a0:	3301      	adds	r3, #1
    98a2:	6013      	str	r3, [r2, #0]
}
    98a4:	4770      	bx	lr
    98a6:	46c0      	nop			; (mov r8, r8)
    98a8:	200004b8 	.word	0x200004b8

000098ac <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
    98ac:	6840      	ldr	r0, [r0, #4]
    98ae:	4b02      	ldr	r3, [pc, #8]	; (98b8 <TimerIsExpired+0xc>)
    98b0:	681b      	ldr	r3, [r3, #0]
    98b2:	1ac0      	subs	r0, r0, r3
	return (left < 0);
    98b4:	0fc0      	lsrs	r0, r0, #31
}
    98b6:	4770      	bx	lr
    98b8:	200004b8 	.word	0x200004b8

000098bc <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
    98bc:	4b02      	ldr	r3, [pc, #8]	; (98c8 <TimerCountdownMS+0xc>)
    98be:	681b      	ldr	r3, [r3, #0]
    98c0:	1859      	adds	r1, r3, r1
    98c2:	6041      	str	r1, [r0, #4]
}
    98c4:	4770      	bx	lr
    98c6:	46c0      	nop			; (mov r8, r8)
    98c8:	200004b8 	.word	0x200004b8

000098cc <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
    98cc:	23fa      	movs	r3, #250	; 0xfa
    98ce:	009b      	lsls	r3, r3, #2
    98d0:	4359      	muls	r1, r3
    98d2:	4b02      	ldr	r3, [pc, #8]	; (98dc <TimerCountdown+0x10>)
    98d4:	681b      	ldr	r3, [r3, #0]
    98d6:	18c9      	adds	r1, r1, r3
    98d8:	6041      	str	r1, [r0, #4]
}
    98da:	4770      	bx	lr
    98dc:	200004b8 	.word	0x200004b8

000098e0 <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
    98e0:	6840      	ldr	r0, [r0, #4]
    98e2:	4b03      	ldr	r3, [pc, #12]	; (98f0 <TimerLeftMS+0x10>)
    98e4:	681b      	ldr	r3, [r3, #0]
    98e6:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
    98e8:	43c3      	mvns	r3, r0
    98ea:	17db      	asrs	r3, r3, #31
    98ec:	4018      	ands	r0, r3
}
    98ee:	4770      	bx	lr
    98f0:	200004b8 	.word	0x200004b8

000098f4 <TimerInit>:
	timer->end_time = 0;
    98f4:	2300      	movs	r3, #0
    98f6:	6043      	str	r3, [r0, #4]
}
    98f8:	4770      	bx	lr
	...

000098fc <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
    98fc:	2301      	movs	r3, #1
    98fe:	425b      	negs	r3, r3
    9900:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
    9902:	4b03      	ldr	r3, [pc, #12]	; (9910 <NetworkInit+0x14>)
    9904:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
    9906:	4b03      	ldr	r3, [pc, #12]	; (9914 <NetworkInit+0x18>)
    9908:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
    990a:	4b03      	ldr	r3, [pc, #12]	; (9918 <NetworkInit+0x1c>)
    990c:	6103      	str	r3, [r0, #16]
}
    990e:	4770      	bx	lr
    9910:	0000974d 	.word	0x0000974d
    9914:	00009705 	.word	0x00009705
    9918:	000096e1 	.word	0x000096e1

0000991c <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
    991c:	b5f0      	push	{r4, r5, r6, r7, lr}
    991e:	b087      	sub	sp, #28
    9920:	0006      	movs	r6, r0
    9922:	0015      	movs	r5, r2
    9924:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
    9926:	4c25      	ldr	r4, [pc, #148]	; (99bc <ConnectNetwork+0xa0>)
    9928:	2300      	movs	r3, #0
    992a:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
    992c:	4b24      	ldr	r3, [pc, #144]	; (99c0 <ConnectNetwork+0xa4>)
    992e:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
    9930:	0008      	movs	r0, r1
    9932:	4b24      	ldr	r3, [pc, #144]	; (99c4 <ConnectNetwork+0xa8>)
    9934:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
    9936:	7823      	ldrb	r3, [r4, #0]
    9938:	2b00      	cmp	r3, #0
    993a:	d106      	bne.n	994a <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
    993c:	4f22      	ldr	r7, [pc, #136]	; (99c8 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
    993e:	4c1f      	ldr	r4, [pc, #124]	; (99bc <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
    9940:	2000      	movs	r0, #0
    9942:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
    9944:	7823      	ldrb	r3, [r4, #0]
    9946:	2b00      	cmp	r3, #0
    9948:	d0fa      	beq.n	9940 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
    994a:	4b20      	ldr	r3, [pc, #128]	; (99cc <ConnectNetwork+0xb0>)
    994c:	681a      	ldr	r2, [r3, #0]
    994e:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
    9950:	2302      	movs	r3, #2
    9952:	a902      	add	r1, sp, #8
    9954:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
    9956:	022b      	lsls	r3, r5, #8
    9958:	491d      	ldr	r1, [pc, #116]	; (99d0 <ConnectNetwork+0xb4>)
    995a:	400b      	ands	r3, r1
    995c:	b2ad      	uxth	r5, r5
    995e:	0a2d      	lsrs	r5, r5, #8
    9960:	431d      	orrs	r5, r3
    9962:	ab02      	add	r3, sp, #8
    9964:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
    9966:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
    9968:	6833      	ldr	r3, [r6, #0]
    996a:	2b00      	cmp	r3, #0
    996c:	db16      	blt.n	999c <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
    996e:	6830      	ldr	r0, [r6, #0]
    9970:	1c43      	adds	r3, r0, #1
    9972:	d01b      	beq.n	99ac <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
    9974:	b240      	sxtb	r0, r0
    9976:	2210      	movs	r2, #16
    9978:	a902      	add	r1, sp, #8
    997a:	4b16      	ldr	r3, [pc, #88]	; (99d4 <ConnectNetwork+0xb8>)
    997c:	4798      	blx	r3
    997e:	2800      	cmp	r0, #0
    9980:	d119      	bne.n	99b6 <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
    9982:	2200      	movs	r2, #0
    9984:	4b14      	ldr	r3, [pc, #80]	; (99d8 <ConnectNetwork+0xbc>)
    9986:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
    9988:	4d0f      	ldr	r5, [pc, #60]	; (99c8 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
    998a:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
    998c:	2000      	movs	r0, #0
    998e:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
    9990:	7823      	ldrb	r3, [r4, #0]
    9992:	2b00      	cmp	r3, #0
    9994:	d0fa      	beq.n	998c <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
    9996:	2000      	movs	r0, #0
    9998:	b007      	add	sp, #28
    999a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
    999c:	466b      	mov	r3, sp
    999e:	791a      	ldrb	r2, [r3, #4]
    99a0:	2101      	movs	r1, #1
    99a2:	2002      	movs	r0, #2
    99a4:	4b0d      	ldr	r3, [pc, #52]	; (99dc <ConnectNetwork+0xc0>)
    99a6:	4798      	blx	r3
    99a8:	6030      	str	r0, [r6, #0]
    99aa:	e7e0      	b.n	996e <ConnectNetwork+0x52>
   close(n->socket);
    99ac:	4b0c      	ldr	r3, [pc, #48]	; (99e0 <ConnectNetwork+0xc4>)
    99ae:	4798      	blx	r3
   return SOCK_ERR_INVALID;
    99b0:	2009      	movs	r0, #9
    99b2:	4240      	negs	r0, r0
    99b4:	e7f0      	b.n	9998 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
    99b6:	2009      	movs	r0, #9
    99b8:	4240      	negs	r0, r0
    99ba:	e7ed      	b.n	9998 <ConnectNetwork+0x7c>
    99bc:	200004bd 	.word	0x200004bd
    99c0:	200005c8 	.word	0x200005c8
    99c4:	000072c1 	.word	0x000072c1
    99c8:	00004dc1 	.word	0x00004dc1
    99cc:	200005c0 	.word	0x200005c0
    99d0:	00ffff00 	.word	0x00ffff00
    99d4:	00007071 	.word	0x00007071
    99d8:	200004bc 	.word	0x200004bc
    99dc:	00006de9 	.word	0x00006de9
    99e0:	0000722d 	.word	0x0000722d

000099e4 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
    99e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    99e6:	b085      	sub	sp, #20
    99e8:	0006      	movs	r6, r0
    99ea:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
    99ec:	2800      	cmp	r0, #0
    99ee:	d03d      	beq.n	9a6c <mqtt_init+0x88>
    99f0:	2900      	cmp	r1, #0
    99f2:	d03e      	beq.n	9a72 <mqtt_init+0x8e>
    99f4:	690b      	ldr	r3, [r1, #16]
    99f6:	2b00      	cmp	r3, #0
    99f8:	d03e      	beq.n	9a78 <mqtt_init+0x94>
    99fa:	688b      	ldr	r3, [r1, #8]
    99fc:	2b00      	cmp	r3, #0
    99fe:	d03e      	beq.n	9a7e <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
    9a00:	888b      	ldrh	r3, [r1, #4]
    9a02:	27fa      	movs	r7, #250	; 0xfa
    9a04:	00bf      	lsls	r7, r7, #2
    9a06:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
    9a08:	0004      	movs	r4, r0
    9a0a:	3420      	adds	r4, #32
    9a0c:	0020      	movs	r0, r4
    9a0e:	4b1f      	ldr	r3, [pc, #124]	; (9a8c <mqtt_init+0xa8>)
    9a10:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
    9a12:	1d30      	adds	r0, r6, #4
    9a14:	2218      	movs	r2, #24
    9a16:	0029      	movs	r1, r5
    9a18:	4b1d      	ldr	r3, [pc, #116]	; (9a90 <mqtt_init+0xac>)
    9a1a:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    9a1c:	4b1d      	ldr	r3, [pc, #116]	; (9a94 <mqtt_init+0xb0>)
    9a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    9a20:	2b00      	cmp	r3, #0
    9a22:	d01a      	beq.n	9a5a <mqtt_init+0x76>
    9a24:	4b1b      	ldr	r3, [pc, #108]	; (9a94 <mqtt_init+0xb0>)
    9a26:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    9a28:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    9a2a:	6819      	ldr	r1, [r3, #0]
    9a2c:	2900      	cmp	r1, #0
    9a2e:	d015      	beq.n	9a5c <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    9a30:	3201      	adds	r2, #1
    9a32:	3360      	adds	r3, #96	; 0x60
    9a34:	2a07      	cmp	r2, #7
    9a36:	d1f8      	bne.n	9a2a <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
    9a38:	69f0      	ldr	r0, [r6, #28]
    9a3a:	2800      	cmp	r0, #0
    9a3c:	d022      	beq.n	9a84 <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
    9a3e:	692b      	ldr	r3, [r5, #16]
    9a40:	68ea      	ldr	r2, [r5, #12]
    9a42:	9202      	str	r2, [sp, #8]
    9a44:	68aa      	ldr	r2, [r5, #8]
    9a46:	9201      	str	r2, [sp, #4]
    9a48:	696a      	ldr	r2, [r5, #20]
    9a4a:	9200      	str	r2, [sp, #0]
    9a4c:	003a      	movs	r2, r7
    9a4e:	0021      	movs	r1, r4
    9a50:	4c11      	ldr	r4, [pc, #68]	; (9a98 <mqtt_init+0xb4>)
    9a52:	47a0      	blx	r4
		return SUCCESS;
    9a54:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
    9a56:	b005      	add	sp, #20
    9a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    9a5a:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
    9a5c:	480d      	ldr	r0, [pc, #52]	; (9a94 <mqtt_init+0xb0>)
    9a5e:	0053      	lsls	r3, r2, #1
    9a60:	1899      	adds	r1, r3, r2
    9a62:	0149      	lsls	r1, r1, #5
    9a64:	1841      	adds	r1, r0, r1
    9a66:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
    9a68:	61f1      	str	r1, [r6, #28]
    9a6a:	e7e5      	b.n	9a38 <mqtt_init+0x54>
		return FAILURE;
    9a6c:	2001      	movs	r0, #1
    9a6e:	4240      	negs	r0, r0
    9a70:	e7f1      	b.n	9a56 <mqtt_init+0x72>
    9a72:	2001      	movs	r0, #1
    9a74:	4240      	negs	r0, r0
    9a76:	e7ee      	b.n	9a56 <mqtt_init+0x72>
    9a78:	2001      	movs	r0, #1
    9a7a:	4240      	negs	r0, r0
    9a7c:	e7eb      	b.n	9a56 <mqtt_init+0x72>
    9a7e:	2001      	movs	r0, #1
    9a80:	4240      	negs	r0, r0
    9a82:	e7e8      	b.n	9a56 <mqtt_init+0x72>
		return FAILURE;
    9a84:	2001      	movs	r0, #1
    9a86:	4240      	negs	r0, r0
    9a88:	e7e5      	b.n	9a56 <mqtt_init+0x72>
    9a8a:	46c0      	nop			; (mov r8, r8)
    9a8c:	000098fd 	.word	0x000098fd
    9a90:	0000d33f 	.word	0x0000d33f
    9a94:	200005d4 	.word	0x200005d4
    9a98:	0000913d 	.word	0x0000913d

00009a9c <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
    9a9c:	4b05      	ldr	r3, [pc, #20]	; (9ab4 <mqtt_get_config_defaults+0x18>)
    9a9e:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    9aa0:	2300      	movs	r3, #0
    9aa2:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
    9aa4:	223c      	movs	r2, #60	; 0x3c
    9aa6:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
    9aa8:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
    9aaa:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
    9aac:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
    9aae:	6143      	str	r3, [r0, #20]
}
    9ab0:	4770      	bx	lr
    9ab2:	46c0      	nop			; (mov r8, r8)
    9ab4:	0000075b 	.word	0x0000075b

00009ab8 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
    9ab8:	2800      	cmp	r0, #0
    9aba:	d002      	beq.n	9ac2 <mqtt_register_callback+0xa>
	{
		module->callback = callback;
    9abc:	6001      	str	r1, [r0, #0]
		return SUCCESS;
    9abe:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
    9ac0:	4770      	bx	lr
		return FAILURE;
    9ac2:	2001      	movs	r0, #1
    9ac4:	4240      	negs	r0, r0
    9ac6:	e7fb      	b.n	9ac0 <mqtt_register_callback+0x8>

00009ac8 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    9ac8:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
    9aca:	4b01      	ldr	r3, [pc, #4]	; (9ad0 <mqtt_socket_event_handler+0x8>)
    9acc:	4798      	blx	r3
}
    9ace:	bd10      	pop	{r4, pc}
    9ad0:	0000983d 	.word	0x0000983d

00009ad4 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
    9ad4:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
    9ad6:	4b01      	ldr	r3, [pc, #4]	; (9adc <mqtt_socket_resolve_handler+0x8>)
    9ad8:	4798      	blx	r3
}
    9ada:	bd10      	pop	{r4, pc}
    9adc:	00009805 	.word	0x00009805

00009ae0 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
    9ae0:	b530      	push	{r4, r5, lr}
    9ae2:	b083      	sub	sp, #12
    9ae4:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
    9ae6:	7983      	ldrb	r3, [r0, #6]
    9ae8:	8882      	ldrh	r2, [r0, #4]
    9aea:	3020      	adds	r0, #32
    9aec:	4d06      	ldr	r5, [pc, #24]	; (9b08 <mqtt_connect+0x28>)
    9aee:	47a8      	blx	r5
    9af0:	9001      	str	r0, [sp, #4]
	if(module->callback)
    9af2:	6823      	ldr	r3, [r4, #0]
    9af4:	2b00      	cmp	r3, #0
    9af6:	d003      	beq.n	9b00 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
    9af8:	aa01      	add	r2, sp, #4
    9afa:	2100      	movs	r1, #0
    9afc:	0020      	movs	r0, r4
    9afe:	4798      	blx	r3
	return connResult.sock_connected.result;
}
    9b00:	9801      	ldr	r0, [sp, #4]
    9b02:	b003      	add	sp, #12
    9b04:	bd30      	pop	{r4, r5, pc}
    9b06:	46c0      	nop			; (mov r8, r8)
    9b08:	0000991d 	.word	0x0000991d

00009b0c <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
    9b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b0e:	46de      	mov	lr, fp
    9b10:	4657      	mov	r7, sl
    9b12:	464e      	mov	r6, r9
    9b14:	b5c0      	push	{r6, r7, lr}
    9b16:	b098      	sub	sp, #96	; 0x60
    9b18:	0005      	movs	r5, r0
    9b1a:	4689      	mov	r9, r1
    9b1c:	4693      	mov	fp, r2
    9b1e:	469a      	mov	sl, r3
    9b20:	ab24      	add	r3, sp, #144	; 0x90
    9b22:	781f      	ldrb	r7, [r3, #0]
    9b24:	ab25      	add	r3, sp, #148	; 0x94
    9b26:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
    9b28:	ac01      	add	r4, sp, #4
    9b2a:	2258      	movs	r2, #88	; 0x58
    9b2c:	491a      	ldr	r1, [pc, #104]	; (9b98 <mqtt_connect_broker+0x8c>)
    9b2e:	0020      	movs	r0, r4
    9b30:	4b1a      	ldr	r3, [pc, #104]	; (9b9c <mqtt_connect_broker+0x90>)
    9b32:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
    9b34:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9b36:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
    9b38:	465b      	mov	r3, fp
    9b3a:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
    9b3c:	4653      	mov	r3, sl
    9b3e:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
    9b40:	464b      	mov	r3, r9
    9b42:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
    9b44:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9b46:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
    9b48:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9b4a:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
    9b4c:	233c      	movs	r3, #60	; 0x3c
    9b4e:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
    9b50:	3301      	adds	r3, #1
    9b52:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
    9b54:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9b56:	2b00      	cmp	r3, #0
    9b58:	d005      	beq.n	9b66 <mqtt_connect_broker+0x5a>
    9b5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9b5c:	2b00      	cmp	r3, #0
    9b5e:	d002      	beq.n	9b66 <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
    9b60:	2201      	movs	r2, #1
    9b62:	ab01      	add	r3, sp, #4
    9b64:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
    9b66:	a901      	add	r1, sp, #4
    9b68:	69e8      	ldr	r0, [r5, #28]
    9b6a:	4b0d      	ldr	r3, [pc, #52]	; (9ba0 <mqtt_connect_broker+0x94>)
    9b6c:	4798      	blx	r3
    9b6e:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
    9b70:	ab17      	add	r3, sp, #92	; 0x5c
    9b72:	7018      	strb	r0, [r3, #0]
	if(module->callback)
    9b74:	682b      	ldr	r3, [r5, #0]
    9b76:	2b00      	cmp	r3, #0
    9b78:	d003      	beq.n	9b82 <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
    9b7a:	aa17      	add	r2, sp, #92	; 0x5c
    9b7c:	2101      	movs	r1, #1
    9b7e:	0028      	movs	r0, r5
    9b80:	4798      	blx	r3
	
	module->isConnected = true;
    9b82:	2201      	movs	r2, #1
    9b84:	2334      	movs	r3, #52	; 0x34
    9b86:	54ea      	strb	r2, [r5, r3]
	return rc;
}
    9b88:	0020      	movs	r0, r4
    9b8a:	b018      	add	sp, #96	; 0x60
    9b8c:	bc1c      	pop	{r2, r3, r4}
    9b8e:	4691      	mov	r9, r2
    9b90:	469a      	mov	sl, r3
    9b92:	46a3      	mov	fp, r4
    9b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b96:	46c0      	nop			; (mov r8, r8)
    9b98:	0000fe30 	.word	0x0000fe30
    9b9c:	0000d33f 	.word	0x0000d33f
    9ba0:	00009501 	.word	0x00009501

00009ba4 <mqtt_publish>:
	module->isConnected = false;
	return rc;
}

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
    9ba4:	b570      	push	{r4, r5, r6, lr}
    9ba6:	b084      	sub	sp, #16
    9ba8:	0004      	movs	r4, r0
    9baa:	a808      	add	r0, sp, #32
    9bac:	7805      	ldrb	r5, [r0, #0]
    9bae:	a809      	add	r0, sp, #36	; 0x24
    9bb0:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
    9bb2:	466e      	mov	r6, sp
    9bb4:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
    9bb6:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
    9bb8:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
    9bba:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
    9bbc:	466a      	mov	r2, sp
    9bbe:	69e0      	ldr	r0, [r4, #28]
    9bc0:	4b06      	ldr	r3, [pc, #24]	; (9bdc <mqtt_publish+0x38>)
    9bc2:	4798      	blx	r3
    9bc4:	0005      	movs	r5, r0
	
	if(module->callback)
    9bc6:	6823      	ldr	r3, [r4, #0]
    9bc8:	2b00      	cmp	r3, #0
    9bca:	d003      	beq.n	9bd4 <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
    9bcc:	2200      	movs	r2, #0
    9bce:	2102      	movs	r1, #2
    9bd0:	0020      	movs	r0, r4
    9bd2:	4798      	blx	r3
	
	return rc;
}
    9bd4:	0028      	movs	r0, r5
    9bd6:	b004      	add	sp, #16
    9bd8:	bd70      	pop	{r4, r5, r6, pc}
    9bda:	46c0      	nop			; (mov r8, r8)
    9bdc:	000095d1 	.word	0x000095d1

00009be0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
    9be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9be2:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
    9be4:	7a03      	ldrb	r3, [r0, #8]
    9be6:	2b03      	cmp	r3, #3
    9be8:	d024      	beq.n	9c34 <MQTTSerialize_connectLength+0x54>
	int len = 0;
    9bea:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
    9bec:	2b04      	cmp	r3, #4
    9bee:	d01f      	beq.n	9c30 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
    9bf0:	68e0      	ldr	r0, [r4, #12]
    9bf2:	6921      	ldr	r1, [r4, #16]
    9bf4:	6962      	ldr	r2, [r4, #20]
    9bf6:	4b1b      	ldr	r3, [pc, #108]	; (9c64 <MQTTSerialize_connectLength+0x84>)
    9bf8:	4798      	blx	r3
    9bfa:	1c85      	adds	r5, r0, #2
    9bfc:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
    9bfe:	7ee3      	ldrb	r3, [r4, #27]
    9c00:	2b00      	cmp	r3, #0
    9c02:	d119      	bne.n	9c38 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
    9c04:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9c06:	2b00      	cmp	r3, #0
    9c08:	d024      	beq.n	9c54 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
    9c0a:	6c20      	ldr	r0, [r4, #64]	; 0x40
    9c0c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    9c0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    9c10:	4b14      	ldr	r3, [pc, #80]	; (9c64 <MQTTSerialize_connectLength+0x84>)
    9c12:	4798      	blx	r3
    9c14:	3002      	adds	r0, #2
    9c16:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
    9c18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9c1a:	2b00      	cmp	r3, #0
    9c1c:	d01e      	beq.n	9c5c <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
    9c1e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    9c20:	6d21      	ldr	r1, [r4, #80]	; 0x50
    9c22:	6d62      	ldr	r2, [r4, #84]	; 0x54
    9c24:	4b0f      	ldr	r3, [pc, #60]	; (9c64 <MQTTSerialize_connectLength+0x84>)
    9c26:	4798      	blx	r3
    9c28:	3002      	adds	r0, #2
    9c2a:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
    9c2c:	0028      	movs	r0, r5
    9c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
    9c30:	360a      	adds	r6, #10
    9c32:	e7dd      	b.n	9bf0 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
    9c34:	260c      	movs	r6, #12
    9c36:	e7db      	b.n	9bf0 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
    9c38:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9c3a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9c3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9c3e:	4f09      	ldr	r7, [pc, #36]	; (9c64 <MQTTSerialize_connectLength+0x84>)
    9c40:	47b8      	blx	r7
    9c42:	0006      	movs	r6, r0
    9c44:	6b20      	ldr	r0, [r4, #48]	; 0x30
    9c46:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9c48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    9c4a:	47b8      	blx	r7
    9c4c:	1836      	adds	r6, r6, r0
    9c4e:	3604      	adds	r6, #4
    9c50:	19ad      	adds	r5, r5, r6
    9c52:	e7d7      	b.n	9c04 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
    9c54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9c56:	2b00      	cmp	r3, #0
    9c58:	d1d7      	bne.n	9c0a <MQTTSerialize_connectLength+0x2a>
    9c5a:	e7dd      	b.n	9c18 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
    9c5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9c5e:	2b00      	cmp	r3, #0
    9c60:	d1dd      	bne.n	9c1e <MQTTSerialize_connectLength+0x3e>
    9c62:	e7e3      	b.n	9c2c <MQTTSerialize_connectLength+0x4c>
    9c64:	0000a139 	.word	0x0000a139

00009c68 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
    9c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c6a:	b083      	sub	sp, #12
    9c6c:	0006      	movs	r6, r0
    9c6e:	000f      	movs	r7, r1
    9c70:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
    9c72:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
    9c74:	0010      	movs	r0, r2
    9c76:	4b45      	ldr	r3, [pc, #276]	; (9d8c <MQTTSerialize_connect+0x124>)
    9c78:	4798      	blx	r3
    9c7a:	0004      	movs	r4, r0
    9c7c:	4b44      	ldr	r3, [pc, #272]	; (9d90 <MQTTSerialize_connect+0x128>)
    9c7e:	4798      	blx	r3
    9c80:	42b8      	cmp	r0, r7
    9c82:	dd00      	ble.n	9c86 <MQTTSerialize_connect+0x1e>
    9c84:	e07f      	b.n	9d86 <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
    9c86:	2110      	movs	r1, #16
    9c88:	a801      	add	r0, sp, #4
    9c8a:	4b42      	ldr	r3, [pc, #264]	; (9d94 <MQTTSerialize_connect+0x12c>)
    9c8c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
    9c8e:	0021      	movs	r1, r4
    9c90:	9801      	ldr	r0, [sp, #4]
    9c92:	4b41      	ldr	r3, [pc, #260]	; (9d98 <MQTTSerialize_connect+0x130>)
    9c94:	4798      	blx	r3
    9c96:	9b01      	ldr	r3, [sp, #4]
    9c98:	469c      	mov	ip, r3
    9c9a:	4460      	add	r0, ip
    9c9c:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
    9c9e:	7a2b      	ldrb	r3, [r5, #8]
    9ca0:	2b04      	cmp	r3, #4
    9ca2:	d045      	beq.n	9d30 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
    9ca4:	493d      	ldr	r1, [pc, #244]	; (9d9c <MQTTSerialize_connect+0x134>)
    9ca6:	a801      	add	r0, sp, #4
    9ca8:	4b3d      	ldr	r3, [pc, #244]	; (9da0 <MQTTSerialize_connect+0x138>)
    9caa:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
    9cac:	2103      	movs	r1, #3
    9cae:	a801      	add	r0, sp, #4
    9cb0:	4b38      	ldr	r3, [pc, #224]	; (9d94 <MQTTSerialize_connect+0x12c>)
    9cb2:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
    9cb4:	7ea9      	ldrb	r1, [r5, #26]
    9cb6:	2301      	movs	r3, #1
    9cb8:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
    9cba:	7eea      	ldrb	r2, [r5, #27]
    9cbc:	1e50      	subs	r0, r2, #1
    9cbe:	4182      	sbcs	r2, r0
    9cc0:	b2d2      	uxtb	r2, r2
    9cc2:	4013      	ands	r3, r2
    9cc4:	009b      	lsls	r3, r3, #2
    9cc6:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
    9cc8:	4319      	orrs	r1, r3
    9cca:	2b00      	cmp	r3, #0
    9ccc:	d00b      	beq.n	9ce6 <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
    9cce:	233d      	movs	r3, #61	; 0x3d
    9cd0:	5cea      	ldrb	r2, [r5, r3]
    9cd2:	3b3a      	subs	r3, #58	; 0x3a
    9cd4:	4013      	ands	r3, r2
    9cd6:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
    9cd8:	223c      	movs	r2, #60	; 0x3c
    9cda:	5ca8      	ldrb	r0, [r5, r2]
    9cdc:	3a3b      	subs	r2, #59	; 0x3b
    9cde:	4002      	ands	r2, r0
    9ce0:	0152      	lsls	r2, r2, #5
    9ce2:	4319      	orrs	r1, r3
    9ce4:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
    9ce6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    9ce8:	2b00      	cmp	r3, #0
    9cea:	d02a      	beq.n	9d42 <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
    9cec:	2380      	movs	r3, #128	; 0x80
    9cee:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
    9cf0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    9cf2:	2b00      	cmp	r3, #0
    9cf4:	d029      	beq.n	9d4a <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
    9cf6:	2340      	movs	r3, #64	; 0x40
    9cf8:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
    9cfa:	b2cc      	uxtb	r4, r1
    9cfc:	0021      	movs	r1, r4
    9cfe:	a801      	add	r0, sp, #4
    9d00:	4b24      	ldr	r3, [pc, #144]	; (9d94 <MQTTSerialize_connect+0x12c>)
    9d02:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
    9d04:	8b29      	ldrh	r1, [r5, #24]
    9d06:	a801      	add	r0, sp, #4
    9d08:	4b26      	ldr	r3, [pc, #152]	; (9da4 <MQTTSerialize_connect+0x13c>)
    9d0a:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
    9d0c:	68e9      	ldr	r1, [r5, #12]
    9d0e:	692a      	ldr	r2, [r5, #16]
    9d10:	696b      	ldr	r3, [r5, #20]
    9d12:	a801      	add	r0, sp, #4
    9d14:	4f24      	ldr	r7, [pc, #144]	; (9da8 <MQTTSerialize_connect+0x140>)
    9d16:	47b8      	blx	r7
	if (options->willFlag)
    9d18:	7eeb      	ldrb	r3, [r5, #27]
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d119      	bne.n	9d52 <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
    9d1e:	b263      	sxtb	r3, r4
    9d20:	2b00      	cmp	r3, #0
    9d22:	db22      	blt.n	9d6a <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
    9d24:	0663      	lsls	r3, r4, #25
    9d26:	d427      	bmi.n	9d78 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
    9d28:	9b01      	ldr	r3, [sp, #4]
    9d2a:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
    9d2c:	b003      	add	sp, #12
    9d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
    9d30:	491e      	ldr	r1, [pc, #120]	; (9dac <MQTTSerialize_connect+0x144>)
    9d32:	a801      	add	r0, sp, #4
    9d34:	4b1a      	ldr	r3, [pc, #104]	; (9da0 <MQTTSerialize_connect+0x138>)
    9d36:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
    9d38:	2104      	movs	r1, #4
    9d3a:	a801      	add	r0, sp, #4
    9d3c:	4b15      	ldr	r3, [pc, #84]	; (9d94 <MQTTSerialize_connect+0x12c>)
    9d3e:	4798      	blx	r3
    9d40:	e7b8      	b.n	9cb4 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
    9d42:	6cab      	ldr	r3, [r5, #72]	; 0x48
    9d44:	2b00      	cmp	r3, #0
    9d46:	d1d1      	bne.n	9cec <MQTTSerialize_connect+0x84>
    9d48:	e7d2      	b.n	9cf0 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
    9d4a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    9d4c:	2b00      	cmp	r3, #0
    9d4e:	d1d2      	bne.n	9cf6 <MQTTSerialize_connect+0x8e>
    9d50:	e7d3      	b.n	9cfa <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
    9d52:	6a69      	ldr	r1, [r5, #36]	; 0x24
    9d54:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    9d56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    9d58:	a801      	add	r0, sp, #4
    9d5a:	4f13      	ldr	r7, [pc, #76]	; (9da8 <MQTTSerialize_connect+0x140>)
    9d5c:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
    9d5e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9d60:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    9d62:	6bab      	ldr	r3, [r5, #56]	; 0x38
    9d64:	a801      	add	r0, sp, #4
    9d66:	47b8      	blx	r7
    9d68:	e7d9      	b.n	9d1e <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
    9d6a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    9d6c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    9d6e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    9d70:	a801      	add	r0, sp, #4
    9d72:	4f0d      	ldr	r7, [pc, #52]	; (9da8 <MQTTSerialize_connect+0x140>)
    9d74:	47b8      	blx	r7
    9d76:	e7d5      	b.n	9d24 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
    9d78:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    9d7a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    9d7c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    9d7e:	a801      	add	r0, sp, #4
    9d80:	4c09      	ldr	r4, [pc, #36]	; (9da8 <MQTTSerialize_connect+0x140>)
    9d82:	47a0      	blx	r4
    9d84:	e7d0      	b.n	9d28 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    9d86:	2002      	movs	r0, #2
    9d88:	4240      	negs	r0, r0
	return rc;
    9d8a:	e7cf      	b.n	9d2c <MQTTSerialize_connect+0xc4>
    9d8c:	00009be1 	.word	0x00009be1
    9d90:	00009fdd 	.word	0x00009fdd
    9d94:	0000a03f 	.word	0x0000a03f
    9d98:	00009f55 	.word	0x00009f55
    9d9c:	0000fe90 	.word	0x0000fe90
    9da0:	0000a075 	.word	0x0000a075
    9da4:	0000a04b 	.word	0x0000a04b
    9da8:	0000a0ad 	.word	0x0000a0ad
    9dac:	0000fe88 	.word	0x0000fe88

00009db0 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
    9db0:	b570      	push	{r4, r5, r6, lr}
    9db2:	b082      	sub	sp, #8
    9db4:	0005      	movs	r5, r0
    9db6:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    9db8:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    9dba:	a801      	add	r0, sp, #4
    9dbc:	4b0e      	ldr	r3, [pc, #56]	; (9df8 <MQTTDeserialize_connack+0x48>)
    9dbe:	4798      	blx	r3
	if (header.bits.type != CONNACK)
    9dc0:	23f0      	movs	r3, #240	; 0xf0
    9dc2:	4003      	ands	r3, r0
	int rc = 0;
    9dc4:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
    9dc6:	2b20      	cmp	r3, #32
    9dc8:	d001      	beq.n	9dce <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9dca:	b002      	add	sp, #8
    9dcc:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    9dce:	4669      	mov	r1, sp
    9dd0:	9801      	ldr	r0, [sp, #4]
    9dd2:	4b0a      	ldr	r3, [pc, #40]	; (9dfc <MQTTDeserialize_connack+0x4c>)
    9dd4:	4798      	blx	r3
    9dd6:	9b01      	ldr	r3, [sp, #4]
    9dd8:	181b      	adds	r3, r3, r0
    9dda:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
    9ddc:	9b00      	ldr	r3, [sp, #0]
    9dde:	2b01      	cmp	r3, #1
    9de0:	ddf3      	ble.n	9dca <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
    9de2:	a801      	add	r0, sp, #4
    9de4:	4e04      	ldr	r6, [pc, #16]	; (9df8 <MQTTDeserialize_connack+0x48>)
    9de6:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
    9de8:	0600      	lsls	r0, r0, #24
    9dea:	0fc0      	lsrs	r0, r0, #31
    9dec:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
    9dee:	a801      	add	r0, sp, #4
    9df0:	47b0      	blx	r6
    9df2:	7020      	strb	r0, [r4, #0]
	rc = 1;
    9df4:	2001      	movs	r0, #1
    9df6:	e7e8      	b.n	9dca <MQTTDeserialize_connack+0x1a>
    9df8:	0000a033 	.word	0x0000a033
    9dfc:	0000a005 	.word	0x0000a005

00009e00 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    9e00:	b510      	push	{r4, lr}
    9e02:	b082      	sub	sp, #8
    9e04:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    9e06:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
    9e08:	2901      	cmp	r1, #1
    9e0a:	dd0f      	ble.n	9e2c <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    9e0c:	210f      	movs	r1, #15
    9e0e:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    9e10:	0109      	lsls	r1, r1, #4
    9e12:	a801      	add	r0, sp, #4
    9e14:	4b07      	ldr	r3, [pc, #28]	; (9e34 <MQTTSerialize_zero+0x34>)
    9e16:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    9e18:	2100      	movs	r1, #0
    9e1a:	9801      	ldr	r0, [sp, #4]
    9e1c:	4b06      	ldr	r3, [pc, #24]	; (9e38 <MQTTSerialize_zero+0x38>)
    9e1e:	4798      	blx	r3
    9e20:	9b01      	ldr	r3, [sp, #4]
    9e22:	469c      	mov	ip, r3
    9e24:	4460      	add	r0, ip
	rc = ptr - buf;
    9e26:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9e28:	b002      	add	sp, #8
    9e2a:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    9e2c:	2002      	movs	r0, #2
    9e2e:	4240      	negs	r0, r0
	return rc;
    9e30:	e7fa      	b.n	9e28 <MQTTSerialize_zero+0x28>
    9e32:	46c0      	nop			; (mov r8, r8)
    9e34:	0000a03f 	.word	0x0000a03f
    9e38:	00009f55 	.word	0x00009f55

00009e3c <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
    9e3c:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
    9e3e:	220c      	movs	r2, #12
    9e40:	4b01      	ldr	r3, [pc, #4]	; (9e48 <MQTTSerialize_pingreq+0xc>)
    9e42:	4798      	blx	r3
}
    9e44:	bd10      	pop	{r4, pc}
    9e46:	46c0      	nop			; (mov r8, r8)
    9e48:	00009e01 	.word	0x00009e01

00009e4c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
    9e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e4e:	b085      	sub	sp, #20
    9e50:	0005      	movs	r5, r0
    9e52:	000e      	movs	r6, r1
    9e54:	0014      	movs	r4, r2
    9e56:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    9e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9e5a:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
    9e5c:	2300      	movs	r3, #0
    9e5e:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    9e60:	a803      	add	r0, sp, #12
    9e62:	4b1c      	ldr	r3, [pc, #112]	; (9ed4 <MQTTDeserialize_publish+0x88>)
    9e64:	4798      	blx	r3
    9e66:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
    9e68:	22f0      	movs	r2, #240	; 0xf0
    9e6a:	4010      	ands	r0, r2
	int rc = 0;
    9e6c:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
    9e6e:	2830      	cmp	r0, #48	; 0x30
    9e70:	d002      	beq.n	9e78 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9e72:	0038      	movs	r0, r7
    9e74:	b005      	add	sp, #20
    9e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
    9e78:	071a      	lsls	r2, r3, #28
    9e7a:	0fd2      	lsrs	r2, r2, #31
    9e7c:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
    9e7e:	075a      	lsls	r2, r3, #29
    9e80:	0f92      	lsrs	r2, r2, #30
    9e82:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
    9e84:	07db      	lsls	r3, r3, #31
    9e86:	0fdb      	lsrs	r3, r3, #31
    9e88:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    9e8a:	a902      	add	r1, sp, #8
    9e8c:	9803      	ldr	r0, [sp, #12]
    9e8e:	4b12      	ldr	r3, [pc, #72]	; (9ed8 <MQTTDeserialize_publish+0x8c>)
    9e90:	4798      	blx	r3
    9e92:	0007      	movs	r7, r0
    9e94:	9b03      	ldr	r3, [sp, #12]
    9e96:	181c      	adds	r4, r3, r0
    9e98:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
    9e9a:	9b02      	ldr	r3, [sp, #8]
    9e9c:	469c      	mov	ip, r3
    9e9e:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
    9ea0:	0022      	movs	r2, r4
    9ea2:	a903      	add	r1, sp, #12
    9ea4:	980a      	ldr	r0, [sp, #40]	; 0x28
    9ea6:	4b0d      	ldr	r3, [pc, #52]	; (9edc <MQTTDeserialize_publish+0x90>)
    9ea8:	4798      	blx	r3
    9eaa:	2800      	cmp	r0, #0
    9eac:	d0e1      	beq.n	9e72 <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
    9eae:	9b03      	ldr	r3, [sp, #12]
    9eb0:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
    9eb2:	d4de      	bmi.n	9e72 <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
    9eb4:	6833      	ldr	r3, [r6, #0]
    9eb6:	2b00      	cmp	r3, #0
    9eb8:	dd04      	ble.n	9ec4 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
    9eba:	a803      	add	r0, sp, #12
    9ebc:	4b08      	ldr	r3, [pc, #32]	; (9ee0 <MQTTDeserialize_publish+0x94>)
    9ebe:	4798      	blx	r3
    9ec0:	9b01      	ldr	r3, [sp, #4]
    9ec2:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
    9ec4:	9b03      	ldr	r3, [sp, #12]
    9ec6:	1ae4      	subs	r4, r4, r3
    9ec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9eca:	6014      	str	r4, [r2, #0]
	*payload = curdata;
    9ecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9ece:	6013      	str	r3, [r2, #0]
	rc = 1;
    9ed0:	2701      	movs	r7, #1
    9ed2:	e7ce      	b.n	9e72 <MQTTDeserialize_publish+0x26>
    9ed4:	0000a033 	.word	0x0000a033
    9ed8:	0000a005 	.word	0x0000a005
    9edc:	0000a0f9 	.word	0x0000a0f9
    9ee0:	0000a021 	.word	0x0000a021

00009ee4 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
    9ee4:	b570      	push	{r4, r5, r6, lr}
    9ee6:	b082      	sub	sp, #8
    9ee8:	0005      	movs	r5, r0
    9eea:	000e      	movs	r6, r1
    9eec:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    9eee:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    9ef0:	a801      	add	r0, sp, #4
    9ef2:	4b0c      	ldr	r3, [pc, #48]	; (9f24 <MQTTDeserialize_ack+0x40>)
    9ef4:	4798      	blx	r3
	*dup = header.bits.dup;
    9ef6:	0703      	lsls	r3, r0, #28
    9ef8:	0fdb      	lsrs	r3, r3, #31
    9efa:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
    9efc:	0600      	lsls	r0, r0, #24
    9efe:	0f00      	lsrs	r0, r0, #28
    9f00:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    9f02:	4669      	mov	r1, sp
    9f04:	9801      	ldr	r0, [sp, #4]
    9f06:	4b08      	ldr	r3, [pc, #32]	; (9f28 <MQTTDeserialize_ack+0x44>)
    9f08:	4798      	blx	r3
    9f0a:	9b01      	ldr	r3, [sp, #4]
    9f0c:	181b      	adds	r3, r3, r0
    9f0e:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
    9f10:	9b00      	ldr	r3, [sp, #0]
    9f12:	2b01      	cmp	r3, #1
    9f14:	dd04      	ble.n	9f20 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
    9f16:	a801      	add	r0, sp, #4
    9f18:	4b04      	ldr	r3, [pc, #16]	; (9f2c <MQTTDeserialize_ack+0x48>)
    9f1a:	4798      	blx	r3
    9f1c:	8020      	strh	r0, [r4, #0]

	rc = 1;
    9f1e:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9f20:	b002      	add	sp, #8
    9f22:	bd70      	pop	{r4, r5, r6, pc}
    9f24:	0000a033 	.word	0x0000a033
    9f28:	0000a005 	.word	0x0000a005
    9f2c:	0000a021 	.word	0x0000a021

00009f30 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
    9f30:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
    9f32:	2900      	cmp	r1, #0
    9f34:	dd0a      	ble.n	9f4c <bufchar+0x1c>
    9f36:	4b06      	ldr	r3, [pc, #24]	; (9f50 <bufchar+0x20>)
    9f38:	681b      	ldr	r3, [r3, #0]
    9f3a:	185d      	adds	r5, r3, r1
    9f3c:	002c      	movs	r4, r5
		*c = *bufptr++;
    9f3e:	781a      	ldrb	r2, [r3, #0]
    9f40:	7002      	strb	r2, [r0, #0]
    9f42:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
    9f44:	42a3      	cmp	r3, r4
    9f46:	d1fa      	bne.n	9f3e <bufchar+0xe>
    9f48:	4b01      	ldr	r3, [pc, #4]	; (9f50 <bufchar+0x20>)
    9f4a:	601d      	str	r5, [r3, #0]
	return count;
}
    9f4c:	0008      	movs	r0, r1
    9f4e:	bd30      	pop	{r4, r5, pc}
    9f50:	20000874 	.word	0x20000874

00009f54 <MQTTPacket_encode>:
{
    9f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f56:	b083      	sub	sp, #12
    9f58:	2500      	movs	r5, #0
		char d = length % 128;
    9f5a:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
    9f5c:	2780      	movs	r7, #128	; 0x80
    9f5e:	427f      	negs	r7, r7
    9f60:	9501      	str	r5, [sp, #4]
		char d = length % 128;
    9f62:	17ca      	asrs	r2, r1, #31
    9f64:	0e54      	lsrs	r4, r2, #25
    9f66:	190b      	adds	r3, r1, r4
    9f68:	4033      	ands	r3, r6
    9f6a:	1b1b      	subs	r3, r3, r4
    9f6c:	b2db      	uxtb	r3, r3
		length /= 128;
    9f6e:	4032      	ands	r2, r6
    9f70:	1851      	adds	r1, r2, r1
    9f72:	11c9      	asrs	r1, r1, #7
		if (length > 0)
    9f74:	2900      	cmp	r1, #0
    9f76:	dd03      	ble.n	9f80 <MQTTPacket_encode+0x2c>
			d |= 0x80;
    9f78:	433b      	orrs	r3, r7
		buf[rc++] = d;
    9f7a:	5543      	strb	r3, [r0, r5]
    9f7c:	3501      	adds	r5, #1
    9f7e:	e7ef      	b.n	9f60 <MQTTPacket_encode+0xc>
    9f80:	5543      	strb	r3, [r0, r5]
    9f82:	9801      	ldr	r0, [sp, #4]
    9f84:	3001      	adds	r0, #1
}
    9f86:	b003      	add	sp, #12
    9f88:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009f8a <MQTTPacket_decode>:
{
    9f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f8c:	46ce      	mov	lr, r9
    9f8e:	4647      	mov	r7, r8
    9f90:	b580      	push	{r7, lr}
    9f92:	b083      	sub	sp, #12
    9f94:	4680      	mov	r8, r0
    9f96:	000f      	movs	r7, r1
	*value = 0;
    9f98:	2300      	movs	r3, #0
    9f9a:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    9f9c:	2401      	movs	r4, #1
	int multiplier = 1;
    9f9e:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
    9fa0:	466b      	mov	r3, sp
    9fa2:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
    9fa4:	237f      	movs	r3, #127	; 0x7f
    9fa6:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
    9fa8:	2101      	movs	r1, #1
    9faa:	0028      	movs	r0, r5
    9fac:	47c0      	blx	r8
		if (rc != 1)
    9fae:	2801      	cmp	r0, #1
    9fb0:	d10e      	bne.n	9fd0 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
    9fb2:	782b      	ldrb	r3, [r5, #0]
    9fb4:	464a      	mov	r2, r9
    9fb6:	401a      	ands	r2, r3
    9fb8:	4372      	muls	r2, r6
    9fba:	6839      	ldr	r1, [r7, #0]
    9fbc:	468c      	mov	ip, r1
    9fbe:	4462      	add	r2, ip
    9fc0:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
    9fc2:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
    9fc4:	b25b      	sxtb	r3, r3
    9fc6:	2b00      	cmp	r3, #0
    9fc8:	da02      	bge.n	9fd0 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    9fca:	3401      	adds	r4, #1
    9fcc:	2c05      	cmp	r4, #5
    9fce:	d1eb      	bne.n	9fa8 <MQTTPacket_decode+0x1e>
}
    9fd0:	0020      	movs	r0, r4
    9fd2:	b003      	add	sp, #12
    9fd4:	bc0c      	pop	{r2, r3}
    9fd6:	4690      	mov	r8, r2
    9fd8:	4699      	mov	r9, r3
    9fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009fdc <MQTTPacket_len>:
{
    9fdc:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
    9fde:	1c42      	adds	r2, r0, #1
		rem_len += 1;
    9fe0:	3002      	adds	r0, #2
	if (rem_len < 128)
    9fe2:	2a7f      	cmp	r2, #127	; 0x7f
    9fe4:	dd07      	ble.n	9ff6 <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
    9fe6:	4905      	ldr	r1, [pc, #20]	; (9ffc <MQTTPacket_len+0x20>)
		rem_len += 2;
    9fe8:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
    9fea:	428a      	cmp	r2, r1
    9fec:	dd03      	ble.n	9ff6 <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
    9fee:	4904      	ldr	r1, [pc, #16]	; (a000 <MQTTPacket_len+0x24>)
		rem_len += 4;
    9ff0:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
    9ff2:	428a      	cmp	r2, r1
    9ff4:	dd00      	ble.n	9ff8 <MQTTPacket_len+0x1c>
}
    9ff6:	4770      	bx	lr
		rem_len += 3;
    9ff8:	1d18      	adds	r0, r3, #4
    9ffa:	e7fc      	b.n	9ff6 <MQTTPacket_len+0x1a>
    9ffc:	00003fff 	.word	0x00003fff
    a000:	001ffffe 	.word	0x001ffffe

0000a004 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
    a004:	b510      	push	{r4, lr}
	bufptr = buf;
    a006:	4b03      	ldr	r3, [pc, #12]	; (a014 <MQTTPacket_decodeBuf+0x10>)
    a008:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
    a00a:	4803      	ldr	r0, [pc, #12]	; (a018 <MQTTPacket_decodeBuf+0x14>)
    a00c:	4b03      	ldr	r3, [pc, #12]	; (a01c <MQTTPacket_decodeBuf+0x18>)
    a00e:	4798      	blx	r3
}
    a010:	bd10      	pop	{r4, pc}
    a012:	46c0      	nop			; (mov r8, r8)
    a014:	20000874 	.word	0x20000874
    a018:	00009f31 	.word	0x00009f31
    a01c:	00009f8b 	.word	0x00009f8b

0000a020 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
    a020:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
    a022:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
    a024:	7813      	ldrb	r3, [r2, #0]
    a026:	021b      	lsls	r3, r3, #8
    a028:	7850      	ldrb	r0, [r2, #1]
    a02a:	1818      	adds	r0, r3, r0
	*pptr += 2;
    a02c:	3202      	adds	r2, #2
    a02e:	600a      	str	r2, [r1, #0]
	return len;
}
    a030:	4770      	bx	lr

0000a032 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
    a032:	0002      	movs	r2, r0
	char c = **pptr;
    a034:	6803      	ldr	r3, [r0, #0]
    a036:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
    a038:	3301      	adds	r3, #1
    a03a:	6013      	str	r3, [r2, #0]
	return c;
}
    a03c:	4770      	bx	lr

0000a03e <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
    a03e:	6803      	ldr	r3, [r0, #0]
    a040:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
    a042:	6803      	ldr	r3, [r0, #0]
    a044:	3301      	adds	r3, #1
    a046:	6003      	str	r3, [r0, #0]
}
    a048:	4770      	bx	lr

0000a04a <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
    a04a:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
    a04c:	17ca      	asrs	r2, r1, #31
    a04e:	23ff      	movs	r3, #255	; 0xff
    a050:	001c      	movs	r4, r3
    a052:	4014      	ands	r4, r2
    a054:	1864      	adds	r4, r4, r1
    a056:	1224      	asrs	r4, r4, #8
    a058:	6805      	ldr	r5, [r0, #0]
    a05a:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
    a05c:	6804      	ldr	r4, [r0, #0]
    a05e:	1c65      	adds	r5, r4, #1
    a060:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
    a062:	0e12      	lsrs	r2, r2, #24
    a064:	1889      	adds	r1, r1, r2
    a066:	400b      	ands	r3, r1
    a068:	1a9b      	subs	r3, r3, r2
    a06a:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
    a06c:	6803      	ldr	r3, [r0, #0]
    a06e:	3301      	adds	r3, #1
    a070:	6003      	str	r3, [r0, #0]
}
    a072:	bd30      	pop	{r4, r5, pc}

0000a074 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
    a074:	b570      	push	{r4, r5, r6, lr}
    a076:	0004      	movs	r4, r0
    a078:	000e      	movs	r6, r1
	int len = strlen(string);
    a07a:	0008      	movs	r0, r1
    a07c:	4b08      	ldr	r3, [pc, #32]	; (a0a0 <writeCString+0x2c>)
    a07e:	4798      	blx	r3
    a080:	0005      	movs	r5, r0
	writeInt(pptr, len);
    a082:	0001      	movs	r1, r0
    a084:	0020      	movs	r0, r4
    a086:	4b07      	ldr	r3, [pc, #28]	; (a0a4 <writeCString+0x30>)
    a088:	4798      	blx	r3
	memcpy(*pptr, string, len);
    a08a:	002a      	movs	r2, r5
    a08c:	0031      	movs	r1, r6
    a08e:	6820      	ldr	r0, [r4, #0]
    a090:	4b05      	ldr	r3, [pc, #20]	; (a0a8 <writeCString+0x34>)
    a092:	4798      	blx	r3
	*pptr += len;
    a094:	6823      	ldr	r3, [r4, #0]
    a096:	469c      	mov	ip, r3
    a098:	4465      	add	r5, ip
    a09a:	6025      	str	r5, [r4, #0]
}
    a09c:	bd70      	pop	{r4, r5, r6, pc}
    a09e:	46c0      	nop			; (mov r8, r8)
    a0a0:	0000d851 	.word	0x0000d851
    a0a4:	0000a04b 	.word	0x0000a04b
    a0a8:	0000d33f 	.word	0x0000d33f

0000a0ac <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
    a0ac:	b530      	push	{r4, r5, lr}
    a0ae:	b085      	sub	sp, #20
    a0b0:	0005      	movs	r5, r0
    a0b2:	9101      	str	r1, [sp, #4]
    a0b4:	9303      	str	r3, [sp, #12]
    a0b6:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
    a0b8:	dc06      	bgt.n	a0c8 <writeMQTTString+0x1c>
    a0ba:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
    a0bc:	2900      	cmp	r1, #0
    a0be:	d010      	beq.n	a0e2 <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
    a0c0:	4b0a      	ldr	r3, [pc, #40]	; (a0ec <writeMQTTString+0x40>)
    a0c2:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
    a0c4:	b005      	add	sp, #20
    a0c6:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
    a0c8:	0011      	movs	r1, r2
    a0ca:	4b09      	ldr	r3, [pc, #36]	; (a0f0 <writeMQTTString+0x44>)
    a0cc:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    a0ce:	0022      	movs	r2, r4
    a0d0:	9903      	ldr	r1, [sp, #12]
    a0d2:	6828      	ldr	r0, [r5, #0]
    a0d4:	4b07      	ldr	r3, [pc, #28]	; (a0f4 <writeMQTTString+0x48>)
    a0d6:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
    a0d8:	682b      	ldr	r3, [r5, #0]
    a0da:	469c      	mov	ip, r3
    a0dc:	4464      	add	r4, ip
    a0de:	602c      	str	r4, [r5, #0]
    a0e0:	e7f0      	b.n	a0c4 <writeMQTTString+0x18>
		writeInt(pptr, 0);
    a0e2:	2100      	movs	r1, #0
    a0e4:	4b02      	ldr	r3, [pc, #8]	; (a0f0 <writeMQTTString+0x44>)
    a0e6:	4798      	blx	r3
}
    a0e8:	e7ec      	b.n	a0c4 <writeMQTTString+0x18>
    a0ea:	46c0      	nop			; (mov r8, r8)
    a0ec:	0000a075 	.word	0x0000a075
    a0f0:	0000a04b 	.word	0x0000a04b
    a0f4:	0000d33f 	.word	0x0000d33f

0000a0f8 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
    a0f8:	b570      	push	{r4, r5, r6, lr}
    a0fa:	0005      	movs	r5, r0
    a0fc:	000c      	movs	r4, r1
    a0fe:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
    a100:	680b      	ldr	r3, [r1, #0]
    a102:	1ad3      	subs	r3, r2, r3
    a104:	2b01      	cmp	r3, #1
    a106:	dd12      	ble.n	a12e <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
    a108:	0008      	movs	r0, r1
    a10a:	4b0a      	ldr	r3, [pc, #40]	; (a134 <readMQTTLenString+0x3c>)
    a10c:	4798      	blx	r3
    a10e:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    a110:	6822      	ldr	r2, [r4, #0]
    a112:	1811      	adds	r1, r2, r0
	int rc = 0;
    a114:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    a116:	428e      	cmp	r6, r1
    a118:	d305      	bcc.n	a126 <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
    a11a:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
    a11c:	6823      	ldr	r3, [r4, #0]
    a11e:	469c      	mov	ip, r3
    a120:	4460      	add	r0, ip
    a122:	6020      	str	r0, [r4, #0]
			rc = 1;
    a124:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
    a126:	2200      	movs	r2, #0
    a128:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
    a12a:	0018      	movs	r0, r3
    a12c:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
    a12e:	2300      	movs	r3, #0
    a130:	e7f9      	b.n	a126 <readMQTTLenString+0x2e>
    a132:	46c0      	nop			; (mov r8, r8)
    a134:	0000a021 	.word	0x0000a021

0000a138 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    a138:	b500      	push	{lr}
    a13a:	b085      	sub	sp, #20
    a13c:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
    a13e:	2800      	cmp	r0, #0
    a140:	d003      	beq.n	a14a <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
    a142:	4b03      	ldr	r3, [pc, #12]	; (a150 <MQTTstrlen+0x18>)
    a144:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
    a146:	b005      	add	sp, #20
    a148:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
    a14a:	9802      	ldr	r0, [sp, #8]
	return rc;
    a14c:	e7fb      	b.n	a146 <MQTTstrlen+0xe>
    a14e:	46c0      	nop			; (mov r8, r8)
    a150:	0000d851 	.word	0x0000d851

0000a154 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
    a154:	b570      	push	{r4, r5, r6, lr}
    a156:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
    a158:	6806      	ldr	r6, [r0, #0]
    a15a:	2e00      	cmp	r6, #0
    a15c:	d00b      	beq.n	a176 <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
    a15e:	0030      	movs	r0, r6
    a160:	4b0b      	ldr	r3, [pc, #44]	; (a190 <MQTTPacket_equals+0x3c>)
    a162:	4798      	blx	r3
    a164:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
    a166:	0028      	movs	r0, r5
    a168:	4b09      	ldr	r3, [pc, #36]	; (a190 <MQTTPacket_equals+0x3c>)
    a16a:	4798      	blx	r3
    a16c:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    a16e:	4284      	cmp	r4, r0
    a170:	d004      	beq.n	a17c <MQTTPacket_equals+0x28>
}
    a172:	0018      	movs	r0, r3
    a174:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
    a176:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
    a178:	6844      	ldr	r4, [r0, #4]
    a17a:	e7f4      	b.n	a166 <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    a17c:	0022      	movs	r2, r4
    a17e:	0029      	movs	r1, r5
    a180:	0030      	movs	r0, r6
    a182:	4b04      	ldr	r3, [pc, #16]	; (a194 <MQTTPacket_equals+0x40>)
    a184:	4798      	blx	r3
    a186:	4243      	negs	r3, r0
    a188:	4143      	adcs	r3, r0
    a18a:	b2db      	uxtb	r3, r3
    a18c:	e7f1      	b.n	a172 <MQTTPacket_equals+0x1e>
    a18e:	46c0      	nop			; (mov r8, r8)
    a190:	0000d851 	.word	0x0000d851
    a194:	0000d85f 	.word	0x0000d85f

0000a198 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    a198:	b510      	push	{r4, lr}
    a19a:	b084      	sub	sp, #16
    a19c:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    a19e:	0008      	movs	r0, r1
    a1a0:	0011      	movs	r1, r2
    a1a2:	001a      	movs	r2, r3
    a1a4:	4b05      	ldr	r3, [pc, #20]	; (a1bc <MQTTSerialize_publishLength+0x24>)
    a1a6:	4798      	blx	r3
    a1a8:	3002      	adds	r0, #2
    a1aa:	9b06      	ldr	r3, [sp, #24]
    a1ac:	469c      	mov	ip, r3
    a1ae:	4460      	add	r0, ip
	if (qos > 0)
    a1b0:	2c00      	cmp	r4, #0
    a1b2:	dd00      	ble.n	a1b6 <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
    a1b4:	3002      	adds	r0, #2
	return len;
}
    a1b6:	b004      	add	sp, #16
    a1b8:	bd10      	pop	{r4, pc}
    a1ba:	46c0      	nop			; (mov r8, r8)
    a1bc:	0000a139 	.word	0x0000a139

0000a1c0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    a1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1c2:	46de      	mov	lr, fp
    a1c4:	4657      	mov	r7, sl
    a1c6:	464e      	mov	r6, r9
    a1c8:	b5c0      	push	{r6, r7, lr}
    a1ca:	b084      	sub	sp, #16
    a1cc:	0007      	movs	r7, r0
    a1ce:	468b      	mov	fp, r1
    a1d0:	4692      	mov	sl, r2
    a1d2:	001e      	movs	r6, r3
    a1d4:	ab0c      	add	r3, sp, #48	; 0x30
    a1d6:	781b      	ldrb	r3, [r3, #0]
    a1d8:	4699      	mov	r9, r3
    a1da:	ab0d      	add	r3, sp, #52	; 0x34
    a1dc:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
    a1de:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    a1e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a1e2:	9300      	str	r3, [sp, #0]
    a1e4:	990e      	ldr	r1, [sp, #56]	; 0x38
    a1e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a1e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a1ea:	0030      	movs	r0, r6
    a1ec:	4d1f      	ldr	r5, [pc, #124]	; (a26c <MQTTSerialize_publish+0xac>)
    a1ee:	47a8      	blx	r5
    a1f0:	0005      	movs	r5, r0
    a1f2:	4b1f      	ldr	r3, [pc, #124]	; (a270 <MQTTSerialize_publish+0xb0>)
    a1f4:	4798      	blx	r3
    a1f6:	4558      	cmp	r0, fp
    a1f8:	dc34      	bgt.n	a264 <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
    a1fa:	2201      	movs	r2, #1
    a1fc:	4653      	mov	r3, sl
    a1fe:	4013      	ands	r3, r2
    a200:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
    a202:	2103      	movs	r1, #3
    a204:	4031      	ands	r1, r6
    a206:	0048      	lsls	r0, r1, #1
    a208:	2130      	movs	r1, #48	; 0x30
    a20a:	4319      	orrs	r1, r3
    a20c:	4301      	orrs	r1, r0
	header.bits.retain = retained;
    a20e:	464b      	mov	r3, r9
    a210:	4013      	ands	r3, r2
    a212:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    a214:	4319      	orrs	r1, r3
    a216:	a803      	add	r0, sp, #12
    a218:	4b16      	ldr	r3, [pc, #88]	; (a274 <MQTTSerialize_publish+0xb4>)
    a21a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    a21c:	0029      	movs	r1, r5
    a21e:	9803      	ldr	r0, [sp, #12]
    a220:	4b15      	ldr	r3, [pc, #84]	; (a278 <MQTTSerialize_publish+0xb8>)
    a222:	4798      	blx	r3
    a224:	9b03      	ldr	r3, [sp, #12]
    a226:	469c      	mov	ip, r3
    a228:	4460      	add	r0, ip
    a22a:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
    a22c:	990e      	ldr	r1, [sp, #56]	; 0x38
    a22e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a230:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a232:	a803      	add	r0, sp, #12
    a234:	4d11      	ldr	r5, [pc, #68]	; (a27c <MQTTSerialize_publish+0xbc>)
    a236:	47a8      	blx	r5

	if (qos > 0)
    a238:	2e00      	cmp	r6, #0
    a23a:	dd03      	ble.n	a244 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
    a23c:	0021      	movs	r1, r4
    a23e:	a803      	add	r0, sp, #12
    a240:	4b0f      	ldr	r3, [pc, #60]	; (a280 <MQTTSerialize_publish+0xc0>)
    a242:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
    a244:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a246:	9911      	ldr	r1, [sp, #68]	; 0x44
    a248:	9803      	ldr	r0, [sp, #12]
    a24a:	4b0e      	ldr	r3, [pc, #56]	; (a284 <MQTTSerialize_publish+0xc4>)
    a24c:	4798      	blx	r3
	ptr += payloadlen;
    a24e:	9b03      	ldr	r3, [sp, #12]
    a250:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a252:	4694      	mov	ip, r2
    a254:	4463      	add	r3, ip

	rc = ptr - buf;
    a256:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    a258:	b004      	add	sp, #16
    a25a:	bc1c      	pop	{r2, r3, r4}
    a25c:	4691      	mov	r9, r2
    a25e:	469a      	mov	sl, r3
    a260:	46a3      	mov	fp, r4
    a262:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    a264:	2002      	movs	r0, #2
    a266:	4240      	negs	r0, r0
	return rc;
    a268:	e7f6      	b.n	a258 <MQTTSerialize_publish+0x98>
    a26a:	46c0      	nop			; (mov r8, r8)
    a26c:	0000a199 	.word	0x0000a199
    a270:	00009fdd 	.word	0x00009fdd
    a274:	0000a03f 	.word	0x0000a03f
    a278:	00009f55 	.word	0x00009f55
    a27c:	0000a0ad 	.word	0x0000a0ad
    a280:	0000a04b 	.word	0x0000a04b
    a284:	0000d33f 	.word	0x0000d33f

0000a288 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
    a288:	b530      	push	{r4, r5, lr}
    a28a:	b083      	sub	sp, #12
    a28c:	0004      	movs	r4, r0
    a28e:	a806      	add	r0, sp, #24
    a290:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
    a292:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
    a294:	2903      	cmp	r1, #3
    a296:	dd1e      	ble.n	a2d6 <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
    a298:	210f      	movs	r1, #15
    a29a:	4011      	ands	r1, r2
	header.bits.dup = dup;
    a29c:	2001      	movs	r0, #1
    a29e:	4003      	ands	r3, r0
    a2a0:	00db      	lsls	r3, r3, #3
    a2a2:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
    a2a4:	3a06      	subs	r2, #6
    a2a6:	4250      	negs	r0, r2
    a2a8:	4142      	adcs	r2, r0
    a2aa:	0052      	lsls	r2, r2, #1
    a2ac:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
    a2ae:	4311      	orrs	r1, r2
    a2b0:	a801      	add	r0, sp, #4
    a2b2:	4b0a      	ldr	r3, [pc, #40]	; (a2dc <MQTTSerialize_ack+0x54>)
    a2b4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    a2b6:	2102      	movs	r1, #2
    a2b8:	9801      	ldr	r0, [sp, #4]
    a2ba:	4b09      	ldr	r3, [pc, #36]	; (a2e0 <MQTTSerialize_ack+0x58>)
    a2bc:	4798      	blx	r3
    a2be:	9b01      	ldr	r3, [sp, #4]
    a2c0:	469c      	mov	ip, r3
    a2c2:	4460      	add	r0, ip
    a2c4:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
    a2c6:	0029      	movs	r1, r5
    a2c8:	a801      	add	r0, sp, #4
    a2ca:	4b06      	ldr	r3, [pc, #24]	; (a2e4 <MQTTSerialize_ack+0x5c>)
    a2cc:	4798      	blx	r3
	rc = ptr - buf;
    a2ce:	9b01      	ldr	r3, [sp, #4]
    a2d0:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    a2d2:	b003      	add	sp, #12
    a2d4:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    a2d6:	2002      	movs	r0, #2
    a2d8:	4240      	negs	r0, r0
	return rc;
    a2da:	e7fa      	b.n	a2d2 <MQTTSerialize_ack+0x4a>
    a2dc:	0000a03f 	.word	0x0000a03f
    a2e0:	00009f55 	.word	0x00009f55
    a2e4:	0000a04b 	.word	0x0000a04b

0000a2e8 <uart_callback>:
void event_counter(struct events_resource *resource);

static void uart_callback(const struct usart_module *const module)
{
	static uint8_t ignore_cnt = 0;
	if (ignore_cnt > 0) {
    a2e8:	4b0d      	ldr	r3, [pc, #52]	; (a320 <uart_callback+0x38>)
    a2ea:	781b      	ldrb	r3, [r3, #0]
    a2ec:	2b00      	cmp	r3, #0
    a2ee:	d10f      	bne.n	a310 <uart_callback+0x28>
		ignore_cnt--;
		return;
		} else if (uart_ch_buffer == 0x1B) { // Ignore escape and following 2 characters.
    a2f0:	4b0c      	ldr	r3, [pc, #48]	; (a324 <uart_callback+0x3c>)
    a2f2:	881b      	ldrh	r3, [r3, #0]
    a2f4:	2b1b      	cmp	r3, #27
    a2f6:	d00f      	beq.n	a318 <uart_callback+0x30>
		ignore_cnt = 2;
		return;
		} else if (uart_ch_buffer == 0x8) { // Ignore backspace.
    a2f8:	2b08      	cmp	r3, #8
    a2fa:	d00c      	beq.n	a316 <uart_callback+0x2e>
		return;
	}
	// If input string is bigger than buffer size limit, ignore the excess part.
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    a2fc:	4a0a      	ldr	r2, [pc, #40]	; (a328 <uart_callback+0x40>)
    a2fe:	6812      	ldr	r2, [r2, #0]
    a300:	2a7f      	cmp	r2, #127	; 0x7f
    a302:	dc08      	bgt.n	a316 <uart_callback+0x2e>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    a304:	1c50      	adds	r0, r2, #1
    a306:	4908      	ldr	r1, [pc, #32]	; (a328 <uart_callback+0x40>)
    a308:	6008      	str	r0, [r1, #0]
    a30a:	4908      	ldr	r1, [pc, #32]	; (a32c <uart_callback+0x44>)
    a30c:	548b      	strb	r3, [r1, r2]
    a30e:	e002      	b.n	a316 <uart_callback+0x2e>
		ignore_cnt--;
    a310:	3b01      	subs	r3, #1
    a312:	4a03      	ldr	r2, [pc, #12]	; (a320 <uart_callback+0x38>)
    a314:	7013      	strb	r3, [r2, #0]
	}
}
    a316:	4770      	bx	lr
		ignore_cnt = 2;
    a318:	2202      	movs	r2, #2
    a31a:	4b01      	ldr	r3, [pc, #4]	; (a320 <uart_callback+0x38>)
    a31c:	701a      	strb	r2, [r3, #0]
		return;
    a31e:	e7fa      	b.n	a316 <uart_callback+0x2e>
    a320:	20000f19 	.word	0x20000f19
    a324:	200013e0 	.word	0x200013e0
    a328:	200013dc 	.word	0x200013dc
    a32c:	2000135c 	.word	0x2000135c

0000a330 <event_counter>:
	events_enable_interrupt_source(resource, EVENTS_INTERRUPT_DETECT);
}


void event_counter(struct events_resource *resource)
{
    a330:	b510      	push	{r4, lr}
    a332:	0004      	movs	r4, r0
	if(events_is_interrupt_set(resource, EVENTS_INTERRUPT_DETECT)) {
    a334:	2101      	movs	r1, #1
    a336:	4b0c      	ldr	r3, [pc, #48]	; (a368 <event_counter+0x38>)
    a338:	4798      	blx	r3
    a33a:	2800      	cmp	r0, #0
    a33c:	d012      	beq.n	a364 <event_counter+0x34>
		//printf("Event fired!\r\n");
		//Only when the two bools are tru will the "publishInterruptBool" become true.
		//When it is true, the if statment in main will pass and the application wil publish to GCP
		//The interrupt service cannot publish to the cloud as the interrupt service freezes alot of the functionality
		//which may include the wifi module
		if(canPublish == true && gcpConnected == true){
    a33e:	4b0b      	ldr	r3, [pc, #44]	; (a36c <event_counter+0x3c>)
    a340:	781b      	ldrb	r3, [r3, #0]
    a342:	2b00      	cmp	r3, #0
    a344:	d006      	beq.n	a354 <event_counter+0x24>
    a346:	4b0a      	ldr	r3, [pc, #40]	; (a370 <event_counter+0x40>)
    a348:	781b      	ldrb	r3, [r3, #0]
    a34a:	2b00      	cmp	r3, #0
    a34c:	d002      	beq.n	a354 <event_counter+0x24>
			publishInterruptBool = true;
    a34e:	2201      	movs	r2, #1
    a350:	4b08      	ldr	r3, [pc, #32]	; (a374 <event_counter+0x44>)
    a352:	701a      	strb	r2, [r3, #0]
		}
		
		event_count++;
    a354:	4a08      	ldr	r2, [pc, #32]	; (a378 <event_counter+0x48>)
    a356:	6813      	ldr	r3, [r2, #0]
    a358:	3301      	adds	r3, #1
    a35a:	6013      	str	r3, [r2, #0]
		
		events_ack_interrupt(resource, EVENTS_INTERRUPT_DETECT);
    a35c:	2101      	movs	r1, #1
    a35e:	0020      	movs	r0, r4
    a360:	4b06      	ldr	r3, [pc, #24]	; (a37c <event_counter+0x4c>)
    a362:	4798      	blx	r3

	}
}
    a364:	bd10      	pop	{r4, pc}
    a366:	46c0      	nop			; (mov r8, r8)
    a368:	00000c9d 	.word	0x00000c9d
    a36c:	20000878 	.word	0x20000878
    a370:	20000f18 	.word	0x20000f18
    a374:	20001358 	.word	0x20001358
    a378:	200008e0 	.word	0x200008e0
    a37c:	00000cd9 	.word	0x00000cd9

0000a380 <set_dev_name_to_mac>:
{
    a380:	b570      	push	{r4, r5, r6, lr}
    a382:	0004      	movs	r4, r0
    a384:	000d      	movs	r5, r1
	len = m2m_strlen(name);
    a386:	4b19      	ldr	r3, [pc, #100]	; (a3ec <set_dev_name_to_mac+0x6c>)
    a388:	4798      	blx	r3
	if (len >= 5) {
    a38a:	2804      	cmp	r0, #4
    a38c:	d92d      	bls.n	a3ea <set_dev_name_to_mac+0x6a>
		name[len - 1] = HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
    a38e:	1e42      	subs	r2, r0, #1
    a390:	18a2      	adds	r2, r4, r2
    a392:	796b      	ldrb	r3, [r5, #5]
    a394:	210f      	movs	r1, #15
    a396:	400b      	ands	r3, r1
    a398:	0019      	movs	r1, r3
    a39a:	3130      	adds	r1, #48	; 0x30
    a39c:	2b09      	cmp	r3, #9
    a39e:	dd01      	ble.n	a3a4 <set_dev_name_to_mac+0x24>
    a3a0:	3337      	adds	r3, #55	; 0x37
    a3a2:	0019      	movs	r1, r3
    a3a4:	7011      	strb	r1, [r2, #0]
		name[len - 2] = HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
    a3a6:	1e82      	subs	r2, r0, #2
    a3a8:	18a2      	adds	r2, r4, r2
    a3aa:	796b      	ldrb	r3, [r5, #5]
    a3ac:	091b      	lsrs	r3, r3, #4
    a3ae:	0019      	movs	r1, r3
    a3b0:	3130      	adds	r1, #48	; 0x30
    a3b2:	2b09      	cmp	r3, #9
    a3b4:	dd01      	ble.n	a3ba <set_dev_name_to_mac+0x3a>
    a3b6:	3337      	adds	r3, #55	; 0x37
    a3b8:	0019      	movs	r1, r3
    a3ba:	7011      	strb	r1, [r2, #0]
		name[len - 4] = HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
    a3bc:	1f02      	subs	r2, r0, #4
    a3be:	18a2      	adds	r2, r4, r2
    a3c0:	792b      	ldrb	r3, [r5, #4]
    a3c2:	210f      	movs	r1, #15
    a3c4:	400b      	ands	r3, r1
    a3c6:	0019      	movs	r1, r3
    a3c8:	3130      	adds	r1, #48	; 0x30
    a3ca:	2b09      	cmp	r3, #9
    a3cc:	dd01      	ble.n	a3d2 <set_dev_name_to_mac+0x52>
    a3ce:	3337      	adds	r3, #55	; 0x37
    a3d0:	0019      	movs	r1, r3
    a3d2:	7011      	strb	r1, [r2, #0]
		name[len - 5] = HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
    a3d4:	3805      	subs	r0, #5
    a3d6:	1824      	adds	r4, r4, r0
    a3d8:	792b      	ldrb	r3, [r5, #4]
    a3da:	091b      	lsrs	r3, r3, #4
    a3dc:	001a      	movs	r2, r3
    a3de:	3230      	adds	r2, #48	; 0x30
    a3e0:	2b09      	cmp	r3, #9
    a3e2:	dd01      	ble.n	a3e8 <set_dev_name_to_mac+0x68>
    a3e4:	3337      	adds	r3, #55	; 0x37
    a3e6:	001a      	movs	r2, r3
    a3e8:	7022      	strb	r2, [r4, #0]
}
    a3ea:	bd70      	pop	{r4, r5, r6, pc}
    a3ec:	00003cd1 	.word	0x00003cd1

0000a3f0 <socket_resolve_handler>:
{
    a3f0:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    a3f2:	4b01      	ldr	r3, [pc, #4]	; (a3f8 <socket_resolve_handler+0x8>)
    a3f4:	4798      	blx	r3
}
    a3f6:	bd10      	pop	{r4, pc}
    a3f8:	00009ad5 	.word	0x00009ad5

0000a3fc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    a3fc:	b570      	push	{r4, r5, r6, lr}
    a3fe:	b082      	sub	sp, #8
    a400:	0005      	movs	r5, r0
    a402:	000e      	movs	r6, r1
	uint16_t temp = 0;
    a404:	2200      	movs	r2, #0
    a406:	466b      	mov	r3, sp
    a408:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    a40a:	4c06      	ldr	r4, [pc, #24]	; (a424 <usart_serial_getchar+0x28>)
    a40c:	466b      	mov	r3, sp
    a40e:	1d99      	adds	r1, r3, #6
    a410:	0028      	movs	r0, r5
    a412:	47a0      	blx	r4
    a414:	2800      	cmp	r0, #0
    a416:	d1f9      	bne.n	a40c <usart_serial_getchar+0x10>

	*c = temp;
    a418:	466b      	mov	r3, sp
    a41a:	3306      	adds	r3, #6
    a41c:	881b      	ldrh	r3, [r3, #0]
    a41e:	7033      	strb	r3, [r6, #0]
}
    a420:	b002      	add	sp, #8
    a422:	bd70      	pop	{r4, r5, r6, pc}
    a424:	00008471 	.word	0x00008471

0000a428 <usart_serial_putchar>:
{
    a428:	b570      	push	{r4, r5, r6, lr}
    a42a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    a42c:	b28c      	uxth	r4, r1
    a42e:	4e03      	ldr	r6, [pc, #12]	; (a43c <usart_serial_putchar+0x14>)
    a430:	0021      	movs	r1, r4
    a432:	0028      	movs	r0, r5
    a434:	47b0      	blx	r6
    a436:	2800      	cmp	r0, #0
    a438:	d1fa      	bne.n	a430 <usart_serial_putchar+0x8>
}
    a43a:	bd70      	pop	{r4, r5, r6, pc}
    a43c:	00008445 	.word	0x00008445

0000a440 <getTimestamp>:
uint32_t getTimestamp(uint32_t year, uint32_t month, uint32_t day,uint32_t hour, uint32_t minute, uint32_t second ){
    a440:	b5f0      	push	{r4, r5, r6, r7, lr}
    a442:	46c6      	mov	lr, r8
    a444:	b500      	push	{lr}
    a446:	0006      	movs	r6, r0
    a448:	000f      	movs	r7, r1
    a44a:	4698      	mov	r8, r3
	if(month <= 2)
    a44c:	2902      	cmp	r1, #2
    a44e:	d801      	bhi.n	a454 <getTimestamp+0x14>
		month += 12;
    a450:	370c      	adds	r7, #12
		year -= 1;
    a452:	3e01      	subs	r6, #1
	ret = (365 * year) + (year / 4) - (year / 100) + (year / 400);
    a454:	246e      	movs	r4, #110	; 0x6e
    a456:	34ff      	adds	r4, #255	; 0xff
    a458:	4374      	muls	r4, r6
	ret -= 719561;
    a45a:	4b16      	ldr	r3, [pc, #88]	; (a4b4 <getTimestamp+0x74>)
    a45c:	469c      	mov	ip, r3
    a45e:	4462      	add	r2, ip
    a460:	18a4      	adds	r4, r4, r2
	ret = (365 * year) + (year / 4) - (year / 100) + (year / 400);
    a462:	08b0      	lsrs	r0, r6, #2
	ret -= 719561;
    a464:	1824      	adds	r4, r4, r0
	ret = (365 * year) + (year / 4) - (year / 100) + (year / 400);
    a466:	4d14      	ldr	r5, [pc, #80]	; (a4b8 <getTimestamp+0x78>)
    a468:	21c8      	movs	r1, #200	; 0xc8
    a46a:	0049      	lsls	r1, r1, #1
    a46c:	0030      	movs	r0, r6
    a46e:	47a8      	blx	r5
	ret -= 719561;
    a470:	1824      	adds	r4, r4, r0
	ret += (30 * month) + (3 * (month + 1) / 5) + day;
    a472:	0138      	lsls	r0, r7, #4
    a474:	1bc0      	subs	r0, r0, r7
    a476:	0040      	lsls	r0, r0, #1
	ret -= 719561;
    a478:	1824      	adds	r4, r4, r0
	ret = (365 * year) + (year / 4) - (year / 100) + (year / 400);
    a47a:	2164      	movs	r1, #100	; 0x64
    a47c:	0030      	movs	r0, r6
    a47e:	47a8      	blx	r5
	ret -= 719561;
    a480:	1a24      	subs	r4, r4, r0
	ret += (30 * month) + (3 * (month + 1) / 5) + day;
    a482:	3701      	adds	r7, #1
    a484:	0078      	lsls	r0, r7, #1
    a486:	19c0      	adds	r0, r0, r7
    a488:	2105      	movs	r1, #5
    a48a:	47a8      	blx	r5
	ret -= 719561;
    a48c:	1824      	adds	r4, r4, r0
	ret *= 86400;
    a48e:	480b      	ldr	r0, [pc, #44]	; (a4bc <getTimestamp+0x7c>)
    a490:	4344      	muls	r4, r0
	ret += (3600 * hour) + (60 * minute) + second;
    a492:	9b06      	ldr	r3, [sp, #24]
    a494:	0118      	lsls	r0, r3, #4
    a496:	1ac0      	subs	r0, r0, r3
    a498:	0080      	lsls	r0, r0, #2
    a49a:	9b07      	ldr	r3, [sp, #28]
    a49c:	469c      	mov	ip, r3
    a49e:	4460      	add	r0, ip
    a4a0:	23e1      	movs	r3, #225	; 0xe1
    a4a2:	011b      	lsls	r3, r3, #4
    a4a4:	4646      	mov	r6, r8
    a4a6:	435e      	muls	r6, r3
    a4a8:	1980      	adds	r0, r0, r6
    a4aa:	1900      	adds	r0, r0, r4
}
    a4ac:	bc04      	pop	{r2}
    a4ae:	4690      	mov	r8, r2
    a4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4b2:	46c0      	nop			; (mov r8, r8)
    a4b4:	fff50537 	.word	0xfff50537
    a4b8:	0000b65d 	.word	0x0000b65d
    a4bc:	00015180 	.word	0x00015180

0000a4c0 <wifi_callback>:
{
    a4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4c2:	46c6      	mov	lr, r8
    a4c4:	b500      	push	{lr}
    a4c6:	b082      	sub	sp, #8
    a4c8:	000c      	movs	r4, r1
	switch (msg_type) {
    a4ca:	281b      	cmp	r0, #27
    a4cc:	d02a      	beq.n	a524 <wifi_callback+0x64>
    a4ce:	d90f      	bls.n	a4f0 <wifi_callback+0x30>
    a4d0:	282c      	cmp	r0, #44	; 0x2c
    a4d2:	d01a      	beq.n	a50a <wifi_callback+0x4a>
    a4d4:	2832      	cmp	r0, #50	; 0x32
    a4d6:	d107      	bne.n	a4e8 <wifi_callback+0x28>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    a4d8:	788b      	ldrb	r3, [r1, #2]
    a4da:	784a      	ldrb	r2, [r1, #1]
    a4dc:	7809      	ldrb	r1, [r1, #0]
    a4de:	78e0      	ldrb	r0, [r4, #3]
    a4e0:	9000      	str	r0, [sp, #0]
    a4e2:	4845      	ldr	r0, [pc, #276]	; (a5f8 <wifi_callback+0x138>)
    a4e4:	4c45      	ldr	r4, [pc, #276]	; (a5fc <wifi_callback+0x13c>)
    a4e6:	47a0      	blx	r4
}
    a4e8:	b002      	add	sp, #8
    a4ea:	bc04      	pop	{r2}
    a4ec:	4690      	mov	r8, r2
    a4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (msg_type) {
    a4f0:	2809      	cmp	r0, #9
    a4f2:	d1f9      	bne.n	a4e8 <wifi_callback+0x28>
			printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO.\r\n");
    a4f4:	4842      	ldr	r0, [pc, #264]	; (a600 <wifi_callback+0x140>)
    a4f6:	4b43      	ldr	r3, [pc, #268]	; (a604 <wifi_callback+0x144>)
    a4f8:	4798      	blx	r3
			if (pstrProvInfo->u8Status == M2M_SUCCESS) {
    a4fa:	2363      	movs	r3, #99	; 0x63
    a4fc:	5ce3      	ldrb	r3, [r4, r3]
    a4fe:	2b00      	cmp	r3, #0
    a500:	d01d      	beq.n	a53e <wifi_callback+0x7e>
				printf("wifi_cb: Provision failed.\r\n");
    a502:	4841      	ldr	r0, [pc, #260]	; (a608 <wifi_callback+0x148>)
    a504:	4b3f      	ldr	r3, [pc, #252]	; (a604 <wifi_callback+0x144>)
    a506:	4798      	blx	r3
}
    a508:	e7ee      	b.n	a4e8 <wifi_callback+0x28>
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    a50a:	780b      	ldrb	r3, [r1, #0]
    a50c:	2b01      	cmp	r3, #1
    a50e:	d005      	beq.n	a51c <wifi_callback+0x5c>
			} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    a510:	2b00      	cmp	r3, #0
    a512:	d1e9      	bne.n	a4e8 <wifi_callback+0x28>
			printf("Wi-Fi disconnected\r\n");
    a514:	483d      	ldr	r0, [pc, #244]	; (a60c <wifi_callback+0x14c>)
    a516:	4b3b      	ldr	r3, [pc, #236]	; (a604 <wifi_callback+0x144>)
    a518:	4798      	blx	r3
    a51a:	e7e5      	b.n	a4e8 <wifi_callback+0x28>
			printf("Wi-Fi connected\r\n");
    a51c:	483c      	ldr	r0, [pc, #240]	; (a610 <wifi_callback+0x150>)
    a51e:	4b39      	ldr	r3, [pc, #228]	; (a604 <wifi_callback+0x144>)
    a520:	4798      	blx	r3
    a522:	e7e1      	b.n	a4e8 <wifi_callback+0x28>
			utc = getTimestamp(strSysTime_now->u16Year, strSysTime_now->u8Month, strSysTime_now->u8Day, strSysTime_now->u8Hour, strSysTime_now->u8Minute, strSysTime_now->u8Second );
    a524:	790b      	ldrb	r3, [r1, #4]
    a526:	78ca      	ldrb	r2, [r1, #3]
    a528:	7889      	ldrb	r1, [r1, #2]
    a52a:	8820      	ldrh	r0, [r4, #0]
    a52c:	79a5      	ldrb	r5, [r4, #6]
    a52e:	9501      	str	r5, [sp, #4]
    a530:	7964      	ldrb	r4, [r4, #5]
    a532:	9400      	str	r4, [sp, #0]
    a534:	4c37      	ldr	r4, [pc, #220]	; (a614 <wifi_callback+0x154>)
    a536:	47a0      	blx	r4
    a538:	4b37      	ldr	r3, [pc, #220]	; (a618 <wifi_callback+0x158>)
    a53a:	6018      	str	r0, [r3, #0]
			break;
    a53c:	e7d4      	b.n	a4e8 <wifi_callback+0x28>
				m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    a53e:	0020      	movs	r0, r4
    a540:	4b36      	ldr	r3, [pc, #216]	; (a61c <wifi_callback+0x15c>)
    a542:	4798      	blx	r3
				pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
    a544:	0025      	movs	r5, r4
    a546:	3521      	adds	r5, #33	; 0x21
				m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    a548:	2362      	movs	r3, #98	; 0x62
    a54a:	5ce2      	ldrb	r2, [r4, r3]
    a54c:	b2c1      	uxtb	r1, r0
    a54e:	339d      	adds	r3, #157	; 0x9d
    a550:	9300      	str	r3, [sp, #0]
    a552:	002b      	movs	r3, r5
    a554:	0020      	movs	r0, r4
    a556:	4e32      	ldr	r6, [pc, #200]	; (a620 <wifi_callback+0x160>)
    a558:	47b0      	blx	r6
				SSID = pstrProvInfo->au8SSID;
    a55a:	4f32      	ldr	r7, [pc, #200]	; (a624 <wifi_callback+0x164>)
    a55c:	603c      	str	r4, [r7, #0]
				Password = pstrProvInfo->au8Password;
    a55e:	4b32      	ldr	r3, [pc, #200]	; (a628 <wifi_callback+0x168>)
    a560:	4698      	mov	r8, r3
    a562:	601d      	str	r5, [r3, #0]
				printf("SSID %s\r\n", SSID);
    a564:	0021      	movs	r1, r4
    a566:	4831      	ldr	r0, [pc, #196]	; (a62c <wifi_callback+0x16c>)
    a568:	4d24      	ldr	r5, [pc, #144]	; (a5fc <wifi_callback+0x13c>)
    a56a:	47a8      	blx	r5
				at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);
    a56c:	4c30      	ldr	r4, [pc, #192]	; (a630 <wifi_callback+0x170>)
    a56e:	2200      	movs	r2, #0
    a570:	2180      	movs	r1, #128	; 0x80
    a572:	0249      	lsls	r1, r1, #9
    a574:	0020      	movs	r0, r4
    a576:	4e2f      	ldr	r6, [pc, #188]	; (a634 <wifi_callback+0x174>)
    a578:	47b0      	blx	r6
				at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x20000, false);
    a57a:	2200      	movs	r2, #0
    a57c:	2180      	movs	r1, #128	; 0x80
    a57e:	0289      	lsls	r1, r1, #10
    a580:	0020      	movs	r0, r4
    a582:	47b0      	blx	r6
				at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);
    a584:	2200      	movs	r2, #0
    a586:	2180      	movs	r1, #128	; 0x80
    a588:	0249      	lsls	r1, r1, #9
    a58a:	0020      	movs	r0, r4
    a58c:	4e2a      	ldr	r6, [pc, #168]	; (a638 <wifi_callback+0x178>)
    a58e:	47b0      	blx	r6
				at25dfx_chip_erase_block(&at25dfx_chip, 0x20000, AT25DFX_BLOCK_SIZE_4KB);
    a590:	2200      	movs	r2, #0
    a592:	2180      	movs	r1, #128	; 0x80
    a594:	0289      	lsls	r1, r1, #10
    a596:	0020      	movs	r0, r4
    a598:	47b0      	blx	r6
				at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, SSID, AT25DFX_BUFFER_SIZE);
    a59a:	683a      	ldr	r2, [r7, #0]
    a59c:	2364      	movs	r3, #100	; 0x64
    a59e:	2180      	movs	r1, #128	; 0x80
    a5a0:	0249      	lsls	r1, r1, #9
    a5a2:	0020      	movs	r0, r4
    a5a4:	4f25      	ldr	r7, [pc, #148]	; (a63c <wifi_callback+0x17c>)
    a5a6:	47b8      	blx	r7
				at25dfx_chip_write_buffer(&at25dfx_chip, 0x20000, Password, AT25DFX_BUFFER_SIZE);
    a5a8:	2364      	movs	r3, #100	; 0x64
    a5aa:	4642      	mov	r2, r8
    a5ac:	6812      	ldr	r2, [r2, #0]
    a5ae:	2180      	movs	r1, #128	; 0x80
    a5b0:	0289      	lsls	r1, r1, #10
    a5b2:	0020      	movs	r0, r4
    a5b4:	47b8      	blx	r7
				at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
    a5b6:	2101      	movs	r1, #1
    a5b8:	0020      	movs	r0, r4
    a5ba:	4b21      	ldr	r3, [pc, #132]	; (a640 <wifi_callback+0x180>)
    a5bc:	4798      	blx	r3
				at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, SSID_Read, AT25DFX_BUFFER_SIZE);
    a5be:	4f21      	ldr	r7, [pc, #132]	; (a644 <wifi_callback+0x184>)
    a5c0:	2364      	movs	r3, #100	; 0x64
    a5c2:	003a      	movs	r2, r7
    a5c4:	2180      	movs	r1, #128	; 0x80
    a5c6:	0249      	lsls	r1, r1, #9
    a5c8:	0020      	movs	r0, r4
    a5ca:	4e1f      	ldr	r6, [pc, #124]	; (a648 <wifi_callback+0x188>)
    a5cc:	47b0      	blx	r6
				printf("SSID read from flash:  %s\r\n", SSID_Read);
    a5ce:	0039      	movs	r1, r7
    a5d0:	481e      	ldr	r0, [pc, #120]	; (a64c <wifi_callback+0x18c>)
    a5d2:	47a8      	blx	r5
				at25dfx_chip_read_buffer(&at25dfx_chip, 0x20000, Password, AT25DFX_BUFFER_SIZE);
    a5d4:	2364      	movs	r3, #100	; 0x64
    a5d6:	4642      	mov	r2, r8
    a5d8:	6812      	ldr	r2, [r2, #0]
    a5da:	2180      	movs	r1, #128	; 0x80
    a5dc:	0289      	lsls	r1, r1, #10
    a5de:	0020      	movs	r0, r4
    a5e0:	47b0      	blx	r6
				printf("Password read from flash:  %s\r\n", Password);
    a5e2:	4643      	mov	r3, r8
    a5e4:	6819      	ldr	r1, [r3, #0]
    a5e6:	481a      	ldr	r0, [pc, #104]	; (a650 <wifi_callback+0x190>)
    a5e8:	47a8      	blx	r5
				m2m_wifi_request_dhcp_client();
    a5ea:	4b1a      	ldr	r3, [pc, #104]	; (a654 <wifi_callback+0x194>)
    a5ec:	4798      	blx	r3
				wifi_connected = 1;
    a5ee:	2201      	movs	r2, #1
    a5f0:	4b19      	ldr	r3, [pc, #100]	; (a658 <wifi_callback+0x198>)
    a5f2:	701a      	strb	r2, [r3, #0]
    a5f4:	e778      	b.n	a4e8 <wifi_callback+0x28>
    a5f6:	46c0      	nop			; (mov r8, r8)
    a5f8:	000105b0 	.word	0x000105b0
    a5fc:	0000d4d5 	.word	0x0000d4d5
    a600:	000105cc 	.word	0x000105cc
    a604:	0000d5f1 	.word	0x0000d5f1
    a608:	0001063c 	.word	0x0001063c
    a60c:	0001059c 	.word	0x0001059c
    a610:	00010588 	.word	0x00010588
    a614:	0000a441 	.word	0x0000a441
    a618:	200016a0 	.word	0x200016a0
    a61c:	0000d851 	.word	0x0000d851
    a620:	000051c1 	.word	0x000051c1
    a624:	20002160 	.word	0x20002160
    a628:	20001fb4 	.word	0x20001fb4
    a62c:	000105f4 	.word	0x000105f4
    a630:	200019e0 	.word	0x200019e0
    a634:	00000a65 	.word	0x00000a65
    a638:	0000075d 	.word	0x0000075d
    a63c:	00000321 	.word	0x00000321
    a640:	00000975 	.word	0x00000975
    a644:	20001a24 	.word	0x20001a24
    a648:	00000229 	.word	0x00000229
    a64c:	00010600 	.word	0x00010600
    a650:	0001061c 	.word	0x0001061c
    a654:	0000520d 	.word	0x0000520d
    a658:	200013e2 	.word	0x200013e2

0000a65c <client_socket_cb>:
void client_socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg){
    a65c:	b510      	push	{r4, lr}
	switch (u8Msg) {
    a65e:	2906      	cmp	r1, #6
    a660:	d02c      	beq.n	a6bc <client_socket_cb+0x60>
    a662:	2907      	cmp	r1, #7
    a664:	d01e      	beq.n	a6a4 <client_socket_cb+0x48>
    a666:	2905      	cmp	r1, #5
    a668:	d000      	beq.n	a66c <client_socket_cb+0x10>
}
    a66a:	bd10      	pop	{r4, pc}
			if (pstrConnect && pstrConnect->s8Error >= 0) {
    a66c:	2a00      	cmp	r2, #0
    a66e:	d00e      	beq.n	a68e <client_socket_cb+0x32>
    a670:	7853      	ldrb	r3, [r2, #1]
    a672:	2b7f      	cmp	r3, #127	; 0x7f
    a674:	d80b      	bhi.n	a68e <client_socket_cb+0x32>
				printf("socket_cb: connect success!\r\n");
    a676:	481c      	ldr	r0, [pc, #112]	; (a6e8 <client_socket_cb+0x8c>)
    a678:	4b1c      	ldr	r3, [pc, #112]	; (a6ec <client_socket_cb+0x90>)
    a67a:	4798      	blx	r3
				send(tcp_client_socket_external, &msg_wifi_product, sizeof(t_msg_wifi_product), 0);
    a67c:	4b1c      	ldr	r3, [pc, #112]	; (a6f0 <client_socket_cb+0x94>)
    a67e:	2000      	movs	r0, #0
    a680:	5618      	ldrsb	r0, [r3, r0]
    a682:	2300      	movs	r3, #0
    a684:	2209      	movs	r2, #9
    a686:	491b      	ldr	r1, [pc, #108]	; (a6f4 <client_socket_cb+0x98>)
    a688:	4c1b      	ldr	r4, [pc, #108]	; (a6f8 <client_socket_cb+0x9c>)
    a68a:	47a0      	blx	r4
    a68c:	e7ed      	b.n	a66a <client_socket_cb+0xe>
				printf("socket_cb: connect error!\r\n");
    a68e:	481b      	ldr	r0, [pc, #108]	; (a6fc <client_socket_cb+0xa0>)
    a690:	4b16      	ldr	r3, [pc, #88]	; (a6ec <client_socket_cb+0x90>)
    a692:	4798      	blx	r3
				close(tcp_client_socket_external);
    a694:	4c16      	ldr	r4, [pc, #88]	; (a6f0 <client_socket_cb+0x94>)
    a696:	2000      	movs	r0, #0
    a698:	5620      	ldrsb	r0, [r4, r0]
    a69a:	4b19      	ldr	r3, [pc, #100]	; (a700 <client_socket_cb+0xa4>)
    a69c:	4798      	blx	r3
				tcp_client_socket_external = -1;
    a69e:	23ff      	movs	r3, #255	; 0xff
    a6a0:	7023      	strb	r3, [r4, #0]
    a6a2:	e7e2      	b.n	a66a <client_socket_cb+0xe>
			printf("socket_cb: send success!\r\n");
    a6a4:	4817      	ldr	r0, [pc, #92]	; (a704 <client_socket_cb+0xa8>)
    a6a6:	4b11      	ldr	r3, [pc, #68]	; (a6ec <client_socket_cb+0x90>)
    a6a8:	4798      	blx	r3
			recv(tcp_client_socket_external, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
    a6aa:	4b11      	ldr	r3, [pc, #68]	; (a6f0 <client_socket_cb+0x94>)
    a6ac:	2000      	movs	r0, #0
    a6ae:	5618      	ldrsb	r0, [r3, r0]
    a6b0:	2300      	movs	r3, #0
    a6b2:	4a15      	ldr	r2, [pc, #84]	; (a708 <client_socket_cb+0xac>)
    a6b4:	4915      	ldr	r1, [pc, #84]	; (a70c <client_socket_cb+0xb0>)
    a6b6:	4c16      	ldr	r4, [pc, #88]	; (a710 <client_socket_cb+0xb4>)
    a6b8:	47a0      	blx	r4
		break;
    a6ba:	e7d6      	b.n	a66a <client_socket_cb+0xe>
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
    a6bc:	2a00      	cmp	r2, #0
    a6be:	d003      	beq.n	a6c8 <client_socket_cb+0x6c>
    a6c0:	2304      	movs	r3, #4
    a6c2:	5ed3      	ldrsh	r3, [r2, r3]
    a6c4:	2b00      	cmp	r3, #0
    a6c6:	dc0a      	bgt.n	a6de <client_socket_cb+0x82>
				printf("socket_cb: recv error!\r\n");
    a6c8:	4812      	ldr	r0, [pc, #72]	; (a714 <client_socket_cb+0xb8>)
    a6ca:	4b08      	ldr	r3, [pc, #32]	; (a6ec <client_socket_cb+0x90>)
    a6cc:	4798      	blx	r3
				close(tcp_client_socket_external);
    a6ce:	4c08      	ldr	r4, [pc, #32]	; (a6f0 <client_socket_cb+0x94>)
    a6d0:	2000      	movs	r0, #0
    a6d2:	5620      	ldrsb	r0, [r4, r0]
    a6d4:	4b0a      	ldr	r3, [pc, #40]	; (a700 <client_socket_cb+0xa4>)
    a6d6:	4798      	blx	r3
				tcp_client_socket_external = -1;
    a6d8:	23ff      	movs	r3, #255	; 0xff
    a6da:	7023      	strb	r3, [r4, #0]
}
    a6dc:	e7c5      	b.n	a66a <client_socket_cb+0xe>
				printf("socket_cb: recv success!\r\n");
    a6de:	480e      	ldr	r0, [pc, #56]	; (a718 <client_socket_cb+0xbc>)
    a6e0:	4b02      	ldr	r3, [pc, #8]	; (a6ec <client_socket_cb+0x90>)
    a6e2:	4798      	blx	r3
    a6e4:	e7c1      	b.n	a66a <client_socket_cb+0xe>
    a6e6:	46c0      	nop			; (mov r8, r8)
    a6e8:	0000feb8 	.word	0x0000feb8
    a6ec:	0000d5f1 	.word	0x0000d5f1
    a6f0:	2000018e 	.word	0x2000018e
    a6f4:	20000184 	.word	0x20000184
    a6f8:	00007101 	.word	0x00007101
    a6fc:	0000fed8 	.word	0x0000fed8
    a700:	0000722d 	.word	0x0000722d
    a704:	0000fef4 	.word	0x0000fef4
    a708:	000005b4 	.word	0x000005b4
    a70c:	20000964 	.word	0x20000964
    a710:	00007199 	.word	0x00007199
    a714:	0000ff2c 	.word	0x0000ff2c
    a718:	0000ff10 	.word	0x0000ff10

0000a71c <config_device>:
bool config_device(ATCADeviceType dev, uint8_t addr) {
    a71c:	b510      	push	{r4, lr}
	cfg.iface_type = ATCA_I2C_IFACE,
    a71e:	4b10      	ldr	r3, [pc, #64]	; (a760 <config_device+0x44>)
    a720:	2200      	movs	r2, #0
    a722:	701a      	strb	r2, [r3, #0]
	cfg.devtype = dev;
    a724:	7058      	strb	r0, [r3, #1]
	cfg.atcai2c.slave_address = addr << 1;
    a726:	0049      	lsls	r1, r1, #1
    a728:	7119      	strb	r1, [r3, #4]
	cfg.atcai2c.baud = 115200;
    a72a:	21e1      	movs	r1, #225	; 0xe1
    a72c:	0249      	lsls	r1, r1, #9
    a72e:	6099      	str	r1, [r3, #8]
	cfg.atcai2c.bus = 0;
    a730:	715a      	strb	r2, [r3, #5]
	cfg.wake_delay = (dev == ATECC108A) ? 800 : 2560;
    a732:	2801      	cmp	r0, #1
    a734:	d00c      	beq.n	a750 <config_device+0x34>
    a736:	23a0      	movs	r3, #160	; 0xa0
    a738:	011b      	lsls	r3, r3, #4
    a73a:	4809      	ldr	r0, [pc, #36]	; (a760 <config_device+0x44>)
    a73c:	8483      	strh	r3, [r0, #36]	; 0x24
	cfg.rx_retries = 25;
    a73e:	2319      	movs	r3, #25
    a740:	6283      	str	r3, [r0, #40]	; 0x28
	if (atcab_init(&cfg) != ATCA_SUCCESS)
    a742:	4b08      	ldr	r3, [pc, #32]	; (a764 <config_device+0x48>)
    a744:	4798      	blx	r3
	return false;
    a746:	2300      	movs	r3, #0
	if (atcab_init(&cfg) != ATCA_SUCCESS)
    a748:	2800      	cmp	r0, #0
    a74a:	d004      	beq.n	a756 <config_device+0x3a>
};
    a74c:	0018      	movs	r0, r3
    a74e:	bd10      	pop	{r4, pc}
	cfg.wake_delay = (dev == ATECC108A) ? 800 : 2560;
    a750:	23c8      	movs	r3, #200	; 0xc8
    a752:	009b      	lsls	r3, r3, #2
    a754:	e7f1      	b.n	a73a <config_device+0x1e>
	atcab_wakeup(); // may return error if device is already awake
    a756:	4b04      	ldr	r3, [pc, #16]	; (a768 <config_device+0x4c>)
    a758:	4798      	blx	r3
	return true;
    a75a:	2301      	movs	r3, #1
    a75c:	e7f6      	b.n	a74c <config_device+0x30>
    a75e:	46c0      	nop			; (mov r8, r8)
    a760:	200008b0 	.word	0x200008b0
    a764:	00001339 	.word	0x00001339
    a768:	000013a1 	.word	0x000013a1

0000a76c <config_mqtt_password>:
int config_mqtt_password(char* buf, size_t buflen){
    a76c:	b530      	push	{r4, r5, lr}
    a76e:	b083      	sub	sp, #12
    a770:	0005      	movs	r5, r0
    a772:	000c      	movs	r4, r1
	if(buf && buflen)
    a774:	2800      	cmp	r0, #0
    a776:	d032      	beq.n	a7de <config_mqtt_password+0x72>
    a778:	2900      	cmp	r1, #0
    a77a:	d033      	beq.n	a7e4 <config_mqtt_password+0x78>
		m2m_wifi_get_system_time();
    a77c:	4b1b      	ldr	r3, [pc, #108]	; (a7ec <config_mqtt_password+0x80>)
    a77e:	4798      	blx	r3
		uint32_t ts = rtc_count_get_count(&rtc_instance);
    a780:	481b      	ldr	r0, [pc, #108]	; (a7f0 <config_mqtt_password+0x84>)
    a782:	4b1c      	ldr	r3, [pc, #112]	; (a7f4 <config_mqtt_password+0x88>)
    a784:	4798      	blx	r3
		rv = atca_jwt_init(&jwt, buf, buflen);
    a786:	b2a2      	uxth	r2, r4
    a788:	0029      	movs	r1, r5
    a78a:	4668      	mov	r0, sp
    a78c:	4b1a      	ldr	r3, [pc, #104]	; (a7f8 <config_mqtt_password+0x8c>)
    a78e:	4798      	blx	r3
    a790:	1e04      	subs	r4, r0, #0
		if(ATCA_SUCCESS != rv)
    a792:	d002      	beq.n	a79a <config_mqtt_password+0x2e>
}
    a794:	0020      	movs	r0, r4
    a796:	b003      	add	sp, #12
    a798:	bd30      	pop	{r4, r5, pc}
		if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_numeric(&jwt, "iat", utc)))
    a79a:	4b18      	ldr	r3, [pc, #96]	; (a7fc <config_mqtt_password+0x90>)
    a79c:	681a      	ldr	r2, [r3, #0]
    a79e:	4918      	ldr	r1, [pc, #96]	; (a800 <config_mqtt_password+0x94>)
    a7a0:	4668      	mov	r0, sp
    a7a2:	4b18      	ldr	r3, [pc, #96]	; (a804 <config_mqtt_password+0x98>)
    a7a4:	4798      	blx	r3
    a7a6:	1e04      	subs	r4, r0, #0
    a7a8:	d1f4      	bne.n	a794 <config_mqtt_password+0x28>
		if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_numeric(&jwt, "exp", utc + 86400)))
    a7aa:	4b14      	ldr	r3, [pc, #80]	; (a7fc <config_mqtt_password+0x90>)
    a7ac:	681a      	ldr	r2, [r3, #0]
    a7ae:	4b16      	ldr	r3, [pc, #88]	; (a808 <config_mqtt_password+0x9c>)
    a7b0:	469c      	mov	ip, r3
    a7b2:	4462      	add	r2, ip
    a7b4:	4915      	ldr	r1, [pc, #84]	; (a80c <config_mqtt_password+0xa0>)
    a7b6:	4668      	mov	r0, sp
    a7b8:	4b12      	ldr	r3, [pc, #72]	; (a804 <config_mqtt_password+0x98>)
    a7ba:	4798      	blx	r3
    a7bc:	1e04      	subs	r4, r0, #0
    a7be:	d1e9      	bne.n	a794 <config_mqtt_password+0x28>
		if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_string(&jwt, "aud", PROJECT_ID)))
    a7c0:	4a13      	ldr	r2, [pc, #76]	; (a810 <config_mqtt_password+0xa4>)
    a7c2:	4914      	ldr	r1, [pc, #80]	; (a814 <config_mqtt_password+0xa8>)
    a7c4:	4668      	mov	r0, sp
    a7c6:	4b14      	ldr	r3, [pc, #80]	; (a818 <config_mqtt_password+0xac>)
    a7c8:	4798      	blx	r3
    a7ca:	1e04      	subs	r4, r0, #0
    a7cc:	d1e2      	bne.n	a794 <config_mqtt_password+0x28>
		rv = atca_jwt_finalize(&jwt, 0);
    a7ce:	2100      	movs	r1, #0
    a7d0:	4668      	mov	r0, sp
    a7d2:	4b12      	ldr	r3, [pc, #72]	; (a81c <config_mqtt_password+0xb0>)
    a7d4:	4798      	blx	r3
    a7d6:	0004      	movs	r4, r0
		atcab_release();
    a7d8:	4b11      	ldr	r3, [pc, #68]	; (a820 <config_mqtt_password+0xb4>)
    a7da:	4798      	blx	r3
    a7dc:	e7da      	b.n	a794 <config_mqtt_password+0x28>
	int rv = -1;
    a7de:	2401      	movs	r4, #1
    a7e0:	4264      	negs	r4, r4
    a7e2:	e7d7      	b.n	a794 <config_mqtt_password+0x28>
    a7e4:	2401      	movs	r4, #1
    a7e6:	4264      	negs	r4, r4
    a7e8:	e7d4      	b.n	a794 <config_mqtt_password+0x28>
    a7ea:	46c0      	nop			; (mov r8, r8)
    a7ec:	000053ed 	.word	0x000053ed
    a7f0:	20001834 	.word	0x20001834
    a7f4:	000026f5 	.word	0x000026f5
    a7f8:	0000243d 	.word	0x0000243d
    a7fc:	200016a0 	.word	0x200016a0
    a800:	0000ffa0 	.word	0x0000ffa0
    a804:	00002681 	.word	0x00002681
    a808:	00015180 	.word	0x00015180
    a80c:	0000ffa4 	.word	0x0000ffa4
    a810:	0000ffa8 	.word	0x0000ffa8
    a814:	0000ffbc 	.word	0x0000ffbc
    a818:	0000260d 	.word	0x0000260d
    a81c:	000024a9 	.word	0x000024a9
    a820:	00001325 	.word	0x00001325

0000a824 <mqtt_callback>:
{
    a824:	b530      	push	{r4, r5, lr}
    a826:	b087      	sub	sp, #28
    a828:	0004      	movs	r4, r0
	switch (type) {
    a82a:	2901      	cmp	r1, #1
    a82c:	d033      	beq.n	a896 <mqtt_callback+0x72>
    a82e:	2905      	cmp	r1, #5
    a830:	d047      	beq.n	a8c2 <mqtt_callback+0x9e>
    a832:	2900      	cmp	r1, #0
    a834:	d001      	beq.n	a83a <mqtt_callback+0x16>
}
    a836:	b007      	add	sp, #28
    a838:	bd30      	pop	{r4, r5, pc}
			if (data->sock_connected.result >= 0) {
    a83a:	6813      	ldr	r3, [r2, #0]
    a83c:	2b00      	cmp	r3, #0
    a83e:	db20      	blt.n	a882 <mqtt_callback+0x5e>
				printf("\r\nConnecting to Broker...");
    a840:	4825      	ldr	r0, [pc, #148]	; (a8d8 <mqtt_callback+0xb4>)
    a842:	4b26      	ldr	r3, [pc, #152]	; (a8dc <mqtt_callback+0xb8>)
    a844:	4798      	blx	r3
				memset(mqtt_password, 0, sizeof mqtt_password);
    a846:	4d26      	ldr	r5, [pc, #152]	; (a8e0 <mqtt_callback+0xbc>)
    a848:	2280      	movs	r2, #128	; 0x80
    a84a:	00d2      	lsls	r2, r2, #3
    a84c:	2100      	movs	r1, #0
    a84e:	0028      	movs	r0, r5
    a850:	4b24      	ldr	r3, [pc, #144]	; (a8e4 <mqtt_callback+0xc0>)
    a852:	4798      	blx	r3
				config_mqtt_password(mqtt_password, size1);
    a854:	2180      	movs	r1, #128	; 0x80
    a856:	0089      	lsls	r1, r1, #2
    a858:	0028      	movs	r0, r5
    a85a:	4b23      	ldr	r3, [pc, #140]	; (a8e8 <mqtt_callback+0xc4>)
    a85c:	4798      	blx	r3
				delay_ms(100);
    a85e:	2064      	movs	r0, #100	; 0x64
    a860:	4b22      	ldr	r3, [pc, #136]	; (a8ec <mqtt_callback+0xc8>)
    a862:	4798      	blx	r3
				mqtt_connect_broker(module_inst, 1, mqtt_user, mqtt_password, clientID , NULL, NULL, 0, 0, 0);
    a864:	2300      	movs	r3, #0
    a866:	9305      	str	r3, [sp, #20]
    a868:	9304      	str	r3, [sp, #16]
    a86a:	9303      	str	r3, [sp, #12]
    a86c:	9302      	str	r3, [sp, #8]
    a86e:	9301      	str	r3, [sp, #4]
    a870:	4b1f      	ldr	r3, [pc, #124]	; (a8f0 <mqtt_callback+0xcc>)
    a872:	9300      	str	r3, [sp, #0]
    a874:	002b      	movs	r3, r5
    a876:	4a1f      	ldr	r2, [pc, #124]	; (a8f4 <mqtt_callback+0xd0>)
    a878:	2101      	movs	r1, #1
    a87a:	0020      	movs	r0, r4
    a87c:	4c1e      	ldr	r4, [pc, #120]	; (a8f8 <mqtt_callback+0xd4>)
    a87e:	47a0      	blx	r4
    a880:	e7d9      	b.n	a836 <mqtt_callback+0x12>
				printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    a882:	4d1e      	ldr	r5, [pc, #120]	; (a8fc <mqtt_callback+0xd8>)
    a884:	0029      	movs	r1, r5
    a886:	481e      	ldr	r0, [pc, #120]	; (a900 <mqtt_callback+0xdc>)
    a888:	4b14      	ldr	r3, [pc, #80]	; (a8dc <mqtt_callback+0xb8>)
    a88a:	4798      	blx	r3
				mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    a88c:	0029      	movs	r1, r5
    a88e:	0020      	movs	r0, r4
    a890:	4b1c      	ldr	r3, [pc, #112]	; (a904 <mqtt_callback+0xe0>)
    a892:	4798      	blx	r3
    a894:	e7cf      	b.n	a836 <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    a896:	7811      	ldrb	r1, [r2, #0]
    a898:	2900      	cmp	r1, #0
    a89a:	d10e      	bne.n	a8ba <mqtt_callback+0x96>
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    a89c:	491a      	ldr	r1, [pc, #104]	; (a908 <mqtt_callback+0xe4>)
    a89e:	2231      	movs	r2, #49	; 0x31
    a8a0:	5c8b      	ldrb	r3, [r1, r2]
    a8a2:	2002      	movs	r0, #2
    a8a4:	4303      	orrs	r3, r0
    a8a6:	548b      	strb	r3, [r1, r2]
			printf("Preparation of the chat has been completed.\r\n");
    a8a8:	4818      	ldr	r0, [pc, #96]	; (a90c <mqtt_callback+0xe8>)
    a8aa:	4b19      	ldr	r3, [pc, #100]	; (a910 <mqtt_callback+0xec>)
    a8ac:	4798      	blx	r3
			mqtt_connected = 1;
    a8ae:	2301      	movs	r3, #1
    a8b0:	4a18      	ldr	r2, [pc, #96]	; (a914 <mqtt_callback+0xf0>)
    a8b2:	6013      	str	r3, [r2, #0]
			gcpConnected = true;
    a8b4:	4a18      	ldr	r2, [pc, #96]	; (a918 <mqtt_callback+0xf4>)
    a8b6:	7013      	strb	r3, [r2, #0]
    a8b8:	e7bd      	b.n	a836 <mqtt_callback+0x12>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    a8ba:	4818      	ldr	r0, [pc, #96]	; (a91c <mqtt_callback+0xf8>)
    a8bc:	4b07      	ldr	r3, [pc, #28]	; (a8dc <mqtt_callback+0xb8>)
    a8be:	4798      	blx	r3
    a8c0:	e7b9      	b.n	a836 <mqtt_callback+0x12>
		printf("MQTT disconnected\r\n");
    a8c2:	4817      	ldr	r0, [pc, #92]	; (a920 <mqtt_callback+0xfc>)
    a8c4:	4b12      	ldr	r3, [pc, #72]	; (a910 <mqtt_callback+0xec>)
    a8c6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    a8c8:	490f      	ldr	r1, [pc, #60]	; (a908 <mqtt_callback+0xe4>)
    a8ca:	2231      	movs	r2, #49	; 0x31
    a8cc:	5c8b      	ldrb	r3, [r1, r2]
    a8ce:	2002      	movs	r0, #2
    a8d0:	4383      	bics	r3, r0
    a8d2:	548b      	strb	r3, [r1, r2]
}
    a8d4:	e7af      	b.n	a836 <mqtt_callback+0x12>
    a8d6:	46c0      	nop			; (mov r8, r8)
    a8d8:	00010370 	.word	0x00010370
    a8dc:	0000d4d5 	.word	0x0000d4d5
    a8e0:	20001bb4 	.word	0x20001bb4
    a8e4:	0000d375 	.word	0x0000d375
    a8e8:	0000a76d 	.word	0x0000a76d
    a8ec:	00003839 	.word	0x00003839
    a8f0:	20000024 	.word	0x20000024
    a8f4:	20000144 	.word	0x20000144
    a8f8:	00009b0d 	.word	0x00009b0d
    a8fc:	0001038c 	.word	0x0001038c
    a900:	000103a0 	.word	0x000103a0
    a904:	00009ae1 	.word	0x00009ae1
    a908:	2000087c 	.word	0x2000087c
    a90c:	000103d8 	.word	0x000103d8
    a910:	0000d5f1 	.word	0x0000d5f1
    a914:	20000f1c 	.word	0x20000f1c
    a918:	20000f18 	.word	0x20000f18
    a91c:	00010408 	.word	0x00010408
    a920:	0001043c 	.word	0x0001043c

0000a924 <calculateIP>:
long long int calculateIP(char *IPstring){
    a924:	b570      	push	{r4, r5, r6, lr}
    a926:	b08a      	sub	sp, #40	; 0x28
	p = strtok(IPstring, ".");
    a928:	4914      	ldr	r1, [pc, #80]	; (a97c <calculateIP+0x58>)
    a92a:	4b15      	ldr	r3, [pc, #84]	; (a980 <calculateIP+0x5c>)
    a92c:	4798      	blx	r3
	while (p != NULL){
    a92e:	2800      	cmp	r0, #0
    a930:	d008      	beq.n	a944 <calculateIP+0x20>
    a932:	ac06      	add	r4, sp, #24
		p = strtok(NULL, ".");
    a934:	4e11      	ldr	r6, [pc, #68]	; (a97c <calculateIP+0x58>)
    a936:	4d12      	ldr	r5, [pc, #72]	; (a980 <calculateIP+0x5c>)
		IPArray[count++] = p;
    a938:	c401      	stmia	r4!, {r0}
		p = strtok(NULL, ".");
    a93a:	0031      	movs	r1, r6
    a93c:	2000      	movs	r0, #0
    a93e:	47a8      	blx	r5
	while (p != NULL){
    a940:	2800      	cmp	r0, #0
    a942:	d1f9      	bne.n	a938 <calculateIP+0x14>
long long int calculateIP(char *IPstring){
    a944:	2400      	movs	r4, #0
		IPNum[i] = atoi(IPArray[i]);
    a946:	ae06      	add	r6, sp, #24
    a948:	4d0e      	ldr	r5, [pc, #56]	; (a984 <calculateIP+0x60>)
    a94a:	59a0      	ldr	r0, [r4, r6]
    a94c:	47a8      	blx	r5
    a94e:	ab02      	add	r3, sp, #8
    a950:	50e0      	str	r0, [r4, r3]
    a952:	3404      	adds	r4, #4
	for(i = 0; i < 4; i++){
    a954:	2c10      	cmp	r4, #16
    a956:	d1f8      	bne.n	a94a <calculateIP+0x26>
	IPnumber = (IPNum[3]*1) + (IPNum[2]*256) + (IPNum[1]*65536) + 3221225472;
    a958:	9b04      	ldr	r3, [sp, #16]
    a95a:	021b      	lsls	r3, r3, #8
    a95c:	9a05      	ldr	r2, [sp, #20]
    a95e:	9201      	str	r2, [sp, #4]
    a960:	4694      	mov	ip, r2
    a962:	4463      	add	r3, ip
    a964:	9a03      	ldr	r2, [sp, #12]
    a966:	0412      	lsls	r2, r2, #16
    a968:	189b      	adds	r3, r3, r2
    a96a:	0018      	movs	r0, r3
    a96c:	17d9      	asrs	r1, r3, #31
    a96e:	22c0      	movs	r2, #192	; 0xc0
    a970:	0612      	lsls	r2, r2, #24
    a972:	2300      	movs	r3, #0
    a974:	1880      	adds	r0, r0, r2
    a976:	4159      	adcs	r1, r3
}
    a978:	b00a      	add	sp, #40	; 0x28
    a97a:	bd70      	pop	{r4, r5, r6, pc}
    a97c:	0000fabc 	.word	0x0000fabc
    a980:	0000d881 	.word	0x0000d881
    a984:	0000d2a5 	.word	0x0000d2a5

0000a988 <connectToGCP>:
void connectToGCP(void){
    a988:	b510      	push	{r4, lr}
	mqtt_connect(&mqtt_inst, main_mqtt_broker);
    a98a:	4902      	ldr	r1, [pc, #8]	; (a994 <connectToGCP+0xc>)
    a98c:	4802      	ldr	r0, [pc, #8]	; (a998 <connectToGCP+0x10>)
    a98e:	4b03      	ldr	r3, [pc, #12]	; (a99c <connectToGCP+0x14>)
    a990:	4798      	blx	r3
}
    a992:	bd10      	pop	{r4, pc}
    a994:	0001038c 	.word	0x0001038c
    a998:	20000f20 	.word	0x20000f20
    a99c:	00009ae1 	.word	0x00009ae1

0000a9a0 <publishToGCP>:
void publishToGCP(void){
    a9a0:	b530      	push	{r4, r5, lr}
    a9a2:	b091      	sub	sp, #68	; 0x44
	m2m_wifi_get_system_time();
    a9a4:	4b0f      	ldr	r3, [pc, #60]	; (a9e4 <publishToGCP+0x44>)
    a9a6:	4798      	blx	r3
	delay_ms(100);
    a9a8:	2064      	movs	r0, #100	; 0x64
    a9aa:	4b0f      	ldr	r3, [pc, #60]	; (a9e8 <publishToGCP+0x48>)
    a9ac:	4798      	blx	r3
	sprintf(publishMessage, "{timestamp: %u}", utc) ;
    a9ae:	4b0f      	ldr	r3, [pc, #60]	; (a9ec <publishToGCP+0x4c>)
    a9b0:	681a      	ldr	r2, [r3, #0]
    a9b2:	490f      	ldr	r1, [pc, #60]	; (a9f0 <publishToGCP+0x50>)
    a9b4:	a803      	add	r0, sp, #12
    a9b6:	4b0f      	ldr	r3, [pc, #60]	; (a9f4 <publishToGCP+0x54>)
    a9b8:	4798      	blx	r3
	mqtt_publish(&mqtt_inst, MAIN_CHAT_TOPIC, publishMessage, strlen(publishMessage), 0, 0);
    a9ba:	a803      	add	r0, sp, #12
    a9bc:	4b0e      	ldr	r3, [pc, #56]	; (a9f8 <publishToGCP+0x58>)
    a9be:	4798      	blx	r3
    a9c0:	0003      	movs	r3, r0
    a9c2:	2400      	movs	r4, #0
    a9c4:	9401      	str	r4, [sp, #4]
    a9c6:	9400      	str	r4, [sp, #0]
    a9c8:	aa03      	add	r2, sp, #12
    a9ca:	490c      	ldr	r1, [pc, #48]	; (a9fc <publishToGCP+0x5c>)
    a9cc:	480c      	ldr	r0, [pc, #48]	; (aa00 <publishToGCP+0x60>)
    a9ce:	4d0d      	ldr	r5, [pc, #52]	; (aa04 <publishToGCP+0x64>)
    a9d0:	47a8      	blx	r5
	printf("Message -- %s-- has been published\r\n", publishMessage);
    a9d2:	a903      	add	r1, sp, #12
    a9d4:	480c      	ldr	r0, [pc, #48]	; (aa08 <publishToGCP+0x68>)
    a9d6:	4b0d      	ldr	r3, [pc, #52]	; (aa0c <publishToGCP+0x6c>)
    a9d8:	4798      	blx	r3
	publishInterruptBool = false;
    a9da:	4b0d      	ldr	r3, [pc, #52]	; (aa10 <publishToGCP+0x70>)
    a9dc:	701c      	strb	r4, [r3, #0]
}
    a9de:	b011      	add	sp, #68	; 0x44
    a9e0:	bd30      	pop	{r4, r5, pc}
    a9e2:	46c0      	nop			; (mov r8, r8)
    a9e4:	000053ed 	.word	0x000053ed
    a9e8:	00003839 	.word	0x00003839
    a9ec:	200016a0 	.word	0x200016a0
    a9f0:	00010450 	.word	0x00010450
    a9f4:	0000d7f9 	.word	0x0000d7f9
    a9f8:	0000d851 	.word	0x0000d851
    a9fc:	00010460 	.word	0x00010460
    aa00:	20000f20 	.word	0x20000f20
    aa04:	00009ba5 	.word	0x00009ba5
    aa08:	0001047c 	.word	0x0001047c
    aa0c:	0000d4d5 	.word	0x0000d4d5
    aa10:	20001358 	.word	0x20001358

0000aa14 <handle_tcp_command>:
void handle_tcp_command(char* inputMessage){
    aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pch = strtok(inputMessage, "-");
    aa16:	4916      	ldr	r1, [pc, #88]	; (aa70 <handle_tcp_command+0x5c>)
    aa18:	4b16      	ldr	r3, [pc, #88]	; (aa74 <handle_tcp_command+0x60>)
    aa1a:	4798      	blx	r3
    aa1c:	1e04      	subs	r4, r0, #0
	while (pch != NULL){
    aa1e:	d00a      	beq.n	aa36 <handle_tcp_command+0x22>
    aa20:	4d15      	ldr	r5, [pc, #84]	; (aa78 <handle_tcp_command+0x64>)
		printf("%s\n", pch);
    aa22:	4f16      	ldr	r7, [pc, #88]	; (aa7c <handle_tcp_command+0x68>)
		pch = strtok(NULL, "-");
    aa24:	4e13      	ldr	r6, [pc, #76]	; (aa74 <handle_tcp_command+0x60>)
		printf("%s\n", pch);
    aa26:	0020      	movs	r0, r4
    aa28:	47b8      	blx	r7
		CommandArray[count++] = pch;
    aa2a:	c510      	stmia	r5!, {r4}
		pch = strtok(NULL, "-");
    aa2c:	4910      	ldr	r1, [pc, #64]	; (aa70 <handle_tcp_command+0x5c>)
    aa2e:	2000      	movs	r0, #0
    aa30:	47b0      	blx	r6
    aa32:	1e04      	subs	r4, r0, #0
	while (pch != NULL){
    aa34:	d1f7      	bne.n	aa26 <handle_tcp_command+0x12>
	if(!strncmp("GCP", CommandArray[0], commandSize)){
    aa36:	4b10      	ldr	r3, [pc, #64]	; (aa78 <handle_tcp_command+0x64>)
    aa38:	6819      	ldr	r1, [r3, #0]
    aa3a:	2203      	movs	r2, #3
    aa3c:	4810      	ldr	r0, [pc, #64]	; (aa80 <handle_tcp_command+0x6c>)
    aa3e:	4b11      	ldr	r3, [pc, #68]	; (aa84 <handle_tcp_command+0x70>)
    aa40:	4798      	blx	r3
    aa42:	2800      	cmp	r0, #0
    aa44:	d000      	beq.n	aa48 <handle_tcp_command+0x34>
}
    aa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("Google Cloud Command");
    aa48:	480f      	ldr	r0, [pc, #60]	; (aa88 <handle_tcp_command+0x74>)
    aa4a:	4b10      	ldr	r3, [pc, #64]	; (aa8c <handle_tcp_command+0x78>)
    aa4c:	4798      	blx	r3
		if(!strncmp("CONNECT", CommandArray[1], connectSize)){
    aa4e:	4b0a      	ldr	r3, [pc, #40]	; (aa78 <handle_tcp_command+0x64>)
    aa50:	6859      	ldr	r1, [r3, #4]
    aa52:	2207      	movs	r2, #7
    aa54:	480e      	ldr	r0, [pc, #56]	; (aa90 <handle_tcp_command+0x7c>)
    aa56:	4b0b      	ldr	r3, [pc, #44]	; (aa84 <handle_tcp_command+0x70>)
    aa58:	4798      	blx	r3
    aa5a:	2800      	cmp	r0, #0
    aa5c:	d1f3      	bne.n	aa46 <handle_tcp_command+0x32>
			connectToGCP();
    aa5e:	4b0d      	ldr	r3, [pc, #52]	; (aa94 <handle_tcp_command+0x80>)
    aa60:	4798      	blx	r3
			publishToGCP();
    aa62:	4b0d      	ldr	r3, [pc, #52]	; (aa98 <handle_tcp_command+0x84>)
    aa64:	4798      	blx	r3
			canPublish = true;
    aa66:	2201      	movs	r2, #1
    aa68:	4b0c      	ldr	r3, [pc, #48]	; (aa9c <handle_tcp_command+0x88>)
    aa6a:	701a      	strb	r2, [r3, #0]
}
    aa6c:	e7eb      	b.n	aa46 <handle_tcp_command+0x32>
    aa6e:	46c0      	nop			; (mov r8, r8)
    aa70:	000100b0 	.word	0x000100b0
    aa74:	0000d881 	.word	0x0000d881
    aa78:	20001fb8 	.word	0x20001fb8
    aa7c:	0000d5f1 	.word	0x0000d5f1
    aa80:	000100b4 	.word	0x000100b4
    aa84:	0000d85f 	.word	0x0000d85f
    aa88:	000100b8 	.word	0x000100b8
    aa8c:	0000d4d5 	.word	0x0000d4d5
    aa90:	000100d0 	.word	0x000100d0
    aa94:	0000a989 	.word	0x0000a989
    aa98:	0000a9a1 	.word	0x0000a9a1
    aa9c:	20000878 	.word	0x20000878

0000aaa0 <socket_event_handler>:
{
    aaa0:	b570      	push	{r4, r5, r6, lr}
    aaa2:	0014      	movs	r4, r2
	if (sock == tcp_server_socket || sock == tcp_client_socket){
    aaa4:	4b5c      	ldr	r3, [pc, #368]	; (ac18 <socket_event_handler+0x178>)
    aaa6:	781b      	ldrb	r3, [r3, #0]
    aaa8:	b25b      	sxtb	r3, r3
    aaaa:	4283      	cmp	r3, r0
    aaac:	d00d      	beq.n	aaca <socket_event_handler+0x2a>
    aaae:	4b5b      	ldr	r3, [pc, #364]	; (ac1c <socket_event_handler+0x17c>)
    aab0:	781b      	ldrb	r3, [r3, #0]
    aab2:	b25b      	sxtb	r3, r3
    aab4:	4283      	cmp	r3, r0
    aab6:	d008      	beq.n	aaca <socket_event_handler+0x2a>
	else if (sock == tcp_client_socket_external){
    aab8:	4b59      	ldr	r3, [pc, #356]	; (ac20 <socket_event_handler+0x180>)
    aaba:	781b      	ldrb	r3, [r3, #0]
    aabc:	b25b      	sxtb	r3, r3
    aabe:	4283      	cmp	r3, r0
    aac0:	d100      	bne.n	aac4 <socket_event_handler+0x24>
    aac2:	e0a5      	b.n	ac10 <socket_event_handler+0x170>
		mqtt_socket_event_handler(sock, msg_type, msg_data);
    aac4:	4b57      	ldr	r3, [pc, #348]	; (ac24 <socket_event_handler+0x184>)
    aac6:	4798      	blx	r3
}
    aac8:	bd70      	pop	{r4, r5, r6, pc}
	switch (u8Msg) {
    aaca:	2907      	cmp	r1, #7
    aacc:	d8fc      	bhi.n	aac8 <socket_event_handler+0x28>
    aace:	0089      	lsls	r1, r1, #2
    aad0:	4b55      	ldr	r3, [pc, #340]	; (ac28 <socket_event_handler+0x188>)
    aad2:	585b      	ldr	r3, [r3, r1]
    aad4:	469f      	mov	pc, r3
			if (pstrBind && pstrBind->status == 0) {
    aad6:	2c00      	cmp	r4, #0
    aad8:	d003      	beq.n	aae2 <socket_event_handler+0x42>
    aada:	2300      	movs	r3, #0
    aadc:	56e3      	ldrsb	r3, [r4, r3]
    aade:	2b00      	cmp	r3, #0
    aae0:	d00a      	beq.n	aaf8 <socket_event_handler+0x58>
				printf("socket_cb: bind error!\r\n");
    aae2:	4852      	ldr	r0, [pc, #328]	; (ac2c <socket_event_handler+0x18c>)
    aae4:	4b52      	ldr	r3, [pc, #328]	; (ac30 <socket_event_handler+0x190>)
    aae6:	4798      	blx	r3
				close(tcp_server_socket);
    aae8:	4c4b      	ldr	r4, [pc, #300]	; (ac18 <socket_event_handler+0x178>)
    aaea:	2000      	movs	r0, #0
    aaec:	5620      	ldrsb	r0, [r4, r0]
    aaee:	4b51      	ldr	r3, [pc, #324]	; (ac34 <socket_event_handler+0x194>)
    aaf0:	4798      	blx	r3
				tcp_server_socket = -1;
    aaf2:	23ff      	movs	r3, #255	; 0xff
    aaf4:	7023      	strb	r3, [r4, #0]
    aaf6:	e7e7      	b.n	aac8 <socket_event_handler+0x28>
				printf("socket_cb: bind success!\r\n");
    aaf8:	484f      	ldr	r0, [pc, #316]	; (ac38 <socket_event_handler+0x198>)
    aafa:	4b4d      	ldr	r3, [pc, #308]	; (ac30 <socket_event_handler+0x190>)
    aafc:	4798      	blx	r3
				listen(tcp_server_socket, 0);
    aafe:	4b46      	ldr	r3, [pc, #280]	; (ac18 <socket_event_handler+0x178>)
    ab00:	2000      	movs	r0, #0
    ab02:	5618      	ldrsb	r0, [r3, r0]
    ab04:	2100      	movs	r1, #0
    ab06:	4b4d      	ldr	r3, [pc, #308]	; (ac3c <socket_event_handler+0x19c>)
    ab08:	4798      	blx	r3
    ab0a:	e7dd      	b.n	aac8 <socket_event_handler+0x28>
			if (pstrListen && pstrListen->status == 0) {
    ab0c:	2c00      	cmp	r4, #0
    ab0e:	d003      	beq.n	ab18 <socket_event_handler+0x78>
    ab10:	2300      	movs	r3, #0
    ab12:	56e3      	ldrsb	r3, [r4, r3]
    ab14:	2b00      	cmp	r3, #0
    ab16:	d00a      	beq.n	ab2e <socket_event_handler+0x8e>
				printf("socket_cb: listen error!\r\n");
    ab18:	4849      	ldr	r0, [pc, #292]	; (ac40 <socket_event_handler+0x1a0>)
    ab1a:	4b45      	ldr	r3, [pc, #276]	; (ac30 <socket_event_handler+0x190>)
    ab1c:	4798      	blx	r3
				close(tcp_server_socket);
    ab1e:	4c3e      	ldr	r4, [pc, #248]	; (ac18 <socket_event_handler+0x178>)
    ab20:	2000      	movs	r0, #0
    ab22:	5620      	ldrsb	r0, [r4, r0]
    ab24:	4b43      	ldr	r3, [pc, #268]	; (ac34 <socket_event_handler+0x194>)
    ab26:	4798      	blx	r3
				tcp_server_socket = -1;
    ab28:	23ff      	movs	r3, #255	; 0xff
    ab2a:	7023      	strb	r3, [r4, #0]
    ab2c:	e7cc      	b.n	aac8 <socket_event_handler+0x28>
				printf("socket_cb: listen success!\r\n");
    ab2e:	4845      	ldr	r0, [pc, #276]	; (ac44 <socket_event_handler+0x1a4>)
    ab30:	4b3f      	ldr	r3, [pc, #252]	; (ac30 <socket_event_handler+0x190>)
    ab32:	4798      	blx	r3
				accept(tcp_server_socket, NULL, NULL);
    ab34:	4b38      	ldr	r3, [pc, #224]	; (ac18 <socket_event_handler+0x178>)
    ab36:	2000      	movs	r0, #0
    ab38:	5618      	ldrsb	r0, [r3, r0]
    ab3a:	2200      	movs	r2, #0
    ab3c:	2100      	movs	r1, #0
    ab3e:	4b42      	ldr	r3, [pc, #264]	; (ac48 <socket_event_handler+0x1a8>)
    ab40:	4798      	blx	r3
    ab42:	e7c1      	b.n	aac8 <socket_event_handler+0x28>
			if (pstrAccept) {
    ab44:	2c00      	cmp	r4, #0
    ab46:	d013      	beq.n	ab70 <socket_event_handler+0xd0>
				printf("socket_cb: accept success!\r\n");
    ab48:	4840      	ldr	r0, [pc, #256]	; (ac4c <socket_event_handler+0x1ac>)
    ab4a:	4b39      	ldr	r3, [pc, #228]	; (ac30 <socket_event_handler+0x190>)
    ab4c:	4798      	blx	r3
				accept(tcp_server_socket, NULL, NULL);
    ab4e:	4b32      	ldr	r3, [pc, #200]	; (ac18 <socket_event_handler+0x178>)
    ab50:	2000      	movs	r0, #0
    ab52:	5618      	ldrsb	r0, [r3, r0]
    ab54:	2200      	movs	r2, #0
    ab56:	2100      	movs	r1, #0
    ab58:	4b3b      	ldr	r3, [pc, #236]	; (ac48 <socket_event_handler+0x1a8>)
    ab5a:	4798      	blx	r3
				tcp_client_socket = pstrAccept->sock;
    ab5c:	2000      	movs	r0, #0
    ab5e:	5620      	ldrsb	r0, [r4, r0]
    ab60:	4b2e      	ldr	r3, [pc, #184]	; (ac1c <socket_event_handler+0x17c>)
    ab62:	7018      	strb	r0, [r3, #0]
				recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
    ab64:	2300      	movs	r3, #0
    ab66:	4a3a      	ldr	r2, [pc, #232]	; (ac50 <socket_event_handler+0x1b0>)
    ab68:	493a      	ldr	r1, [pc, #232]	; (ac54 <socket_event_handler+0x1b4>)
    ab6a:	4c3b      	ldr	r4, [pc, #236]	; (ac58 <socket_event_handler+0x1b8>)
    ab6c:	47a0      	blx	r4
    ab6e:	e7ab      	b.n	aac8 <socket_event_handler+0x28>
				printf("socket_cb: accept error!\r\n");
    ab70:	483a      	ldr	r0, [pc, #232]	; (ac5c <socket_event_handler+0x1bc>)
    ab72:	4b2f      	ldr	r3, [pc, #188]	; (ac30 <socket_event_handler+0x190>)
    ab74:	4798      	blx	r3
				close(tcp_server_socket);
    ab76:	4c28      	ldr	r4, [pc, #160]	; (ac18 <socket_event_handler+0x178>)
    ab78:	2000      	movs	r0, #0
    ab7a:	5620      	ldrsb	r0, [r4, r0]
    ab7c:	4b2d      	ldr	r3, [pc, #180]	; (ac34 <socket_event_handler+0x194>)
    ab7e:	4798      	blx	r3
				tcp_server_socket = -1;
    ab80:	23ff      	movs	r3, #255	; 0xff
    ab82:	7023      	strb	r3, [r4, #0]
    ab84:	e7a0      	b.n	aac8 <socket_event_handler+0x28>
			if (pstrConnect && pstrConnect->s8Error >= 0) {
    ab86:	2c00      	cmp	r4, #0
    ab88:	d00e      	beq.n	aba8 <socket_event_handler+0x108>
    ab8a:	7863      	ldrb	r3, [r4, #1]
    ab8c:	2b7f      	cmp	r3, #127	; 0x7f
    ab8e:	d80b      	bhi.n	aba8 <socket_event_handler+0x108>
				printf("socket_cb: connect success.\r\n");
    ab90:	4833      	ldr	r0, [pc, #204]	; (ac60 <socket_event_handler+0x1c0>)
    ab92:	4b27      	ldr	r3, [pc, #156]	; (ac30 <socket_event_handler+0x190>)
    ab94:	4798      	blx	r3
				recv(tcp_client_socket, gau8SocketBuffer, sizeof(gau8SocketBuffer), 0);
    ab96:	4b21      	ldr	r3, [pc, #132]	; (ac1c <socket_event_handler+0x17c>)
    ab98:	2000      	movs	r0, #0
    ab9a:	5618      	ldrsb	r0, [r3, r0]
    ab9c:	2300      	movs	r3, #0
    ab9e:	2280      	movs	r2, #128	; 0x80
    aba0:	4930      	ldr	r1, [pc, #192]	; (ac64 <socket_event_handler+0x1c4>)
    aba2:	4c2d      	ldr	r4, [pc, #180]	; (ac58 <socket_event_handler+0x1b8>)
    aba4:	47a0      	blx	r4
    aba6:	e78f      	b.n	aac8 <socket_event_handler+0x28>
				printf("socket_cb: connect error!\r\n");
    aba8:	482f      	ldr	r0, [pc, #188]	; (ac68 <socket_event_handler+0x1c8>)
    abaa:	4b21      	ldr	r3, [pc, #132]	; (ac30 <socket_event_handler+0x190>)
    abac:	4798      	blx	r3
    abae:	e78b      	b.n	aac8 <socket_event_handler+0x28>
			recv(tcp_client_socket, gau8SocketBuffer, sizeof(gau8SocketBuffer), 0);
    abb0:	4b1a      	ldr	r3, [pc, #104]	; (ac1c <socket_event_handler+0x17c>)
    abb2:	2000      	movs	r0, #0
    abb4:	5618      	ldrsb	r0, [r3, r0]
    abb6:	2300      	movs	r3, #0
    abb8:	2280      	movs	r2, #128	; 0x80
    abba:	492a      	ldr	r1, [pc, #168]	; (ac64 <socket_event_handler+0x1c4>)
    abbc:	4c26      	ldr	r4, [pc, #152]	; (ac58 <socket_event_handler+0x1b8>)
    abbe:	47a0      	blx	r4
    abc0:	e782      	b.n	aac8 <socket_event_handler+0x28>
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
    abc2:	2c00      	cmp	r4, #0
    abc4:	d003      	beq.n	abce <socket_event_handler+0x12e>
    abc6:	2204      	movs	r2, #4
    abc8:	5ea3      	ldrsh	r3, [r4, r2]
    abca:	2b00      	cmp	r3, #0
    abcc:	dc0a      	bgt.n	abe4 <socket_event_handler+0x144>
				printf("socket_cb: recv error!\r\n");
    abce:	4827      	ldr	r0, [pc, #156]	; (ac6c <socket_event_handler+0x1cc>)
    abd0:	4b17      	ldr	r3, [pc, #92]	; (ac30 <socket_event_handler+0x190>)
    abd2:	4798      	blx	r3
				close(tcp_server_socket);
    abd4:	4c10      	ldr	r4, [pc, #64]	; (ac18 <socket_event_handler+0x178>)
    abd6:	2000      	movs	r0, #0
    abd8:	5620      	ldrsb	r0, [r4, r0]
    abda:	4b16      	ldr	r3, [pc, #88]	; (ac34 <socket_event_handler+0x194>)
    abdc:	4798      	blx	r3
				tcp_server_socket = -1;
    abde:	23ff      	movs	r3, #255	; 0xff
    abe0:	7023      	strb	r3, [r4, #0]
    abe2:	e771      	b.n	aac8 <socket_event_handler+0x28>
				printf("socket_cb: recv success!\r\n");
    abe4:	4822      	ldr	r0, [pc, #136]	; (ac70 <socket_event_handler+0x1d0>)
    abe6:	4b12      	ldr	r3, [pc, #72]	; (ac30 <socket_event_handler+0x190>)
    abe8:	4798      	blx	r3
				handle_tcp_command(pstrRecv->pu8Buffer);
    abea:	6820      	ldr	r0, [r4, #0]
    abec:	4b21      	ldr	r3, [pc, #132]	; (ac74 <socket_event_handler+0x1d4>)
    abee:	4798      	blx	r3
				send(tcp_client_socket, &msg_wifi_product, sizeof(t_msg_wifi_product), 0);
    abf0:	4c0a      	ldr	r4, [pc, #40]	; (ac1c <socket_event_handler+0x17c>)
    abf2:	2000      	movs	r0, #0
    abf4:	5620      	ldrsb	r0, [r4, r0]
    abf6:	2300      	movs	r3, #0
    abf8:	2209      	movs	r2, #9
    abfa:	491f      	ldr	r1, [pc, #124]	; (ac78 <socket_event_handler+0x1d8>)
    abfc:	4d1f      	ldr	r5, [pc, #124]	; (ac7c <socket_event_handler+0x1dc>)
    abfe:	47a8      	blx	r5
			recv(tcp_client_socket, gau8SocketBuffer, sizeof(gau8SocketBuffer), 0);
    ac00:	2000      	movs	r0, #0
    ac02:	5620      	ldrsb	r0, [r4, r0]
    ac04:	2300      	movs	r3, #0
    ac06:	2280      	movs	r2, #128	; 0x80
    ac08:	4916      	ldr	r1, [pc, #88]	; (ac64 <socket_event_handler+0x1c4>)
    ac0a:	4c13      	ldr	r4, [pc, #76]	; (ac58 <socket_event_handler+0x1b8>)
    ac0c:	47a0      	blx	r4
    ac0e:	e75b      	b.n	aac8 <socket_event_handler+0x28>
		client_socket_cb(sock, msg_type, msg_data);
    ac10:	4b1b      	ldr	r3, [pc, #108]	; (ac80 <socket_event_handler+0x1e0>)
    ac12:	4798      	blx	r3
    ac14:	e758      	b.n	aac8 <socket_event_handler+0x28>
    ac16:	46c0      	nop			; (mov r8, r8)
    ac18:	2000018f 	.word	0x2000018f
    ac1c:	2000018d 	.word	0x2000018d
    ac20:	2000018e 	.word	0x2000018e
    ac24:	00009ac9 	.word	0x00009ac9
    ac28:	0000fe98 	.word	0x0000fe98
    ac2c:	000104e0 	.word	0x000104e0
    ac30:	0000d5f1 	.word	0x0000d5f1
    ac34:	0000722d 	.word	0x0000722d
    ac38:	000104c4 	.word	0x000104c4
    ac3c:	00006ff5 	.word	0x00006ff5
    ac40:	00010514 	.word	0x00010514
    ac44:	000104f8 	.word	0x000104f8
    ac48:	0000704d 	.word	0x0000704d
    ac4c:	00010530 	.word	0x00010530
    ac50:	000005b4 	.word	0x000005b4
    ac54:	20000964 	.word	0x20000964
    ac58:	00007199 	.word	0x00007199
    ac5c:	0001054c 	.word	0x0001054c
    ac60:	00010568 	.word	0x00010568
    ac64:	200008e4 	.word	0x200008e4
    ac68:	0000fed8 	.word	0x0000fed8
    ac6c:	0000ff2c 	.word	0x0000ff2c
    ac70:	0000ff10 	.word	0x0000ff10
    ac74:	0000aa15 	.word	0x0000aa15
    ac78:	20000184 	.word	0x20000184
    ac7c:	00007101 	.word	0x00007101
    ac80:	0000a65d 	.word	0x0000a65d

0000ac84 <commandTCP>:
int commandTCP(char* IPAddress){
    ac84:	b510      	push	{r4, lr}
    ac86:	b084      	sub	sp, #16
	IPnumber = calculateIP(IPAddress);
    ac88:	4b20      	ldr	r3, [pc, #128]	; (ad0c <commandTCP+0x88>)
    ac8a:	4798      	blx	r3
    ac8c:	4b20      	ldr	r3, [pc, #128]	; (ad10 <commandTCP+0x8c>)
    ac8e:	6018      	str	r0, [r3, #0]
    ac90:	6059      	str	r1, [r3, #4]
	addr2.sin_family = AF_INET;
    ac92:	2302      	movs	r3, #2
    ac94:	466a      	mov	r2, sp
    ac96:	8013      	strh	r3, [r2, #0]
	addr2.sin_port = _htons(MAIN_WIFI_M2M_EXTERNAL_SERVER_PORT);
    ac98:	4b1e      	ldr	r3, [pc, #120]	; (ad14 <commandTCP+0x90>)
    ac9a:	8053      	strh	r3, [r2, #2]
	addr2.sin_addr.s_addr = _htonl(IPnumber);
    ac9c:	0603      	lsls	r3, r0, #24
    ac9e:	0e02      	lsrs	r2, r0, #24
    aca0:	4313      	orrs	r3, r2
    aca2:	0202      	lsls	r2, r0, #8
    aca4:	21ff      	movs	r1, #255	; 0xff
    aca6:	0409      	lsls	r1, r1, #16
    aca8:	400a      	ands	r2, r1
    acaa:	4313      	orrs	r3, r2
    acac:	0a00      	lsrs	r0, r0, #8
    acae:	22ff      	movs	r2, #255	; 0xff
    acb0:	0212      	lsls	r2, r2, #8
    acb2:	4010      	ands	r0, r2
    acb4:	4318      	orrs	r0, r3
    acb6:	9001      	str	r0, [sp, #4]
	if ((tcp_client_socket_external < 0) && (wifi_connected ==1)){
    acb8:	4b17      	ldr	r3, [pc, #92]	; (ad18 <commandTCP+0x94>)
    acba:	781b      	ldrb	r3, [r3, #0]
    acbc:	2b7f      	cmp	r3, #127	; 0x7f
    acbe:	d801      	bhi.n	acc4 <commandTCP+0x40>
}
    acc0:	b004      	add	sp, #16
    acc2:	bd10      	pop	{r4, pc}
	if ((tcp_client_socket_external < 0) && (wifi_connected ==1)){
    acc4:	4b15      	ldr	r3, [pc, #84]	; (ad1c <commandTCP+0x98>)
    acc6:	781b      	ldrb	r3, [r3, #0]
    acc8:	2b01      	cmp	r3, #1
    acca:	d1f9      	bne.n	acc0 <commandTCP+0x3c>
		if ((tcp_client_socket_external = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    accc:	2200      	movs	r2, #0
    acce:	2101      	movs	r1, #1
    acd0:	2002      	movs	r0, #2
    acd2:	4b13      	ldr	r3, [pc, #76]	; (ad20 <commandTCP+0x9c>)
    acd4:	4798      	blx	r3
    acd6:	4b10      	ldr	r3, [pc, #64]	; (ad18 <commandTCP+0x94>)
    acd8:	7018      	strb	r0, [r3, #0]
    acda:	2800      	cmp	r0, #0
    acdc:	db11      	blt.n	ad02 <commandTCP+0x7e>
		ret = connect(tcp_client_socket_external, (struct sockaddr *)&addr2, sizeof(struct sockaddr_in));
    acde:	2210      	movs	r2, #16
    ace0:	4669      	mov	r1, sp
    ace2:	4b10      	ldr	r3, [pc, #64]	; (ad24 <commandTCP+0xa0>)
    ace4:	4798      	blx	r3
    ace6:	0004      	movs	r4, r0
		printf("connected to the external TCP server \r\n");
    ace8:	480f      	ldr	r0, [pc, #60]	; (ad28 <commandTCP+0xa4>)
    acea:	4b10      	ldr	r3, [pc, #64]	; (ad2c <commandTCP+0xa8>)
    acec:	4798      	blx	r3
		if (ret < 0) {
    acee:	2c00      	cmp	r4, #0
    acf0:	dae6      	bge.n	acc0 <commandTCP+0x3c>
			close(tcp_client_socket_external);
    acf2:	4c09      	ldr	r4, [pc, #36]	; (ad18 <commandTCP+0x94>)
    acf4:	2000      	movs	r0, #0
    acf6:	5620      	ldrsb	r0, [r4, r0]
    acf8:	4b0d      	ldr	r3, [pc, #52]	; (ad30 <commandTCP+0xac>)
    acfa:	4798      	blx	r3
			tcp_client_socket_external = -1;
    acfc:	23ff      	movs	r3, #255	; 0xff
    acfe:	7023      	strb	r3, [r4, #0]
    ad00:	e7de      	b.n	acc0 <commandTCP+0x3c>
			printf("main: failed to create TCP client socket4 error!\r\n");
    ad02:	480c      	ldr	r0, [pc, #48]	; (ad34 <commandTCP+0xb0>)
    ad04:	4b09      	ldr	r3, [pc, #36]	; (ad2c <commandTCP+0xa8>)
    ad06:	4798      	blx	r3
    ad08:	e7da      	b.n	acc0 <commandTCP+0x3c>
    ad0a:	46c0      	nop			; (mov r8, r8)
    ad0c:	0000a925 	.word	0x0000a925
    ad10:	20001fc8 	.word	0x20001fc8
    ad14:	00001309 	.word	0x00001309
    ad18:	2000018e 	.word	0x2000018e
    ad1c:	200013e2 	.word	0x200013e2
    ad20:	00006de9 	.word	0x00006de9
    ad24:	00007071 	.word	0x00007071
    ad28:	0000ff78 	.word	0x0000ff78
    ad2c:	0000d5f1 	.word	0x0000d5f1
    ad30:	0000722d 	.word	0x0000722d
    ad34:	0000ff44 	.word	0x0000ff44

0000ad38 <sendTCP>:
void sendTCP(char* message){
    ad38:	b510      	push	{r4, lr}
    ad3a:	0004      	movs	r4, r0
	printf("message to the server is: %s\r\n", message);
    ad3c:	0001      	movs	r1, r0
    ad3e:	4807      	ldr	r0, [pc, #28]	; (ad5c <sendTCP+0x24>)
    ad40:	4b07      	ldr	r3, [pc, #28]	; (ad60 <sendTCP+0x28>)
    ad42:	4798      	blx	r3
	send(tcp_client_socket_external, message, strlen(message), 0);
    ad44:	0020      	movs	r0, r4
    ad46:	4b07      	ldr	r3, [pc, #28]	; (ad64 <sendTCP+0x2c>)
    ad48:	4798      	blx	r3
    ad4a:	b282      	uxth	r2, r0
    ad4c:	4b06      	ldr	r3, [pc, #24]	; (ad68 <sendTCP+0x30>)
    ad4e:	2000      	movs	r0, #0
    ad50:	5618      	ldrsb	r0, [r3, r0]
    ad52:	2300      	movs	r3, #0
    ad54:	0021      	movs	r1, r4
    ad56:	4c05      	ldr	r4, [pc, #20]	; (ad6c <sendTCP+0x34>)
    ad58:	47a0      	blx	r4
}
    ad5a:	bd10      	pop	{r4, pc}
    ad5c:	000104a4 	.word	0x000104a4
    ad60:	0000d4d5 	.word	0x0000d4d5
    ad64:	0000d851 	.word	0x0000d851
    ad68:	2000018e 	.word	0x2000018e
    ad6c:	00007101 	.word	0x00007101

0000ad70 <handle_input_message>:
{
    ad70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad72:	46ce      	mov	lr, r9
    ad74:	b500      	push	{lr}
	if (uart_buffer_written == 0) {
    ad76:	4b59      	ldr	r3, [pc, #356]	; (aedc <handle_input_message+0x16c>)
    ad78:	681a      	ldr	r2, [r3, #0]
    ad7a:	2a00      	cmp	r2, #0
    ad7c:	d05b      	beq.n	ae36 <handle_input_message+0xc6>
		} else if (uart_buffer_written >= MAIN_CHAT_BUFFER_SIZE) {
    ad7e:	2a7f      	cmp	r2, #127	; 0x7f
    ad80:	dc5c      	bgt.n	ae3c <handle_input_message+0xcc>
		for (i = 0; i < uart_buffer_written; i++) {
    ad82:	2a00      	cmp	r2, #0
    ad84:	dd57      	ble.n	ae36 <handle_input_message+0xc6>
			if (uart_buffer[i] == '\n') {
    ad86:	4b56      	ldr	r3, [pc, #344]	; (aee0 <handle_input_message+0x170>)
    ad88:	781b      	ldrb	r3, [r3, #0]
    ad8a:	2b0a      	cmp	r3, #10
    ad8c:	d062      	beq.n	ae54 <handle_input_message+0xe4>
    ad8e:	2400      	movs	r4, #0
    ad90:	4953      	ldr	r1, [pc, #332]	; (aee0 <handle_input_message+0x170>)
		for (i = 0; i < uart_buffer_written; i++) {
    ad92:	3401      	adds	r4, #1
    ad94:	42a2      	cmp	r2, r4
    ad96:	d04e      	beq.n	ae36 <handle_input_message+0xc6>
			if (uart_buffer[i] == '\n') {
    ad98:	5c63      	ldrb	r3, [r4, r1]
    ad9a:	2b0a      	cmp	r3, #10
    ad9c:	d1f9      	bne.n	ad92 <handle_input_message+0x22>
				if (uart_buffer[i - 1] == '\r') {
    ad9e:	1e63      	subs	r3, r4, #1
    ada0:	4a4f      	ldr	r2, [pc, #316]	; (aee0 <handle_input_message+0x170>)
    ada2:	5cd2      	ldrb	r2, [r2, r3]
    ada4:	2a0d      	cmp	r2, #13
    ada6:	d000      	beq.n	adaa <handle_input_message+0x3a>
    ada8:	0023      	movs	r3, r4
				uart_buffer[msg_len] = 0;
    adaa:	4d4d      	ldr	r5, [pc, #308]	; (aee0 <handle_input_message+0x170>)
    adac:	2200      	movs	r2, #0
    adae:	54ea      	strb	r2, [r5, r3]
				printf("The input message is %s\r\n",uart_buffer);
    adb0:	0029      	movs	r1, r5
    adb2:	484c      	ldr	r0, [pc, #304]	; (aee4 <handle_input_message+0x174>)
    adb4:	4b4c      	ldr	r3, [pc, #304]	; (aee8 <handle_input_message+0x178>)
    adb6:	4798      	blx	r3
				printf("Splitting string into individual elements\r\n");
    adb8:	484c      	ldr	r0, [pc, #304]	; (aeec <handle_input_message+0x17c>)
    adba:	4b4d      	ldr	r3, [pc, #308]	; (aef0 <handle_input_message+0x180>)
    adbc:	4798      	blx	r3
				pch = strtok(uart_buffer, " ");
    adbe:	494d      	ldr	r1, [pc, #308]	; (aef4 <handle_input_message+0x184>)
    adc0:	0028      	movs	r0, r5
    adc2:	4b4d      	ldr	r3, [pc, #308]	; (aef8 <handle_input_message+0x188>)
    adc4:	4798      	blx	r3
    adc6:	1e05      	subs	r5, r0, #0
				while (pch != NULL){
    adc8:	d00b      	beq.n	ade2 <handle_input_message+0x72>
    adca:	4e4c      	ldr	r6, [pc, #304]	; (aefc <handle_input_message+0x18c>)
					printf("%s\n", pch);
    adcc:	4b48      	ldr	r3, [pc, #288]	; (aef0 <handle_input_message+0x180>)
    adce:	4699      	mov	r9, r3
					pch = strtok(NULL, " ");
    add0:	4f49      	ldr	r7, [pc, #292]	; (aef8 <handle_input_message+0x188>)
					printf("%s\n", pch);
    add2:	0028      	movs	r0, r5
    add4:	47c8      	blx	r9
					CommandArray[count++] = pch;
    add6:	c620      	stmia	r6!, {r5}
					pch = strtok(NULL, " ");
    add8:	4946      	ldr	r1, [pc, #280]	; (aef4 <handle_input_message+0x184>)
    adda:	2000      	movs	r0, #0
    addc:	47b8      	blx	r7
    adde:	1e05      	subs	r5, r0, #0
				while (pch != NULL){
    ade0:	d1f7      	bne.n	add2 <handle_input_message+0x62>
    ade2:	2500      	movs	r5, #0
					printf("Value %d in the array is %s\r\n",arrCount, CommandArray[arrCount] );
    ade4:	4e45      	ldr	r6, [pc, #276]	; (aefc <handle_input_message+0x18c>)
    ade6:	4f40      	ldr	r7, [pc, #256]	; (aee8 <handle_input_message+0x178>)
    ade8:	00ab      	lsls	r3, r5, #2
    adea:	58f2      	ldr	r2, [r6, r3]
    adec:	0029      	movs	r1, r5
    adee:	4844      	ldr	r0, [pc, #272]	; (af00 <handle_input_message+0x190>)
    adf0:	47b8      	blx	r7
				for (arrCount = 0; arrCount < 3 ; arrCount++){
    adf2:	3501      	adds	r5, #1
    adf4:	2d03      	cmp	r5, #3
    adf6:	d1f7      	bne.n	ade8 <handle_input_message+0x78>
				printf("Done Splitting\r\n");
    adf8:	4842      	ldr	r0, [pc, #264]	; (af04 <handle_input_message+0x194>)
    adfa:	4b3d      	ldr	r3, [pc, #244]	; (aef0 <handle_input_message+0x180>)
    adfc:	4798      	blx	r3
				printf("The command is %s\r\n", CommandArray[0]);
    adfe:	4d3f      	ldr	r5, [pc, #252]	; (aefc <handle_input_message+0x18c>)
    ae00:	6829      	ldr	r1, [r5, #0]
    ae02:	4841      	ldr	r0, [pc, #260]	; (af08 <handle_input_message+0x198>)
    ae04:	4b38      	ldr	r3, [pc, #224]	; (aee8 <handle_input_message+0x178>)
    ae06:	4798      	blx	r3
				if(!strncmp("TCP",CommandArray[0],commandSize)){
    ae08:	6829      	ldr	r1, [r5, #0]
    ae0a:	2203      	movs	r2, #3
    ae0c:	483f      	ldr	r0, [pc, #252]	; (af0c <handle_input_message+0x19c>)
    ae0e:	4b40      	ldr	r3, [pc, #256]	; (af10 <handle_input_message+0x1a0>)
    ae10:	4798      	blx	r3
    ae12:	2800      	cmp	r0, #0
    ae14:	d020      	beq.n	ae58 <handle_input_message+0xe8>
				if(!strncmp("GCP", CommandArray[0], commandSize)){
    ae16:	4b39      	ldr	r3, [pc, #228]	; (aefc <handle_input_message+0x18c>)
    ae18:	6819      	ldr	r1, [r3, #0]
    ae1a:	2203      	movs	r2, #3
    ae1c:	483d      	ldr	r0, [pc, #244]	; (af14 <handle_input_message+0x1a4>)
    ae1e:	4b3c      	ldr	r3, [pc, #240]	; (af10 <handle_input_message+0x1a0>)
    ae20:	4798      	blx	r3
    ae22:	2800      	cmp	r0, #0
    ae24:	d03c      	beq.n	aea0 <handle_input_message+0x130>
				if (uart_buffer_written > i + 1) {
    ae26:	4b2d      	ldr	r3, [pc, #180]	; (aedc <handle_input_message+0x16c>)
    ae28:	681d      	ldr	r5, [r3, #0]
    ae2a:	1c63      	adds	r3, r4, #1
    ae2c:	42ab      	cmp	r3, r5
    ae2e:	db4a      	blt.n	aec6 <handle_input_message+0x156>
					uart_buffer_written = 0;
    ae30:	2200      	movs	r2, #0
    ae32:	4b2a      	ldr	r3, [pc, #168]	; (aedc <handle_input_message+0x16c>)
    ae34:	601a      	str	r2, [r3, #0]
}
    ae36:	bc04      	pop	{r2}
    ae38:	4691      	mov	r9, r2
    ae3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send(tcp_client_socket, uart_buffer, MAIN_CHAT_BUFFER_SIZE, 0);
    ae3c:	4b36      	ldr	r3, [pc, #216]	; (af18 <handle_input_message+0x1a8>)
    ae3e:	2000      	movs	r0, #0
    ae40:	5618      	ldrsb	r0, [r3, r0]
    ae42:	2300      	movs	r3, #0
    ae44:	2280      	movs	r2, #128	; 0x80
    ae46:	4926      	ldr	r1, [pc, #152]	; (aee0 <handle_input_message+0x170>)
    ae48:	4c34      	ldr	r4, [pc, #208]	; (af1c <handle_input_message+0x1ac>)
    ae4a:	47a0      	blx	r4
		uart_buffer_written = 0;
    ae4c:	2200      	movs	r2, #0
    ae4e:	4b23      	ldr	r3, [pc, #140]	; (aedc <handle_input_message+0x16c>)
    ae50:	601a      	str	r2, [r3, #0]
    ae52:	e7f0      	b.n	ae36 <handle_input_message+0xc6>
			if (uart_buffer[i] == '\n') {
    ae54:	2400      	movs	r4, #0
    ae56:	e7a2      	b.n	ad9e <handle_input_message+0x2e>
					printf("The strings are equal");
    ae58:	4831      	ldr	r0, [pc, #196]	; (af20 <handle_input_message+0x1b0>)
    ae5a:	4e23      	ldr	r6, [pc, #140]	; (aee8 <handle_input_message+0x178>)
    ae5c:	47b0      	blx	r6
					printf("The IP address %s\r\n", CommandArray[2]);
    ae5e:	4d27      	ldr	r5, [pc, #156]	; (aefc <handle_input_message+0x18c>)
    ae60:	68a9      	ldr	r1, [r5, #8]
    ae62:	4830      	ldr	r0, [pc, #192]	; (af24 <handle_input_message+0x1b4>)
    ae64:	47b0      	blx	r6
					if(!strncmp("CONNECT", CommandArray[1],connectSize)){
    ae66:	6869      	ldr	r1, [r5, #4]
    ae68:	2207      	movs	r2, #7
    ae6a:	482f      	ldr	r0, [pc, #188]	; (af28 <handle_input_message+0x1b8>)
    ae6c:	4b28      	ldr	r3, [pc, #160]	; (af10 <handle_input_message+0x1a0>)
    ae6e:	4798      	blx	r3
    ae70:	2800      	cmp	r0, #0
    ae72:	d010      	beq.n	ae96 <handle_input_message+0x126>
					if (!strncmp("SEND", CommandArray[1], sendSize))
    ae74:	4b21      	ldr	r3, [pc, #132]	; (aefc <handle_input_message+0x18c>)
    ae76:	6859      	ldr	r1, [r3, #4]
    ae78:	2204      	movs	r2, #4
    ae7a:	482c      	ldr	r0, [pc, #176]	; (af2c <handle_input_message+0x1bc>)
    ae7c:	4b24      	ldr	r3, [pc, #144]	; (af10 <handle_input_message+0x1a0>)
    ae7e:	4798      	blx	r3
    ae80:	2800      	cmp	r0, #0
    ae82:	d1c8      	bne.n	ae16 <handle_input_message+0xa6>
						sendTCP(CommandArray[2]);
    ae84:	4d1d      	ldr	r5, [pc, #116]	; (aefc <handle_input_message+0x18c>)
    ae86:	68a8      	ldr	r0, [r5, #8]
    ae88:	4b29      	ldr	r3, [pc, #164]	; (af30 <handle_input_message+0x1c0>)
    ae8a:	4798      	blx	r3
						printf("Sent %s to the server\r\n", CommandArray[2]);
    ae8c:	68a9      	ldr	r1, [r5, #8]
    ae8e:	4829      	ldr	r0, [pc, #164]	; (af34 <handle_input_message+0x1c4>)
    ae90:	4b15      	ldr	r3, [pc, #84]	; (aee8 <handle_input_message+0x178>)
    ae92:	4798      	blx	r3
    ae94:	e7bf      	b.n	ae16 <handle_input_message+0xa6>
						commandTCP(CommandArray[2]);
    ae96:	4b19      	ldr	r3, [pc, #100]	; (aefc <handle_input_message+0x18c>)
    ae98:	6898      	ldr	r0, [r3, #8]
    ae9a:	4b27      	ldr	r3, [pc, #156]	; (af38 <handle_input_message+0x1c8>)
    ae9c:	4798      	blx	r3
    ae9e:	e7e9      	b.n	ae74 <handle_input_message+0x104>
					printf("Google Cloud Command");
    aea0:	4826      	ldr	r0, [pc, #152]	; (af3c <handle_input_message+0x1cc>)
    aea2:	4b11      	ldr	r3, [pc, #68]	; (aee8 <handle_input_message+0x178>)
    aea4:	4798      	blx	r3
					if(!strncmp("CONNECT", CommandArray[1], connectSize)){
    aea6:	4b15      	ldr	r3, [pc, #84]	; (aefc <handle_input_message+0x18c>)
    aea8:	6859      	ldr	r1, [r3, #4]
    aeaa:	2207      	movs	r2, #7
    aeac:	481e      	ldr	r0, [pc, #120]	; (af28 <handle_input_message+0x1b8>)
    aeae:	4b18      	ldr	r3, [pc, #96]	; (af10 <handle_input_message+0x1a0>)
    aeb0:	4798      	blx	r3
    aeb2:	2800      	cmp	r0, #0
    aeb4:	d1b7      	bne.n	ae26 <handle_input_message+0xb6>
						connectToGCP();
    aeb6:	4b22      	ldr	r3, [pc, #136]	; (af40 <handle_input_message+0x1d0>)
    aeb8:	4798      	blx	r3
						publishToGCP();
    aeba:	4b22      	ldr	r3, [pc, #136]	; (af44 <handle_input_message+0x1d4>)
    aebc:	4798      	blx	r3
						canPublish = true;
    aebe:	2201      	movs	r2, #1
    aec0:	4b21      	ldr	r3, [pc, #132]	; (af48 <handle_input_message+0x1d8>)
    aec2:	701a      	strb	r2, [r3, #0]
    aec4:	e7af      	b.n	ae26 <handle_input_message+0xb6>
					memmove(uart_buffer, uart_buffer + i + 1, uart_buffer_written - i - 1);
    aec6:	1b2d      	subs	r5, r5, r4
    aec8:	3d01      	subs	r5, #1
    aeca:	4805      	ldr	r0, [pc, #20]	; (aee0 <handle_input_message+0x170>)
    aecc:	18c1      	adds	r1, r0, r3
    aece:	002a      	movs	r2, r5
    aed0:	4b1e      	ldr	r3, [pc, #120]	; (af4c <handle_input_message+0x1dc>)
    aed2:	4798      	blx	r3
					uart_buffer_written = uart_buffer_written - i - 1;
    aed4:	4b01      	ldr	r3, [pc, #4]	; (aedc <handle_input_message+0x16c>)
    aed6:	601d      	str	r5, [r3, #0]
    aed8:	e7ad      	b.n	ae36 <handle_input_message+0xc6>
    aeda:	46c0      	nop			; (mov r8, r8)
    aedc:	200013dc 	.word	0x200013dc
    aee0:	2000135c 	.word	0x2000135c
    aee4:	0000ffd0 	.word	0x0000ffd0
    aee8:	0000d4d5 	.word	0x0000d4d5
    aeec:	0000ffec 	.word	0x0000ffec
    aef0:	0000d5f1 	.word	0x0000d5f1
    aef4:	00010018 	.word	0x00010018
    aef8:	0000d881 	.word	0x0000d881
    aefc:	20001fb8 	.word	0x20001fb8
    af00:	0001001c 	.word	0x0001001c
    af04:	0001003c 	.word	0x0001003c
    af08:	0001004c 	.word	0x0001004c
    af0c:	00010060 	.word	0x00010060
    af10:	0000d85f 	.word	0x0000d85f
    af14:	000100b4 	.word	0x000100b4
    af18:	2000018d 	.word	0x2000018d
    af1c:	00007101 	.word	0x00007101
    af20:	00010064 	.word	0x00010064
    af24:	0001007c 	.word	0x0001007c
    af28:	000100d0 	.word	0x000100d0
    af2c:	00010090 	.word	0x00010090
    af30:	0000ad39 	.word	0x0000ad39
    af34:	00010098 	.word	0x00010098
    af38:	0000ac85 	.word	0x0000ac85
    af3c:	000100b8 	.word	0x000100b8
    af40:	0000a989 	.word	0x0000a989
    af44:	0000a9a1 	.word	0x0000a9a1
    af48:	20000878 	.word	0x20000878
    af4c:	0000d351 	.word	0x0000d351

0000af50 <main>:
* Application entry point.
*
* \return program return value.
*/
int main(void)
{
    af50:	b5f0      	push	{r4, r5, r6, r7, lr}
    af52:	b0af      	sub	sp, #188	; 0xbc
	struct tc_module       tc_instance;
	struct events_resource example_event;
	struct events_hook     hook;
	
	// Initialize the board.
	system_init();
    af54:	4bbe      	ldr	r3, [pc, #760]	; (b250 <main+0x300>)
    af56:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    af58:	aa05      	add	r2, sp, #20
    af5a:	2380      	movs	r3, #128	; 0x80
    af5c:	05db      	lsls	r3, r3, #23
    af5e:	9305      	str	r3, [sp, #20]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    af60:	2300      	movs	r3, #0
    af62:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    af64:	21ff      	movs	r1, #255	; 0xff
    af66:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    af68:	2100      	movs	r1, #0
    af6a:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    af6c:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    af6e:	2501      	movs	r5, #1
    af70:	2024      	movs	r0, #36	; 0x24
    af72:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    af74:	3001      	adds	r0, #1
    af76:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    af78:	3001      	adds	r0, #1
    af7a:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    af7c:	3001      	adds	r0, #1
    af7e:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    af80:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    af82:	3005      	adds	r0, #5
    af84:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    af86:	3001      	adds	r0, #1
    af88:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    af8a:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    af8c:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    af8e:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    af90:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    af92:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    af94:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    af96:	2313      	movs	r3, #19
    af98:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    af9a:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    af9c:	23c4      	movs	r3, #196	; 0xc4
    af9e:	039b      	lsls	r3, r3, #14
    afa0:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    afa2:	2301      	movs	r3, #1
    afa4:	425b      	negs	r3, r3
    afa6:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    afa8:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    afaa:	4baa      	ldr	r3, [pc, #680]	; (b254 <main+0x304>)
    afac:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    afae:	4baa      	ldr	r3, [pc, #680]	; (b258 <main+0x308>)
    afb0:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    afb2:	23e1      	movs	r3, #225	; 0xe1
    afb4:	025b      	lsls	r3, r3, #9
    afb6:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    afb8:	4ca8      	ldr	r4, [pc, #672]	; (b25c <main+0x30c>)
    afba:	4ba9      	ldr	r3, [pc, #676]	; (b260 <main+0x310>)
    afbc:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    afbe:	49a9      	ldr	r1, [pc, #676]	; (b264 <main+0x314>)
    afc0:	4ba9      	ldr	r3, [pc, #676]	; (b268 <main+0x318>)
    afc2:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    afc4:	49a9      	ldr	r1, [pc, #676]	; (b26c <main+0x31c>)
    afc6:	4baa      	ldr	r3, [pc, #680]	; (b270 <main+0x320>)
    afc8:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    afca:	49aa      	ldr	r1, [pc, #680]	; (b274 <main+0x324>)
    afcc:	0020      	movs	r0, r4
    afce:	4baa      	ldr	r3, [pc, #680]	; (b278 <main+0x328>)
    afd0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    afd2:	4faa      	ldr	r7, [pc, #680]	; (b27c <main+0x32c>)
    afd4:	683b      	ldr	r3, [r7, #0]
    afd6:	6898      	ldr	r0, [r3, #8]
    afd8:	2100      	movs	r1, #0
    afda:	4ea9      	ldr	r6, [pc, #676]	; (b280 <main+0x330>)
    afdc:	47b0      	blx	r6
	setbuf(stdin, NULL);
    afde:	683b      	ldr	r3, [r7, #0]
    afe0:	6858      	ldr	r0, [r3, #4]
    afe2:	2100      	movs	r1, #0
    afe4:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    afe6:	2201      	movs	r2, #1
    afe8:	49a6      	ldr	r1, [pc, #664]	; (b284 <main+0x334>)
    afea:	0020      	movs	r0, r4
    afec:	4ba6      	ldr	r3, [pc, #664]	; (b288 <main+0x338>)
    afee:	4798      	blx	r3
	module->callback_enable_mask |= (1 << callback_type);
    aff0:	2231      	movs	r2, #49	; 0x31
    aff2:	5ca3      	ldrb	r3, [r4, r2]
    aff4:	2102      	movs	r1, #2
    aff6:	430b      	orrs	r3, r1
    aff8:	54a3      	strb	r3, [r4, r2]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    affa:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    affc:	0030      	movs	r0, r6
    affe:	4ba3      	ldr	r3, [pc, #652]	; (b28c <main+0x33c>)
    b000:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b002:	231f      	movs	r3, #31
    b004:	4018      	ands	r0, r3
    b006:	4085      	lsls	r5, r0
    b008:	4ba1      	ldr	r3, [pc, #644]	; (b290 <main+0x340>)
    b00a:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b00c:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    b00e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    b010:	2b00      	cmp	r3, #0
    b012:	d1fc      	bne.n	b00e <main+0xbe>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b014:	6833      	ldr	r3, [r6, #0]
    b016:	2202      	movs	r2, #2
    b018:	4313      	orrs	r3, r2
    b01a:	6033      	str	r3, [r6, #0]

	// Initialize the UART console.
	configure_console();

	// Output example information
	printf(STRING_HEADER);
    b01c:	489d      	ldr	r0, [pc, #628]	; (b294 <main+0x344>)
    b01e:	4b9e      	ldr	r3, [pc, #632]	; (b298 <main+0x348>)
    b020:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
    b022:	ac05      	add	r4, sp, #20
    b024:	0020      	movs	r0, r4
    b026:	4b9d      	ldr	r3, [pc, #628]	; (b29c <main+0x34c>)
    b028:	4798      	blx	r3
	mqtt_conf.keep_alive = 36000;
    b02a:	4b9d      	ldr	r3, [pc, #628]	; (b2a0 <main+0x350>)
    b02c:	80a3      	strh	r3, [r4, #4]
	mqtt_conf.read_buffer = mqtt_read_buffer;
    b02e:	4b9d      	ldr	r3, [pc, #628]	; (b2a4 <main+0x354>)
    b030:	60a3      	str	r3, [r4, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    b032:	2380      	movs	r3, #128	; 0x80
    b034:	009b      	lsls	r3, r3, #2
    b036:	60e3      	str	r3, [r4, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
    b038:	4a9b      	ldr	r2, [pc, #620]	; (b2a8 <main+0x358>)
    b03a:	6122      	str	r2, [r4, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    b03c:	6163      	str	r3, [r4, #20]
	mqtt_conf.port = 8883;
    b03e:	4b9b      	ldr	r3, [pc, #620]	; (b2ac <main+0x35c>)
    b040:	8023      	strh	r3, [r4, #0]
	mqtt_conf.tls = SOCKET_FLAGS_SSL;
    b042:	2301      	movs	r3, #1
    b044:	70a3      	strb	r3, [r4, #2]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    b046:	0021      	movs	r1, r4
    b048:	4899      	ldr	r0, [pc, #612]	; (b2b0 <main+0x360>)
    b04a:	4b9a      	ldr	r3, [pc, #616]	; (b2b4 <main+0x364>)
    b04c:	4798      	blx	r3
    b04e:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    b050:	da00      	bge.n	b054 <main+0x104>
    b052:	e0f4      	b.n	b23e <main+0x2ee>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    b054:	4998      	ldr	r1, [pc, #608]	; (b2b8 <main+0x368>)
    b056:	4896      	ldr	r0, [pc, #600]	; (b2b0 <main+0x360>)
    b058:	4b98      	ldr	r3, [pc, #608]	; (b2bc <main+0x36c>)
    b05a:	4798      	blx	r3
    b05c:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    b05e:	da00      	bge.n	b062 <main+0x112>
    b060:	e0f1      	b.n	b246 <main+0x2f6>

	// Initialize the MQTT service.
	configure_mqtt();

	// Initialize the BSP.
	nm_bsp_init();
    b062:	4b97      	ldr	r3, [pc, #604]	; (b2c0 <main+0x370>)
    b064:	4798      	blx	r3
	cpu_irq_enable();
    b066:	2701      	movs	r7, #1
    b068:	4b96      	ldr	r3, [pc, #600]	; (b2c4 <main+0x374>)
    b06a:	701f      	strb	r7, [r3, #0]
    b06c:	f3bf 8f5f 	dmb	sy
    b070:	b662      	cpsie	i
	events_get_config_defaults(&config);
    b072:	ac05      	add	r4, sp, #20
    b074:	0020      	movs	r0, r4
    b076:	4b94      	ldr	r3, [pc, #592]	; (b2c8 <main+0x378>)
    b078:	4798      	blx	r3
	config.generator      = CONF_EVENT_GENERATOR;
    b07a:	2336      	movs	r3, #54	; 0x36
    b07c:	70a3      	strb	r3, [r4, #2]
	config.edge_detect    = EVENTS_EDGE_DETECT_RISING;
    b07e:	7027      	strb	r7, [r4, #0]
	config.path           = EVENTS_PATH_SYNCHRONOUS;
    b080:	2500      	movs	r5, #0
    b082:	2600      	movs	r6, #0
    b084:	7065      	strb	r5, [r4, #1]
	config.clock_source   = GCLK_GENERATOR_0;
    b086:	70e5      	strb	r5, [r4, #3]
	events_allocate(resource, &config);
    b088:	0021      	movs	r1, r4
    b08a:	a81c      	add	r0, sp, #112	; 0x70
    b08c:	4b8f      	ldr	r3, [pc, #572]	; (b2cc <main+0x37c>)
    b08e:	4798      	blx	r3
	events_attach_user(resource, CONF_EVENT_USER);
    b090:	2100      	movs	r1, #0
    b092:	a81c      	add	r0, sp, #112	; 0x70
    b094:	4b8e      	ldr	r3, [pc, #568]	; (b2d0 <main+0x380>)
    b096:	4798      	blx	r3
	events_create_hook(hook, event_counter);
    b098:	498e      	ldr	r1, [pc, #568]	; (b2d4 <main+0x384>)
    b09a:	a819      	add	r0, sp, #100	; 0x64
    b09c:	4b8e      	ldr	r3, [pc, #568]	; (b2d8 <main+0x388>)
    b09e:	4798      	blx	r3
	events_add_hook(resource, hook);
    b0a0:	a919      	add	r1, sp, #100	; 0x64
    b0a2:	a81c      	add	r0, sp, #112	; 0x70
    b0a4:	4b8d      	ldr	r3, [pc, #564]	; (b2dc <main+0x38c>)
    b0a6:	4798      	blx	r3
	events_enable_interrupt_source(resource, EVENTS_INTERRUPT_DETECT);
    b0a8:	2101      	movs	r1, #1
    b0aa:	a81c      	add	r0, sp, #112	; 0x70
    b0ac:	4b8c      	ldr	r3, [pc, #560]	; (b2e0 <main+0x390>)
    b0ae:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    b0b0:	70a5      	strb	r5, [r4, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    b0b2:	71a5      	strb	r5, [r4, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    b0b4:	8125      	strh	r5, [r4, #8]
	config->run_in_standby             = false;
    b0b6:	2300      	movs	r3, #0
    b0b8:	7063      	strb	r3, [r4, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    b0ba:	72a6      	strb	r6, [r4, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    b0bc:	72e6      	strb	r6, [r4, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    b0be:	7326      	strb	r6, [r4, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    b0c0:	73a6      	strb	r6, [r4, #14]
	config->oneshot                    = false;
    b0c2:	7366      	strb	r6, [r4, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    b0c4:	7426      	strb	r6, [r4, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    b0c6:	6165      	str	r5, [r4, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    b0c8:	61a5      	str	r5, [r4, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    b0ca:	7726      	strb	r6, [r4, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    b0cc:	6225      	str	r5, [r4, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    b0ce:	6265      	str	r5, [r4, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    b0d0:	8525      	strh	r5, [r4, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    b0d2:	8565      	strh	r5, [r4, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    b0d4:	85a5      	strh	r5, [r4, #44]	; 0x2c
	config_tc.clock_source    = GCLK_GENERATOR_1;
    b0d6:	7027      	strb	r7, [r4, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
    b0d8:	23c0      	movs	r3, #192	; 0xc0
    b0da:	009b      	lsls	r3, r3, #2
    b0dc:	80a3      	strh	r3, [r4, #4]
	tc_init(tc_instance, CONF_TC_MODULE, &config_tc);
    b0de:	0022      	movs	r2, r4
    b0e0:	4980      	ldr	r1, [pc, #512]	; (b2e4 <main+0x394>)
    b0e2:	a81e      	add	r0, sp, #120	; 0x78
    b0e4:	4b80      	ldr	r3, [pc, #512]	; (b2e8 <main+0x398>)
    b0e6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Tc *const tc_module = module_inst->hw;
    b0e8:	991e      	ldr	r1, [sp, #120]	; 0x78

	uint32_t event_mask = 0;

	if (events->invert_event_input == true) {
    b0ea:	ab03      	add	r3, sp, #12
    b0ec:	791a      	ldrb	r2, [r3, #4]
		event_mask |= TC_EVCTRL_TCINV;
    b0ee:	1e53      	subs	r3, r2, #1
    b0f0:	419a      	sbcs	r2, r3
    b0f2:	0112      	lsls	r2, r2, #4
	}

	if (events->on_event_perform_action == true) {
    b0f4:	ab03      	add	r3, sp, #12
    b0f6:	78db      	ldrb	r3, [r3, #3]
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d001      	beq.n	b100 <main+0x1b0>
		event_mask |= TC_EVCTRL_TCEI;
    b0fc:	2320      	movs	r3, #32
    b0fe:	431a      	orrs	r2, r3
	}

	if (events->generate_event_on_overflow == true) {
		event_mask |= TC_EVCTRL_OVFEO;
    b100:	2380      	movs	r3, #128	; 0x80
    b102:	005b      	lsls	r3, r3, #1
    b104:	4313      	orrs	r3, r2
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (events->generate_event_on_compare_channel[i] == true) {
    b106:	a803      	add	r0, sp, #12
    b108:	7800      	ldrb	r0, [r0, #0]
    b10a:	2800      	cmp	r0, #0
    b10c:	d002      	beq.n	b114 <main+0x1c4>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    b10e:	2388      	movs	r3, #136	; 0x88
    b110:	015b      	lsls	r3, r3, #5
    b112:	4313      	orrs	r3, r2
		if (events->generate_event_on_compare_channel[i] == true) {
    b114:	aa03      	add	r2, sp, #12
    b116:	7852      	ldrb	r2, [r2, #1]
    b118:	2a00      	cmp	r2, #0
    b11a:	d002      	beq.n	b122 <main+0x1d2>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    b11c:	2280      	movs	r2, #128	; 0x80
    b11e:	0192      	lsls	r2, r2, #6
    b120:	4313      	orrs	r3, r2
		}
	}

	tc_module->COUNT8.EVCTRL.reg |= event_mask | events->event_action;
    b122:	894a      	ldrh	r2, [r1, #10]
    b124:	a803      	add	r0, sp, #12
    b126:	7940      	ldrb	r0, [r0, #5]
    b128:	4302      	orrs	r2, r0
    b12a:	4313      	orrs	r3, r2
    b12c:	b29b      	uxth	r3, r3
    b12e:	814b      	strh	r3, [r1, #10]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    b130:	7bcb      	ldrb	r3, [r1, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    b132:	b25b      	sxtb	r3, r3
    b134:	2b00      	cmp	r3, #0
    b136:	dbfb      	blt.n	b130 <main+0x1e0>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    b138:	880b      	ldrh	r3, [r1, #0]
    b13a:	2202      	movs	r2, #2
    b13c:	4313      	orrs	r3, r2
    b13e:	800b      	strh	r3, [r1, #0]
	config->mode             = SPI_MODE_MASTER;
    b140:	ac05      	add	r4, sp, #20
    b142:	2501      	movs	r5, #1
    b144:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    b146:	2300      	movs	r3, #0
    b148:	9306      	str	r3, [sp, #24]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    b14a:	9307      	str	r3, [sp, #28]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    b14c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    b14e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    b150:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    b152:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    b154:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    b156:	3222      	adds	r2, #34	; 0x22
    b158:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    b15a:	3a18      	subs	r2, #24
    b15c:	2100      	movs	r1, #0
    b15e:	a80b      	add	r0, sp, #44	; 0x2c
    b160:	4b62      	ldr	r3, [pc, #392]	; (b2ec <main+0x39c>)
    b162:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    b164:	4b62      	ldr	r3, [pc, #392]	; (b2f0 <main+0x3a0>)
    b166:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    b168:	2380      	movs	r3, #128	; 0x80
    b16a:	025b      	lsls	r3, r3, #9
    b16c:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    b16e:	4b61      	ldr	r3, [pc, #388]	; (b2f4 <main+0x3a4>)
    b170:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    b172:	2301      	movs	r3, #1
    b174:	425b      	negs	r3, r3
    b176:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    b178:	4b5f      	ldr	r3, [pc, #380]	; (b2f8 <main+0x3a8>)
    b17a:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    b17c:	4b5f      	ldr	r3, [pc, #380]	; (b2fc <main+0x3ac>)
    b17e:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    b180:	4e5f      	ldr	r6, [pc, #380]	; (b300 <main+0x3b0>)
    b182:	0022      	movs	r2, r4
    b184:	495f      	ldr	r1, [pc, #380]	; (b304 <main+0x3b4>)
    b186:	0030      	movs	r0, r6
    b188:	4b5f      	ldr	r3, [pc, #380]	; (b308 <main+0x3b8>)
    b18a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    b18c:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b18e:	0020      	movs	r0, r4
    b190:	4b3e      	ldr	r3, [pc, #248]	; (b28c <main+0x33c>)
    b192:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b194:	231f      	movs	r3, #31
    b196:	4018      	ands	r0, r3
    b198:	4085      	lsls	r5, r0
    b19a:	4b3d      	ldr	r3, [pc, #244]	; (b290 <main+0x340>)
    b19c:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    b19e:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    b1a0:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    b1a2:	2b00      	cmp	r3, #0
    b1a4:	d1fc      	bne.n	b1a0 <main+0x250>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    b1a6:	6823      	ldr	r3, [r4, #0]
    b1a8:	2202      	movs	r2, #2
    b1aa:	4313      	orrs	r3, r2
    b1ac:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    b1ae:	4c57      	ldr	r4, [pc, #348]	; (b30c <main+0x3bc>)
    b1b0:	2304      	movs	r3, #4
    b1b2:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
    b1b4:	3303      	adds	r3, #3
    b1b6:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
    b1b8:	4b51      	ldr	r3, [pc, #324]	; (b300 <main+0x3b0>)
    b1ba:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b1bc:	a903      	add	r1, sp, #12
    b1be:	2301      	movs	r3, #1
    b1c0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    b1c2:	2200      	movs	r2, #0
    b1c4:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    b1c6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    b1c8:	2007      	movs	r0, #7
    b1ca:	4b51      	ldr	r3, [pc, #324]	; (b310 <main+0x3c0>)
    b1cc:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    b1ce:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    b1d0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    b1d2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    b1d4:	2900      	cmp	r1, #0
    b1d6:	d104      	bne.n	b1e2 <main+0x292>
		return &(ports[port_index]->Group[group_index]);
    b1d8:	0953      	lsrs	r3, r2, #5
    b1da:	01db      	lsls	r3, r3, #7
    b1dc:	494d      	ldr	r1, [pc, #308]	; (b314 <main+0x3c4>)
    b1de:	468c      	mov	ip, r1
    b1e0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b1e2:	211f      	movs	r1, #31
    b1e4:	4011      	ands	r1, r2
    b1e6:	2201      	movs	r2, #1
    b1e8:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    b1ea:	619a      	str	r2, [r3, #24]
	configure_tc(&tc_instance);
	
	at25dfx_init();
	
	// Initialise the ATECC108A
	if(config_device(ATECC108A, ECC108_I2C_ADDR)){
    b1ec:	2160      	movs	r1, #96	; 0x60
    b1ee:	2001      	movs	r0, #1
    b1f0:	4b49      	ldr	r3, [pc, #292]	; (b318 <main+0x3c8>)
    b1f2:	4798      	blx	r3
    b1f4:	2800      	cmp	r0, #0
    b1f6:	d002      	beq.n	b1fe <main+0x2ae>
		printf("ATECC108A Configured\r\n");
    b1f8:	4848      	ldr	r0, [pc, #288]	; (b31c <main+0x3cc>)
    b1fa:	4b27      	ldr	r3, [pc, #156]	; (b298 <main+0x348>)
    b1fc:	4798      	blx	r3
	}
	
	//Wake up the ATECC108A chip
	at25dfx_chip_wake(&at25dfx_chip);
    b1fe:	4c43      	ldr	r4, [pc, #268]	; (b30c <main+0x3bc>)
    b200:	0020      	movs	r0, r4
    b202:	4b47      	ldr	r3, [pc, #284]	; (b320 <main+0x3d0>)
    b204:	4798      	blx	r3
	
	//Checks if the chip is responsive
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    b206:	0020      	movs	r0, r4
    b208:	4b46      	ldr	r3, [pc, #280]	; (b324 <main+0x3d4>)
    b20a:	4798      	blx	r3
    b20c:	2800      	cmp	r0, #0
    b20e:	d002      	beq.n	b216 <main+0x2c6>
		// Handle missing or non-responsive device
		printf("Chip is unresponsive\r\n");
    b210:	4845      	ldr	r0, [pc, #276]	; (b328 <main+0x3d8>)
    b212:	4b21      	ldr	r3, [pc, #132]	; (b298 <main+0x348>)
    b214:	4798      	blx	r3
	}
	
	at25dfx_chip_wake(&at25dfx_chip);
    b216:	483d      	ldr	r0, [pc, #244]	; (b30c <main+0x3bc>)
    b218:	4b41      	ldr	r3, [pc, #260]	; (b320 <main+0x3d0>)
    b21a:	4798      	blx	r3

	// Initialize Wi-Fi parameters structure.
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    b21c:	2218      	movs	r2, #24
    b21e:	2100      	movs	r1, #0
    b220:	a828      	add	r0, sp, #160	; 0xa0
    b222:	4b32      	ldr	r3, [pc, #200]	; (b2ec <main+0x39c>)
    b224:	4798      	blx	r3
	
	// Initialize Wi-Fi driver with data and status callbacks.
	param.pfAppWifiCb = wifi_callback; // Set Wi-Fi event callback.
    b226:	4b41      	ldr	r3, [pc, #260]	; (b32c <main+0x3dc>)
    b228:	9328      	str	r3, [sp, #160]	; 0xa0
	ret = m2m_wifi_init(&param);
    b22a:	a828      	add	r0, sp, #160	; 0xa0
    b22c:	4b40      	ldr	r3, [pc, #256]	; (b330 <main+0x3e0>)
    b22e:	4798      	blx	r3
    b230:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    b232:	d100      	bne.n	b236 <main+0x2e6>
    b234:	e086      	b.n	b344 <main+0x3f4>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    b236:	483f      	ldr	r0, [pc, #252]	; (b334 <main+0x3e4>)
    b238:	4b3f      	ldr	r3, [pc, #252]	; (b338 <main+0x3e8>)
    b23a:	4798      	blx	r3
    b23c:	e7fe      	b.n	b23c <main+0x2ec>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    b23e:	483f      	ldr	r0, [pc, #252]	; (b33c <main+0x3ec>)
    b240:	4b3d      	ldr	r3, [pc, #244]	; (b338 <main+0x3e8>)
    b242:	4798      	blx	r3
    b244:	e7fe      	b.n	b244 <main+0x2f4>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    b246:	483e      	ldr	r0, [pc, #248]	; (b340 <main+0x3f0>)
    b248:	4b3b      	ldr	r3, [pc, #236]	; (b338 <main+0x3e8>)
    b24a:	4798      	blx	r3
    b24c:	e7fe      	b.n	b24c <main+0x2fc>
    b24e:	46c0      	nop			; (mov r8, r8)
    b250:	00008e61 	.word	0x00008e61
    b254:	002a0003 	.word	0x002a0003
    b258:	002b0003 	.word	0x002b0003
    b25c:	2000087c 	.word	0x2000087c
    b260:	2000169c 	.word	0x2000169c
    b264:	0000a429 	.word	0x0000a429
    b268:	20001698 	.word	0x20001698
    b26c:	0000a3fd 	.word	0x0000a3fd
    b270:	20001694 	.word	0x20001694
    b274:	42001800 	.word	0x42001800
    b278:	00008101 	.word	0x00008101
    b27c:	20000190 	.word	0x20000190
    b280:	0000d629 	.word	0x0000d629
    b284:	0000a2e9 	.word	0x0000a2e9
    b288:	00008531 	.word	0x00008531
    b28c:	00007a35 	.word	0x00007a35
    b290:	e000e100 	.word	0xe000e100
    b294:	000100d8 	.word	0x000100d8
    b298:	0000d5f1 	.word	0x0000d5f1
    b29c:	00009a9d 	.word	0x00009a9d
    b2a0:	ffff8ca0 	.word	0xffff8ca0
    b2a4:	20000f58 	.word	0x20000f58
    b2a8:	20001158 	.word	0x20001158
    b2ac:	000022b3 	.word	0x000022b3
    b2b0:	20000f20 	.word	0x20000f20
    b2b4:	000099e5 	.word	0x000099e5
    b2b8:	0000a825 	.word	0x0000a825
    b2bc:	00009ab9 	.word	0x00009ab9
    b2c0:	00003879 	.word	0x00003879
    b2c4:	20000022 	.word	0x20000022
    b2c8:	00000d85 	.word	0x00000d85
    b2cc:	00000d95 	.word	0x00000d95
    b2d0:	00000e65 	.word	0x00000e65
    b2d4:	0000a331 	.word	0x0000a331
    b2d8:	00000c25 	.word	0x00000c25
    b2dc:	00000c31 	.word	0x00000c31
    b2e0:	00000c65 	.word	0x00000c65
    b2e4:	42003000 	.word	0x42003000
    b2e8:	00002e1d 	.word	0x00002e1d
    b2ec:	0000d375 	.word	0x0000d375
    b2f0:	0001d4c0 	.word	0x0001d4c0
    b2f4:	00100002 	.word	0x00100002
    b2f8:	00120002 	.word	0x00120002
    b2fc:	00130002 	.word	0x00130002
    b300:	200019e8 	.word	0x200019e8
    b304:	42000c00 	.word	0x42000c00
    b308:	00007ac5 	.word	0x00007ac5
    b30c:	200019e0 	.word	0x200019e0
    b310:	0000765d 	.word	0x0000765d
    b314:	41004400 	.word	0x41004400
    b318:	0000a71d 	.word	0x0000a71d
    b31c:	000101a4 	.word	0x000101a4
    b320:	00000b99 	.word	0x00000b99
    b324:	00000115 	.word	0x00000115
    b328:	000101bc 	.word	0x000101bc
    b32c:	0000a4c1 	.word	0x0000a4c1
    b330:	00004da1 	.word	0x00004da1
    b334:	000101d4 	.word	0x000101d4
    b338:	0000d4d5 	.word	0x0000d4d5
    b33c:	0001013c 	.word	0x0001013c
    b340:	00010170 	.word	0x00010170
		while (1) { // Loop forever.
		}
	}
	
	// Configure the SNTP with the NTP server
	ret = m2m_wifi_configure_sntp((uint8_t *)MAIN_WORLDWIDE_NTP_POOL_HOSTNAME, strlen(MAIN_WORLDWIDE_NTP_POOL_HOSTNAME), SNTP_ENABLE_DHCP);
    b344:	2201      	movs	r2, #1
    b346:	210f      	movs	r1, #15
    b348:	4889      	ldr	r0, [pc, #548]	; (b570 <main+0x620>)
    b34a:	4b8a      	ldr	r3, [pc, #552]	; (b574 <main+0x624>)
    b34c:	4798      	blx	r3
	if(M2M_SUCCESS != ret) {
    b34e:	2800      	cmp	r0, #0
    b350:	d000      	beq.n	b354 <main+0x404>
    b352:	e0a2      	b.n	b49a <main+0x54a>
		printf("main: SNTP %s configuration Failure\r\n",MAIN_WORLDWIDE_NTP_POOL_HOSTNAME);
	}
	
	m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
    b354:	2497      	movs	r4, #151	; 0x97
    b356:	446c      	add	r4, sp
    b358:	0021      	movs	r1, r4
    b35a:	a826      	add	r0, sp, #152	; 0x98
    b35c:	4b86      	ldr	r3, [pc, #536]	; (b578 <main+0x628>)
    b35e:	4798      	blx	r3
	if (!u8IsMacAddrValid) {
    b360:	7823      	ldrb	r3, [r4, #0]
    b362:	2b00      	cmp	r3, #0
    b364:	d100      	bne.n	b368 <main+0x418>
    b366:	e09d      	b.n	b4a4 <main+0x554>
		m2m_wifi_set_mac_address(gau8MacAddr);
	}

	m2m_wifi_get_mac_address(gau8MacAddr);
    b368:	4e84      	ldr	r6, [pc, #528]	; (b57c <main+0x62c>)
    b36a:	0030      	movs	r0, r6
    b36c:	4b84      	ldr	r3, [pc, #528]	; (b580 <main+0x630>)
    b36e:	4798      	blx	r3

	set_dev_name_to_mac((uint8_t *)gacDeviceName, gau8MacAddr);
    b370:	4d84      	ldr	r5, [pc, #528]	; (b584 <main+0x634>)
    b372:	0031      	movs	r1, r6
    b374:	0028      	movs	r0, r5
    b376:	4f84      	ldr	r7, [pc, #528]	; (b588 <main+0x638>)
    b378:	47b8      	blx	r7
	set_dev_name_to_mac((uint8_t *)gstrM2MAPConfig.au8SSID, gau8MacAddr);
    b37a:	4c84      	ldr	r4, [pc, #528]	; (b58c <main+0x63c>)
    b37c:	0031      	movs	r1, r6
    b37e:	0020      	movs	r0, r4
    b380:	47b8      	blx	r7
	m2m_wifi_set_device_name((uint8_t *)gacDeviceName, (uint8_t)m2m_strlen((uint8_t *)gacDeviceName));
    b382:	0028      	movs	r0, r5
    b384:	4b82      	ldr	r3, [pc, #520]	; (b590 <main+0x640>)
    b386:	4798      	blx	r3
    b388:	b2c1      	uxtb	r1, r0
    b38a:	0028      	movs	r0, r5
    b38c:	4b81      	ldr	r3, [pc, #516]	; (b594 <main+0x644>)
    b38e:	4798      	blx	r3
	gstrM2MAPConfig.au8DHCPServerIP[0] = 0xC0; /* 192 */
    b390:	22c0      	movs	r2, #192	; 0xc0
    b392:	2341      	movs	r3, #65	; 0x41
    b394:	54e2      	strb	r2, [r4, r3]
	gstrM2MAPConfig.au8DHCPServerIP[1] = 0xA8; /* 168 */
    b396:	3a18      	subs	r2, #24
    b398:	3301      	adds	r3, #1
    b39a:	54e2      	strb	r2, [r4, r3]
	gstrM2MAPConfig.au8DHCPServerIP[2] = 0x01; /* 1 */
    b39c:	3b41      	subs	r3, #65	; 0x41
    b39e:	3a65      	subs	r2, #101	; 0x65
    b3a0:	54a3      	strb	r3, [r4, r2]
	gstrM2MAPConfig.au8DHCPServerIP[3] = 0x01; /* 1 */
    b3a2:	3201      	adds	r2, #1
    b3a4:	54a3      	strb	r3, [r4, r2]
	
	
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, SSID_read, AT25DFX_BUFFER_SIZE);
    b3a6:	4c7c      	ldr	r4, [pc, #496]	; (b598 <main+0x648>)
    b3a8:	3363      	adds	r3, #99	; 0x63
    b3aa:	0022      	movs	r2, r4
    b3ac:	2180      	movs	r1, #128	; 0x80
    b3ae:	0249      	lsls	r1, r1, #9
    b3b0:	487a      	ldr	r0, [pc, #488]	; (b59c <main+0x64c>)
    b3b2:	4d7b      	ldr	r5, [pc, #492]	; (b5a0 <main+0x650>)
    b3b4:	47a8      	blx	r5
	//printf("SSID READ %s\r\n", SSID_read);
	
	char c;
	c = SSID_read[0];
    b3b6:	6823      	ldr	r3, [r4, #0]
	
	if(( c>='a' && c<='z') || (c>='A' && c<='Z')){
    b3b8:	2220      	movs	r2, #32
    b3ba:	4393      	bics	r3, r2
    b3bc:	3b41      	subs	r3, #65	; 0x41
    b3be:	b2db      	uxtb	r3, r3
    b3c0:	2b19      	cmp	r3, #25
    b3c2:	d873      	bhi.n	b4ac <main+0x55c>
		printf("SSID is valid, will continue to connect\r\n");
    b3c4:	4877      	ldr	r0, [pc, #476]	; (b5a4 <main+0x654>)
    b3c6:	4b78      	ldr	r3, [pc, #480]	; (b5a8 <main+0x658>)
    b3c8:	4798      	blx	r3
		at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, SSID_read, AT25DFX_BUFFER_SIZE);
    b3ca:	4c73      	ldr	r4, [pc, #460]	; (b598 <main+0x648>)
    b3cc:	4f73      	ldr	r7, [pc, #460]	; (b59c <main+0x64c>)
    b3ce:	2364      	movs	r3, #100	; 0x64
    b3d0:	0022      	movs	r2, r4
    b3d2:	2180      	movs	r1, #128	; 0x80
    b3d4:	0249      	lsls	r1, r1, #9
    b3d6:	0038      	movs	r0, r7
    b3d8:	4e71      	ldr	r6, [pc, #452]	; (b5a0 <main+0x650>)
    b3da:	47b0      	blx	r6
		at25dfx_chip_read_buffer(&at25dfx_chip, 0x20000, Password_read, AT25DFX_BUFFER_SIZE);
    b3dc:	4d73      	ldr	r5, [pc, #460]	; (b5ac <main+0x65c>)
    b3de:	2364      	movs	r3, #100	; 0x64
    b3e0:	002a      	movs	r2, r5
    b3e2:	2180      	movs	r1, #128	; 0x80
    b3e4:	0289      	lsls	r1, r1, #10
    b3e6:	0038      	movs	r0, r7
    b3e8:	47b0      	blx	r6
		
		printf("SSID  read is %s\r\n", SSID_read);
    b3ea:	0021      	movs	r1, r4
    b3ec:	4870      	ldr	r0, [pc, #448]	; (b5b0 <main+0x660>)
    b3ee:	4e71      	ldr	r6, [pc, #452]	; (b5b4 <main+0x664>)
    b3f0:	47b0      	blx	r6
		printf("Password read is: %s\r\n", Password_read);
    b3f2:	0029      	movs	r1, r5
    b3f4:	4870      	ldr	r0, [pc, #448]	; (b5b8 <main+0x668>)
    b3f6:	47b0      	blx	r6
		
		m2m_wifi_connect((char *)SSID_read, strlen(SSID_read), M2M_WIFI_SEC_WPA_PSK, (char *)Password_read, M2M_WIFI_CH_ALL);
    b3f8:	0020      	movs	r0, r4
    b3fa:	4b70      	ldr	r3, [pc, #448]	; (b5bc <main+0x66c>)
    b3fc:	4798      	blx	r3
    b3fe:	b2c1      	uxtb	r1, r0
    b400:	23ff      	movs	r3, #255	; 0xff
    b402:	9300      	str	r3, [sp, #0]
    b404:	002b      	movs	r3, r5
    b406:	2202      	movs	r2, #2
    b408:	0020      	movs	r0, r4
    b40a:	4c6d      	ldr	r4, [pc, #436]	; (b5c0 <main+0x670>)
    b40c:	47a0      	blx	r4
		wifi_connected = 1;
    b40e:	2201      	movs	r2, #1
    b410:	4b6c      	ldr	r3, [pc, #432]	; (b5c4 <main+0x674>)
    b412:	701a      	strb	r2, [r3, #0]
	}
	
	
	//Initialize the socket address structure
	struct sockaddr_in server_socket_address;
	server_socket_address.sin_family = AF_INET;
    b414:	ab15      	add	r3, sp, #84	; 0x54
    b416:	2202      	movs	r2, #2
    b418:	801a      	strh	r2, [r3, #0]
	server_socket_address.sin_port = _htons(MAIN_WIFI_M2M__INTERNAL_SERVER_PORT);
    b41a:	4a6b      	ldr	r2, [pc, #428]	; (b5c8 <main+0x678>)
    b41c:	805a      	strh	r2, [r3, #2]
	server_socket_address.sin_addr.s_addr = 0;
    b41e:	2400      	movs	r4, #0
    b420:	9416      	str	r4, [sp, #88]	; 0x58
	
	
	
	// Initialize socket interface.
	socketInit();
    b422:	4b6a      	ldr	r3, [pc, #424]	; (b5cc <main+0x67c>)
    b424:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    b426:	496a      	ldr	r1, [pc, #424]	; (b5d0 <main+0x680>)
    b428:	486a      	ldr	r0, [pc, #424]	; (b5d4 <main+0x684>)
    b42a:	4b6b      	ldr	r3, [pc, #428]	; (b5d8 <main+0x688>)
    b42c:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    b42e:	0020      	movs	r0, r4
    b430:	4b6a      	ldr	r3, [pc, #424]	; (b5dc <main+0x68c>)
    b432:	4798      	blx	r3
    b434:	4b6a      	ldr	r3, [pc, #424]	; (b5e0 <main+0x690>)
    b436:	7a1b      	ldrb	r3, [r3, #8]
    b438:	b2db      	uxtb	r3, r3
    b43a:	40d8      	lsrs	r0, r3


	if (SysTick_Config(system_cpu_clock_get_hz() / 1000))
    b43c:	21fa      	movs	r1, #250	; 0xfa
    b43e:	0089      	lsls	r1, r1, #2
    b440:	4b68      	ldr	r3, [pc, #416]	; (b5e4 <main+0x694>)
    b442:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    b444:	3801      	subs	r0, #1
    b446:	4b68      	ldr	r3, [pc, #416]	; (b5e8 <main+0x698>)
    b448:	4298      	cmp	r0, r3
    b44a:	d900      	bls.n	b44e <main+0x4fe>
    b44c:	e08c      	b.n	b568 <main+0x618>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    b44e:	4a67      	ldr	r2, [pc, #412]	; (b5ec <main+0x69c>)
    b450:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    b452:	4867      	ldr	r0, [pc, #412]	; (b5f0 <main+0x6a0>)
    b454:	6a03      	ldr	r3, [r0, #32]
    b456:	021b      	lsls	r3, r3, #8
    b458:	0a1b      	lsrs	r3, r3, #8
    b45a:	21c0      	movs	r1, #192	; 0xc0
    b45c:	0609      	lsls	r1, r1, #24
    b45e:	430b      	orrs	r3, r1
    b460:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    b462:	0023      	movs	r3, r4
    b464:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    b466:	3307      	adds	r3, #7
    b468:	6013      	str	r3, [r2, #0]
	{
		puts("ERR>> Systick configuration error\r\n");
		while (1);
	}
	
	m2m_wifi_get_system_time();
    b46a:	4b62      	ldr	r3, [pc, #392]	; (b5f4 <main+0x6a4>)
    b46c:	4798      	blx	r3
	
	
	while (events_is_busy(&example_event)) {
    b46e:	4c62      	ldr	r4, [pc, #392]	; (b5f8 <main+0x6a8>)
    b470:	a81c      	add	r0, sp, #112	; 0x70
    b472:	47a0      	blx	r4
    b474:	2800      	cmp	r0, #0
    b476:	d1fb      	bne.n	b470 <main+0x520>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    b478:	9b1e      	ldr	r3, [sp, #120]	; 0x78
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    b47a:	7bda      	ldrb	r2, [r3, #15]

	while (tc_is_syncing(module_inst)) {
    b47c:	b252      	sxtb	r2, r2
    b47e:	2a00      	cmp	r2, #0
    b480:	dbfb      	blt.n	b47a <main+0x52a>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    b482:	2200      	movs	r2, #0
    b484:	711a      	strb	r2, [r3, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    b486:	7bda      	ldrb	r2, [r3, #15]

	while (tc_is_syncing(module_inst)) {
    b488:	b252      	sxtb	r2, r2
    b48a:	2a00      	cmp	r2, #0
    b48c:	dbfb      	blt.n	b486 <main+0x536>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    b48e:	2240      	movs	r2, #64	; 0x40
    b490:	715a      	strb	r2, [r3, #5]

	
	
	while (1) {
		//Handle events from the network.
		m2m_wifi_handle_events(NULL);
    b492:	4e5a      	ldr	r6, [pc, #360]	; (b5fc <main+0x6ac>)
		
		//Read any messages inserted from the uart
		usart_read_job(&cdc_uart_module, &uart_ch_buffer);
    b494:	4d5a      	ldr	r5, [pc, #360]	; (b600 <main+0x6b0>)
    b496:	4c5b      	ldr	r4, [pc, #364]	; (b604 <main+0x6b4>)
    b498:	e030      	b.n	b4fc <main+0x5ac>
		printf("main: SNTP %s configuration Failure\r\n",MAIN_WORLDWIDE_NTP_POOL_HOSTNAME);
    b49a:	4935      	ldr	r1, [pc, #212]	; (b570 <main+0x620>)
    b49c:	485a      	ldr	r0, [pc, #360]	; (b608 <main+0x6b8>)
    b49e:	4b45      	ldr	r3, [pc, #276]	; (b5b4 <main+0x664>)
    b4a0:	4798      	blx	r3
    b4a2:	e757      	b.n	b354 <main+0x404>
		m2m_wifi_set_mac_address(gau8MacAddr);
    b4a4:	4835      	ldr	r0, [pc, #212]	; (b57c <main+0x62c>)
    b4a6:	4b59      	ldr	r3, [pc, #356]	; (b60c <main+0x6bc>)
    b4a8:	4798      	blx	r3
    b4aa:	e75d      	b.n	b368 <main+0x418>
		printf("SSID is not valid, wifi provisioning will start");
    b4ac:	4858      	ldr	r0, [pc, #352]	; (b610 <main+0x6c0>)
    b4ae:	4c41      	ldr	r4, [pc, #260]	; (b5b4 <main+0x664>)
    b4b0:	47a0      	blx	r4
		m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&gstrM2MAPConfig, (char *)gacHttpProvDomainName, 1);
    b4b2:	4d36      	ldr	r5, [pc, #216]	; (b58c <main+0x63c>)
    b4b4:	2201      	movs	r2, #1
    b4b6:	4957      	ldr	r1, [pc, #348]	; (b614 <main+0x6c4>)
    b4b8:	0028      	movs	r0, r5
    b4ba:	4b57      	ldr	r3, [pc, #348]	; (b618 <main+0x6c8>)
    b4bc:	4798      	blx	r3
		printf("Provision Mode started.\r\nConnect to [%s] via AP[%s] and fill up the page.\r\n", MAIN_HTTP_PROV_SERVER_DOMAIN_NAME, gstrM2MAPConfig.au8SSID);
    b4be:	002a      	movs	r2, r5
    b4c0:	4956      	ldr	r1, [pc, #344]	; (b61c <main+0x6cc>)
    b4c2:	4857      	ldr	r0, [pc, #348]	; (b620 <main+0x6d0>)
    b4c4:	47a0      	blx	r4
    b4c6:	e7a5      	b.n	b414 <main+0x4c4>
		
		//Handle commands from the uart
		handle_input_message();
		
		//Spins up a TCP server on port 2323
		if ((tcp_server_socket < 0) && (wifi_connected == 1)) {
    b4c8:	4b3e      	ldr	r3, [pc, #248]	; (b5c4 <main+0x674>)
    b4ca:	781b      	ldrb	r3, [r3, #0]
    b4cc:	2b01      	cmp	r3, #1
    b4ce:	d121      	bne.n	b514 <main+0x5c4>
			// Open TCP server socket
			if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    b4d0:	2200      	movs	r2, #0
    b4d2:	2101      	movs	r1, #1
    b4d4:	2002      	movs	r0, #2
    b4d6:	4b53      	ldr	r3, [pc, #332]	; (b624 <main+0x6d4>)
    b4d8:	4798      	blx	r3
    b4da:	4b53      	ldr	r3, [pc, #332]	; (b628 <main+0x6d8>)
    b4dc:	7018      	strb	r0, [r3, #0]
    b4de:	2800      	cmp	r0, #0
    b4e0:	da03      	bge.n	b4ea <main+0x59a>
				printf("main: failed to create TCP server socket error!\r\n");
    b4e2:	4852      	ldr	r0, [pc, #328]	; (b62c <main+0x6dc>)
    b4e4:	4b30      	ldr	r3, [pc, #192]	; (b5a8 <main+0x658>)
    b4e6:	4798      	blx	r3
				continue;
    b4e8:	e008      	b.n	b4fc <main+0x5ac>
			}
			// Bind service
			bind(tcp_server_socket, (struct sockaddr *)&server_socket_address, sizeof(struct sockaddr_in));
    b4ea:	2210      	movs	r2, #16
    b4ec:	a915      	add	r1, sp, #84	; 0x54
    b4ee:	4b50      	ldr	r3, [pc, #320]	; (b630 <main+0x6e0>)
    b4f0:	4798      	blx	r3
    b4f2:	e00f      	b.n	b514 <main+0x5c4>
	return (port_base->IN.reg & pin_mask);
    b4f4:	4b4f      	ldr	r3, [pc, #316]	; (b634 <main+0x6e4>)
    b4f6:	6a1b      	ldr	r3, [r3, #32]
		if (publishInterruptBool == true){
			publishToGCP();
		}
		
		//When the button is pressed, it erases the flash memory and restarts the system so that it goes into provisioning mode
		if(port_pin_get_input_level(BUTTON_0_PIN) != BUTTON_0_INACTIVE){
    b4f8:	021b      	lsls	r3, r3, #8
    b4fa:	d512      	bpl.n	b522 <main+0x5d2>
		m2m_wifi_handle_events(NULL);
    b4fc:	2000      	movs	r0, #0
    b4fe:	47b0      	blx	r6
		usart_read_job(&cdc_uart_module, &uart_ch_buffer);
    b500:	0029      	movs	r1, r5
    b502:	0020      	movs	r0, r4
    b504:	4b4c      	ldr	r3, [pc, #304]	; (b638 <main+0x6e8>)
    b506:	4798      	blx	r3
		handle_input_message();
    b508:	4b4c      	ldr	r3, [pc, #304]	; (b63c <main+0x6ec>)
    b50a:	4798      	blx	r3
		if ((tcp_server_socket < 0) && (wifi_connected == 1)) {
    b50c:	4b46      	ldr	r3, [pc, #280]	; (b628 <main+0x6d8>)
    b50e:	781b      	ldrb	r3, [r3, #0]
    b510:	2b7f      	cmp	r3, #127	; 0x7f
    b512:	d8d9      	bhi.n	b4c8 <main+0x578>
		if (publishInterruptBool == true){
    b514:	4b4a      	ldr	r3, [pc, #296]	; (b640 <main+0x6f0>)
    b516:	781b      	ldrb	r3, [r3, #0]
    b518:	2b00      	cmp	r3, #0
    b51a:	d0eb      	beq.n	b4f4 <main+0x5a4>
			publishToGCP();
    b51c:	4b49      	ldr	r3, [pc, #292]	; (b644 <main+0x6f4>)
    b51e:	4798      	blx	r3
    b520:	e7e8      	b.n	b4f4 <main+0x5a4>
	at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);
    b522:	2580      	movs	r5, #128	; 0x80
    b524:	026d      	lsls	r5, r5, #9
    b526:	4c1d      	ldr	r4, [pc, #116]	; (b59c <main+0x64c>)
    b528:	2200      	movs	r2, #0
    b52a:	0029      	movs	r1, r5
    b52c:	0020      	movs	r0, r4
    b52e:	4f46      	ldr	r7, [pc, #280]	; (b648 <main+0x6f8>)
    b530:	47b8      	blx	r7
	at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x20000, false);
    b532:	2680      	movs	r6, #128	; 0x80
    b534:	02b6      	lsls	r6, r6, #10
    b536:	2200      	movs	r2, #0
    b538:	0031      	movs	r1, r6
    b53a:	0020      	movs	r0, r4
    b53c:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);
    b53e:	2200      	movs	r2, #0
    b540:	0029      	movs	r1, r5
    b542:	0020      	movs	r0, r4
    b544:	4d41      	ldr	r5, [pc, #260]	; (b64c <main+0x6fc>)
    b546:	47a8      	blx	r5
	at25dfx_chip_erase_block(&at25dfx_chip, 0x20000, AT25DFX_BLOCK_SIZE_4KB);
    b548:	2200      	movs	r2, #0
    b54a:	0031      	movs	r1, r6
    b54c:	0020      	movs	r0, r4
    b54e:	47a8      	blx	r5
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
    b550:	2101      	movs	r1, #1
    b552:	0020      	movs	r0, r4
    b554:	4b3e      	ldr	r3, [pc, #248]	; (b650 <main+0x700>)
    b556:	4798      	blx	r3
  __ASM volatile ("dsb");
    b558:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    b55c:	4a3d      	ldr	r2, [pc, #244]	; (b654 <main+0x704>)
    b55e:	4b24      	ldr	r3, [pc, #144]	; (b5f0 <main+0x6a0>)
    b560:	60da      	str	r2, [r3, #12]
    b562:	f3bf 8f4f 	dsb	sy
    b566:	e7fe      	b.n	b566 <main+0x616>
		puts("ERR>> Systick configuration error\r\n");
    b568:	483b      	ldr	r0, [pc, #236]	; (b658 <main+0x708>)
    b56a:	4b0f      	ldr	r3, [pc, #60]	; (b5a8 <main+0x658>)
    b56c:	4798      	blx	r3
    b56e:	e7fe      	b.n	b56e <main+0x61e>
    b570:	000101fc 	.word	0x000101fc
    b574:	000052a5 	.word	0x000052a5
    b578:	00005211 	.word	0x00005211
    b57c:	200000b4 	.word	0x200000b4
    b580:	00005241 	.word	0x00005241
    b584:	200000a4 	.word	0x200000a4
    b588:	0000a381 	.word	0x0000a381
    b58c:	200000bc 	.word	0x200000bc
    b590:	00003cd1 	.word	0x00003cd1
    b594:	0000526d 	.word	0x0000526d
    b598:	20001850 	.word	0x20001850
    b59c:	200019e0 	.word	0x200019e0
    b5a0:	00000229 	.word	0x00000229
    b5a4:	00010234 	.word	0x00010234
    b5a8:	0000d5f1 	.word	0x0000d5f1
    b5ac:	20001fd0 	.word	0x20001fd0
    b5b0:	00010260 	.word	0x00010260
    b5b4:	0000d4d5 	.word	0x0000d4d5
    b5b8:	00010274 	.word	0x00010274
    b5bc:	0000d851 	.word	0x0000d851
    b5c0:	000051c1 	.word	0x000051c1
    b5c4:	200013e2 	.word	0x200013e2
    b5c8:	00001309 	.word	0x00001309
    b5cc:	00006d91 	.word	0x00006d91
    b5d0:	0000a3f1 	.word	0x0000a3f1
    b5d4:	0000aaa1 	.word	0x0000aaa1
    b5d8:	00006dd5 	.word	0x00006dd5
    b5dc:	00008c1d 	.word	0x00008c1d
    b5e0:	40000400 	.word	0x40000400
    b5e4:	0000b65d 	.word	0x0000b65d
    b5e8:	00ffffff 	.word	0x00ffffff
    b5ec:	e000e010 	.word	0xe000e010
    b5f0:	e000ed00 	.word	0xe000ed00
    b5f4:	000053ed 	.word	0x000053ed
    b5f8:	00000e45 	.word	0x00000e45
    b5fc:	00004dc1 	.word	0x00004dc1
    b600:	200013e0 	.word	0x200013e0
    b604:	2000087c 	.word	0x2000087c
    b608:	0001020c 	.word	0x0001020c
    b60c:	000051dd 	.word	0x000051dd
    b610:	0001028c 	.word	0x0001028c
    b614:	0000ffc0 	.word	0x0000ffc0
    b618:	000053a9 	.word	0x000053a9
    b61c:	000102bc 	.word	0x000102bc
    b620:	000102cc 	.word	0x000102cc
    b624:	00006de9 	.word	0x00006de9
    b628:	2000018f 	.word	0x2000018f
    b62c:	00010318 	.word	0x00010318
    b630:	00006f6d 	.word	0x00006f6d
    b634:	41004480 	.word	0x41004480
    b638:	00008549 	.word	0x00008549
    b63c:	0000ad71 	.word	0x0000ad71
    b640:	20001358 	.word	0x20001358
    b644:	0000a9a1 	.word	0x0000a9a1
    b648:	00000a65 	.word	0x00000a65
    b64c:	0000075d 	.word	0x0000075d
    b650:	00000975 	.word	0x00000975
    b654:	05fa0004 	.word	0x05fa0004
    b658:	0001034c 	.word	0x0001034c

0000b65c <__udivsi3>:
    b65c:	2200      	movs	r2, #0
    b65e:	0843      	lsrs	r3, r0, #1
    b660:	428b      	cmp	r3, r1
    b662:	d374      	bcc.n	b74e <__udivsi3+0xf2>
    b664:	0903      	lsrs	r3, r0, #4
    b666:	428b      	cmp	r3, r1
    b668:	d35f      	bcc.n	b72a <__udivsi3+0xce>
    b66a:	0a03      	lsrs	r3, r0, #8
    b66c:	428b      	cmp	r3, r1
    b66e:	d344      	bcc.n	b6fa <__udivsi3+0x9e>
    b670:	0b03      	lsrs	r3, r0, #12
    b672:	428b      	cmp	r3, r1
    b674:	d328      	bcc.n	b6c8 <__udivsi3+0x6c>
    b676:	0c03      	lsrs	r3, r0, #16
    b678:	428b      	cmp	r3, r1
    b67a:	d30d      	bcc.n	b698 <__udivsi3+0x3c>
    b67c:	22ff      	movs	r2, #255	; 0xff
    b67e:	0209      	lsls	r1, r1, #8
    b680:	ba12      	rev	r2, r2
    b682:	0c03      	lsrs	r3, r0, #16
    b684:	428b      	cmp	r3, r1
    b686:	d302      	bcc.n	b68e <__udivsi3+0x32>
    b688:	1212      	asrs	r2, r2, #8
    b68a:	0209      	lsls	r1, r1, #8
    b68c:	d065      	beq.n	b75a <__udivsi3+0xfe>
    b68e:	0b03      	lsrs	r3, r0, #12
    b690:	428b      	cmp	r3, r1
    b692:	d319      	bcc.n	b6c8 <__udivsi3+0x6c>
    b694:	e000      	b.n	b698 <__udivsi3+0x3c>
    b696:	0a09      	lsrs	r1, r1, #8
    b698:	0bc3      	lsrs	r3, r0, #15
    b69a:	428b      	cmp	r3, r1
    b69c:	d301      	bcc.n	b6a2 <__udivsi3+0x46>
    b69e:	03cb      	lsls	r3, r1, #15
    b6a0:	1ac0      	subs	r0, r0, r3
    b6a2:	4152      	adcs	r2, r2
    b6a4:	0b83      	lsrs	r3, r0, #14
    b6a6:	428b      	cmp	r3, r1
    b6a8:	d301      	bcc.n	b6ae <__udivsi3+0x52>
    b6aa:	038b      	lsls	r3, r1, #14
    b6ac:	1ac0      	subs	r0, r0, r3
    b6ae:	4152      	adcs	r2, r2
    b6b0:	0b43      	lsrs	r3, r0, #13
    b6b2:	428b      	cmp	r3, r1
    b6b4:	d301      	bcc.n	b6ba <__udivsi3+0x5e>
    b6b6:	034b      	lsls	r3, r1, #13
    b6b8:	1ac0      	subs	r0, r0, r3
    b6ba:	4152      	adcs	r2, r2
    b6bc:	0b03      	lsrs	r3, r0, #12
    b6be:	428b      	cmp	r3, r1
    b6c0:	d301      	bcc.n	b6c6 <__udivsi3+0x6a>
    b6c2:	030b      	lsls	r3, r1, #12
    b6c4:	1ac0      	subs	r0, r0, r3
    b6c6:	4152      	adcs	r2, r2
    b6c8:	0ac3      	lsrs	r3, r0, #11
    b6ca:	428b      	cmp	r3, r1
    b6cc:	d301      	bcc.n	b6d2 <__udivsi3+0x76>
    b6ce:	02cb      	lsls	r3, r1, #11
    b6d0:	1ac0      	subs	r0, r0, r3
    b6d2:	4152      	adcs	r2, r2
    b6d4:	0a83      	lsrs	r3, r0, #10
    b6d6:	428b      	cmp	r3, r1
    b6d8:	d301      	bcc.n	b6de <__udivsi3+0x82>
    b6da:	028b      	lsls	r3, r1, #10
    b6dc:	1ac0      	subs	r0, r0, r3
    b6de:	4152      	adcs	r2, r2
    b6e0:	0a43      	lsrs	r3, r0, #9
    b6e2:	428b      	cmp	r3, r1
    b6e4:	d301      	bcc.n	b6ea <__udivsi3+0x8e>
    b6e6:	024b      	lsls	r3, r1, #9
    b6e8:	1ac0      	subs	r0, r0, r3
    b6ea:	4152      	adcs	r2, r2
    b6ec:	0a03      	lsrs	r3, r0, #8
    b6ee:	428b      	cmp	r3, r1
    b6f0:	d301      	bcc.n	b6f6 <__udivsi3+0x9a>
    b6f2:	020b      	lsls	r3, r1, #8
    b6f4:	1ac0      	subs	r0, r0, r3
    b6f6:	4152      	adcs	r2, r2
    b6f8:	d2cd      	bcs.n	b696 <__udivsi3+0x3a>
    b6fa:	09c3      	lsrs	r3, r0, #7
    b6fc:	428b      	cmp	r3, r1
    b6fe:	d301      	bcc.n	b704 <__udivsi3+0xa8>
    b700:	01cb      	lsls	r3, r1, #7
    b702:	1ac0      	subs	r0, r0, r3
    b704:	4152      	adcs	r2, r2
    b706:	0983      	lsrs	r3, r0, #6
    b708:	428b      	cmp	r3, r1
    b70a:	d301      	bcc.n	b710 <__udivsi3+0xb4>
    b70c:	018b      	lsls	r3, r1, #6
    b70e:	1ac0      	subs	r0, r0, r3
    b710:	4152      	adcs	r2, r2
    b712:	0943      	lsrs	r3, r0, #5
    b714:	428b      	cmp	r3, r1
    b716:	d301      	bcc.n	b71c <__udivsi3+0xc0>
    b718:	014b      	lsls	r3, r1, #5
    b71a:	1ac0      	subs	r0, r0, r3
    b71c:	4152      	adcs	r2, r2
    b71e:	0903      	lsrs	r3, r0, #4
    b720:	428b      	cmp	r3, r1
    b722:	d301      	bcc.n	b728 <__udivsi3+0xcc>
    b724:	010b      	lsls	r3, r1, #4
    b726:	1ac0      	subs	r0, r0, r3
    b728:	4152      	adcs	r2, r2
    b72a:	08c3      	lsrs	r3, r0, #3
    b72c:	428b      	cmp	r3, r1
    b72e:	d301      	bcc.n	b734 <__udivsi3+0xd8>
    b730:	00cb      	lsls	r3, r1, #3
    b732:	1ac0      	subs	r0, r0, r3
    b734:	4152      	adcs	r2, r2
    b736:	0883      	lsrs	r3, r0, #2
    b738:	428b      	cmp	r3, r1
    b73a:	d301      	bcc.n	b740 <__udivsi3+0xe4>
    b73c:	008b      	lsls	r3, r1, #2
    b73e:	1ac0      	subs	r0, r0, r3
    b740:	4152      	adcs	r2, r2
    b742:	0843      	lsrs	r3, r0, #1
    b744:	428b      	cmp	r3, r1
    b746:	d301      	bcc.n	b74c <__udivsi3+0xf0>
    b748:	004b      	lsls	r3, r1, #1
    b74a:	1ac0      	subs	r0, r0, r3
    b74c:	4152      	adcs	r2, r2
    b74e:	1a41      	subs	r1, r0, r1
    b750:	d200      	bcs.n	b754 <__udivsi3+0xf8>
    b752:	4601      	mov	r1, r0
    b754:	4152      	adcs	r2, r2
    b756:	4610      	mov	r0, r2
    b758:	4770      	bx	lr
    b75a:	e7ff      	b.n	b75c <__udivsi3+0x100>
    b75c:	b501      	push	{r0, lr}
    b75e:	2000      	movs	r0, #0
    b760:	f000 f8f0 	bl	b944 <__aeabi_idiv0>
    b764:	bd02      	pop	{r1, pc}
    b766:	46c0      	nop			; (mov r8, r8)

0000b768 <__aeabi_uidivmod>:
    b768:	2900      	cmp	r1, #0
    b76a:	d0f7      	beq.n	b75c <__udivsi3+0x100>
    b76c:	e776      	b.n	b65c <__udivsi3>
    b76e:	4770      	bx	lr

0000b770 <__divsi3>:
    b770:	4603      	mov	r3, r0
    b772:	430b      	orrs	r3, r1
    b774:	d47f      	bmi.n	b876 <__divsi3+0x106>
    b776:	2200      	movs	r2, #0
    b778:	0843      	lsrs	r3, r0, #1
    b77a:	428b      	cmp	r3, r1
    b77c:	d374      	bcc.n	b868 <__divsi3+0xf8>
    b77e:	0903      	lsrs	r3, r0, #4
    b780:	428b      	cmp	r3, r1
    b782:	d35f      	bcc.n	b844 <__divsi3+0xd4>
    b784:	0a03      	lsrs	r3, r0, #8
    b786:	428b      	cmp	r3, r1
    b788:	d344      	bcc.n	b814 <__divsi3+0xa4>
    b78a:	0b03      	lsrs	r3, r0, #12
    b78c:	428b      	cmp	r3, r1
    b78e:	d328      	bcc.n	b7e2 <__divsi3+0x72>
    b790:	0c03      	lsrs	r3, r0, #16
    b792:	428b      	cmp	r3, r1
    b794:	d30d      	bcc.n	b7b2 <__divsi3+0x42>
    b796:	22ff      	movs	r2, #255	; 0xff
    b798:	0209      	lsls	r1, r1, #8
    b79a:	ba12      	rev	r2, r2
    b79c:	0c03      	lsrs	r3, r0, #16
    b79e:	428b      	cmp	r3, r1
    b7a0:	d302      	bcc.n	b7a8 <__divsi3+0x38>
    b7a2:	1212      	asrs	r2, r2, #8
    b7a4:	0209      	lsls	r1, r1, #8
    b7a6:	d065      	beq.n	b874 <__divsi3+0x104>
    b7a8:	0b03      	lsrs	r3, r0, #12
    b7aa:	428b      	cmp	r3, r1
    b7ac:	d319      	bcc.n	b7e2 <__divsi3+0x72>
    b7ae:	e000      	b.n	b7b2 <__divsi3+0x42>
    b7b0:	0a09      	lsrs	r1, r1, #8
    b7b2:	0bc3      	lsrs	r3, r0, #15
    b7b4:	428b      	cmp	r3, r1
    b7b6:	d301      	bcc.n	b7bc <__divsi3+0x4c>
    b7b8:	03cb      	lsls	r3, r1, #15
    b7ba:	1ac0      	subs	r0, r0, r3
    b7bc:	4152      	adcs	r2, r2
    b7be:	0b83      	lsrs	r3, r0, #14
    b7c0:	428b      	cmp	r3, r1
    b7c2:	d301      	bcc.n	b7c8 <__divsi3+0x58>
    b7c4:	038b      	lsls	r3, r1, #14
    b7c6:	1ac0      	subs	r0, r0, r3
    b7c8:	4152      	adcs	r2, r2
    b7ca:	0b43      	lsrs	r3, r0, #13
    b7cc:	428b      	cmp	r3, r1
    b7ce:	d301      	bcc.n	b7d4 <__divsi3+0x64>
    b7d0:	034b      	lsls	r3, r1, #13
    b7d2:	1ac0      	subs	r0, r0, r3
    b7d4:	4152      	adcs	r2, r2
    b7d6:	0b03      	lsrs	r3, r0, #12
    b7d8:	428b      	cmp	r3, r1
    b7da:	d301      	bcc.n	b7e0 <__divsi3+0x70>
    b7dc:	030b      	lsls	r3, r1, #12
    b7de:	1ac0      	subs	r0, r0, r3
    b7e0:	4152      	adcs	r2, r2
    b7e2:	0ac3      	lsrs	r3, r0, #11
    b7e4:	428b      	cmp	r3, r1
    b7e6:	d301      	bcc.n	b7ec <__divsi3+0x7c>
    b7e8:	02cb      	lsls	r3, r1, #11
    b7ea:	1ac0      	subs	r0, r0, r3
    b7ec:	4152      	adcs	r2, r2
    b7ee:	0a83      	lsrs	r3, r0, #10
    b7f0:	428b      	cmp	r3, r1
    b7f2:	d301      	bcc.n	b7f8 <__divsi3+0x88>
    b7f4:	028b      	lsls	r3, r1, #10
    b7f6:	1ac0      	subs	r0, r0, r3
    b7f8:	4152      	adcs	r2, r2
    b7fa:	0a43      	lsrs	r3, r0, #9
    b7fc:	428b      	cmp	r3, r1
    b7fe:	d301      	bcc.n	b804 <__divsi3+0x94>
    b800:	024b      	lsls	r3, r1, #9
    b802:	1ac0      	subs	r0, r0, r3
    b804:	4152      	adcs	r2, r2
    b806:	0a03      	lsrs	r3, r0, #8
    b808:	428b      	cmp	r3, r1
    b80a:	d301      	bcc.n	b810 <__divsi3+0xa0>
    b80c:	020b      	lsls	r3, r1, #8
    b80e:	1ac0      	subs	r0, r0, r3
    b810:	4152      	adcs	r2, r2
    b812:	d2cd      	bcs.n	b7b0 <__divsi3+0x40>
    b814:	09c3      	lsrs	r3, r0, #7
    b816:	428b      	cmp	r3, r1
    b818:	d301      	bcc.n	b81e <__divsi3+0xae>
    b81a:	01cb      	lsls	r3, r1, #7
    b81c:	1ac0      	subs	r0, r0, r3
    b81e:	4152      	adcs	r2, r2
    b820:	0983      	lsrs	r3, r0, #6
    b822:	428b      	cmp	r3, r1
    b824:	d301      	bcc.n	b82a <__divsi3+0xba>
    b826:	018b      	lsls	r3, r1, #6
    b828:	1ac0      	subs	r0, r0, r3
    b82a:	4152      	adcs	r2, r2
    b82c:	0943      	lsrs	r3, r0, #5
    b82e:	428b      	cmp	r3, r1
    b830:	d301      	bcc.n	b836 <__divsi3+0xc6>
    b832:	014b      	lsls	r3, r1, #5
    b834:	1ac0      	subs	r0, r0, r3
    b836:	4152      	adcs	r2, r2
    b838:	0903      	lsrs	r3, r0, #4
    b83a:	428b      	cmp	r3, r1
    b83c:	d301      	bcc.n	b842 <__divsi3+0xd2>
    b83e:	010b      	lsls	r3, r1, #4
    b840:	1ac0      	subs	r0, r0, r3
    b842:	4152      	adcs	r2, r2
    b844:	08c3      	lsrs	r3, r0, #3
    b846:	428b      	cmp	r3, r1
    b848:	d301      	bcc.n	b84e <__divsi3+0xde>
    b84a:	00cb      	lsls	r3, r1, #3
    b84c:	1ac0      	subs	r0, r0, r3
    b84e:	4152      	adcs	r2, r2
    b850:	0883      	lsrs	r3, r0, #2
    b852:	428b      	cmp	r3, r1
    b854:	d301      	bcc.n	b85a <__divsi3+0xea>
    b856:	008b      	lsls	r3, r1, #2
    b858:	1ac0      	subs	r0, r0, r3
    b85a:	4152      	adcs	r2, r2
    b85c:	0843      	lsrs	r3, r0, #1
    b85e:	428b      	cmp	r3, r1
    b860:	d301      	bcc.n	b866 <__divsi3+0xf6>
    b862:	004b      	lsls	r3, r1, #1
    b864:	1ac0      	subs	r0, r0, r3
    b866:	4152      	adcs	r2, r2
    b868:	1a41      	subs	r1, r0, r1
    b86a:	d200      	bcs.n	b86e <__divsi3+0xfe>
    b86c:	4601      	mov	r1, r0
    b86e:	4152      	adcs	r2, r2
    b870:	4610      	mov	r0, r2
    b872:	4770      	bx	lr
    b874:	e05d      	b.n	b932 <__divsi3+0x1c2>
    b876:	0fca      	lsrs	r2, r1, #31
    b878:	d000      	beq.n	b87c <__divsi3+0x10c>
    b87a:	4249      	negs	r1, r1
    b87c:	1003      	asrs	r3, r0, #32
    b87e:	d300      	bcc.n	b882 <__divsi3+0x112>
    b880:	4240      	negs	r0, r0
    b882:	4053      	eors	r3, r2
    b884:	2200      	movs	r2, #0
    b886:	469c      	mov	ip, r3
    b888:	0903      	lsrs	r3, r0, #4
    b88a:	428b      	cmp	r3, r1
    b88c:	d32d      	bcc.n	b8ea <__divsi3+0x17a>
    b88e:	0a03      	lsrs	r3, r0, #8
    b890:	428b      	cmp	r3, r1
    b892:	d312      	bcc.n	b8ba <__divsi3+0x14a>
    b894:	22fc      	movs	r2, #252	; 0xfc
    b896:	0189      	lsls	r1, r1, #6
    b898:	ba12      	rev	r2, r2
    b89a:	0a03      	lsrs	r3, r0, #8
    b89c:	428b      	cmp	r3, r1
    b89e:	d30c      	bcc.n	b8ba <__divsi3+0x14a>
    b8a0:	0189      	lsls	r1, r1, #6
    b8a2:	1192      	asrs	r2, r2, #6
    b8a4:	428b      	cmp	r3, r1
    b8a6:	d308      	bcc.n	b8ba <__divsi3+0x14a>
    b8a8:	0189      	lsls	r1, r1, #6
    b8aa:	1192      	asrs	r2, r2, #6
    b8ac:	428b      	cmp	r3, r1
    b8ae:	d304      	bcc.n	b8ba <__divsi3+0x14a>
    b8b0:	0189      	lsls	r1, r1, #6
    b8b2:	d03a      	beq.n	b92a <__divsi3+0x1ba>
    b8b4:	1192      	asrs	r2, r2, #6
    b8b6:	e000      	b.n	b8ba <__divsi3+0x14a>
    b8b8:	0989      	lsrs	r1, r1, #6
    b8ba:	09c3      	lsrs	r3, r0, #7
    b8bc:	428b      	cmp	r3, r1
    b8be:	d301      	bcc.n	b8c4 <__divsi3+0x154>
    b8c0:	01cb      	lsls	r3, r1, #7
    b8c2:	1ac0      	subs	r0, r0, r3
    b8c4:	4152      	adcs	r2, r2
    b8c6:	0983      	lsrs	r3, r0, #6
    b8c8:	428b      	cmp	r3, r1
    b8ca:	d301      	bcc.n	b8d0 <__divsi3+0x160>
    b8cc:	018b      	lsls	r3, r1, #6
    b8ce:	1ac0      	subs	r0, r0, r3
    b8d0:	4152      	adcs	r2, r2
    b8d2:	0943      	lsrs	r3, r0, #5
    b8d4:	428b      	cmp	r3, r1
    b8d6:	d301      	bcc.n	b8dc <__divsi3+0x16c>
    b8d8:	014b      	lsls	r3, r1, #5
    b8da:	1ac0      	subs	r0, r0, r3
    b8dc:	4152      	adcs	r2, r2
    b8de:	0903      	lsrs	r3, r0, #4
    b8e0:	428b      	cmp	r3, r1
    b8e2:	d301      	bcc.n	b8e8 <__divsi3+0x178>
    b8e4:	010b      	lsls	r3, r1, #4
    b8e6:	1ac0      	subs	r0, r0, r3
    b8e8:	4152      	adcs	r2, r2
    b8ea:	08c3      	lsrs	r3, r0, #3
    b8ec:	428b      	cmp	r3, r1
    b8ee:	d301      	bcc.n	b8f4 <__divsi3+0x184>
    b8f0:	00cb      	lsls	r3, r1, #3
    b8f2:	1ac0      	subs	r0, r0, r3
    b8f4:	4152      	adcs	r2, r2
    b8f6:	0883      	lsrs	r3, r0, #2
    b8f8:	428b      	cmp	r3, r1
    b8fa:	d301      	bcc.n	b900 <__divsi3+0x190>
    b8fc:	008b      	lsls	r3, r1, #2
    b8fe:	1ac0      	subs	r0, r0, r3
    b900:	4152      	adcs	r2, r2
    b902:	d2d9      	bcs.n	b8b8 <__divsi3+0x148>
    b904:	0843      	lsrs	r3, r0, #1
    b906:	428b      	cmp	r3, r1
    b908:	d301      	bcc.n	b90e <__divsi3+0x19e>
    b90a:	004b      	lsls	r3, r1, #1
    b90c:	1ac0      	subs	r0, r0, r3
    b90e:	4152      	adcs	r2, r2
    b910:	1a41      	subs	r1, r0, r1
    b912:	d200      	bcs.n	b916 <__divsi3+0x1a6>
    b914:	4601      	mov	r1, r0
    b916:	4663      	mov	r3, ip
    b918:	4152      	adcs	r2, r2
    b91a:	105b      	asrs	r3, r3, #1
    b91c:	4610      	mov	r0, r2
    b91e:	d301      	bcc.n	b924 <__divsi3+0x1b4>
    b920:	4240      	negs	r0, r0
    b922:	2b00      	cmp	r3, #0
    b924:	d500      	bpl.n	b928 <__divsi3+0x1b8>
    b926:	4249      	negs	r1, r1
    b928:	4770      	bx	lr
    b92a:	4663      	mov	r3, ip
    b92c:	105b      	asrs	r3, r3, #1
    b92e:	d300      	bcc.n	b932 <__divsi3+0x1c2>
    b930:	4240      	negs	r0, r0
    b932:	b501      	push	{r0, lr}
    b934:	2000      	movs	r0, #0
    b936:	f000 f805 	bl	b944 <__aeabi_idiv0>
    b93a:	bd02      	pop	{r1, pc}

0000b93c <__aeabi_idivmod>:
    b93c:	2900      	cmp	r1, #0
    b93e:	d0f8      	beq.n	b932 <__divsi3+0x1c2>
    b940:	e716      	b.n	b770 <__divsi3>
    b942:	4770      	bx	lr

0000b944 <__aeabi_idiv0>:
    b944:	4770      	bx	lr
    b946:	46c0      	nop			; (mov r8, r8)

0000b948 <__clzsi2>:
    b948:	211c      	movs	r1, #28
    b94a:	2301      	movs	r3, #1
    b94c:	041b      	lsls	r3, r3, #16
    b94e:	4298      	cmp	r0, r3
    b950:	d301      	bcc.n	b956 <__clzsi2+0xe>
    b952:	0c00      	lsrs	r0, r0, #16
    b954:	3910      	subs	r1, #16
    b956:	0a1b      	lsrs	r3, r3, #8
    b958:	4298      	cmp	r0, r3
    b95a:	d301      	bcc.n	b960 <__clzsi2+0x18>
    b95c:	0a00      	lsrs	r0, r0, #8
    b95e:	3908      	subs	r1, #8
    b960:	091b      	lsrs	r3, r3, #4
    b962:	4298      	cmp	r0, r3
    b964:	d301      	bcc.n	b96a <__clzsi2+0x22>
    b966:	0900      	lsrs	r0, r0, #4
    b968:	3904      	subs	r1, #4
    b96a:	a202      	add	r2, pc, #8	; (adr r2, b974 <__clzsi2+0x2c>)
    b96c:	5c10      	ldrb	r0, [r2, r0]
    b96e:	1840      	adds	r0, r0, r1
    b970:	4770      	bx	lr
    b972:	46c0      	nop			; (mov r8, r8)
    b974:	02020304 	.word	0x02020304
    b978:	01010101 	.word	0x01010101
	...

0000b984 <__ctzsi2>:
    b984:	4241      	negs	r1, r0
    b986:	4008      	ands	r0, r1
    b988:	211c      	movs	r1, #28
    b98a:	2301      	movs	r3, #1
    b98c:	041b      	lsls	r3, r3, #16
    b98e:	4298      	cmp	r0, r3
    b990:	d301      	bcc.n	b996 <__ctzsi2+0x12>
    b992:	0c00      	lsrs	r0, r0, #16
    b994:	3910      	subs	r1, #16
    b996:	0a1b      	lsrs	r3, r3, #8
    b998:	4298      	cmp	r0, r3
    b99a:	d301      	bcc.n	b9a0 <__ctzsi2+0x1c>
    b99c:	0a00      	lsrs	r0, r0, #8
    b99e:	3908      	subs	r1, #8
    b9a0:	091b      	lsrs	r3, r3, #4
    b9a2:	4298      	cmp	r0, r3
    b9a4:	d301      	bcc.n	b9aa <__ctzsi2+0x26>
    b9a6:	0900      	lsrs	r0, r0, #4
    b9a8:	3904      	subs	r1, #4
    b9aa:	a202      	add	r2, pc, #8	; (adr r2, b9b4 <__ctzsi2+0x30>)
    b9ac:	5c10      	ldrb	r0, [r2, r0]
    b9ae:	1a40      	subs	r0, r0, r1
    b9b0:	4770      	bx	lr
    b9b2:	46c0      	nop			; (mov r8, r8)
    b9b4:	1d1d1c1b 	.word	0x1d1d1c1b
    b9b8:	1e1e1e1e 	.word	0x1e1e1e1e
    b9bc:	1f1f1f1f 	.word	0x1f1f1f1f
    b9c0:	1f1f1f1f 	.word	0x1f1f1f1f

0000b9c4 <__aeabi_lmul>:
    b9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9c6:	46ce      	mov	lr, r9
    b9c8:	4647      	mov	r7, r8
    b9ca:	0415      	lsls	r5, r2, #16
    b9cc:	0c2d      	lsrs	r5, r5, #16
    b9ce:	002e      	movs	r6, r5
    b9d0:	b580      	push	{r7, lr}
    b9d2:	0407      	lsls	r7, r0, #16
    b9d4:	0c14      	lsrs	r4, r2, #16
    b9d6:	0c3f      	lsrs	r7, r7, #16
    b9d8:	4699      	mov	r9, r3
    b9da:	0c03      	lsrs	r3, r0, #16
    b9dc:	437e      	muls	r6, r7
    b9de:	435d      	muls	r5, r3
    b9e0:	4367      	muls	r7, r4
    b9e2:	4363      	muls	r3, r4
    b9e4:	197f      	adds	r7, r7, r5
    b9e6:	0c34      	lsrs	r4, r6, #16
    b9e8:	19e4      	adds	r4, r4, r7
    b9ea:	469c      	mov	ip, r3
    b9ec:	42a5      	cmp	r5, r4
    b9ee:	d903      	bls.n	b9f8 <__aeabi_lmul+0x34>
    b9f0:	2380      	movs	r3, #128	; 0x80
    b9f2:	025b      	lsls	r3, r3, #9
    b9f4:	4698      	mov	r8, r3
    b9f6:	44c4      	add	ip, r8
    b9f8:	464b      	mov	r3, r9
    b9fa:	4351      	muls	r1, r2
    b9fc:	4343      	muls	r3, r0
    b9fe:	0436      	lsls	r6, r6, #16
    ba00:	0c36      	lsrs	r6, r6, #16
    ba02:	0c25      	lsrs	r5, r4, #16
    ba04:	0424      	lsls	r4, r4, #16
    ba06:	4465      	add	r5, ip
    ba08:	19a4      	adds	r4, r4, r6
    ba0a:	1859      	adds	r1, r3, r1
    ba0c:	1949      	adds	r1, r1, r5
    ba0e:	0020      	movs	r0, r4
    ba10:	bc0c      	pop	{r2, r3}
    ba12:	4690      	mov	r8, r2
    ba14:	4699      	mov	r9, r3
    ba16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ba18 <__aeabi_dadd>:
    ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba1a:	4645      	mov	r5, r8
    ba1c:	46de      	mov	lr, fp
    ba1e:	4657      	mov	r7, sl
    ba20:	464e      	mov	r6, r9
    ba22:	030c      	lsls	r4, r1, #12
    ba24:	b5e0      	push	{r5, r6, r7, lr}
    ba26:	004e      	lsls	r6, r1, #1
    ba28:	0fc9      	lsrs	r1, r1, #31
    ba2a:	4688      	mov	r8, r1
    ba2c:	000d      	movs	r5, r1
    ba2e:	0a61      	lsrs	r1, r4, #9
    ba30:	0f44      	lsrs	r4, r0, #29
    ba32:	430c      	orrs	r4, r1
    ba34:	00c7      	lsls	r7, r0, #3
    ba36:	0319      	lsls	r1, r3, #12
    ba38:	0058      	lsls	r0, r3, #1
    ba3a:	0fdb      	lsrs	r3, r3, #31
    ba3c:	469b      	mov	fp, r3
    ba3e:	0a4b      	lsrs	r3, r1, #9
    ba40:	0f51      	lsrs	r1, r2, #29
    ba42:	430b      	orrs	r3, r1
    ba44:	0d76      	lsrs	r6, r6, #21
    ba46:	0d40      	lsrs	r0, r0, #21
    ba48:	0019      	movs	r1, r3
    ba4a:	00d2      	lsls	r2, r2, #3
    ba4c:	45d8      	cmp	r8, fp
    ba4e:	d100      	bne.n	ba52 <__aeabi_dadd+0x3a>
    ba50:	e0ae      	b.n	bbb0 <__aeabi_dadd+0x198>
    ba52:	1a35      	subs	r5, r6, r0
    ba54:	2d00      	cmp	r5, #0
    ba56:	dc00      	bgt.n	ba5a <__aeabi_dadd+0x42>
    ba58:	e0f6      	b.n	bc48 <__aeabi_dadd+0x230>
    ba5a:	2800      	cmp	r0, #0
    ba5c:	d10f      	bne.n	ba7e <__aeabi_dadd+0x66>
    ba5e:	4313      	orrs	r3, r2
    ba60:	d100      	bne.n	ba64 <__aeabi_dadd+0x4c>
    ba62:	e0db      	b.n	bc1c <__aeabi_dadd+0x204>
    ba64:	1e6b      	subs	r3, r5, #1
    ba66:	2b00      	cmp	r3, #0
    ba68:	d000      	beq.n	ba6c <__aeabi_dadd+0x54>
    ba6a:	e137      	b.n	bcdc <__aeabi_dadd+0x2c4>
    ba6c:	1aba      	subs	r2, r7, r2
    ba6e:	4297      	cmp	r7, r2
    ba70:	41bf      	sbcs	r7, r7
    ba72:	1a64      	subs	r4, r4, r1
    ba74:	427f      	negs	r7, r7
    ba76:	1be4      	subs	r4, r4, r7
    ba78:	2601      	movs	r6, #1
    ba7a:	0017      	movs	r7, r2
    ba7c:	e024      	b.n	bac8 <__aeabi_dadd+0xb0>
    ba7e:	4bc6      	ldr	r3, [pc, #792]	; (bd98 <__aeabi_dadd+0x380>)
    ba80:	429e      	cmp	r6, r3
    ba82:	d04d      	beq.n	bb20 <__aeabi_dadd+0x108>
    ba84:	2380      	movs	r3, #128	; 0x80
    ba86:	041b      	lsls	r3, r3, #16
    ba88:	4319      	orrs	r1, r3
    ba8a:	2d38      	cmp	r5, #56	; 0x38
    ba8c:	dd00      	ble.n	ba90 <__aeabi_dadd+0x78>
    ba8e:	e107      	b.n	bca0 <__aeabi_dadd+0x288>
    ba90:	2d1f      	cmp	r5, #31
    ba92:	dd00      	ble.n	ba96 <__aeabi_dadd+0x7e>
    ba94:	e138      	b.n	bd08 <__aeabi_dadd+0x2f0>
    ba96:	2020      	movs	r0, #32
    ba98:	1b43      	subs	r3, r0, r5
    ba9a:	469a      	mov	sl, r3
    ba9c:	000b      	movs	r3, r1
    ba9e:	4650      	mov	r0, sl
    baa0:	4083      	lsls	r3, r0
    baa2:	4699      	mov	r9, r3
    baa4:	0013      	movs	r3, r2
    baa6:	4648      	mov	r0, r9
    baa8:	40eb      	lsrs	r3, r5
    baaa:	4318      	orrs	r0, r3
    baac:	0003      	movs	r3, r0
    baae:	4650      	mov	r0, sl
    bab0:	4082      	lsls	r2, r0
    bab2:	1e50      	subs	r0, r2, #1
    bab4:	4182      	sbcs	r2, r0
    bab6:	40e9      	lsrs	r1, r5
    bab8:	431a      	orrs	r2, r3
    baba:	1aba      	subs	r2, r7, r2
    babc:	1a61      	subs	r1, r4, r1
    babe:	4297      	cmp	r7, r2
    bac0:	41a4      	sbcs	r4, r4
    bac2:	0017      	movs	r7, r2
    bac4:	4264      	negs	r4, r4
    bac6:	1b0c      	subs	r4, r1, r4
    bac8:	0223      	lsls	r3, r4, #8
    baca:	d562      	bpl.n	bb92 <__aeabi_dadd+0x17a>
    bacc:	0264      	lsls	r4, r4, #9
    bace:	0a65      	lsrs	r5, r4, #9
    bad0:	2d00      	cmp	r5, #0
    bad2:	d100      	bne.n	bad6 <__aeabi_dadd+0xbe>
    bad4:	e0df      	b.n	bc96 <__aeabi_dadd+0x27e>
    bad6:	0028      	movs	r0, r5
    bad8:	f7ff ff36 	bl	b948 <__clzsi2>
    badc:	0003      	movs	r3, r0
    bade:	3b08      	subs	r3, #8
    bae0:	2b1f      	cmp	r3, #31
    bae2:	dd00      	ble.n	bae6 <__aeabi_dadd+0xce>
    bae4:	e0d2      	b.n	bc8c <__aeabi_dadd+0x274>
    bae6:	2220      	movs	r2, #32
    bae8:	003c      	movs	r4, r7
    baea:	1ad2      	subs	r2, r2, r3
    baec:	409d      	lsls	r5, r3
    baee:	40d4      	lsrs	r4, r2
    baf0:	409f      	lsls	r7, r3
    baf2:	4325      	orrs	r5, r4
    baf4:	429e      	cmp	r6, r3
    baf6:	dd00      	ble.n	bafa <__aeabi_dadd+0xe2>
    baf8:	e0c4      	b.n	bc84 <__aeabi_dadd+0x26c>
    bafa:	1b9e      	subs	r6, r3, r6
    bafc:	1c73      	adds	r3, r6, #1
    bafe:	2b1f      	cmp	r3, #31
    bb00:	dd00      	ble.n	bb04 <__aeabi_dadd+0xec>
    bb02:	e0f1      	b.n	bce8 <__aeabi_dadd+0x2d0>
    bb04:	2220      	movs	r2, #32
    bb06:	0038      	movs	r0, r7
    bb08:	0029      	movs	r1, r5
    bb0a:	1ad2      	subs	r2, r2, r3
    bb0c:	40d8      	lsrs	r0, r3
    bb0e:	4091      	lsls	r1, r2
    bb10:	4097      	lsls	r7, r2
    bb12:	002c      	movs	r4, r5
    bb14:	4301      	orrs	r1, r0
    bb16:	1e78      	subs	r0, r7, #1
    bb18:	4187      	sbcs	r7, r0
    bb1a:	40dc      	lsrs	r4, r3
    bb1c:	2600      	movs	r6, #0
    bb1e:	430f      	orrs	r7, r1
    bb20:	077b      	lsls	r3, r7, #29
    bb22:	d009      	beq.n	bb38 <__aeabi_dadd+0x120>
    bb24:	230f      	movs	r3, #15
    bb26:	403b      	ands	r3, r7
    bb28:	2b04      	cmp	r3, #4
    bb2a:	d005      	beq.n	bb38 <__aeabi_dadd+0x120>
    bb2c:	1d3b      	adds	r3, r7, #4
    bb2e:	42bb      	cmp	r3, r7
    bb30:	41bf      	sbcs	r7, r7
    bb32:	427f      	negs	r7, r7
    bb34:	19e4      	adds	r4, r4, r7
    bb36:	001f      	movs	r7, r3
    bb38:	0223      	lsls	r3, r4, #8
    bb3a:	d52c      	bpl.n	bb96 <__aeabi_dadd+0x17e>
    bb3c:	4b96      	ldr	r3, [pc, #600]	; (bd98 <__aeabi_dadd+0x380>)
    bb3e:	3601      	adds	r6, #1
    bb40:	429e      	cmp	r6, r3
    bb42:	d100      	bne.n	bb46 <__aeabi_dadd+0x12e>
    bb44:	e09a      	b.n	bc7c <__aeabi_dadd+0x264>
    bb46:	4645      	mov	r5, r8
    bb48:	4b94      	ldr	r3, [pc, #592]	; (bd9c <__aeabi_dadd+0x384>)
    bb4a:	08ff      	lsrs	r7, r7, #3
    bb4c:	401c      	ands	r4, r3
    bb4e:	0760      	lsls	r0, r4, #29
    bb50:	0576      	lsls	r6, r6, #21
    bb52:	0264      	lsls	r4, r4, #9
    bb54:	4307      	orrs	r7, r0
    bb56:	0b24      	lsrs	r4, r4, #12
    bb58:	0d76      	lsrs	r6, r6, #21
    bb5a:	2100      	movs	r1, #0
    bb5c:	0324      	lsls	r4, r4, #12
    bb5e:	0b23      	lsrs	r3, r4, #12
    bb60:	0d0c      	lsrs	r4, r1, #20
    bb62:	4a8f      	ldr	r2, [pc, #572]	; (bda0 <__aeabi_dadd+0x388>)
    bb64:	0524      	lsls	r4, r4, #20
    bb66:	431c      	orrs	r4, r3
    bb68:	4014      	ands	r4, r2
    bb6a:	0533      	lsls	r3, r6, #20
    bb6c:	4323      	orrs	r3, r4
    bb6e:	005b      	lsls	r3, r3, #1
    bb70:	07ed      	lsls	r5, r5, #31
    bb72:	085b      	lsrs	r3, r3, #1
    bb74:	432b      	orrs	r3, r5
    bb76:	0038      	movs	r0, r7
    bb78:	0019      	movs	r1, r3
    bb7a:	bc3c      	pop	{r2, r3, r4, r5}
    bb7c:	4690      	mov	r8, r2
    bb7e:	4699      	mov	r9, r3
    bb80:	46a2      	mov	sl, r4
    bb82:	46ab      	mov	fp, r5
    bb84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb86:	4664      	mov	r4, ip
    bb88:	4304      	orrs	r4, r0
    bb8a:	d100      	bne.n	bb8e <__aeabi_dadd+0x176>
    bb8c:	e211      	b.n	bfb2 <__aeabi_dadd+0x59a>
    bb8e:	0004      	movs	r4, r0
    bb90:	4667      	mov	r7, ip
    bb92:	077b      	lsls	r3, r7, #29
    bb94:	d1c6      	bne.n	bb24 <__aeabi_dadd+0x10c>
    bb96:	4645      	mov	r5, r8
    bb98:	0760      	lsls	r0, r4, #29
    bb9a:	08ff      	lsrs	r7, r7, #3
    bb9c:	4307      	orrs	r7, r0
    bb9e:	08e4      	lsrs	r4, r4, #3
    bba0:	4b7d      	ldr	r3, [pc, #500]	; (bd98 <__aeabi_dadd+0x380>)
    bba2:	429e      	cmp	r6, r3
    bba4:	d030      	beq.n	bc08 <__aeabi_dadd+0x1f0>
    bba6:	0324      	lsls	r4, r4, #12
    bba8:	0576      	lsls	r6, r6, #21
    bbaa:	0b24      	lsrs	r4, r4, #12
    bbac:	0d76      	lsrs	r6, r6, #21
    bbae:	e7d4      	b.n	bb5a <__aeabi_dadd+0x142>
    bbb0:	1a33      	subs	r3, r6, r0
    bbb2:	469a      	mov	sl, r3
    bbb4:	2b00      	cmp	r3, #0
    bbb6:	dd78      	ble.n	bcaa <__aeabi_dadd+0x292>
    bbb8:	2800      	cmp	r0, #0
    bbba:	d031      	beq.n	bc20 <__aeabi_dadd+0x208>
    bbbc:	4876      	ldr	r0, [pc, #472]	; (bd98 <__aeabi_dadd+0x380>)
    bbbe:	4286      	cmp	r6, r0
    bbc0:	d0ae      	beq.n	bb20 <__aeabi_dadd+0x108>
    bbc2:	2080      	movs	r0, #128	; 0x80
    bbc4:	0400      	lsls	r0, r0, #16
    bbc6:	4301      	orrs	r1, r0
    bbc8:	4653      	mov	r3, sl
    bbca:	2b38      	cmp	r3, #56	; 0x38
    bbcc:	dc00      	bgt.n	bbd0 <__aeabi_dadd+0x1b8>
    bbce:	e0e9      	b.n	bda4 <__aeabi_dadd+0x38c>
    bbd0:	430a      	orrs	r2, r1
    bbd2:	1e51      	subs	r1, r2, #1
    bbd4:	418a      	sbcs	r2, r1
    bbd6:	2100      	movs	r1, #0
    bbd8:	19d2      	adds	r2, r2, r7
    bbda:	42ba      	cmp	r2, r7
    bbdc:	41bf      	sbcs	r7, r7
    bbde:	1909      	adds	r1, r1, r4
    bbe0:	427c      	negs	r4, r7
    bbe2:	0017      	movs	r7, r2
    bbe4:	190c      	adds	r4, r1, r4
    bbe6:	0223      	lsls	r3, r4, #8
    bbe8:	d5d3      	bpl.n	bb92 <__aeabi_dadd+0x17a>
    bbea:	4b6b      	ldr	r3, [pc, #428]	; (bd98 <__aeabi_dadd+0x380>)
    bbec:	3601      	adds	r6, #1
    bbee:	429e      	cmp	r6, r3
    bbf0:	d100      	bne.n	bbf4 <__aeabi_dadd+0x1dc>
    bbf2:	e13a      	b.n	be6a <__aeabi_dadd+0x452>
    bbf4:	2001      	movs	r0, #1
    bbf6:	4b69      	ldr	r3, [pc, #420]	; (bd9c <__aeabi_dadd+0x384>)
    bbf8:	401c      	ands	r4, r3
    bbfa:	087b      	lsrs	r3, r7, #1
    bbfc:	4007      	ands	r7, r0
    bbfe:	431f      	orrs	r7, r3
    bc00:	07e0      	lsls	r0, r4, #31
    bc02:	4307      	orrs	r7, r0
    bc04:	0864      	lsrs	r4, r4, #1
    bc06:	e78b      	b.n	bb20 <__aeabi_dadd+0x108>
    bc08:	0023      	movs	r3, r4
    bc0a:	433b      	orrs	r3, r7
    bc0c:	d100      	bne.n	bc10 <__aeabi_dadd+0x1f8>
    bc0e:	e1cb      	b.n	bfa8 <__aeabi_dadd+0x590>
    bc10:	2280      	movs	r2, #128	; 0x80
    bc12:	0312      	lsls	r2, r2, #12
    bc14:	4314      	orrs	r4, r2
    bc16:	0324      	lsls	r4, r4, #12
    bc18:	0b24      	lsrs	r4, r4, #12
    bc1a:	e79e      	b.n	bb5a <__aeabi_dadd+0x142>
    bc1c:	002e      	movs	r6, r5
    bc1e:	e77f      	b.n	bb20 <__aeabi_dadd+0x108>
    bc20:	0008      	movs	r0, r1
    bc22:	4310      	orrs	r0, r2
    bc24:	d100      	bne.n	bc28 <__aeabi_dadd+0x210>
    bc26:	e0b4      	b.n	bd92 <__aeabi_dadd+0x37a>
    bc28:	1e58      	subs	r0, r3, #1
    bc2a:	2800      	cmp	r0, #0
    bc2c:	d000      	beq.n	bc30 <__aeabi_dadd+0x218>
    bc2e:	e0de      	b.n	bdee <__aeabi_dadd+0x3d6>
    bc30:	18ba      	adds	r2, r7, r2
    bc32:	42ba      	cmp	r2, r7
    bc34:	419b      	sbcs	r3, r3
    bc36:	1864      	adds	r4, r4, r1
    bc38:	425b      	negs	r3, r3
    bc3a:	18e4      	adds	r4, r4, r3
    bc3c:	0017      	movs	r7, r2
    bc3e:	2601      	movs	r6, #1
    bc40:	0223      	lsls	r3, r4, #8
    bc42:	d5a6      	bpl.n	bb92 <__aeabi_dadd+0x17a>
    bc44:	2602      	movs	r6, #2
    bc46:	e7d5      	b.n	bbf4 <__aeabi_dadd+0x1dc>
    bc48:	2d00      	cmp	r5, #0
    bc4a:	d16e      	bne.n	bd2a <__aeabi_dadd+0x312>
    bc4c:	1c70      	adds	r0, r6, #1
    bc4e:	0540      	lsls	r0, r0, #21
    bc50:	0d40      	lsrs	r0, r0, #21
    bc52:	2801      	cmp	r0, #1
    bc54:	dc00      	bgt.n	bc58 <__aeabi_dadd+0x240>
    bc56:	e0f9      	b.n	be4c <__aeabi_dadd+0x434>
    bc58:	1ab8      	subs	r0, r7, r2
    bc5a:	4684      	mov	ip, r0
    bc5c:	4287      	cmp	r7, r0
    bc5e:	4180      	sbcs	r0, r0
    bc60:	1ae5      	subs	r5, r4, r3
    bc62:	4240      	negs	r0, r0
    bc64:	1a2d      	subs	r5, r5, r0
    bc66:	0228      	lsls	r0, r5, #8
    bc68:	d400      	bmi.n	bc6c <__aeabi_dadd+0x254>
    bc6a:	e089      	b.n	bd80 <__aeabi_dadd+0x368>
    bc6c:	1bd7      	subs	r7, r2, r7
    bc6e:	42ba      	cmp	r2, r7
    bc70:	4192      	sbcs	r2, r2
    bc72:	1b1c      	subs	r4, r3, r4
    bc74:	4252      	negs	r2, r2
    bc76:	1aa5      	subs	r5, r4, r2
    bc78:	46d8      	mov	r8, fp
    bc7a:	e729      	b.n	bad0 <__aeabi_dadd+0xb8>
    bc7c:	4645      	mov	r5, r8
    bc7e:	2400      	movs	r4, #0
    bc80:	2700      	movs	r7, #0
    bc82:	e76a      	b.n	bb5a <__aeabi_dadd+0x142>
    bc84:	4c45      	ldr	r4, [pc, #276]	; (bd9c <__aeabi_dadd+0x384>)
    bc86:	1af6      	subs	r6, r6, r3
    bc88:	402c      	ands	r4, r5
    bc8a:	e749      	b.n	bb20 <__aeabi_dadd+0x108>
    bc8c:	003d      	movs	r5, r7
    bc8e:	3828      	subs	r0, #40	; 0x28
    bc90:	4085      	lsls	r5, r0
    bc92:	2700      	movs	r7, #0
    bc94:	e72e      	b.n	baf4 <__aeabi_dadd+0xdc>
    bc96:	0038      	movs	r0, r7
    bc98:	f7ff fe56 	bl	b948 <__clzsi2>
    bc9c:	3020      	adds	r0, #32
    bc9e:	e71d      	b.n	badc <__aeabi_dadd+0xc4>
    bca0:	430a      	orrs	r2, r1
    bca2:	1e51      	subs	r1, r2, #1
    bca4:	418a      	sbcs	r2, r1
    bca6:	2100      	movs	r1, #0
    bca8:	e707      	b.n	baba <__aeabi_dadd+0xa2>
    bcaa:	2b00      	cmp	r3, #0
    bcac:	d000      	beq.n	bcb0 <__aeabi_dadd+0x298>
    bcae:	e0f3      	b.n	be98 <__aeabi_dadd+0x480>
    bcb0:	1c70      	adds	r0, r6, #1
    bcb2:	0543      	lsls	r3, r0, #21
    bcb4:	0d5b      	lsrs	r3, r3, #21
    bcb6:	2b01      	cmp	r3, #1
    bcb8:	dc00      	bgt.n	bcbc <__aeabi_dadd+0x2a4>
    bcba:	e0ad      	b.n	be18 <__aeabi_dadd+0x400>
    bcbc:	4b36      	ldr	r3, [pc, #216]	; (bd98 <__aeabi_dadd+0x380>)
    bcbe:	4298      	cmp	r0, r3
    bcc0:	d100      	bne.n	bcc4 <__aeabi_dadd+0x2ac>
    bcc2:	e0d1      	b.n	be68 <__aeabi_dadd+0x450>
    bcc4:	18ba      	adds	r2, r7, r2
    bcc6:	42ba      	cmp	r2, r7
    bcc8:	41bf      	sbcs	r7, r7
    bcca:	1864      	adds	r4, r4, r1
    bccc:	427f      	negs	r7, r7
    bcce:	19e4      	adds	r4, r4, r7
    bcd0:	07e7      	lsls	r7, r4, #31
    bcd2:	0852      	lsrs	r2, r2, #1
    bcd4:	4317      	orrs	r7, r2
    bcd6:	0864      	lsrs	r4, r4, #1
    bcd8:	0006      	movs	r6, r0
    bcda:	e721      	b.n	bb20 <__aeabi_dadd+0x108>
    bcdc:	482e      	ldr	r0, [pc, #184]	; (bd98 <__aeabi_dadd+0x380>)
    bcde:	4285      	cmp	r5, r0
    bce0:	d100      	bne.n	bce4 <__aeabi_dadd+0x2cc>
    bce2:	e093      	b.n	be0c <__aeabi_dadd+0x3f4>
    bce4:	001d      	movs	r5, r3
    bce6:	e6d0      	b.n	ba8a <__aeabi_dadd+0x72>
    bce8:	0029      	movs	r1, r5
    bcea:	3e1f      	subs	r6, #31
    bcec:	40f1      	lsrs	r1, r6
    bcee:	2b20      	cmp	r3, #32
    bcf0:	d100      	bne.n	bcf4 <__aeabi_dadd+0x2dc>
    bcf2:	e08d      	b.n	be10 <__aeabi_dadd+0x3f8>
    bcf4:	2240      	movs	r2, #64	; 0x40
    bcf6:	1ad3      	subs	r3, r2, r3
    bcf8:	409d      	lsls	r5, r3
    bcfa:	432f      	orrs	r7, r5
    bcfc:	1e7d      	subs	r5, r7, #1
    bcfe:	41af      	sbcs	r7, r5
    bd00:	2400      	movs	r4, #0
    bd02:	430f      	orrs	r7, r1
    bd04:	2600      	movs	r6, #0
    bd06:	e744      	b.n	bb92 <__aeabi_dadd+0x17a>
    bd08:	002b      	movs	r3, r5
    bd0a:	0008      	movs	r0, r1
    bd0c:	3b20      	subs	r3, #32
    bd0e:	40d8      	lsrs	r0, r3
    bd10:	0003      	movs	r3, r0
    bd12:	2d20      	cmp	r5, #32
    bd14:	d100      	bne.n	bd18 <__aeabi_dadd+0x300>
    bd16:	e07d      	b.n	be14 <__aeabi_dadd+0x3fc>
    bd18:	2040      	movs	r0, #64	; 0x40
    bd1a:	1b45      	subs	r5, r0, r5
    bd1c:	40a9      	lsls	r1, r5
    bd1e:	430a      	orrs	r2, r1
    bd20:	1e51      	subs	r1, r2, #1
    bd22:	418a      	sbcs	r2, r1
    bd24:	2100      	movs	r1, #0
    bd26:	431a      	orrs	r2, r3
    bd28:	e6c7      	b.n	baba <__aeabi_dadd+0xa2>
    bd2a:	2e00      	cmp	r6, #0
    bd2c:	d050      	beq.n	bdd0 <__aeabi_dadd+0x3b8>
    bd2e:	4e1a      	ldr	r6, [pc, #104]	; (bd98 <__aeabi_dadd+0x380>)
    bd30:	42b0      	cmp	r0, r6
    bd32:	d057      	beq.n	bde4 <__aeabi_dadd+0x3cc>
    bd34:	2680      	movs	r6, #128	; 0x80
    bd36:	426b      	negs	r3, r5
    bd38:	4699      	mov	r9, r3
    bd3a:	0436      	lsls	r6, r6, #16
    bd3c:	4334      	orrs	r4, r6
    bd3e:	464b      	mov	r3, r9
    bd40:	2b38      	cmp	r3, #56	; 0x38
    bd42:	dd00      	ble.n	bd46 <__aeabi_dadd+0x32e>
    bd44:	e0d6      	b.n	bef4 <__aeabi_dadd+0x4dc>
    bd46:	2b1f      	cmp	r3, #31
    bd48:	dd00      	ble.n	bd4c <__aeabi_dadd+0x334>
    bd4a:	e135      	b.n	bfb8 <__aeabi_dadd+0x5a0>
    bd4c:	2620      	movs	r6, #32
    bd4e:	1af5      	subs	r5, r6, r3
    bd50:	0026      	movs	r6, r4
    bd52:	40ae      	lsls	r6, r5
    bd54:	46b2      	mov	sl, r6
    bd56:	003e      	movs	r6, r7
    bd58:	40de      	lsrs	r6, r3
    bd5a:	46ac      	mov	ip, r5
    bd5c:	0035      	movs	r5, r6
    bd5e:	4656      	mov	r6, sl
    bd60:	432e      	orrs	r6, r5
    bd62:	4665      	mov	r5, ip
    bd64:	40af      	lsls	r7, r5
    bd66:	1e7d      	subs	r5, r7, #1
    bd68:	41af      	sbcs	r7, r5
    bd6a:	40dc      	lsrs	r4, r3
    bd6c:	4337      	orrs	r7, r6
    bd6e:	1bd7      	subs	r7, r2, r7
    bd70:	42ba      	cmp	r2, r7
    bd72:	4192      	sbcs	r2, r2
    bd74:	1b0c      	subs	r4, r1, r4
    bd76:	4252      	negs	r2, r2
    bd78:	1aa4      	subs	r4, r4, r2
    bd7a:	0006      	movs	r6, r0
    bd7c:	46d8      	mov	r8, fp
    bd7e:	e6a3      	b.n	bac8 <__aeabi_dadd+0xb0>
    bd80:	4664      	mov	r4, ip
    bd82:	4667      	mov	r7, ip
    bd84:	432c      	orrs	r4, r5
    bd86:	d000      	beq.n	bd8a <__aeabi_dadd+0x372>
    bd88:	e6a2      	b.n	bad0 <__aeabi_dadd+0xb8>
    bd8a:	2500      	movs	r5, #0
    bd8c:	2600      	movs	r6, #0
    bd8e:	2700      	movs	r7, #0
    bd90:	e706      	b.n	bba0 <__aeabi_dadd+0x188>
    bd92:	001e      	movs	r6, r3
    bd94:	e6c4      	b.n	bb20 <__aeabi_dadd+0x108>
    bd96:	46c0      	nop			; (mov r8, r8)
    bd98:	000007ff 	.word	0x000007ff
    bd9c:	ff7fffff 	.word	0xff7fffff
    bda0:	800fffff 	.word	0x800fffff
    bda4:	2b1f      	cmp	r3, #31
    bda6:	dc63      	bgt.n	be70 <__aeabi_dadd+0x458>
    bda8:	2020      	movs	r0, #32
    bdaa:	1ac3      	subs	r3, r0, r3
    bdac:	0008      	movs	r0, r1
    bdae:	4098      	lsls	r0, r3
    bdb0:	469c      	mov	ip, r3
    bdb2:	4683      	mov	fp, r0
    bdb4:	4653      	mov	r3, sl
    bdb6:	0010      	movs	r0, r2
    bdb8:	40d8      	lsrs	r0, r3
    bdba:	0003      	movs	r3, r0
    bdbc:	4658      	mov	r0, fp
    bdbe:	4318      	orrs	r0, r3
    bdc0:	4663      	mov	r3, ip
    bdc2:	409a      	lsls	r2, r3
    bdc4:	1e53      	subs	r3, r2, #1
    bdc6:	419a      	sbcs	r2, r3
    bdc8:	4653      	mov	r3, sl
    bdca:	4302      	orrs	r2, r0
    bdcc:	40d9      	lsrs	r1, r3
    bdce:	e703      	b.n	bbd8 <__aeabi_dadd+0x1c0>
    bdd0:	0026      	movs	r6, r4
    bdd2:	433e      	orrs	r6, r7
    bdd4:	d006      	beq.n	bde4 <__aeabi_dadd+0x3cc>
    bdd6:	43eb      	mvns	r3, r5
    bdd8:	4699      	mov	r9, r3
    bdda:	2b00      	cmp	r3, #0
    bddc:	d0c7      	beq.n	bd6e <__aeabi_dadd+0x356>
    bdde:	4e94      	ldr	r6, [pc, #592]	; (c030 <__aeabi_dadd+0x618>)
    bde0:	42b0      	cmp	r0, r6
    bde2:	d1ac      	bne.n	bd3e <__aeabi_dadd+0x326>
    bde4:	000c      	movs	r4, r1
    bde6:	0017      	movs	r7, r2
    bde8:	0006      	movs	r6, r0
    bdea:	46d8      	mov	r8, fp
    bdec:	e698      	b.n	bb20 <__aeabi_dadd+0x108>
    bdee:	4b90      	ldr	r3, [pc, #576]	; (c030 <__aeabi_dadd+0x618>)
    bdf0:	459a      	cmp	sl, r3
    bdf2:	d00b      	beq.n	be0c <__aeabi_dadd+0x3f4>
    bdf4:	4682      	mov	sl, r0
    bdf6:	e6e7      	b.n	bbc8 <__aeabi_dadd+0x1b0>
    bdf8:	2800      	cmp	r0, #0
    bdfa:	d000      	beq.n	bdfe <__aeabi_dadd+0x3e6>
    bdfc:	e09e      	b.n	bf3c <__aeabi_dadd+0x524>
    bdfe:	0018      	movs	r0, r3
    be00:	4310      	orrs	r0, r2
    be02:	d100      	bne.n	be06 <__aeabi_dadd+0x3ee>
    be04:	e0e9      	b.n	bfda <__aeabi_dadd+0x5c2>
    be06:	001c      	movs	r4, r3
    be08:	0017      	movs	r7, r2
    be0a:	46d8      	mov	r8, fp
    be0c:	4e88      	ldr	r6, [pc, #544]	; (c030 <__aeabi_dadd+0x618>)
    be0e:	e687      	b.n	bb20 <__aeabi_dadd+0x108>
    be10:	2500      	movs	r5, #0
    be12:	e772      	b.n	bcfa <__aeabi_dadd+0x2e2>
    be14:	2100      	movs	r1, #0
    be16:	e782      	b.n	bd1e <__aeabi_dadd+0x306>
    be18:	0023      	movs	r3, r4
    be1a:	433b      	orrs	r3, r7
    be1c:	2e00      	cmp	r6, #0
    be1e:	d000      	beq.n	be22 <__aeabi_dadd+0x40a>
    be20:	e0ab      	b.n	bf7a <__aeabi_dadd+0x562>
    be22:	2b00      	cmp	r3, #0
    be24:	d100      	bne.n	be28 <__aeabi_dadd+0x410>
    be26:	e0e7      	b.n	bff8 <__aeabi_dadd+0x5e0>
    be28:	000b      	movs	r3, r1
    be2a:	4313      	orrs	r3, r2
    be2c:	d100      	bne.n	be30 <__aeabi_dadd+0x418>
    be2e:	e677      	b.n	bb20 <__aeabi_dadd+0x108>
    be30:	18ba      	adds	r2, r7, r2
    be32:	42ba      	cmp	r2, r7
    be34:	41bf      	sbcs	r7, r7
    be36:	1864      	adds	r4, r4, r1
    be38:	427f      	negs	r7, r7
    be3a:	19e4      	adds	r4, r4, r7
    be3c:	0223      	lsls	r3, r4, #8
    be3e:	d400      	bmi.n	be42 <__aeabi_dadd+0x42a>
    be40:	e0f2      	b.n	c028 <__aeabi_dadd+0x610>
    be42:	4b7c      	ldr	r3, [pc, #496]	; (c034 <__aeabi_dadd+0x61c>)
    be44:	0017      	movs	r7, r2
    be46:	401c      	ands	r4, r3
    be48:	0006      	movs	r6, r0
    be4a:	e669      	b.n	bb20 <__aeabi_dadd+0x108>
    be4c:	0020      	movs	r0, r4
    be4e:	4338      	orrs	r0, r7
    be50:	2e00      	cmp	r6, #0
    be52:	d1d1      	bne.n	bdf8 <__aeabi_dadd+0x3e0>
    be54:	2800      	cmp	r0, #0
    be56:	d15b      	bne.n	bf10 <__aeabi_dadd+0x4f8>
    be58:	001c      	movs	r4, r3
    be5a:	4314      	orrs	r4, r2
    be5c:	d100      	bne.n	be60 <__aeabi_dadd+0x448>
    be5e:	e0a8      	b.n	bfb2 <__aeabi_dadd+0x59a>
    be60:	001c      	movs	r4, r3
    be62:	0017      	movs	r7, r2
    be64:	46d8      	mov	r8, fp
    be66:	e65b      	b.n	bb20 <__aeabi_dadd+0x108>
    be68:	0006      	movs	r6, r0
    be6a:	2400      	movs	r4, #0
    be6c:	2700      	movs	r7, #0
    be6e:	e697      	b.n	bba0 <__aeabi_dadd+0x188>
    be70:	4650      	mov	r0, sl
    be72:	000b      	movs	r3, r1
    be74:	3820      	subs	r0, #32
    be76:	40c3      	lsrs	r3, r0
    be78:	4699      	mov	r9, r3
    be7a:	4653      	mov	r3, sl
    be7c:	2b20      	cmp	r3, #32
    be7e:	d100      	bne.n	be82 <__aeabi_dadd+0x46a>
    be80:	e095      	b.n	bfae <__aeabi_dadd+0x596>
    be82:	2340      	movs	r3, #64	; 0x40
    be84:	4650      	mov	r0, sl
    be86:	1a1b      	subs	r3, r3, r0
    be88:	4099      	lsls	r1, r3
    be8a:	430a      	orrs	r2, r1
    be8c:	1e51      	subs	r1, r2, #1
    be8e:	418a      	sbcs	r2, r1
    be90:	464b      	mov	r3, r9
    be92:	2100      	movs	r1, #0
    be94:	431a      	orrs	r2, r3
    be96:	e69f      	b.n	bbd8 <__aeabi_dadd+0x1c0>
    be98:	2e00      	cmp	r6, #0
    be9a:	d130      	bne.n	befe <__aeabi_dadd+0x4e6>
    be9c:	0026      	movs	r6, r4
    be9e:	433e      	orrs	r6, r7
    bea0:	d067      	beq.n	bf72 <__aeabi_dadd+0x55a>
    bea2:	43db      	mvns	r3, r3
    bea4:	469a      	mov	sl, r3
    bea6:	2b00      	cmp	r3, #0
    bea8:	d01c      	beq.n	bee4 <__aeabi_dadd+0x4cc>
    beaa:	4e61      	ldr	r6, [pc, #388]	; (c030 <__aeabi_dadd+0x618>)
    beac:	42b0      	cmp	r0, r6
    beae:	d060      	beq.n	bf72 <__aeabi_dadd+0x55a>
    beb0:	4653      	mov	r3, sl
    beb2:	2b38      	cmp	r3, #56	; 0x38
    beb4:	dd00      	ble.n	beb8 <__aeabi_dadd+0x4a0>
    beb6:	e096      	b.n	bfe6 <__aeabi_dadd+0x5ce>
    beb8:	2b1f      	cmp	r3, #31
    beba:	dd00      	ble.n	bebe <__aeabi_dadd+0x4a6>
    bebc:	e09f      	b.n	bffe <__aeabi_dadd+0x5e6>
    bebe:	2620      	movs	r6, #32
    bec0:	1af3      	subs	r3, r6, r3
    bec2:	0026      	movs	r6, r4
    bec4:	409e      	lsls	r6, r3
    bec6:	469c      	mov	ip, r3
    bec8:	46b3      	mov	fp, r6
    beca:	4653      	mov	r3, sl
    becc:	003e      	movs	r6, r7
    bece:	40de      	lsrs	r6, r3
    bed0:	0033      	movs	r3, r6
    bed2:	465e      	mov	r6, fp
    bed4:	431e      	orrs	r6, r3
    bed6:	4663      	mov	r3, ip
    bed8:	409f      	lsls	r7, r3
    beda:	1e7b      	subs	r3, r7, #1
    bedc:	419f      	sbcs	r7, r3
    bede:	4653      	mov	r3, sl
    bee0:	40dc      	lsrs	r4, r3
    bee2:	4337      	orrs	r7, r6
    bee4:	18bf      	adds	r7, r7, r2
    bee6:	4297      	cmp	r7, r2
    bee8:	4192      	sbcs	r2, r2
    beea:	1864      	adds	r4, r4, r1
    beec:	4252      	negs	r2, r2
    beee:	18a4      	adds	r4, r4, r2
    bef0:	0006      	movs	r6, r0
    bef2:	e678      	b.n	bbe6 <__aeabi_dadd+0x1ce>
    bef4:	4327      	orrs	r7, r4
    bef6:	1e7c      	subs	r4, r7, #1
    bef8:	41a7      	sbcs	r7, r4
    befa:	2400      	movs	r4, #0
    befc:	e737      	b.n	bd6e <__aeabi_dadd+0x356>
    befe:	4e4c      	ldr	r6, [pc, #304]	; (c030 <__aeabi_dadd+0x618>)
    bf00:	42b0      	cmp	r0, r6
    bf02:	d036      	beq.n	bf72 <__aeabi_dadd+0x55a>
    bf04:	2680      	movs	r6, #128	; 0x80
    bf06:	425b      	negs	r3, r3
    bf08:	0436      	lsls	r6, r6, #16
    bf0a:	469a      	mov	sl, r3
    bf0c:	4334      	orrs	r4, r6
    bf0e:	e7cf      	b.n	beb0 <__aeabi_dadd+0x498>
    bf10:	0018      	movs	r0, r3
    bf12:	4310      	orrs	r0, r2
    bf14:	d100      	bne.n	bf18 <__aeabi_dadd+0x500>
    bf16:	e603      	b.n	bb20 <__aeabi_dadd+0x108>
    bf18:	1ab8      	subs	r0, r7, r2
    bf1a:	4684      	mov	ip, r0
    bf1c:	4567      	cmp	r7, ip
    bf1e:	41ad      	sbcs	r5, r5
    bf20:	1ae0      	subs	r0, r4, r3
    bf22:	426d      	negs	r5, r5
    bf24:	1b40      	subs	r0, r0, r5
    bf26:	0205      	lsls	r5, r0, #8
    bf28:	d400      	bmi.n	bf2c <__aeabi_dadd+0x514>
    bf2a:	e62c      	b.n	bb86 <__aeabi_dadd+0x16e>
    bf2c:	1bd7      	subs	r7, r2, r7
    bf2e:	42ba      	cmp	r2, r7
    bf30:	4192      	sbcs	r2, r2
    bf32:	1b1c      	subs	r4, r3, r4
    bf34:	4252      	negs	r2, r2
    bf36:	1aa4      	subs	r4, r4, r2
    bf38:	46d8      	mov	r8, fp
    bf3a:	e5f1      	b.n	bb20 <__aeabi_dadd+0x108>
    bf3c:	0018      	movs	r0, r3
    bf3e:	4310      	orrs	r0, r2
    bf40:	d100      	bne.n	bf44 <__aeabi_dadd+0x52c>
    bf42:	e763      	b.n	be0c <__aeabi_dadd+0x3f4>
    bf44:	08f8      	lsrs	r0, r7, #3
    bf46:	0767      	lsls	r7, r4, #29
    bf48:	4307      	orrs	r7, r0
    bf4a:	2080      	movs	r0, #128	; 0x80
    bf4c:	08e4      	lsrs	r4, r4, #3
    bf4e:	0300      	lsls	r0, r0, #12
    bf50:	4204      	tst	r4, r0
    bf52:	d008      	beq.n	bf66 <__aeabi_dadd+0x54e>
    bf54:	08dd      	lsrs	r5, r3, #3
    bf56:	4205      	tst	r5, r0
    bf58:	d105      	bne.n	bf66 <__aeabi_dadd+0x54e>
    bf5a:	08d2      	lsrs	r2, r2, #3
    bf5c:	0759      	lsls	r1, r3, #29
    bf5e:	4311      	orrs	r1, r2
    bf60:	000f      	movs	r7, r1
    bf62:	002c      	movs	r4, r5
    bf64:	46d8      	mov	r8, fp
    bf66:	0f7b      	lsrs	r3, r7, #29
    bf68:	00e4      	lsls	r4, r4, #3
    bf6a:	431c      	orrs	r4, r3
    bf6c:	00ff      	lsls	r7, r7, #3
    bf6e:	4e30      	ldr	r6, [pc, #192]	; (c030 <__aeabi_dadd+0x618>)
    bf70:	e5d6      	b.n	bb20 <__aeabi_dadd+0x108>
    bf72:	000c      	movs	r4, r1
    bf74:	0017      	movs	r7, r2
    bf76:	0006      	movs	r6, r0
    bf78:	e5d2      	b.n	bb20 <__aeabi_dadd+0x108>
    bf7a:	2b00      	cmp	r3, #0
    bf7c:	d038      	beq.n	bff0 <__aeabi_dadd+0x5d8>
    bf7e:	000b      	movs	r3, r1
    bf80:	4313      	orrs	r3, r2
    bf82:	d100      	bne.n	bf86 <__aeabi_dadd+0x56e>
    bf84:	e742      	b.n	be0c <__aeabi_dadd+0x3f4>
    bf86:	08f8      	lsrs	r0, r7, #3
    bf88:	0767      	lsls	r7, r4, #29
    bf8a:	4307      	orrs	r7, r0
    bf8c:	2080      	movs	r0, #128	; 0x80
    bf8e:	08e4      	lsrs	r4, r4, #3
    bf90:	0300      	lsls	r0, r0, #12
    bf92:	4204      	tst	r4, r0
    bf94:	d0e7      	beq.n	bf66 <__aeabi_dadd+0x54e>
    bf96:	08cb      	lsrs	r3, r1, #3
    bf98:	4203      	tst	r3, r0
    bf9a:	d1e4      	bne.n	bf66 <__aeabi_dadd+0x54e>
    bf9c:	08d2      	lsrs	r2, r2, #3
    bf9e:	0749      	lsls	r1, r1, #29
    bfa0:	4311      	orrs	r1, r2
    bfa2:	000f      	movs	r7, r1
    bfa4:	001c      	movs	r4, r3
    bfa6:	e7de      	b.n	bf66 <__aeabi_dadd+0x54e>
    bfa8:	2700      	movs	r7, #0
    bfaa:	2400      	movs	r4, #0
    bfac:	e5d5      	b.n	bb5a <__aeabi_dadd+0x142>
    bfae:	2100      	movs	r1, #0
    bfb0:	e76b      	b.n	be8a <__aeabi_dadd+0x472>
    bfb2:	2500      	movs	r5, #0
    bfb4:	2700      	movs	r7, #0
    bfb6:	e5f3      	b.n	bba0 <__aeabi_dadd+0x188>
    bfb8:	464e      	mov	r6, r9
    bfba:	0025      	movs	r5, r4
    bfbc:	3e20      	subs	r6, #32
    bfbe:	40f5      	lsrs	r5, r6
    bfc0:	464b      	mov	r3, r9
    bfc2:	002e      	movs	r6, r5
    bfc4:	2b20      	cmp	r3, #32
    bfc6:	d02d      	beq.n	c024 <__aeabi_dadd+0x60c>
    bfc8:	2540      	movs	r5, #64	; 0x40
    bfca:	1aed      	subs	r5, r5, r3
    bfcc:	40ac      	lsls	r4, r5
    bfce:	4327      	orrs	r7, r4
    bfd0:	1e7c      	subs	r4, r7, #1
    bfd2:	41a7      	sbcs	r7, r4
    bfd4:	2400      	movs	r4, #0
    bfd6:	4337      	orrs	r7, r6
    bfd8:	e6c9      	b.n	bd6e <__aeabi_dadd+0x356>
    bfda:	2480      	movs	r4, #128	; 0x80
    bfdc:	2500      	movs	r5, #0
    bfde:	0324      	lsls	r4, r4, #12
    bfe0:	4e13      	ldr	r6, [pc, #76]	; (c030 <__aeabi_dadd+0x618>)
    bfe2:	2700      	movs	r7, #0
    bfe4:	e5dc      	b.n	bba0 <__aeabi_dadd+0x188>
    bfe6:	4327      	orrs	r7, r4
    bfe8:	1e7c      	subs	r4, r7, #1
    bfea:	41a7      	sbcs	r7, r4
    bfec:	2400      	movs	r4, #0
    bfee:	e779      	b.n	bee4 <__aeabi_dadd+0x4cc>
    bff0:	000c      	movs	r4, r1
    bff2:	0017      	movs	r7, r2
    bff4:	4e0e      	ldr	r6, [pc, #56]	; (c030 <__aeabi_dadd+0x618>)
    bff6:	e593      	b.n	bb20 <__aeabi_dadd+0x108>
    bff8:	000c      	movs	r4, r1
    bffa:	0017      	movs	r7, r2
    bffc:	e590      	b.n	bb20 <__aeabi_dadd+0x108>
    bffe:	4656      	mov	r6, sl
    c000:	0023      	movs	r3, r4
    c002:	3e20      	subs	r6, #32
    c004:	40f3      	lsrs	r3, r6
    c006:	4699      	mov	r9, r3
    c008:	4653      	mov	r3, sl
    c00a:	2b20      	cmp	r3, #32
    c00c:	d00e      	beq.n	c02c <__aeabi_dadd+0x614>
    c00e:	2340      	movs	r3, #64	; 0x40
    c010:	4656      	mov	r6, sl
    c012:	1b9b      	subs	r3, r3, r6
    c014:	409c      	lsls	r4, r3
    c016:	4327      	orrs	r7, r4
    c018:	1e7c      	subs	r4, r7, #1
    c01a:	41a7      	sbcs	r7, r4
    c01c:	464b      	mov	r3, r9
    c01e:	2400      	movs	r4, #0
    c020:	431f      	orrs	r7, r3
    c022:	e75f      	b.n	bee4 <__aeabi_dadd+0x4cc>
    c024:	2400      	movs	r4, #0
    c026:	e7d2      	b.n	bfce <__aeabi_dadd+0x5b6>
    c028:	0017      	movs	r7, r2
    c02a:	e5b2      	b.n	bb92 <__aeabi_dadd+0x17a>
    c02c:	2400      	movs	r4, #0
    c02e:	e7f2      	b.n	c016 <__aeabi_dadd+0x5fe>
    c030:	000007ff 	.word	0x000007ff
    c034:	ff7fffff 	.word	0xff7fffff

0000c038 <__aeabi_ddiv>:
    c038:	b5f0      	push	{r4, r5, r6, r7, lr}
    c03a:	4657      	mov	r7, sl
    c03c:	4645      	mov	r5, r8
    c03e:	46de      	mov	lr, fp
    c040:	464e      	mov	r6, r9
    c042:	b5e0      	push	{r5, r6, r7, lr}
    c044:	004c      	lsls	r4, r1, #1
    c046:	030e      	lsls	r6, r1, #12
    c048:	b087      	sub	sp, #28
    c04a:	4683      	mov	fp, r0
    c04c:	4692      	mov	sl, r2
    c04e:	001d      	movs	r5, r3
    c050:	4680      	mov	r8, r0
    c052:	0b36      	lsrs	r6, r6, #12
    c054:	0d64      	lsrs	r4, r4, #21
    c056:	0fcf      	lsrs	r7, r1, #31
    c058:	2c00      	cmp	r4, #0
    c05a:	d04f      	beq.n	c0fc <__aeabi_ddiv+0xc4>
    c05c:	4b6f      	ldr	r3, [pc, #444]	; (c21c <__aeabi_ddiv+0x1e4>)
    c05e:	429c      	cmp	r4, r3
    c060:	d035      	beq.n	c0ce <__aeabi_ddiv+0x96>
    c062:	2380      	movs	r3, #128	; 0x80
    c064:	0f42      	lsrs	r2, r0, #29
    c066:	041b      	lsls	r3, r3, #16
    c068:	00f6      	lsls	r6, r6, #3
    c06a:	4313      	orrs	r3, r2
    c06c:	4333      	orrs	r3, r6
    c06e:	4699      	mov	r9, r3
    c070:	00c3      	lsls	r3, r0, #3
    c072:	4698      	mov	r8, r3
    c074:	4b6a      	ldr	r3, [pc, #424]	; (c220 <__aeabi_ddiv+0x1e8>)
    c076:	2600      	movs	r6, #0
    c078:	469c      	mov	ip, r3
    c07a:	2300      	movs	r3, #0
    c07c:	4464      	add	r4, ip
    c07e:	9303      	str	r3, [sp, #12]
    c080:	032b      	lsls	r3, r5, #12
    c082:	0b1b      	lsrs	r3, r3, #12
    c084:	469b      	mov	fp, r3
    c086:	006b      	lsls	r3, r5, #1
    c088:	0fed      	lsrs	r5, r5, #31
    c08a:	4650      	mov	r0, sl
    c08c:	0d5b      	lsrs	r3, r3, #21
    c08e:	9501      	str	r5, [sp, #4]
    c090:	d05e      	beq.n	c150 <__aeabi_ddiv+0x118>
    c092:	4a62      	ldr	r2, [pc, #392]	; (c21c <__aeabi_ddiv+0x1e4>)
    c094:	4293      	cmp	r3, r2
    c096:	d053      	beq.n	c140 <__aeabi_ddiv+0x108>
    c098:	465a      	mov	r2, fp
    c09a:	00d1      	lsls	r1, r2, #3
    c09c:	2280      	movs	r2, #128	; 0x80
    c09e:	0f40      	lsrs	r0, r0, #29
    c0a0:	0412      	lsls	r2, r2, #16
    c0a2:	4302      	orrs	r2, r0
    c0a4:	430a      	orrs	r2, r1
    c0a6:	4693      	mov	fp, r2
    c0a8:	4652      	mov	r2, sl
    c0aa:	00d1      	lsls	r1, r2, #3
    c0ac:	4a5c      	ldr	r2, [pc, #368]	; (c220 <__aeabi_ddiv+0x1e8>)
    c0ae:	4694      	mov	ip, r2
    c0b0:	2200      	movs	r2, #0
    c0b2:	4463      	add	r3, ip
    c0b4:	0038      	movs	r0, r7
    c0b6:	4068      	eors	r0, r5
    c0b8:	4684      	mov	ip, r0
    c0ba:	9002      	str	r0, [sp, #8]
    c0bc:	1ae4      	subs	r4, r4, r3
    c0be:	4316      	orrs	r6, r2
    c0c0:	2e0f      	cmp	r6, #15
    c0c2:	d900      	bls.n	c0c6 <__aeabi_ddiv+0x8e>
    c0c4:	e0b4      	b.n	c230 <__aeabi_ddiv+0x1f8>
    c0c6:	4b57      	ldr	r3, [pc, #348]	; (c224 <__aeabi_ddiv+0x1ec>)
    c0c8:	00b6      	lsls	r6, r6, #2
    c0ca:	599b      	ldr	r3, [r3, r6]
    c0cc:	469f      	mov	pc, r3
    c0ce:	0003      	movs	r3, r0
    c0d0:	4333      	orrs	r3, r6
    c0d2:	4699      	mov	r9, r3
    c0d4:	d16c      	bne.n	c1b0 <__aeabi_ddiv+0x178>
    c0d6:	2300      	movs	r3, #0
    c0d8:	4698      	mov	r8, r3
    c0da:	3302      	adds	r3, #2
    c0dc:	2608      	movs	r6, #8
    c0de:	9303      	str	r3, [sp, #12]
    c0e0:	e7ce      	b.n	c080 <__aeabi_ddiv+0x48>
    c0e2:	46cb      	mov	fp, r9
    c0e4:	4641      	mov	r1, r8
    c0e6:	9a03      	ldr	r2, [sp, #12]
    c0e8:	9701      	str	r7, [sp, #4]
    c0ea:	2a02      	cmp	r2, #2
    c0ec:	d165      	bne.n	c1ba <__aeabi_ddiv+0x182>
    c0ee:	9b01      	ldr	r3, [sp, #4]
    c0f0:	4c4a      	ldr	r4, [pc, #296]	; (c21c <__aeabi_ddiv+0x1e4>)
    c0f2:	469c      	mov	ip, r3
    c0f4:	2300      	movs	r3, #0
    c0f6:	2200      	movs	r2, #0
    c0f8:	4698      	mov	r8, r3
    c0fa:	e06b      	b.n	c1d4 <__aeabi_ddiv+0x19c>
    c0fc:	0003      	movs	r3, r0
    c0fe:	4333      	orrs	r3, r6
    c100:	4699      	mov	r9, r3
    c102:	d04e      	beq.n	c1a2 <__aeabi_ddiv+0x16a>
    c104:	2e00      	cmp	r6, #0
    c106:	d100      	bne.n	c10a <__aeabi_ddiv+0xd2>
    c108:	e1bc      	b.n	c484 <__aeabi_ddiv+0x44c>
    c10a:	0030      	movs	r0, r6
    c10c:	f7ff fc1c 	bl	b948 <__clzsi2>
    c110:	0003      	movs	r3, r0
    c112:	3b0b      	subs	r3, #11
    c114:	2b1c      	cmp	r3, #28
    c116:	dd00      	ble.n	c11a <__aeabi_ddiv+0xe2>
    c118:	e1ac      	b.n	c474 <__aeabi_ddiv+0x43c>
    c11a:	221d      	movs	r2, #29
    c11c:	1ad3      	subs	r3, r2, r3
    c11e:	465a      	mov	r2, fp
    c120:	0001      	movs	r1, r0
    c122:	40da      	lsrs	r2, r3
    c124:	3908      	subs	r1, #8
    c126:	408e      	lsls	r6, r1
    c128:	0013      	movs	r3, r2
    c12a:	4333      	orrs	r3, r6
    c12c:	4699      	mov	r9, r3
    c12e:	465b      	mov	r3, fp
    c130:	408b      	lsls	r3, r1
    c132:	4698      	mov	r8, r3
    c134:	2300      	movs	r3, #0
    c136:	4c3c      	ldr	r4, [pc, #240]	; (c228 <__aeabi_ddiv+0x1f0>)
    c138:	2600      	movs	r6, #0
    c13a:	1a24      	subs	r4, r4, r0
    c13c:	9303      	str	r3, [sp, #12]
    c13e:	e79f      	b.n	c080 <__aeabi_ddiv+0x48>
    c140:	4651      	mov	r1, sl
    c142:	465a      	mov	r2, fp
    c144:	4311      	orrs	r1, r2
    c146:	d129      	bne.n	c19c <__aeabi_ddiv+0x164>
    c148:	2200      	movs	r2, #0
    c14a:	4693      	mov	fp, r2
    c14c:	3202      	adds	r2, #2
    c14e:	e7b1      	b.n	c0b4 <__aeabi_ddiv+0x7c>
    c150:	4659      	mov	r1, fp
    c152:	4301      	orrs	r1, r0
    c154:	d01e      	beq.n	c194 <__aeabi_ddiv+0x15c>
    c156:	465b      	mov	r3, fp
    c158:	2b00      	cmp	r3, #0
    c15a:	d100      	bne.n	c15e <__aeabi_ddiv+0x126>
    c15c:	e19e      	b.n	c49c <__aeabi_ddiv+0x464>
    c15e:	4658      	mov	r0, fp
    c160:	f7ff fbf2 	bl	b948 <__clzsi2>
    c164:	0003      	movs	r3, r0
    c166:	3b0b      	subs	r3, #11
    c168:	2b1c      	cmp	r3, #28
    c16a:	dd00      	ble.n	c16e <__aeabi_ddiv+0x136>
    c16c:	e18f      	b.n	c48e <__aeabi_ddiv+0x456>
    c16e:	0002      	movs	r2, r0
    c170:	4659      	mov	r1, fp
    c172:	3a08      	subs	r2, #8
    c174:	4091      	lsls	r1, r2
    c176:	468b      	mov	fp, r1
    c178:	211d      	movs	r1, #29
    c17a:	1acb      	subs	r3, r1, r3
    c17c:	4651      	mov	r1, sl
    c17e:	40d9      	lsrs	r1, r3
    c180:	000b      	movs	r3, r1
    c182:	4659      	mov	r1, fp
    c184:	430b      	orrs	r3, r1
    c186:	4651      	mov	r1, sl
    c188:	469b      	mov	fp, r3
    c18a:	4091      	lsls	r1, r2
    c18c:	4b26      	ldr	r3, [pc, #152]	; (c228 <__aeabi_ddiv+0x1f0>)
    c18e:	2200      	movs	r2, #0
    c190:	1a1b      	subs	r3, r3, r0
    c192:	e78f      	b.n	c0b4 <__aeabi_ddiv+0x7c>
    c194:	2300      	movs	r3, #0
    c196:	2201      	movs	r2, #1
    c198:	469b      	mov	fp, r3
    c19a:	e78b      	b.n	c0b4 <__aeabi_ddiv+0x7c>
    c19c:	4651      	mov	r1, sl
    c19e:	2203      	movs	r2, #3
    c1a0:	e788      	b.n	c0b4 <__aeabi_ddiv+0x7c>
    c1a2:	2300      	movs	r3, #0
    c1a4:	4698      	mov	r8, r3
    c1a6:	3301      	adds	r3, #1
    c1a8:	2604      	movs	r6, #4
    c1aa:	2400      	movs	r4, #0
    c1ac:	9303      	str	r3, [sp, #12]
    c1ae:	e767      	b.n	c080 <__aeabi_ddiv+0x48>
    c1b0:	2303      	movs	r3, #3
    c1b2:	46b1      	mov	r9, r6
    c1b4:	9303      	str	r3, [sp, #12]
    c1b6:	260c      	movs	r6, #12
    c1b8:	e762      	b.n	c080 <__aeabi_ddiv+0x48>
    c1ba:	2a03      	cmp	r2, #3
    c1bc:	d100      	bne.n	c1c0 <__aeabi_ddiv+0x188>
    c1be:	e25c      	b.n	c67a <__aeabi_ddiv+0x642>
    c1c0:	9b01      	ldr	r3, [sp, #4]
    c1c2:	2a01      	cmp	r2, #1
    c1c4:	d000      	beq.n	c1c8 <__aeabi_ddiv+0x190>
    c1c6:	e1e4      	b.n	c592 <__aeabi_ddiv+0x55a>
    c1c8:	4013      	ands	r3, r2
    c1ca:	469c      	mov	ip, r3
    c1cc:	2300      	movs	r3, #0
    c1ce:	2400      	movs	r4, #0
    c1d0:	2200      	movs	r2, #0
    c1d2:	4698      	mov	r8, r3
    c1d4:	2100      	movs	r1, #0
    c1d6:	0312      	lsls	r2, r2, #12
    c1d8:	0b13      	lsrs	r3, r2, #12
    c1da:	0d0a      	lsrs	r2, r1, #20
    c1dc:	0512      	lsls	r2, r2, #20
    c1de:	431a      	orrs	r2, r3
    c1e0:	0523      	lsls	r3, r4, #20
    c1e2:	4c12      	ldr	r4, [pc, #72]	; (c22c <__aeabi_ddiv+0x1f4>)
    c1e4:	4640      	mov	r0, r8
    c1e6:	4022      	ands	r2, r4
    c1e8:	4313      	orrs	r3, r2
    c1ea:	4662      	mov	r2, ip
    c1ec:	005b      	lsls	r3, r3, #1
    c1ee:	07d2      	lsls	r2, r2, #31
    c1f0:	085b      	lsrs	r3, r3, #1
    c1f2:	4313      	orrs	r3, r2
    c1f4:	0019      	movs	r1, r3
    c1f6:	b007      	add	sp, #28
    c1f8:	bc3c      	pop	{r2, r3, r4, r5}
    c1fa:	4690      	mov	r8, r2
    c1fc:	4699      	mov	r9, r3
    c1fe:	46a2      	mov	sl, r4
    c200:	46ab      	mov	fp, r5
    c202:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c204:	2300      	movs	r3, #0
    c206:	2280      	movs	r2, #128	; 0x80
    c208:	469c      	mov	ip, r3
    c20a:	0312      	lsls	r2, r2, #12
    c20c:	4698      	mov	r8, r3
    c20e:	4c03      	ldr	r4, [pc, #12]	; (c21c <__aeabi_ddiv+0x1e4>)
    c210:	e7e0      	b.n	c1d4 <__aeabi_ddiv+0x19c>
    c212:	2300      	movs	r3, #0
    c214:	4c01      	ldr	r4, [pc, #4]	; (c21c <__aeabi_ddiv+0x1e4>)
    c216:	2200      	movs	r2, #0
    c218:	4698      	mov	r8, r3
    c21a:	e7db      	b.n	c1d4 <__aeabi_ddiv+0x19c>
    c21c:	000007ff 	.word	0x000007ff
    c220:	fffffc01 	.word	0xfffffc01
    c224:	00010658 	.word	0x00010658
    c228:	fffffc0d 	.word	0xfffffc0d
    c22c:	800fffff 	.word	0x800fffff
    c230:	45d9      	cmp	r9, fp
    c232:	d900      	bls.n	c236 <__aeabi_ddiv+0x1fe>
    c234:	e139      	b.n	c4aa <__aeabi_ddiv+0x472>
    c236:	d100      	bne.n	c23a <__aeabi_ddiv+0x202>
    c238:	e134      	b.n	c4a4 <__aeabi_ddiv+0x46c>
    c23a:	2300      	movs	r3, #0
    c23c:	4646      	mov	r6, r8
    c23e:	464d      	mov	r5, r9
    c240:	469a      	mov	sl, r3
    c242:	3c01      	subs	r4, #1
    c244:	465b      	mov	r3, fp
    c246:	0e0a      	lsrs	r2, r1, #24
    c248:	021b      	lsls	r3, r3, #8
    c24a:	431a      	orrs	r2, r3
    c24c:	020b      	lsls	r3, r1, #8
    c24e:	0c17      	lsrs	r7, r2, #16
    c250:	9303      	str	r3, [sp, #12]
    c252:	0413      	lsls	r3, r2, #16
    c254:	0c1b      	lsrs	r3, r3, #16
    c256:	0039      	movs	r1, r7
    c258:	0028      	movs	r0, r5
    c25a:	4690      	mov	r8, r2
    c25c:	9301      	str	r3, [sp, #4]
    c25e:	f7ff f9fd 	bl	b65c <__udivsi3>
    c262:	0002      	movs	r2, r0
    c264:	9b01      	ldr	r3, [sp, #4]
    c266:	4683      	mov	fp, r0
    c268:	435a      	muls	r2, r3
    c26a:	0028      	movs	r0, r5
    c26c:	0039      	movs	r1, r7
    c26e:	4691      	mov	r9, r2
    c270:	f7ff fa7a 	bl	b768 <__aeabi_uidivmod>
    c274:	0c35      	lsrs	r5, r6, #16
    c276:	0409      	lsls	r1, r1, #16
    c278:	430d      	orrs	r5, r1
    c27a:	45a9      	cmp	r9, r5
    c27c:	d90d      	bls.n	c29a <__aeabi_ddiv+0x262>
    c27e:	465b      	mov	r3, fp
    c280:	4445      	add	r5, r8
    c282:	3b01      	subs	r3, #1
    c284:	45a8      	cmp	r8, r5
    c286:	d900      	bls.n	c28a <__aeabi_ddiv+0x252>
    c288:	e13a      	b.n	c500 <__aeabi_ddiv+0x4c8>
    c28a:	45a9      	cmp	r9, r5
    c28c:	d800      	bhi.n	c290 <__aeabi_ddiv+0x258>
    c28e:	e137      	b.n	c500 <__aeabi_ddiv+0x4c8>
    c290:	2302      	movs	r3, #2
    c292:	425b      	negs	r3, r3
    c294:	469c      	mov	ip, r3
    c296:	4445      	add	r5, r8
    c298:	44e3      	add	fp, ip
    c29a:	464b      	mov	r3, r9
    c29c:	1aeb      	subs	r3, r5, r3
    c29e:	0039      	movs	r1, r7
    c2a0:	0018      	movs	r0, r3
    c2a2:	9304      	str	r3, [sp, #16]
    c2a4:	f7ff f9da 	bl	b65c <__udivsi3>
    c2a8:	9b01      	ldr	r3, [sp, #4]
    c2aa:	0005      	movs	r5, r0
    c2ac:	4343      	muls	r3, r0
    c2ae:	0039      	movs	r1, r7
    c2b0:	9804      	ldr	r0, [sp, #16]
    c2b2:	4699      	mov	r9, r3
    c2b4:	f7ff fa58 	bl	b768 <__aeabi_uidivmod>
    c2b8:	0433      	lsls	r3, r6, #16
    c2ba:	0409      	lsls	r1, r1, #16
    c2bc:	0c1b      	lsrs	r3, r3, #16
    c2be:	430b      	orrs	r3, r1
    c2c0:	4599      	cmp	r9, r3
    c2c2:	d909      	bls.n	c2d8 <__aeabi_ddiv+0x2a0>
    c2c4:	4443      	add	r3, r8
    c2c6:	1e6a      	subs	r2, r5, #1
    c2c8:	4598      	cmp	r8, r3
    c2ca:	d900      	bls.n	c2ce <__aeabi_ddiv+0x296>
    c2cc:	e11a      	b.n	c504 <__aeabi_ddiv+0x4cc>
    c2ce:	4599      	cmp	r9, r3
    c2d0:	d800      	bhi.n	c2d4 <__aeabi_ddiv+0x29c>
    c2d2:	e117      	b.n	c504 <__aeabi_ddiv+0x4cc>
    c2d4:	3d02      	subs	r5, #2
    c2d6:	4443      	add	r3, r8
    c2d8:	464a      	mov	r2, r9
    c2da:	1a9b      	subs	r3, r3, r2
    c2dc:	465a      	mov	r2, fp
    c2de:	0412      	lsls	r2, r2, #16
    c2e0:	432a      	orrs	r2, r5
    c2e2:	9903      	ldr	r1, [sp, #12]
    c2e4:	4693      	mov	fp, r2
    c2e6:	0c10      	lsrs	r0, r2, #16
    c2e8:	0c0a      	lsrs	r2, r1, #16
    c2ea:	4691      	mov	r9, r2
    c2ec:	0409      	lsls	r1, r1, #16
    c2ee:	465a      	mov	r2, fp
    c2f0:	0c09      	lsrs	r1, r1, #16
    c2f2:	464e      	mov	r6, r9
    c2f4:	000d      	movs	r5, r1
    c2f6:	0412      	lsls	r2, r2, #16
    c2f8:	0c12      	lsrs	r2, r2, #16
    c2fa:	4345      	muls	r5, r0
    c2fc:	9105      	str	r1, [sp, #20]
    c2fe:	4351      	muls	r1, r2
    c300:	4372      	muls	r2, r6
    c302:	4370      	muls	r0, r6
    c304:	1952      	adds	r2, r2, r5
    c306:	0c0e      	lsrs	r6, r1, #16
    c308:	18b2      	adds	r2, r6, r2
    c30a:	4295      	cmp	r5, r2
    c30c:	d903      	bls.n	c316 <__aeabi_ddiv+0x2de>
    c30e:	2580      	movs	r5, #128	; 0x80
    c310:	026d      	lsls	r5, r5, #9
    c312:	46ac      	mov	ip, r5
    c314:	4460      	add	r0, ip
    c316:	0c15      	lsrs	r5, r2, #16
    c318:	0409      	lsls	r1, r1, #16
    c31a:	0412      	lsls	r2, r2, #16
    c31c:	0c09      	lsrs	r1, r1, #16
    c31e:	1828      	adds	r0, r5, r0
    c320:	1852      	adds	r2, r2, r1
    c322:	4283      	cmp	r3, r0
    c324:	d200      	bcs.n	c328 <__aeabi_ddiv+0x2f0>
    c326:	e0ce      	b.n	c4c6 <__aeabi_ddiv+0x48e>
    c328:	d100      	bne.n	c32c <__aeabi_ddiv+0x2f4>
    c32a:	e0c8      	b.n	c4be <__aeabi_ddiv+0x486>
    c32c:	1a1d      	subs	r5, r3, r0
    c32e:	4653      	mov	r3, sl
    c330:	1a9e      	subs	r6, r3, r2
    c332:	45b2      	cmp	sl, r6
    c334:	4192      	sbcs	r2, r2
    c336:	4252      	negs	r2, r2
    c338:	1aab      	subs	r3, r5, r2
    c33a:	469a      	mov	sl, r3
    c33c:	4598      	cmp	r8, r3
    c33e:	d100      	bne.n	c342 <__aeabi_ddiv+0x30a>
    c340:	e117      	b.n	c572 <__aeabi_ddiv+0x53a>
    c342:	0039      	movs	r1, r7
    c344:	0018      	movs	r0, r3
    c346:	f7ff f989 	bl	b65c <__udivsi3>
    c34a:	9b01      	ldr	r3, [sp, #4]
    c34c:	0005      	movs	r5, r0
    c34e:	4343      	muls	r3, r0
    c350:	0039      	movs	r1, r7
    c352:	4650      	mov	r0, sl
    c354:	9304      	str	r3, [sp, #16]
    c356:	f7ff fa07 	bl	b768 <__aeabi_uidivmod>
    c35a:	9804      	ldr	r0, [sp, #16]
    c35c:	040b      	lsls	r3, r1, #16
    c35e:	0c31      	lsrs	r1, r6, #16
    c360:	4319      	orrs	r1, r3
    c362:	4288      	cmp	r0, r1
    c364:	d909      	bls.n	c37a <__aeabi_ddiv+0x342>
    c366:	4441      	add	r1, r8
    c368:	1e6b      	subs	r3, r5, #1
    c36a:	4588      	cmp	r8, r1
    c36c:	d900      	bls.n	c370 <__aeabi_ddiv+0x338>
    c36e:	e107      	b.n	c580 <__aeabi_ddiv+0x548>
    c370:	4288      	cmp	r0, r1
    c372:	d800      	bhi.n	c376 <__aeabi_ddiv+0x33e>
    c374:	e104      	b.n	c580 <__aeabi_ddiv+0x548>
    c376:	3d02      	subs	r5, #2
    c378:	4441      	add	r1, r8
    c37a:	9b04      	ldr	r3, [sp, #16]
    c37c:	1acb      	subs	r3, r1, r3
    c37e:	0018      	movs	r0, r3
    c380:	0039      	movs	r1, r7
    c382:	9304      	str	r3, [sp, #16]
    c384:	f7ff f96a 	bl	b65c <__udivsi3>
    c388:	9b01      	ldr	r3, [sp, #4]
    c38a:	4682      	mov	sl, r0
    c38c:	4343      	muls	r3, r0
    c38e:	0039      	movs	r1, r7
    c390:	9804      	ldr	r0, [sp, #16]
    c392:	9301      	str	r3, [sp, #4]
    c394:	f7ff f9e8 	bl	b768 <__aeabi_uidivmod>
    c398:	9801      	ldr	r0, [sp, #4]
    c39a:	040b      	lsls	r3, r1, #16
    c39c:	0431      	lsls	r1, r6, #16
    c39e:	0c09      	lsrs	r1, r1, #16
    c3a0:	4319      	orrs	r1, r3
    c3a2:	4288      	cmp	r0, r1
    c3a4:	d90d      	bls.n	c3c2 <__aeabi_ddiv+0x38a>
    c3a6:	4653      	mov	r3, sl
    c3a8:	4441      	add	r1, r8
    c3aa:	3b01      	subs	r3, #1
    c3ac:	4588      	cmp	r8, r1
    c3ae:	d900      	bls.n	c3b2 <__aeabi_ddiv+0x37a>
    c3b0:	e0e8      	b.n	c584 <__aeabi_ddiv+0x54c>
    c3b2:	4288      	cmp	r0, r1
    c3b4:	d800      	bhi.n	c3b8 <__aeabi_ddiv+0x380>
    c3b6:	e0e5      	b.n	c584 <__aeabi_ddiv+0x54c>
    c3b8:	2302      	movs	r3, #2
    c3ba:	425b      	negs	r3, r3
    c3bc:	469c      	mov	ip, r3
    c3be:	4441      	add	r1, r8
    c3c0:	44e2      	add	sl, ip
    c3c2:	9b01      	ldr	r3, [sp, #4]
    c3c4:	042d      	lsls	r5, r5, #16
    c3c6:	1ace      	subs	r6, r1, r3
    c3c8:	4651      	mov	r1, sl
    c3ca:	4329      	orrs	r1, r5
    c3cc:	9d05      	ldr	r5, [sp, #20]
    c3ce:	464f      	mov	r7, r9
    c3d0:	002a      	movs	r2, r5
    c3d2:	040b      	lsls	r3, r1, #16
    c3d4:	0c08      	lsrs	r0, r1, #16
    c3d6:	0c1b      	lsrs	r3, r3, #16
    c3d8:	435a      	muls	r2, r3
    c3da:	4345      	muls	r5, r0
    c3dc:	437b      	muls	r3, r7
    c3de:	4378      	muls	r0, r7
    c3e0:	195b      	adds	r3, r3, r5
    c3e2:	0c17      	lsrs	r7, r2, #16
    c3e4:	18fb      	adds	r3, r7, r3
    c3e6:	429d      	cmp	r5, r3
    c3e8:	d903      	bls.n	c3f2 <__aeabi_ddiv+0x3ba>
    c3ea:	2580      	movs	r5, #128	; 0x80
    c3ec:	026d      	lsls	r5, r5, #9
    c3ee:	46ac      	mov	ip, r5
    c3f0:	4460      	add	r0, ip
    c3f2:	0c1d      	lsrs	r5, r3, #16
    c3f4:	0412      	lsls	r2, r2, #16
    c3f6:	041b      	lsls	r3, r3, #16
    c3f8:	0c12      	lsrs	r2, r2, #16
    c3fa:	1828      	adds	r0, r5, r0
    c3fc:	189b      	adds	r3, r3, r2
    c3fe:	4286      	cmp	r6, r0
    c400:	d200      	bcs.n	c404 <__aeabi_ddiv+0x3cc>
    c402:	e093      	b.n	c52c <__aeabi_ddiv+0x4f4>
    c404:	d100      	bne.n	c408 <__aeabi_ddiv+0x3d0>
    c406:	e08e      	b.n	c526 <__aeabi_ddiv+0x4ee>
    c408:	2301      	movs	r3, #1
    c40a:	4319      	orrs	r1, r3
    c40c:	4ba0      	ldr	r3, [pc, #640]	; (c690 <__aeabi_ddiv+0x658>)
    c40e:	18e3      	adds	r3, r4, r3
    c410:	2b00      	cmp	r3, #0
    c412:	dc00      	bgt.n	c416 <__aeabi_ddiv+0x3de>
    c414:	e099      	b.n	c54a <__aeabi_ddiv+0x512>
    c416:	074a      	lsls	r2, r1, #29
    c418:	d000      	beq.n	c41c <__aeabi_ddiv+0x3e4>
    c41a:	e09e      	b.n	c55a <__aeabi_ddiv+0x522>
    c41c:	465a      	mov	r2, fp
    c41e:	01d2      	lsls	r2, r2, #7
    c420:	d506      	bpl.n	c430 <__aeabi_ddiv+0x3f8>
    c422:	465a      	mov	r2, fp
    c424:	4b9b      	ldr	r3, [pc, #620]	; (c694 <__aeabi_ddiv+0x65c>)
    c426:	401a      	ands	r2, r3
    c428:	2380      	movs	r3, #128	; 0x80
    c42a:	4693      	mov	fp, r2
    c42c:	00db      	lsls	r3, r3, #3
    c42e:	18e3      	adds	r3, r4, r3
    c430:	4a99      	ldr	r2, [pc, #612]	; (c698 <__aeabi_ddiv+0x660>)
    c432:	4293      	cmp	r3, r2
    c434:	dd68      	ble.n	c508 <__aeabi_ddiv+0x4d0>
    c436:	2301      	movs	r3, #1
    c438:	9a02      	ldr	r2, [sp, #8]
    c43a:	4c98      	ldr	r4, [pc, #608]	; (c69c <__aeabi_ddiv+0x664>)
    c43c:	401a      	ands	r2, r3
    c43e:	2300      	movs	r3, #0
    c440:	4694      	mov	ip, r2
    c442:	4698      	mov	r8, r3
    c444:	2200      	movs	r2, #0
    c446:	e6c5      	b.n	c1d4 <__aeabi_ddiv+0x19c>
    c448:	2280      	movs	r2, #128	; 0x80
    c44a:	464b      	mov	r3, r9
    c44c:	0312      	lsls	r2, r2, #12
    c44e:	4213      	tst	r3, r2
    c450:	d00a      	beq.n	c468 <__aeabi_ddiv+0x430>
    c452:	465b      	mov	r3, fp
    c454:	4213      	tst	r3, r2
    c456:	d106      	bne.n	c466 <__aeabi_ddiv+0x42e>
    c458:	431a      	orrs	r2, r3
    c45a:	0312      	lsls	r2, r2, #12
    c45c:	0b12      	lsrs	r2, r2, #12
    c45e:	46ac      	mov	ip, r5
    c460:	4688      	mov	r8, r1
    c462:	4c8e      	ldr	r4, [pc, #568]	; (c69c <__aeabi_ddiv+0x664>)
    c464:	e6b6      	b.n	c1d4 <__aeabi_ddiv+0x19c>
    c466:	464b      	mov	r3, r9
    c468:	431a      	orrs	r2, r3
    c46a:	0312      	lsls	r2, r2, #12
    c46c:	0b12      	lsrs	r2, r2, #12
    c46e:	46bc      	mov	ip, r7
    c470:	4c8a      	ldr	r4, [pc, #552]	; (c69c <__aeabi_ddiv+0x664>)
    c472:	e6af      	b.n	c1d4 <__aeabi_ddiv+0x19c>
    c474:	0003      	movs	r3, r0
    c476:	465a      	mov	r2, fp
    c478:	3b28      	subs	r3, #40	; 0x28
    c47a:	409a      	lsls	r2, r3
    c47c:	2300      	movs	r3, #0
    c47e:	4691      	mov	r9, r2
    c480:	4698      	mov	r8, r3
    c482:	e657      	b.n	c134 <__aeabi_ddiv+0xfc>
    c484:	4658      	mov	r0, fp
    c486:	f7ff fa5f 	bl	b948 <__clzsi2>
    c48a:	3020      	adds	r0, #32
    c48c:	e640      	b.n	c110 <__aeabi_ddiv+0xd8>
    c48e:	0003      	movs	r3, r0
    c490:	4652      	mov	r2, sl
    c492:	3b28      	subs	r3, #40	; 0x28
    c494:	409a      	lsls	r2, r3
    c496:	2100      	movs	r1, #0
    c498:	4693      	mov	fp, r2
    c49a:	e677      	b.n	c18c <__aeabi_ddiv+0x154>
    c49c:	f7ff fa54 	bl	b948 <__clzsi2>
    c4a0:	3020      	adds	r0, #32
    c4a2:	e65f      	b.n	c164 <__aeabi_ddiv+0x12c>
    c4a4:	4588      	cmp	r8, r1
    c4a6:	d200      	bcs.n	c4aa <__aeabi_ddiv+0x472>
    c4a8:	e6c7      	b.n	c23a <__aeabi_ddiv+0x202>
    c4aa:	464b      	mov	r3, r9
    c4ac:	07de      	lsls	r6, r3, #31
    c4ae:	085d      	lsrs	r5, r3, #1
    c4b0:	4643      	mov	r3, r8
    c4b2:	085b      	lsrs	r3, r3, #1
    c4b4:	431e      	orrs	r6, r3
    c4b6:	4643      	mov	r3, r8
    c4b8:	07db      	lsls	r3, r3, #31
    c4ba:	469a      	mov	sl, r3
    c4bc:	e6c2      	b.n	c244 <__aeabi_ddiv+0x20c>
    c4be:	2500      	movs	r5, #0
    c4c0:	4592      	cmp	sl, r2
    c4c2:	d300      	bcc.n	c4c6 <__aeabi_ddiv+0x48e>
    c4c4:	e733      	b.n	c32e <__aeabi_ddiv+0x2f6>
    c4c6:	9e03      	ldr	r6, [sp, #12]
    c4c8:	4659      	mov	r1, fp
    c4ca:	46b4      	mov	ip, r6
    c4cc:	44e2      	add	sl, ip
    c4ce:	45b2      	cmp	sl, r6
    c4d0:	41ad      	sbcs	r5, r5
    c4d2:	426d      	negs	r5, r5
    c4d4:	4445      	add	r5, r8
    c4d6:	18eb      	adds	r3, r5, r3
    c4d8:	3901      	subs	r1, #1
    c4da:	4598      	cmp	r8, r3
    c4dc:	d207      	bcs.n	c4ee <__aeabi_ddiv+0x4b6>
    c4de:	4298      	cmp	r0, r3
    c4e0:	d900      	bls.n	c4e4 <__aeabi_ddiv+0x4ac>
    c4e2:	e07f      	b.n	c5e4 <__aeabi_ddiv+0x5ac>
    c4e4:	d100      	bne.n	c4e8 <__aeabi_ddiv+0x4b0>
    c4e6:	e0bc      	b.n	c662 <__aeabi_ddiv+0x62a>
    c4e8:	1a1d      	subs	r5, r3, r0
    c4ea:	468b      	mov	fp, r1
    c4ec:	e71f      	b.n	c32e <__aeabi_ddiv+0x2f6>
    c4ee:	4598      	cmp	r8, r3
    c4f0:	d1fa      	bne.n	c4e8 <__aeabi_ddiv+0x4b0>
    c4f2:	9d03      	ldr	r5, [sp, #12]
    c4f4:	4555      	cmp	r5, sl
    c4f6:	d9f2      	bls.n	c4de <__aeabi_ddiv+0x4a6>
    c4f8:	4643      	mov	r3, r8
    c4fa:	468b      	mov	fp, r1
    c4fc:	1a1d      	subs	r5, r3, r0
    c4fe:	e716      	b.n	c32e <__aeabi_ddiv+0x2f6>
    c500:	469b      	mov	fp, r3
    c502:	e6ca      	b.n	c29a <__aeabi_ddiv+0x262>
    c504:	0015      	movs	r5, r2
    c506:	e6e7      	b.n	c2d8 <__aeabi_ddiv+0x2a0>
    c508:	465a      	mov	r2, fp
    c50a:	08c9      	lsrs	r1, r1, #3
    c50c:	0752      	lsls	r2, r2, #29
    c50e:	430a      	orrs	r2, r1
    c510:	055b      	lsls	r3, r3, #21
    c512:	4690      	mov	r8, r2
    c514:	0d5c      	lsrs	r4, r3, #21
    c516:	465a      	mov	r2, fp
    c518:	2301      	movs	r3, #1
    c51a:	9902      	ldr	r1, [sp, #8]
    c51c:	0252      	lsls	r2, r2, #9
    c51e:	4019      	ands	r1, r3
    c520:	0b12      	lsrs	r2, r2, #12
    c522:	468c      	mov	ip, r1
    c524:	e656      	b.n	c1d4 <__aeabi_ddiv+0x19c>
    c526:	2b00      	cmp	r3, #0
    c528:	d100      	bne.n	c52c <__aeabi_ddiv+0x4f4>
    c52a:	e76f      	b.n	c40c <__aeabi_ddiv+0x3d4>
    c52c:	4446      	add	r6, r8
    c52e:	1e4a      	subs	r2, r1, #1
    c530:	45b0      	cmp	r8, r6
    c532:	d929      	bls.n	c588 <__aeabi_ddiv+0x550>
    c534:	0011      	movs	r1, r2
    c536:	4286      	cmp	r6, r0
    c538:	d000      	beq.n	c53c <__aeabi_ddiv+0x504>
    c53a:	e765      	b.n	c408 <__aeabi_ddiv+0x3d0>
    c53c:	9a03      	ldr	r2, [sp, #12]
    c53e:	4293      	cmp	r3, r2
    c540:	d000      	beq.n	c544 <__aeabi_ddiv+0x50c>
    c542:	e761      	b.n	c408 <__aeabi_ddiv+0x3d0>
    c544:	e762      	b.n	c40c <__aeabi_ddiv+0x3d4>
    c546:	2101      	movs	r1, #1
    c548:	4249      	negs	r1, r1
    c54a:	2001      	movs	r0, #1
    c54c:	1ac2      	subs	r2, r0, r3
    c54e:	2a38      	cmp	r2, #56	; 0x38
    c550:	dd21      	ble.n	c596 <__aeabi_ddiv+0x55e>
    c552:	9b02      	ldr	r3, [sp, #8]
    c554:	4003      	ands	r3, r0
    c556:	469c      	mov	ip, r3
    c558:	e638      	b.n	c1cc <__aeabi_ddiv+0x194>
    c55a:	220f      	movs	r2, #15
    c55c:	400a      	ands	r2, r1
    c55e:	2a04      	cmp	r2, #4
    c560:	d100      	bne.n	c564 <__aeabi_ddiv+0x52c>
    c562:	e75b      	b.n	c41c <__aeabi_ddiv+0x3e4>
    c564:	000a      	movs	r2, r1
    c566:	1d11      	adds	r1, r2, #4
    c568:	4291      	cmp	r1, r2
    c56a:	4192      	sbcs	r2, r2
    c56c:	4252      	negs	r2, r2
    c56e:	4493      	add	fp, r2
    c570:	e754      	b.n	c41c <__aeabi_ddiv+0x3e4>
    c572:	4b47      	ldr	r3, [pc, #284]	; (c690 <__aeabi_ddiv+0x658>)
    c574:	18e3      	adds	r3, r4, r3
    c576:	2b00      	cmp	r3, #0
    c578:	dde5      	ble.n	c546 <__aeabi_ddiv+0x50e>
    c57a:	2201      	movs	r2, #1
    c57c:	4252      	negs	r2, r2
    c57e:	e7f2      	b.n	c566 <__aeabi_ddiv+0x52e>
    c580:	001d      	movs	r5, r3
    c582:	e6fa      	b.n	c37a <__aeabi_ddiv+0x342>
    c584:	469a      	mov	sl, r3
    c586:	e71c      	b.n	c3c2 <__aeabi_ddiv+0x38a>
    c588:	42b0      	cmp	r0, r6
    c58a:	d839      	bhi.n	c600 <__aeabi_ddiv+0x5c8>
    c58c:	d06e      	beq.n	c66c <__aeabi_ddiv+0x634>
    c58e:	0011      	movs	r1, r2
    c590:	e73a      	b.n	c408 <__aeabi_ddiv+0x3d0>
    c592:	9302      	str	r3, [sp, #8]
    c594:	e73a      	b.n	c40c <__aeabi_ddiv+0x3d4>
    c596:	2a1f      	cmp	r2, #31
    c598:	dc3c      	bgt.n	c614 <__aeabi_ddiv+0x5dc>
    c59a:	2320      	movs	r3, #32
    c59c:	1a9b      	subs	r3, r3, r2
    c59e:	000c      	movs	r4, r1
    c5a0:	4658      	mov	r0, fp
    c5a2:	4099      	lsls	r1, r3
    c5a4:	4098      	lsls	r0, r3
    c5a6:	1e4b      	subs	r3, r1, #1
    c5a8:	4199      	sbcs	r1, r3
    c5aa:	465b      	mov	r3, fp
    c5ac:	40d4      	lsrs	r4, r2
    c5ae:	40d3      	lsrs	r3, r2
    c5b0:	4320      	orrs	r0, r4
    c5b2:	4308      	orrs	r0, r1
    c5b4:	001a      	movs	r2, r3
    c5b6:	0743      	lsls	r3, r0, #29
    c5b8:	d009      	beq.n	c5ce <__aeabi_ddiv+0x596>
    c5ba:	230f      	movs	r3, #15
    c5bc:	4003      	ands	r3, r0
    c5be:	2b04      	cmp	r3, #4
    c5c0:	d005      	beq.n	c5ce <__aeabi_ddiv+0x596>
    c5c2:	0001      	movs	r1, r0
    c5c4:	1d08      	adds	r0, r1, #4
    c5c6:	4288      	cmp	r0, r1
    c5c8:	419b      	sbcs	r3, r3
    c5ca:	425b      	negs	r3, r3
    c5cc:	18d2      	adds	r2, r2, r3
    c5ce:	0213      	lsls	r3, r2, #8
    c5d0:	d53a      	bpl.n	c648 <__aeabi_ddiv+0x610>
    c5d2:	2301      	movs	r3, #1
    c5d4:	9a02      	ldr	r2, [sp, #8]
    c5d6:	2401      	movs	r4, #1
    c5d8:	401a      	ands	r2, r3
    c5da:	2300      	movs	r3, #0
    c5dc:	4694      	mov	ip, r2
    c5de:	4698      	mov	r8, r3
    c5e0:	2200      	movs	r2, #0
    c5e2:	e5f7      	b.n	c1d4 <__aeabi_ddiv+0x19c>
    c5e4:	2102      	movs	r1, #2
    c5e6:	4249      	negs	r1, r1
    c5e8:	468c      	mov	ip, r1
    c5ea:	9d03      	ldr	r5, [sp, #12]
    c5ec:	44e3      	add	fp, ip
    c5ee:	46ac      	mov	ip, r5
    c5f0:	44e2      	add	sl, ip
    c5f2:	45aa      	cmp	sl, r5
    c5f4:	41ad      	sbcs	r5, r5
    c5f6:	426d      	negs	r5, r5
    c5f8:	4445      	add	r5, r8
    c5fa:	18ed      	adds	r5, r5, r3
    c5fc:	1a2d      	subs	r5, r5, r0
    c5fe:	e696      	b.n	c32e <__aeabi_ddiv+0x2f6>
    c600:	1e8a      	subs	r2, r1, #2
    c602:	9903      	ldr	r1, [sp, #12]
    c604:	004d      	lsls	r5, r1, #1
    c606:	428d      	cmp	r5, r1
    c608:	4189      	sbcs	r1, r1
    c60a:	4249      	negs	r1, r1
    c60c:	4441      	add	r1, r8
    c60e:	1876      	adds	r6, r6, r1
    c610:	9503      	str	r5, [sp, #12]
    c612:	e78f      	b.n	c534 <__aeabi_ddiv+0x4fc>
    c614:	201f      	movs	r0, #31
    c616:	4240      	negs	r0, r0
    c618:	1ac3      	subs	r3, r0, r3
    c61a:	4658      	mov	r0, fp
    c61c:	40d8      	lsrs	r0, r3
    c61e:	0003      	movs	r3, r0
    c620:	2a20      	cmp	r2, #32
    c622:	d028      	beq.n	c676 <__aeabi_ddiv+0x63e>
    c624:	2040      	movs	r0, #64	; 0x40
    c626:	465d      	mov	r5, fp
    c628:	1a82      	subs	r2, r0, r2
    c62a:	4095      	lsls	r5, r2
    c62c:	4329      	orrs	r1, r5
    c62e:	1e4a      	subs	r2, r1, #1
    c630:	4191      	sbcs	r1, r2
    c632:	4319      	orrs	r1, r3
    c634:	2307      	movs	r3, #7
    c636:	2200      	movs	r2, #0
    c638:	400b      	ands	r3, r1
    c63a:	d009      	beq.n	c650 <__aeabi_ddiv+0x618>
    c63c:	230f      	movs	r3, #15
    c63e:	2200      	movs	r2, #0
    c640:	400b      	ands	r3, r1
    c642:	0008      	movs	r0, r1
    c644:	2b04      	cmp	r3, #4
    c646:	d1bd      	bne.n	c5c4 <__aeabi_ddiv+0x58c>
    c648:	0001      	movs	r1, r0
    c64a:	0753      	lsls	r3, r2, #29
    c64c:	0252      	lsls	r2, r2, #9
    c64e:	0b12      	lsrs	r2, r2, #12
    c650:	08c9      	lsrs	r1, r1, #3
    c652:	4319      	orrs	r1, r3
    c654:	2301      	movs	r3, #1
    c656:	4688      	mov	r8, r1
    c658:	9902      	ldr	r1, [sp, #8]
    c65a:	2400      	movs	r4, #0
    c65c:	4019      	ands	r1, r3
    c65e:	468c      	mov	ip, r1
    c660:	e5b8      	b.n	c1d4 <__aeabi_ddiv+0x19c>
    c662:	4552      	cmp	r2, sl
    c664:	d8be      	bhi.n	c5e4 <__aeabi_ddiv+0x5ac>
    c666:	468b      	mov	fp, r1
    c668:	2500      	movs	r5, #0
    c66a:	e660      	b.n	c32e <__aeabi_ddiv+0x2f6>
    c66c:	9d03      	ldr	r5, [sp, #12]
    c66e:	429d      	cmp	r5, r3
    c670:	d3c6      	bcc.n	c600 <__aeabi_ddiv+0x5c8>
    c672:	0011      	movs	r1, r2
    c674:	e762      	b.n	c53c <__aeabi_ddiv+0x504>
    c676:	2500      	movs	r5, #0
    c678:	e7d8      	b.n	c62c <__aeabi_ddiv+0x5f4>
    c67a:	2280      	movs	r2, #128	; 0x80
    c67c:	465b      	mov	r3, fp
    c67e:	0312      	lsls	r2, r2, #12
    c680:	431a      	orrs	r2, r3
    c682:	9b01      	ldr	r3, [sp, #4]
    c684:	0312      	lsls	r2, r2, #12
    c686:	0b12      	lsrs	r2, r2, #12
    c688:	469c      	mov	ip, r3
    c68a:	4688      	mov	r8, r1
    c68c:	4c03      	ldr	r4, [pc, #12]	; (c69c <__aeabi_ddiv+0x664>)
    c68e:	e5a1      	b.n	c1d4 <__aeabi_ddiv+0x19c>
    c690:	000003ff 	.word	0x000003ff
    c694:	feffffff 	.word	0xfeffffff
    c698:	000007fe 	.word	0x000007fe
    c69c:	000007ff 	.word	0x000007ff

0000c6a0 <__aeabi_dmul>:
    c6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6a2:	4657      	mov	r7, sl
    c6a4:	4645      	mov	r5, r8
    c6a6:	46de      	mov	lr, fp
    c6a8:	464e      	mov	r6, r9
    c6aa:	b5e0      	push	{r5, r6, r7, lr}
    c6ac:	030c      	lsls	r4, r1, #12
    c6ae:	4698      	mov	r8, r3
    c6b0:	004e      	lsls	r6, r1, #1
    c6b2:	0b23      	lsrs	r3, r4, #12
    c6b4:	b087      	sub	sp, #28
    c6b6:	0007      	movs	r7, r0
    c6b8:	4692      	mov	sl, r2
    c6ba:	469b      	mov	fp, r3
    c6bc:	0d76      	lsrs	r6, r6, #21
    c6be:	0fcd      	lsrs	r5, r1, #31
    c6c0:	2e00      	cmp	r6, #0
    c6c2:	d06b      	beq.n	c79c <__aeabi_dmul+0xfc>
    c6c4:	4b6d      	ldr	r3, [pc, #436]	; (c87c <__aeabi_dmul+0x1dc>)
    c6c6:	429e      	cmp	r6, r3
    c6c8:	d035      	beq.n	c736 <__aeabi_dmul+0x96>
    c6ca:	2480      	movs	r4, #128	; 0x80
    c6cc:	465b      	mov	r3, fp
    c6ce:	0f42      	lsrs	r2, r0, #29
    c6d0:	0424      	lsls	r4, r4, #16
    c6d2:	00db      	lsls	r3, r3, #3
    c6d4:	4314      	orrs	r4, r2
    c6d6:	431c      	orrs	r4, r3
    c6d8:	00c3      	lsls	r3, r0, #3
    c6da:	4699      	mov	r9, r3
    c6dc:	4b68      	ldr	r3, [pc, #416]	; (c880 <__aeabi_dmul+0x1e0>)
    c6de:	46a3      	mov	fp, r4
    c6e0:	469c      	mov	ip, r3
    c6e2:	2300      	movs	r3, #0
    c6e4:	2700      	movs	r7, #0
    c6e6:	4466      	add	r6, ip
    c6e8:	9302      	str	r3, [sp, #8]
    c6ea:	4643      	mov	r3, r8
    c6ec:	031c      	lsls	r4, r3, #12
    c6ee:	005a      	lsls	r2, r3, #1
    c6f0:	0fdb      	lsrs	r3, r3, #31
    c6f2:	4650      	mov	r0, sl
    c6f4:	0b24      	lsrs	r4, r4, #12
    c6f6:	0d52      	lsrs	r2, r2, #21
    c6f8:	4698      	mov	r8, r3
    c6fa:	d100      	bne.n	c6fe <__aeabi_dmul+0x5e>
    c6fc:	e076      	b.n	c7ec <__aeabi_dmul+0x14c>
    c6fe:	4b5f      	ldr	r3, [pc, #380]	; (c87c <__aeabi_dmul+0x1dc>)
    c700:	429a      	cmp	r2, r3
    c702:	d06d      	beq.n	c7e0 <__aeabi_dmul+0x140>
    c704:	2380      	movs	r3, #128	; 0x80
    c706:	0f41      	lsrs	r1, r0, #29
    c708:	041b      	lsls	r3, r3, #16
    c70a:	430b      	orrs	r3, r1
    c70c:	495c      	ldr	r1, [pc, #368]	; (c880 <__aeabi_dmul+0x1e0>)
    c70e:	00e4      	lsls	r4, r4, #3
    c710:	468c      	mov	ip, r1
    c712:	431c      	orrs	r4, r3
    c714:	00c3      	lsls	r3, r0, #3
    c716:	2000      	movs	r0, #0
    c718:	4462      	add	r2, ip
    c71a:	4641      	mov	r1, r8
    c71c:	18b6      	adds	r6, r6, r2
    c71e:	4069      	eors	r1, r5
    c720:	1c72      	adds	r2, r6, #1
    c722:	9101      	str	r1, [sp, #4]
    c724:	4694      	mov	ip, r2
    c726:	4307      	orrs	r7, r0
    c728:	2f0f      	cmp	r7, #15
    c72a:	d900      	bls.n	c72e <__aeabi_dmul+0x8e>
    c72c:	e0b0      	b.n	c890 <__aeabi_dmul+0x1f0>
    c72e:	4a55      	ldr	r2, [pc, #340]	; (c884 <__aeabi_dmul+0x1e4>)
    c730:	00bf      	lsls	r7, r7, #2
    c732:	59d2      	ldr	r2, [r2, r7]
    c734:	4697      	mov	pc, r2
    c736:	465b      	mov	r3, fp
    c738:	4303      	orrs	r3, r0
    c73a:	4699      	mov	r9, r3
    c73c:	d000      	beq.n	c740 <__aeabi_dmul+0xa0>
    c73e:	e087      	b.n	c850 <__aeabi_dmul+0x1b0>
    c740:	2300      	movs	r3, #0
    c742:	469b      	mov	fp, r3
    c744:	3302      	adds	r3, #2
    c746:	2708      	movs	r7, #8
    c748:	9302      	str	r3, [sp, #8]
    c74a:	e7ce      	b.n	c6ea <__aeabi_dmul+0x4a>
    c74c:	4642      	mov	r2, r8
    c74e:	9201      	str	r2, [sp, #4]
    c750:	2802      	cmp	r0, #2
    c752:	d067      	beq.n	c824 <__aeabi_dmul+0x184>
    c754:	2803      	cmp	r0, #3
    c756:	d100      	bne.n	c75a <__aeabi_dmul+0xba>
    c758:	e20e      	b.n	cb78 <__aeabi_dmul+0x4d8>
    c75a:	2801      	cmp	r0, #1
    c75c:	d000      	beq.n	c760 <__aeabi_dmul+0xc0>
    c75e:	e162      	b.n	ca26 <__aeabi_dmul+0x386>
    c760:	2300      	movs	r3, #0
    c762:	2400      	movs	r4, #0
    c764:	2200      	movs	r2, #0
    c766:	4699      	mov	r9, r3
    c768:	9901      	ldr	r1, [sp, #4]
    c76a:	4001      	ands	r1, r0
    c76c:	b2cd      	uxtb	r5, r1
    c76e:	2100      	movs	r1, #0
    c770:	0312      	lsls	r2, r2, #12
    c772:	0d0b      	lsrs	r3, r1, #20
    c774:	0b12      	lsrs	r2, r2, #12
    c776:	051b      	lsls	r3, r3, #20
    c778:	4313      	orrs	r3, r2
    c77a:	4a43      	ldr	r2, [pc, #268]	; (c888 <__aeabi_dmul+0x1e8>)
    c77c:	0524      	lsls	r4, r4, #20
    c77e:	4013      	ands	r3, r2
    c780:	431c      	orrs	r4, r3
    c782:	0064      	lsls	r4, r4, #1
    c784:	07ed      	lsls	r5, r5, #31
    c786:	0864      	lsrs	r4, r4, #1
    c788:	432c      	orrs	r4, r5
    c78a:	4648      	mov	r0, r9
    c78c:	0021      	movs	r1, r4
    c78e:	b007      	add	sp, #28
    c790:	bc3c      	pop	{r2, r3, r4, r5}
    c792:	4690      	mov	r8, r2
    c794:	4699      	mov	r9, r3
    c796:	46a2      	mov	sl, r4
    c798:	46ab      	mov	fp, r5
    c79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c79c:	4303      	orrs	r3, r0
    c79e:	4699      	mov	r9, r3
    c7a0:	d04f      	beq.n	c842 <__aeabi_dmul+0x1a2>
    c7a2:	465b      	mov	r3, fp
    c7a4:	2b00      	cmp	r3, #0
    c7a6:	d100      	bne.n	c7aa <__aeabi_dmul+0x10a>
    c7a8:	e189      	b.n	cabe <__aeabi_dmul+0x41e>
    c7aa:	4658      	mov	r0, fp
    c7ac:	f7ff f8cc 	bl	b948 <__clzsi2>
    c7b0:	0003      	movs	r3, r0
    c7b2:	3b0b      	subs	r3, #11
    c7b4:	2b1c      	cmp	r3, #28
    c7b6:	dd00      	ble.n	c7ba <__aeabi_dmul+0x11a>
    c7b8:	e17a      	b.n	cab0 <__aeabi_dmul+0x410>
    c7ba:	221d      	movs	r2, #29
    c7bc:	1ad3      	subs	r3, r2, r3
    c7be:	003a      	movs	r2, r7
    c7c0:	0001      	movs	r1, r0
    c7c2:	465c      	mov	r4, fp
    c7c4:	40da      	lsrs	r2, r3
    c7c6:	3908      	subs	r1, #8
    c7c8:	408c      	lsls	r4, r1
    c7ca:	0013      	movs	r3, r2
    c7cc:	408f      	lsls	r7, r1
    c7ce:	4323      	orrs	r3, r4
    c7d0:	469b      	mov	fp, r3
    c7d2:	46b9      	mov	r9, r7
    c7d4:	2300      	movs	r3, #0
    c7d6:	4e2d      	ldr	r6, [pc, #180]	; (c88c <__aeabi_dmul+0x1ec>)
    c7d8:	2700      	movs	r7, #0
    c7da:	1a36      	subs	r6, r6, r0
    c7dc:	9302      	str	r3, [sp, #8]
    c7de:	e784      	b.n	c6ea <__aeabi_dmul+0x4a>
    c7e0:	4653      	mov	r3, sl
    c7e2:	4323      	orrs	r3, r4
    c7e4:	d12a      	bne.n	c83c <__aeabi_dmul+0x19c>
    c7e6:	2400      	movs	r4, #0
    c7e8:	2002      	movs	r0, #2
    c7ea:	e796      	b.n	c71a <__aeabi_dmul+0x7a>
    c7ec:	4653      	mov	r3, sl
    c7ee:	4323      	orrs	r3, r4
    c7f0:	d020      	beq.n	c834 <__aeabi_dmul+0x194>
    c7f2:	2c00      	cmp	r4, #0
    c7f4:	d100      	bne.n	c7f8 <__aeabi_dmul+0x158>
    c7f6:	e157      	b.n	caa8 <__aeabi_dmul+0x408>
    c7f8:	0020      	movs	r0, r4
    c7fa:	f7ff f8a5 	bl	b948 <__clzsi2>
    c7fe:	0003      	movs	r3, r0
    c800:	3b0b      	subs	r3, #11
    c802:	2b1c      	cmp	r3, #28
    c804:	dd00      	ble.n	c808 <__aeabi_dmul+0x168>
    c806:	e149      	b.n	ca9c <__aeabi_dmul+0x3fc>
    c808:	211d      	movs	r1, #29
    c80a:	1acb      	subs	r3, r1, r3
    c80c:	4651      	mov	r1, sl
    c80e:	0002      	movs	r2, r0
    c810:	40d9      	lsrs	r1, r3
    c812:	4653      	mov	r3, sl
    c814:	3a08      	subs	r2, #8
    c816:	4094      	lsls	r4, r2
    c818:	4093      	lsls	r3, r2
    c81a:	430c      	orrs	r4, r1
    c81c:	4a1b      	ldr	r2, [pc, #108]	; (c88c <__aeabi_dmul+0x1ec>)
    c81e:	1a12      	subs	r2, r2, r0
    c820:	2000      	movs	r0, #0
    c822:	e77a      	b.n	c71a <__aeabi_dmul+0x7a>
    c824:	2501      	movs	r5, #1
    c826:	9b01      	ldr	r3, [sp, #4]
    c828:	4c14      	ldr	r4, [pc, #80]	; (c87c <__aeabi_dmul+0x1dc>)
    c82a:	401d      	ands	r5, r3
    c82c:	2300      	movs	r3, #0
    c82e:	2200      	movs	r2, #0
    c830:	4699      	mov	r9, r3
    c832:	e79c      	b.n	c76e <__aeabi_dmul+0xce>
    c834:	2400      	movs	r4, #0
    c836:	2200      	movs	r2, #0
    c838:	2001      	movs	r0, #1
    c83a:	e76e      	b.n	c71a <__aeabi_dmul+0x7a>
    c83c:	4653      	mov	r3, sl
    c83e:	2003      	movs	r0, #3
    c840:	e76b      	b.n	c71a <__aeabi_dmul+0x7a>
    c842:	2300      	movs	r3, #0
    c844:	469b      	mov	fp, r3
    c846:	3301      	adds	r3, #1
    c848:	2704      	movs	r7, #4
    c84a:	2600      	movs	r6, #0
    c84c:	9302      	str	r3, [sp, #8]
    c84e:	e74c      	b.n	c6ea <__aeabi_dmul+0x4a>
    c850:	2303      	movs	r3, #3
    c852:	4681      	mov	r9, r0
    c854:	270c      	movs	r7, #12
    c856:	9302      	str	r3, [sp, #8]
    c858:	e747      	b.n	c6ea <__aeabi_dmul+0x4a>
    c85a:	2280      	movs	r2, #128	; 0x80
    c85c:	2300      	movs	r3, #0
    c85e:	2500      	movs	r5, #0
    c860:	0312      	lsls	r2, r2, #12
    c862:	4699      	mov	r9, r3
    c864:	4c05      	ldr	r4, [pc, #20]	; (c87c <__aeabi_dmul+0x1dc>)
    c866:	e782      	b.n	c76e <__aeabi_dmul+0xce>
    c868:	465c      	mov	r4, fp
    c86a:	464b      	mov	r3, r9
    c86c:	9802      	ldr	r0, [sp, #8]
    c86e:	e76f      	b.n	c750 <__aeabi_dmul+0xb0>
    c870:	465c      	mov	r4, fp
    c872:	464b      	mov	r3, r9
    c874:	9501      	str	r5, [sp, #4]
    c876:	9802      	ldr	r0, [sp, #8]
    c878:	e76a      	b.n	c750 <__aeabi_dmul+0xb0>
    c87a:	46c0      	nop			; (mov r8, r8)
    c87c:	000007ff 	.word	0x000007ff
    c880:	fffffc01 	.word	0xfffffc01
    c884:	00010698 	.word	0x00010698
    c888:	800fffff 	.word	0x800fffff
    c88c:	fffffc0d 	.word	0xfffffc0d
    c890:	464a      	mov	r2, r9
    c892:	4649      	mov	r1, r9
    c894:	0c17      	lsrs	r7, r2, #16
    c896:	0c1a      	lsrs	r2, r3, #16
    c898:	041b      	lsls	r3, r3, #16
    c89a:	0c1b      	lsrs	r3, r3, #16
    c89c:	0408      	lsls	r0, r1, #16
    c89e:	0019      	movs	r1, r3
    c8a0:	0c00      	lsrs	r0, r0, #16
    c8a2:	4341      	muls	r1, r0
    c8a4:	0015      	movs	r5, r2
    c8a6:	4688      	mov	r8, r1
    c8a8:	0019      	movs	r1, r3
    c8aa:	437d      	muls	r5, r7
    c8ac:	4379      	muls	r1, r7
    c8ae:	9503      	str	r5, [sp, #12]
    c8b0:	4689      	mov	r9, r1
    c8b2:	0029      	movs	r1, r5
    c8b4:	0015      	movs	r5, r2
    c8b6:	4345      	muls	r5, r0
    c8b8:	444d      	add	r5, r9
    c8ba:	9502      	str	r5, [sp, #8]
    c8bc:	4645      	mov	r5, r8
    c8be:	0c2d      	lsrs	r5, r5, #16
    c8c0:	46aa      	mov	sl, r5
    c8c2:	9d02      	ldr	r5, [sp, #8]
    c8c4:	4455      	add	r5, sl
    c8c6:	45a9      	cmp	r9, r5
    c8c8:	d906      	bls.n	c8d8 <__aeabi_dmul+0x238>
    c8ca:	468a      	mov	sl, r1
    c8cc:	2180      	movs	r1, #128	; 0x80
    c8ce:	0249      	lsls	r1, r1, #9
    c8d0:	4689      	mov	r9, r1
    c8d2:	44ca      	add	sl, r9
    c8d4:	4651      	mov	r1, sl
    c8d6:	9103      	str	r1, [sp, #12]
    c8d8:	0c29      	lsrs	r1, r5, #16
    c8da:	9104      	str	r1, [sp, #16]
    c8dc:	4641      	mov	r1, r8
    c8de:	0409      	lsls	r1, r1, #16
    c8e0:	042d      	lsls	r5, r5, #16
    c8e2:	0c09      	lsrs	r1, r1, #16
    c8e4:	4688      	mov	r8, r1
    c8e6:	0029      	movs	r1, r5
    c8e8:	0c25      	lsrs	r5, r4, #16
    c8ea:	0424      	lsls	r4, r4, #16
    c8ec:	4441      	add	r1, r8
    c8ee:	0c24      	lsrs	r4, r4, #16
    c8f0:	9105      	str	r1, [sp, #20]
    c8f2:	0021      	movs	r1, r4
    c8f4:	4341      	muls	r1, r0
    c8f6:	4688      	mov	r8, r1
    c8f8:	0021      	movs	r1, r4
    c8fa:	4379      	muls	r1, r7
    c8fc:	468a      	mov	sl, r1
    c8fe:	4368      	muls	r0, r5
    c900:	4641      	mov	r1, r8
    c902:	4450      	add	r0, sl
    c904:	4681      	mov	r9, r0
    c906:	0c08      	lsrs	r0, r1, #16
    c908:	4448      	add	r0, r9
    c90a:	436f      	muls	r7, r5
    c90c:	4582      	cmp	sl, r0
    c90e:	d903      	bls.n	c918 <__aeabi_dmul+0x278>
    c910:	2180      	movs	r1, #128	; 0x80
    c912:	0249      	lsls	r1, r1, #9
    c914:	4689      	mov	r9, r1
    c916:	444f      	add	r7, r9
    c918:	0c01      	lsrs	r1, r0, #16
    c91a:	4689      	mov	r9, r1
    c91c:	0039      	movs	r1, r7
    c91e:	4449      	add	r1, r9
    c920:	9102      	str	r1, [sp, #8]
    c922:	4641      	mov	r1, r8
    c924:	040f      	lsls	r7, r1, #16
    c926:	9904      	ldr	r1, [sp, #16]
    c928:	0c3f      	lsrs	r7, r7, #16
    c92a:	4688      	mov	r8, r1
    c92c:	0400      	lsls	r0, r0, #16
    c92e:	19c0      	adds	r0, r0, r7
    c930:	4480      	add	r8, r0
    c932:	4641      	mov	r1, r8
    c934:	9104      	str	r1, [sp, #16]
    c936:	4659      	mov	r1, fp
    c938:	0c0f      	lsrs	r7, r1, #16
    c93a:	0409      	lsls	r1, r1, #16
    c93c:	0c09      	lsrs	r1, r1, #16
    c93e:	4688      	mov	r8, r1
    c940:	4359      	muls	r1, r3
    c942:	468a      	mov	sl, r1
    c944:	0039      	movs	r1, r7
    c946:	4351      	muls	r1, r2
    c948:	4689      	mov	r9, r1
    c94a:	4641      	mov	r1, r8
    c94c:	434a      	muls	r2, r1
    c94e:	4651      	mov	r1, sl
    c950:	0c09      	lsrs	r1, r1, #16
    c952:	468b      	mov	fp, r1
    c954:	437b      	muls	r3, r7
    c956:	18d2      	adds	r2, r2, r3
    c958:	445a      	add	r2, fp
    c95a:	4293      	cmp	r3, r2
    c95c:	d903      	bls.n	c966 <__aeabi_dmul+0x2c6>
    c95e:	2380      	movs	r3, #128	; 0x80
    c960:	025b      	lsls	r3, r3, #9
    c962:	469b      	mov	fp, r3
    c964:	44d9      	add	r9, fp
    c966:	4651      	mov	r1, sl
    c968:	0409      	lsls	r1, r1, #16
    c96a:	0c09      	lsrs	r1, r1, #16
    c96c:	468a      	mov	sl, r1
    c96e:	4641      	mov	r1, r8
    c970:	4361      	muls	r1, r4
    c972:	437c      	muls	r4, r7
    c974:	0c13      	lsrs	r3, r2, #16
    c976:	0412      	lsls	r2, r2, #16
    c978:	444b      	add	r3, r9
    c97a:	4452      	add	r2, sl
    c97c:	46a1      	mov	r9, r4
    c97e:	468a      	mov	sl, r1
    c980:	003c      	movs	r4, r7
    c982:	4641      	mov	r1, r8
    c984:	436c      	muls	r4, r5
    c986:	434d      	muls	r5, r1
    c988:	4651      	mov	r1, sl
    c98a:	444d      	add	r5, r9
    c98c:	0c0f      	lsrs	r7, r1, #16
    c98e:	197d      	adds	r5, r7, r5
    c990:	45a9      	cmp	r9, r5
    c992:	d903      	bls.n	c99c <__aeabi_dmul+0x2fc>
    c994:	2180      	movs	r1, #128	; 0x80
    c996:	0249      	lsls	r1, r1, #9
    c998:	4688      	mov	r8, r1
    c99a:	4444      	add	r4, r8
    c99c:	9f04      	ldr	r7, [sp, #16]
    c99e:	9903      	ldr	r1, [sp, #12]
    c9a0:	46b8      	mov	r8, r7
    c9a2:	4441      	add	r1, r8
    c9a4:	468b      	mov	fp, r1
    c9a6:	4583      	cmp	fp, r0
    c9a8:	4180      	sbcs	r0, r0
    c9aa:	4241      	negs	r1, r0
    c9ac:	4688      	mov	r8, r1
    c9ae:	4651      	mov	r1, sl
    c9b0:	0408      	lsls	r0, r1, #16
    c9b2:	042f      	lsls	r7, r5, #16
    c9b4:	0c00      	lsrs	r0, r0, #16
    c9b6:	183f      	adds	r7, r7, r0
    c9b8:	4658      	mov	r0, fp
    c9ba:	9902      	ldr	r1, [sp, #8]
    c9bc:	1810      	adds	r0, r2, r0
    c9be:	4689      	mov	r9, r1
    c9c0:	4290      	cmp	r0, r2
    c9c2:	4192      	sbcs	r2, r2
    c9c4:	444f      	add	r7, r9
    c9c6:	46ba      	mov	sl, r7
    c9c8:	4252      	negs	r2, r2
    c9ca:	4699      	mov	r9, r3
    c9cc:	4693      	mov	fp, r2
    c9ce:	44c2      	add	sl, r8
    c9d0:	44d1      	add	r9, sl
    c9d2:	44cb      	add	fp, r9
    c9d4:	428f      	cmp	r7, r1
    c9d6:	41bf      	sbcs	r7, r7
    c9d8:	45c2      	cmp	sl, r8
    c9da:	4189      	sbcs	r1, r1
    c9dc:	4599      	cmp	r9, r3
    c9de:	419b      	sbcs	r3, r3
    c9e0:	4593      	cmp	fp, r2
    c9e2:	4192      	sbcs	r2, r2
    c9e4:	427f      	negs	r7, r7
    c9e6:	4249      	negs	r1, r1
    c9e8:	0c2d      	lsrs	r5, r5, #16
    c9ea:	4252      	negs	r2, r2
    c9ec:	430f      	orrs	r7, r1
    c9ee:	425b      	negs	r3, r3
    c9f0:	4313      	orrs	r3, r2
    c9f2:	197f      	adds	r7, r7, r5
    c9f4:	18ff      	adds	r7, r7, r3
    c9f6:	465b      	mov	r3, fp
    c9f8:	193c      	adds	r4, r7, r4
    c9fa:	0ddb      	lsrs	r3, r3, #23
    c9fc:	9a05      	ldr	r2, [sp, #20]
    c9fe:	0264      	lsls	r4, r4, #9
    ca00:	431c      	orrs	r4, r3
    ca02:	0243      	lsls	r3, r0, #9
    ca04:	4313      	orrs	r3, r2
    ca06:	1e5d      	subs	r5, r3, #1
    ca08:	41ab      	sbcs	r3, r5
    ca0a:	465a      	mov	r2, fp
    ca0c:	0dc0      	lsrs	r0, r0, #23
    ca0e:	4303      	orrs	r3, r0
    ca10:	0252      	lsls	r2, r2, #9
    ca12:	4313      	orrs	r3, r2
    ca14:	01e2      	lsls	r2, r4, #7
    ca16:	d556      	bpl.n	cac6 <__aeabi_dmul+0x426>
    ca18:	2001      	movs	r0, #1
    ca1a:	085a      	lsrs	r2, r3, #1
    ca1c:	4003      	ands	r3, r0
    ca1e:	4313      	orrs	r3, r2
    ca20:	07e2      	lsls	r2, r4, #31
    ca22:	4313      	orrs	r3, r2
    ca24:	0864      	lsrs	r4, r4, #1
    ca26:	485a      	ldr	r0, [pc, #360]	; (cb90 <__aeabi_dmul+0x4f0>)
    ca28:	4460      	add	r0, ip
    ca2a:	2800      	cmp	r0, #0
    ca2c:	dd4d      	ble.n	caca <__aeabi_dmul+0x42a>
    ca2e:	075a      	lsls	r2, r3, #29
    ca30:	d009      	beq.n	ca46 <__aeabi_dmul+0x3a6>
    ca32:	220f      	movs	r2, #15
    ca34:	401a      	ands	r2, r3
    ca36:	2a04      	cmp	r2, #4
    ca38:	d005      	beq.n	ca46 <__aeabi_dmul+0x3a6>
    ca3a:	1d1a      	adds	r2, r3, #4
    ca3c:	429a      	cmp	r2, r3
    ca3e:	419b      	sbcs	r3, r3
    ca40:	425b      	negs	r3, r3
    ca42:	18e4      	adds	r4, r4, r3
    ca44:	0013      	movs	r3, r2
    ca46:	01e2      	lsls	r2, r4, #7
    ca48:	d504      	bpl.n	ca54 <__aeabi_dmul+0x3b4>
    ca4a:	2080      	movs	r0, #128	; 0x80
    ca4c:	4a51      	ldr	r2, [pc, #324]	; (cb94 <__aeabi_dmul+0x4f4>)
    ca4e:	00c0      	lsls	r0, r0, #3
    ca50:	4014      	ands	r4, r2
    ca52:	4460      	add	r0, ip
    ca54:	4a50      	ldr	r2, [pc, #320]	; (cb98 <__aeabi_dmul+0x4f8>)
    ca56:	4290      	cmp	r0, r2
    ca58:	dd00      	ble.n	ca5c <__aeabi_dmul+0x3bc>
    ca5a:	e6e3      	b.n	c824 <__aeabi_dmul+0x184>
    ca5c:	2501      	movs	r5, #1
    ca5e:	08db      	lsrs	r3, r3, #3
    ca60:	0762      	lsls	r2, r4, #29
    ca62:	431a      	orrs	r2, r3
    ca64:	0264      	lsls	r4, r4, #9
    ca66:	9b01      	ldr	r3, [sp, #4]
    ca68:	4691      	mov	r9, r2
    ca6a:	0b22      	lsrs	r2, r4, #12
    ca6c:	0544      	lsls	r4, r0, #21
    ca6e:	0d64      	lsrs	r4, r4, #21
    ca70:	401d      	ands	r5, r3
    ca72:	e67c      	b.n	c76e <__aeabi_dmul+0xce>
    ca74:	2280      	movs	r2, #128	; 0x80
    ca76:	4659      	mov	r1, fp
    ca78:	0312      	lsls	r2, r2, #12
    ca7a:	4211      	tst	r1, r2
    ca7c:	d008      	beq.n	ca90 <__aeabi_dmul+0x3f0>
    ca7e:	4214      	tst	r4, r2
    ca80:	d106      	bne.n	ca90 <__aeabi_dmul+0x3f0>
    ca82:	4322      	orrs	r2, r4
    ca84:	0312      	lsls	r2, r2, #12
    ca86:	0b12      	lsrs	r2, r2, #12
    ca88:	4645      	mov	r5, r8
    ca8a:	4699      	mov	r9, r3
    ca8c:	4c43      	ldr	r4, [pc, #268]	; (cb9c <__aeabi_dmul+0x4fc>)
    ca8e:	e66e      	b.n	c76e <__aeabi_dmul+0xce>
    ca90:	465b      	mov	r3, fp
    ca92:	431a      	orrs	r2, r3
    ca94:	0312      	lsls	r2, r2, #12
    ca96:	0b12      	lsrs	r2, r2, #12
    ca98:	4c40      	ldr	r4, [pc, #256]	; (cb9c <__aeabi_dmul+0x4fc>)
    ca9a:	e668      	b.n	c76e <__aeabi_dmul+0xce>
    ca9c:	0003      	movs	r3, r0
    ca9e:	4654      	mov	r4, sl
    caa0:	3b28      	subs	r3, #40	; 0x28
    caa2:	409c      	lsls	r4, r3
    caa4:	2300      	movs	r3, #0
    caa6:	e6b9      	b.n	c81c <__aeabi_dmul+0x17c>
    caa8:	f7fe ff4e 	bl	b948 <__clzsi2>
    caac:	3020      	adds	r0, #32
    caae:	e6a6      	b.n	c7fe <__aeabi_dmul+0x15e>
    cab0:	0003      	movs	r3, r0
    cab2:	3b28      	subs	r3, #40	; 0x28
    cab4:	409f      	lsls	r7, r3
    cab6:	2300      	movs	r3, #0
    cab8:	46bb      	mov	fp, r7
    caba:	4699      	mov	r9, r3
    cabc:	e68a      	b.n	c7d4 <__aeabi_dmul+0x134>
    cabe:	f7fe ff43 	bl	b948 <__clzsi2>
    cac2:	3020      	adds	r0, #32
    cac4:	e674      	b.n	c7b0 <__aeabi_dmul+0x110>
    cac6:	46b4      	mov	ip, r6
    cac8:	e7ad      	b.n	ca26 <__aeabi_dmul+0x386>
    caca:	2501      	movs	r5, #1
    cacc:	1a2a      	subs	r2, r5, r0
    cace:	2a38      	cmp	r2, #56	; 0x38
    cad0:	dd06      	ble.n	cae0 <__aeabi_dmul+0x440>
    cad2:	9b01      	ldr	r3, [sp, #4]
    cad4:	2400      	movs	r4, #0
    cad6:	401d      	ands	r5, r3
    cad8:	2300      	movs	r3, #0
    cada:	2200      	movs	r2, #0
    cadc:	4699      	mov	r9, r3
    cade:	e646      	b.n	c76e <__aeabi_dmul+0xce>
    cae0:	2a1f      	cmp	r2, #31
    cae2:	dc21      	bgt.n	cb28 <__aeabi_dmul+0x488>
    cae4:	2520      	movs	r5, #32
    cae6:	0020      	movs	r0, r4
    cae8:	1aad      	subs	r5, r5, r2
    caea:	001e      	movs	r6, r3
    caec:	40ab      	lsls	r3, r5
    caee:	40a8      	lsls	r0, r5
    caf0:	40d6      	lsrs	r6, r2
    caf2:	1e5d      	subs	r5, r3, #1
    caf4:	41ab      	sbcs	r3, r5
    caf6:	4330      	orrs	r0, r6
    caf8:	4318      	orrs	r0, r3
    cafa:	40d4      	lsrs	r4, r2
    cafc:	0743      	lsls	r3, r0, #29
    cafe:	d009      	beq.n	cb14 <__aeabi_dmul+0x474>
    cb00:	230f      	movs	r3, #15
    cb02:	4003      	ands	r3, r0
    cb04:	2b04      	cmp	r3, #4
    cb06:	d005      	beq.n	cb14 <__aeabi_dmul+0x474>
    cb08:	0003      	movs	r3, r0
    cb0a:	1d18      	adds	r0, r3, #4
    cb0c:	4298      	cmp	r0, r3
    cb0e:	419b      	sbcs	r3, r3
    cb10:	425b      	negs	r3, r3
    cb12:	18e4      	adds	r4, r4, r3
    cb14:	0223      	lsls	r3, r4, #8
    cb16:	d521      	bpl.n	cb5c <__aeabi_dmul+0x4bc>
    cb18:	2501      	movs	r5, #1
    cb1a:	9b01      	ldr	r3, [sp, #4]
    cb1c:	2401      	movs	r4, #1
    cb1e:	401d      	ands	r5, r3
    cb20:	2300      	movs	r3, #0
    cb22:	2200      	movs	r2, #0
    cb24:	4699      	mov	r9, r3
    cb26:	e622      	b.n	c76e <__aeabi_dmul+0xce>
    cb28:	251f      	movs	r5, #31
    cb2a:	0021      	movs	r1, r4
    cb2c:	426d      	negs	r5, r5
    cb2e:	1a28      	subs	r0, r5, r0
    cb30:	40c1      	lsrs	r1, r0
    cb32:	0008      	movs	r0, r1
    cb34:	2a20      	cmp	r2, #32
    cb36:	d01d      	beq.n	cb74 <__aeabi_dmul+0x4d4>
    cb38:	355f      	adds	r5, #95	; 0x5f
    cb3a:	1aaa      	subs	r2, r5, r2
    cb3c:	4094      	lsls	r4, r2
    cb3e:	4323      	orrs	r3, r4
    cb40:	1e5c      	subs	r4, r3, #1
    cb42:	41a3      	sbcs	r3, r4
    cb44:	2507      	movs	r5, #7
    cb46:	4303      	orrs	r3, r0
    cb48:	401d      	ands	r5, r3
    cb4a:	2200      	movs	r2, #0
    cb4c:	2d00      	cmp	r5, #0
    cb4e:	d009      	beq.n	cb64 <__aeabi_dmul+0x4c4>
    cb50:	220f      	movs	r2, #15
    cb52:	2400      	movs	r4, #0
    cb54:	401a      	ands	r2, r3
    cb56:	0018      	movs	r0, r3
    cb58:	2a04      	cmp	r2, #4
    cb5a:	d1d6      	bne.n	cb0a <__aeabi_dmul+0x46a>
    cb5c:	0003      	movs	r3, r0
    cb5e:	0765      	lsls	r5, r4, #29
    cb60:	0264      	lsls	r4, r4, #9
    cb62:	0b22      	lsrs	r2, r4, #12
    cb64:	08db      	lsrs	r3, r3, #3
    cb66:	432b      	orrs	r3, r5
    cb68:	2501      	movs	r5, #1
    cb6a:	4699      	mov	r9, r3
    cb6c:	9b01      	ldr	r3, [sp, #4]
    cb6e:	2400      	movs	r4, #0
    cb70:	401d      	ands	r5, r3
    cb72:	e5fc      	b.n	c76e <__aeabi_dmul+0xce>
    cb74:	2400      	movs	r4, #0
    cb76:	e7e2      	b.n	cb3e <__aeabi_dmul+0x49e>
    cb78:	2280      	movs	r2, #128	; 0x80
    cb7a:	2501      	movs	r5, #1
    cb7c:	0312      	lsls	r2, r2, #12
    cb7e:	4322      	orrs	r2, r4
    cb80:	9901      	ldr	r1, [sp, #4]
    cb82:	0312      	lsls	r2, r2, #12
    cb84:	0b12      	lsrs	r2, r2, #12
    cb86:	400d      	ands	r5, r1
    cb88:	4699      	mov	r9, r3
    cb8a:	4c04      	ldr	r4, [pc, #16]	; (cb9c <__aeabi_dmul+0x4fc>)
    cb8c:	e5ef      	b.n	c76e <__aeabi_dmul+0xce>
    cb8e:	46c0      	nop			; (mov r8, r8)
    cb90:	000003ff 	.word	0x000003ff
    cb94:	feffffff 	.word	0xfeffffff
    cb98:	000007fe 	.word	0x000007fe
    cb9c:	000007ff 	.word	0x000007ff

0000cba0 <__aeabi_dsub>:
    cba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cba2:	4646      	mov	r6, r8
    cba4:	46d6      	mov	lr, sl
    cba6:	464f      	mov	r7, r9
    cba8:	030c      	lsls	r4, r1, #12
    cbaa:	b5c0      	push	{r6, r7, lr}
    cbac:	0fcd      	lsrs	r5, r1, #31
    cbae:	004e      	lsls	r6, r1, #1
    cbb0:	0a61      	lsrs	r1, r4, #9
    cbb2:	0f44      	lsrs	r4, r0, #29
    cbb4:	430c      	orrs	r4, r1
    cbb6:	00c1      	lsls	r1, r0, #3
    cbb8:	0058      	lsls	r0, r3, #1
    cbba:	0d40      	lsrs	r0, r0, #21
    cbbc:	4684      	mov	ip, r0
    cbbe:	468a      	mov	sl, r1
    cbc0:	000f      	movs	r7, r1
    cbc2:	0319      	lsls	r1, r3, #12
    cbc4:	0f50      	lsrs	r0, r2, #29
    cbc6:	0a49      	lsrs	r1, r1, #9
    cbc8:	4301      	orrs	r1, r0
    cbca:	48c6      	ldr	r0, [pc, #792]	; (cee4 <__aeabi_dsub+0x344>)
    cbcc:	0d76      	lsrs	r6, r6, #21
    cbce:	46a8      	mov	r8, r5
    cbd0:	0fdb      	lsrs	r3, r3, #31
    cbd2:	00d2      	lsls	r2, r2, #3
    cbd4:	4584      	cmp	ip, r0
    cbd6:	d100      	bne.n	cbda <__aeabi_dsub+0x3a>
    cbd8:	e0d8      	b.n	cd8c <__aeabi_dsub+0x1ec>
    cbda:	2001      	movs	r0, #1
    cbdc:	4043      	eors	r3, r0
    cbde:	42ab      	cmp	r3, r5
    cbe0:	d100      	bne.n	cbe4 <__aeabi_dsub+0x44>
    cbe2:	e0a6      	b.n	cd32 <__aeabi_dsub+0x192>
    cbe4:	4660      	mov	r0, ip
    cbe6:	1a35      	subs	r5, r6, r0
    cbe8:	2d00      	cmp	r5, #0
    cbea:	dc00      	bgt.n	cbee <__aeabi_dsub+0x4e>
    cbec:	e105      	b.n	cdfa <__aeabi_dsub+0x25a>
    cbee:	2800      	cmp	r0, #0
    cbf0:	d110      	bne.n	cc14 <__aeabi_dsub+0x74>
    cbf2:	000b      	movs	r3, r1
    cbf4:	4313      	orrs	r3, r2
    cbf6:	d100      	bne.n	cbfa <__aeabi_dsub+0x5a>
    cbf8:	e0d7      	b.n	cdaa <__aeabi_dsub+0x20a>
    cbfa:	1e6b      	subs	r3, r5, #1
    cbfc:	2b00      	cmp	r3, #0
    cbfe:	d000      	beq.n	cc02 <__aeabi_dsub+0x62>
    cc00:	e14b      	b.n	ce9a <__aeabi_dsub+0x2fa>
    cc02:	4653      	mov	r3, sl
    cc04:	1a9f      	subs	r7, r3, r2
    cc06:	45ba      	cmp	sl, r7
    cc08:	4180      	sbcs	r0, r0
    cc0a:	1a64      	subs	r4, r4, r1
    cc0c:	4240      	negs	r0, r0
    cc0e:	1a24      	subs	r4, r4, r0
    cc10:	2601      	movs	r6, #1
    cc12:	e01e      	b.n	cc52 <__aeabi_dsub+0xb2>
    cc14:	4bb3      	ldr	r3, [pc, #716]	; (cee4 <__aeabi_dsub+0x344>)
    cc16:	429e      	cmp	r6, r3
    cc18:	d048      	beq.n	ccac <__aeabi_dsub+0x10c>
    cc1a:	2380      	movs	r3, #128	; 0x80
    cc1c:	041b      	lsls	r3, r3, #16
    cc1e:	4319      	orrs	r1, r3
    cc20:	2d38      	cmp	r5, #56	; 0x38
    cc22:	dd00      	ble.n	cc26 <__aeabi_dsub+0x86>
    cc24:	e119      	b.n	ce5a <__aeabi_dsub+0x2ba>
    cc26:	2d1f      	cmp	r5, #31
    cc28:	dd00      	ble.n	cc2c <__aeabi_dsub+0x8c>
    cc2a:	e14c      	b.n	cec6 <__aeabi_dsub+0x326>
    cc2c:	2320      	movs	r3, #32
    cc2e:	000f      	movs	r7, r1
    cc30:	1b5b      	subs	r3, r3, r5
    cc32:	0010      	movs	r0, r2
    cc34:	409a      	lsls	r2, r3
    cc36:	409f      	lsls	r7, r3
    cc38:	40e8      	lsrs	r0, r5
    cc3a:	1e53      	subs	r3, r2, #1
    cc3c:	419a      	sbcs	r2, r3
    cc3e:	40e9      	lsrs	r1, r5
    cc40:	4307      	orrs	r7, r0
    cc42:	4317      	orrs	r7, r2
    cc44:	4653      	mov	r3, sl
    cc46:	1bdf      	subs	r7, r3, r7
    cc48:	1a61      	subs	r1, r4, r1
    cc4a:	45ba      	cmp	sl, r7
    cc4c:	41a4      	sbcs	r4, r4
    cc4e:	4264      	negs	r4, r4
    cc50:	1b0c      	subs	r4, r1, r4
    cc52:	0223      	lsls	r3, r4, #8
    cc54:	d400      	bmi.n	cc58 <__aeabi_dsub+0xb8>
    cc56:	e0c5      	b.n	cde4 <__aeabi_dsub+0x244>
    cc58:	0264      	lsls	r4, r4, #9
    cc5a:	0a65      	lsrs	r5, r4, #9
    cc5c:	2d00      	cmp	r5, #0
    cc5e:	d100      	bne.n	cc62 <__aeabi_dsub+0xc2>
    cc60:	e0f6      	b.n	ce50 <__aeabi_dsub+0x2b0>
    cc62:	0028      	movs	r0, r5
    cc64:	f7fe fe70 	bl	b948 <__clzsi2>
    cc68:	0003      	movs	r3, r0
    cc6a:	3b08      	subs	r3, #8
    cc6c:	2b1f      	cmp	r3, #31
    cc6e:	dd00      	ble.n	cc72 <__aeabi_dsub+0xd2>
    cc70:	e0e9      	b.n	ce46 <__aeabi_dsub+0x2a6>
    cc72:	2220      	movs	r2, #32
    cc74:	003c      	movs	r4, r7
    cc76:	1ad2      	subs	r2, r2, r3
    cc78:	409d      	lsls	r5, r3
    cc7a:	40d4      	lsrs	r4, r2
    cc7c:	409f      	lsls	r7, r3
    cc7e:	4325      	orrs	r5, r4
    cc80:	429e      	cmp	r6, r3
    cc82:	dd00      	ble.n	cc86 <__aeabi_dsub+0xe6>
    cc84:	e0db      	b.n	ce3e <__aeabi_dsub+0x29e>
    cc86:	1b9e      	subs	r6, r3, r6
    cc88:	1c73      	adds	r3, r6, #1
    cc8a:	2b1f      	cmp	r3, #31
    cc8c:	dd00      	ble.n	cc90 <__aeabi_dsub+0xf0>
    cc8e:	e10a      	b.n	cea6 <__aeabi_dsub+0x306>
    cc90:	2220      	movs	r2, #32
    cc92:	0038      	movs	r0, r7
    cc94:	1ad2      	subs	r2, r2, r3
    cc96:	0029      	movs	r1, r5
    cc98:	4097      	lsls	r7, r2
    cc9a:	002c      	movs	r4, r5
    cc9c:	4091      	lsls	r1, r2
    cc9e:	40d8      	lsrs	r0, r3
    cca0:	1e7a      	subs	r2, r7, #1
    cca2:	4197      	sbcs	r7, r2
    cca4:	40dc      	lsrs	r4, r3
    cca6:	2600      	movs	r6, #0
    cca8:	4301      	orrs	r1, r0
    ccaa:	430f      	orrs	r7, r1
    ccac:	077b      	lsls	r3, r7, #29
    ccae:	d009      	beq.n	ccc4 <__aeabi_dsub+0x124>
    ccb0:	230f      	movs	r3, #15
    ccb2:	403b      	ands	r3, r7
    ccb4:	2b04      	cmp	r3, #4
    ccb6:	d005      	beq.n	ccc4 <__aeabi_dsub+0x124>
    ccb8:	1d3b      	adds	r3, r7, #4
    ccba:	42bb      	cmp	r3, r7
    ccbc:	41bf      	sbcs	r7, r7
    ccbe:	427f      	negs	r7, r7
    ccc0:	19e4      	adds	r4, r4, r7
    ccc2:	001f      	movs	r7, r3
    ccc4:	0223      	lsls	r3, r4, #8
    ccc6:	d525      	bpl.n	cd14 <__aeabi_dsub+0x174>
    ccc8:	4b86      	ldr	r3, [pc, #536]	; (cee4 <__aeabi_dsub+0x344>)
    ccca:	3601      	adds	r6, #1
    cccc:	429e      	cmp	r6, r3
    ccce:	d100      	bne.n	ccd2 <__aeabi_dsub+0x132>
    ccd0:	e0af      	b.n	ce32 <__aeabi_dsub+0x292>
    ccd2:	4b85      	ldr	r3, [pc, #532]	; (cee8 <__aeabi_dsub+0x348>)
    ccd4:	2501      	movs	r5, #1
    ccd6:	401c      	ands	r4, r3
    ccd8:	4643      	mov	r3, r8
    ccda:	0762      	lsls	r2, r4, #29
    ccdc:	08ff      	lsrs	r7, r7, #3
    ccde:	0264      	lsls	r4, r4, #9
    cce0:	0576      	lsls	r6, r6, #21
    cce2:	4317      	orrs	r7, r2
    cce4:	0b24      	lsrs	r4, r4, #12
    cce6:	0d76      	lsrs	r6, r6, #21
    cce8:	401d      	ands	r5, r3
    ccea:	2100      	movs	r1, #0
    ccec:	0324      	lsls	r4, r4, #12
    ccee:	0b23      	lsrs	r3, r4, #12
    ccf0:	0d0c      	lsrs	r4, r1, #20
    ccf2:	4a7e      	ldr	r2, [pc, #504]	; (ceec <__aeabi_dsub+0x34c>)
    ccf4:	0524      	lsls	r4, r4, #20
    ccf6:	431c      	orrs	r4, r3
    ccf8:	4014      	ands	r4, r2
    ccfa:	0533      	lsls	r3, r6, #20
    ccfc:	4323      	orrs	r3, r4
    ccfe:	005b      	lsls	r3, r3, #1
    cd00:	07ed      	lsls	r5, r5, #31
    cd02:	085b      	lsrs	r3, r3, #1
    cd04:	432b      	orrs	r3, r5
    cd06:	0038      	movs	r0, r7
    cd08:	0019      	movs	r1, r3
    cd0a:	bc1c      	pop	{r2, r3, r4}
    cd0c:	4690      	mov	r8, r2
    cd0e:	4699      	mov	r9, r3
    cd10:	46a2      	mov	sl, r4
    cd12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd14:	2501      	movs	r5, #1
    cd16:	4643      	mov	r3, r8
    cd18:	0762      	lsls	r2, r4, #29
    cd1a:	08ff      	lsrs	r7, r7, #3
    cd1c:	4317      	orrs	r7, r2
    cd1e:	08e4      	lsrs	r4, r4, #3
    cd20:	401d      	ands	r5, r3
    cd22:	4b70      	ldr	r3, [pc, #448]	; (cee4 <__aeabi_dsub+0x344>)
    cd24:	429e      	cmp	r6, r3
    cd26:	d036      	beq.n	cd96 <__aeabi_dsub+0x1f6>
    cd28:	0324      	lsls	r4, r4, #12
    cd2a:	0576      	lsls	r6, r6, #21
    cd2c:	0b24      	lsrs	r4, r4, #12
    cd2e:	0d76      	lsrs	r6, r6, #21
    cd30:	e7db      	b.n	ccea <__aeabi_dsub+0x14a>
    cd32:	4663      	mov	r3, ip
    cd34:	1af3      	subs	r3, r6, r3
    cd36:	2b00      	cmp	r3, #0
    cd38:	dc00      	bgt.n	cd3c <__aeabi_dsub+0x19c>
    cd3a:	e094      	b.n	ce66 <__aeabi_dsub+0x2c6>
    cd3c:	4660      	mov	r0, ip
    cd3e:	2800      	cmp	r0, #0
    cd40:	d035      	beq.n	cdae <__aeabi_dsub+0x20e>
    cd42:	4868      	ldr	r0, [pc, #416]	; (cee4 <__aeabi_dsub+0x344>)
    cd44:	4286      	cmp	r6, r0
    cd46:	d0b1      	beq.n	ccac <__aeabi_dsub+0x10c>
    cd48:	2780      	movs	r7, #128	; 0x80
    cd4a:	043f      	lsls	r7, r7, #16
    cd4c:	4339      	orrs	r1, r7
    cd4e:	2b38      	cmp	r3, #56	; 0x38
    cd50:	dc00      	bgt.n	cd54 <__aeabi_dsub+0x1b4>
    cd52:	e0fd      	b.n	cf50 <__aeabi_dsub+0x3b0>
    cd54:	430a      	orrs	r2, r1
    cd56:	0017      	movs	r7, r2
    cd58:	2100      	movs	r1, #0
    cd5a:	1e7a      	subs	r2, r7, #1
    cd5c:	4197      	sbcs	r7, r2
    cd5e:	4457      	add	r7, sl
    cd60:	4557      	cmp	r7, sl
    cd62:	4180      	sbcs	r0, r0
    cd64:	1909      	adds	r1, r1, r4
    cd66:	4244      	negs	r4, r0
    cd68:	190c      	adds	r4, r1, r4
    cd6a:	0223      	lsls	r3, r4, #8
    cd6c:	d53a      	bpl.n	cde4 <__aeabi_dsub+0x244>
    cd6e:	4b5d      	ldr	r3, [pc, #372]	; (cee4 <__aeabi_dsub+0x344>)
    cd70:	3601      	adds	r6, #1
    cd72:	429e      	cmp	r6, r3
    cd74:	d100      	bne.n	cd78 <__aeabi_dsub+0x1d8>
    cd76:	e14b      	b.n	d010 <__aeabi_dsub+0x470>
    cd78:	2201      	movs	r2, #1
    cd7a:	4b5b      	ldr	r3, [pc, #364]	; (cee8 <__aeabi_dsub+0x348>)
    cd7c:	401c      	ands	r4, r3
    cd7e:	087b      	lsrs	r3, r7, #1
    cd80:	4017      	ands	r7, r2
    cd82:	431f      	orrs	r7, r3
    cd84:	07e2      	lsls	r2, r4, #31
    cd86:	4317      	orrs	r7, r2
    cd88:	0864      	lsrs	r4, r4, #1
    cd8a:	e78f      	b.n	ccac <__aeabi_dsub+0x10c>
    cd8c:	0008      	movs	r0, r1
    cd8e:	4310      	orrs	r0, r2
    cd90:	d000      	beq.n	cd94 <__aeabi_dsub+0x1f4>
    cd92:	e724      	b.n	cbde <__aeabi_dsub+0x3e>
    cd94:	e721      	b.n	cbda <__aeabi_dsub+0x3a>
    cd96:	0023      	movs	r3, r4
    cd98:	433b      	orrs	r3, r7
    cd9a:	d100      	bne.n	cd9e <__aeabi_dsub+0x1fe>
    cd9c:	e1b9      	b.n	d112 <__aeabi_dsub+0x572>
    cd9e:	2280      	movs	r2, #128	; 0x80
    cda0:	0312      	lsls	r2, r2, #12
    cda2:	4314      	orrs	r4, r2
    cda4:	0324      	lsls	r4, r4, #12
    cda6:	0b24      	lsrs	r4, r4, #12
    cda8:	e79f      	b.n	ccea <__aeabi_dsub+0x14a>
    cdaa:	002e      	movs	r6, r5
    cdac:	e77e      	b.n	ccac <__aeabi_dsub+0x10c>
    cdae:	0008      	movs	r0, r1
    cdb0:	4310      	orrs	r0, r2
    cdb2:	d100      	bne.n	cdb6 <__aeabi_dsub+0x216>
    cdb4:	e0ca      	b.n	cf4c <__aeabi_dsub+0x3ac>
    cdb6:	1e58      	subs	r0, r3, #1
    cdb8:	4684      	mov	ip, r0
    cdba:	2800      	cmp	r0, #0
    cdbc:	d000      	beq.n	cdc0 <__aeabi_dsub+0x220>
    cdbe:	e0e7      	b.n	cf90 <__aeabi_dsub+0x3f0>
    cdc0:	4452      	add	r2, sl
    cdc2:	4552      	cmp	r2, sl
    cdc4:	4180      	sbcs	r0, r0
    cdc6:	1864      	adds	r4, r4, r1
    cdc8:	4240      	negs	r0, r0
    cdca:	1824      	adds	r4, r4, r0
    cdcc:	0017      	movs	r7, r2
    cdce:	2601      	movs	r6, #1
    cdd0:	0223      	lsls	r3, r4, #8
    cdd2:	d507      	bpl.n	cde4 <__aeabi_dsub+0x244>
    cdd4:	2602      	movs	r6, #2
    cdd6:	e7cf      	b.n	cd78 <__aeabi_dsub+0x1d8>
    cdd8:	4664      	mov	r4, ip
    cdda:	432c      	orrs	r4, r5
    cddc:	d100      	bne.n	cde0 <__aeabi_dsub+0x240>
    cdde:	e1b3      	b.n	d148 <__aeabi_dsub+0x5a8>
    cde0:	002c      	movs	r4, r5
    cde2:	4667      	mov	r7, ip
    cde4:	077b      	lsls	r3, r7, #29
    cde6:	d000      	beq.n	cdea <__aeabi_dsub+0x24a>
    cde8:	e762      	b.n	ccb0 <__aeabi_dsub+0x110>
    cdea:	0763      	lsls	r3, r4, #29
    cdec:	08ff      	lsrs	r7, r7, #3
    cdee:	431f      	orrs	r7, r3
    cdf0:	2501      	movs	r5, #1
    cdf2:	4643      	mov	r3, r8
    cdf4:	08e4      	lsrs	r4, r4, #3
    cdf6:	401d      	ands	r5, r3
    cdf8:	e793      	b.n	cd22 <__aeabi_dsub+0x182>
    cdfa:	2d00      	cmp	r5, #0
    cdfc:	d178      	bne.n	cef0 <__aeabi_dsub+0x350>
    cdfe:	1c75      	adds	r5, r6, #1
    ce00:	056d      	lsls	r5, r5, #21
    ce02:	0d6d      	lsrs	r5, r5, #21
    ce04:	2d01      	cmp	r5, #1
    ce06:	dc00      	bgt.n	ce0a <__aeabi_dsub+0x26a>
    ce08:	e0f2      	b.n	cff0 <__aeabi_dsub+0x450>
    ce0a:	4650      	mov	r0, sl
    ce0c:	1a80      	subs	r0, r0, r2
    ce0e:	4582      	cmp	sl, r0
    ce10:	41bf      	sbcs	r7, r7
    ce12:	1a65      	subs	r5, r4, r1
    ce14:	427f      	negs	r7, r7
    ce16:	1bed      	subs	r5, r5, r7
    ce18:	4684      	mov	ip, r0
    ce1a:	0228      	lsls	r0, r5, #8
    ce1c:	d400      	bmi.n	ce20 <__aeabi_dsub+0x280>
    ce1e:	e08c      	b.n	cf3a <__aeabi_dsub+0x39a>
    ce20:	4650      	mov	r0, sl
    ce22:	1a17      	subs	r7, r2, r0
    ce24:	42ba      	cmp	r2, r7
    ce26:	4192      	sbcs	r2, r2
    ce28:	1b0c      	subs	r4, r1, r4
    ce2a:	4255      	negs	r5, r2
    ce2c:	1b65      	subs	r5, r4, r5
    ce2e:	4698      	mov	r8, r3
    ce30:	e714      	b.n	cc5c <__aeabi_dsub+0xbc>
    ce32:	2501      	movs	r5, #1
    ce34:	4643      	mov	r3, r8
    ce36:	2400      	movs	r4, #0
    ce38:	401d      	ands	r5, r3
    ce3a:	2700      	movs	r7, #0
    ce3c:	e755      	b.n	ccea <__aeabi_dsub+0x14a>
    ce3e:	4c2a      	ldr	r4, [pc, #168]	; (cee8 <__aeabi_dsub+0x348>)
    ce40:	1af6      	subs	r6, r6, r3
    ce42:	402c      	ands	r4, r5
    ce44:	e732      	b.n	ccac <__aeabi_dsub+0x10c>
    ce46:	003d      	movs	r5, r7
    ce48:	3828      	subs	r0, #40	; 0x28
    ce4a:	4085      	lsls	r5, r0
    ce4c:	2700      	movs	r7, #0
    ce4e:	e717      	b.n	cc80 <__aeabi_dsub+0xe0>
    ce50:	0038      	movs	r0, r7
    ce52:	f7fe fd79 	bl	b948 <__clzsi2>
    ce56:	3020      	adds	r0, #32
    ce58:	e706      	b.n	cc68 <__aeabi_dsub+0xc8>
    ce5a:	430a      	orrs	r2, r1
    ce5c:	0017      	movs	r7, r2
    ce5e:	2100      	movs	r1, #0
    ce60:	1e7a      	subs	r2, r7, #1
    ce62:	4197      	sbcs	r7, r2
    ce64:	e6ee      	b.n	cc44 <__aeabi_dsub+0xa4>
    ce66:	2b00      	cmp	r3, #0
    ce68:	d000      	beq.n	ce6c <__aeabi_dsub+0x2cc>
    ce6a:	e0e5      	b.n	d038 <__aeabi_dsub+0x498>
    ce6c:	1c73      	adds	r3, r6, #1
    ce6e:	469c      	mov	ip, r3
    ce70:	055b      	lsls	r3, r3, #21
    ce72:	0d5b      	lsrs	r3, r3, #21
    ce74:	2b01      	cmp	r3, #1
    ce76:	dc00      	bgt.n	ce7a <__aeabi_dsub+0x2da>
    ce78:	e09f      	b.n	cfba <__aeabi_dsub+0x41a>
    ce7a:	4b1a      	ldr	r3, [pc, #104]	; (cee4 <__aeabi_dsub+0x344>)
    ce7c:	459c      	cmp	ip, r3
    ce7e:	d100      	bne.n	ce82 <__aeabi_dsub+0x2e2>
    ce80:	e0c5      	b.n	d00e <__aeabi_dsub+0x46e>
    ce82:	4452      	add	r2, sl
    ce84:	4552      	cmp	r2, sl
    ce86:	4180      	sbcs	r0, r0
    ce88:	1864      	adds	r4, r4, r1
    ce8a:	4240      	negs	r0, r0
    ce8c:	1824      	adds	r4, r4, r0
    ce8e:	07e7      	lsls	r7, r4, #31
    ce90:	0852      	lsrs	r2, r2, #1
    ce92:	4317      	orrs	r7, r2
    ce94:	0864      	lsrs	r4, r4, #1
    ce96:	4666      	mov	r6, ip
    ce98:	e708      	b.n	ccac <__aeabi_dsub+0x10c>
    ce9a:	4812      	ldr	r0, [pc, #72]	; (cee4 <__aeabi_dsub+0x344>)
    ce9c:	4285      	cmp	r5, r0
    ce9e:	d100      	bne.n	cea2 <__aeabi_dsub+0x302>
    cea0:	e085      	b.n	cfae <__aeabi_dsub+0x40e>
    cea2:	001d      	movs	r5, r3
    cea4:	e6bc      	b.n	cc20 <__aeabi_dsub+0x80>
    cea6:	0029      	movs	r1, r5
    cea8:	3e1f      	subs	r6, #31
    ceaa:	40f1      	lsrs	r1, r6
    ceac:	2b20      	cmp	r3, #32
    ceae:	d100      	bne.n	ceb2 <__aeabi_dsub+0x312>
    ceb0:	e07f      	b.n	cfb2 <__aeabi_dsub+0x412>
    ceb2:	2240      	movs	r2, #64	; 0x40
    ceb4:	1ad3      	subs	r3, r2, r3
    ceb6:	409d      	lsls	r5, r3
    ceb8:	432f      	orrs	r7, r5
    ceba:	1e7d      	subs	r5, r7, #1
    cebc:	41af      	sbcs	r7, r5
    cebe:	2400      	movs	r4, #0
    cec0:	430f      	orrs	r7, r1
    cec2:	2600      	movs	r6, #0
    cec4:	e78e      	b.n	cde4 <__aeabi_dsub+0x244>
    cec6:	002b      	movs	r3, r5
    cec8:	000f      	movs	r7, r1
    ceca:	3b20      	subs	r3, #32
    cecc:	40df      	lsrs	r7, r3
    cece:	2d20      	cmp	r5, #32
    ced0:	d071      	beq.n	cfb6 <__aeabi_dsub+0x416>
    ced2:	2340      	movs	r3, #64	; 0x40
    ced4:	1b5d      	subs	r5, r3, r5
    ced6:	40a9      	lsls	r1, r5
    ced8:	430a      	orrs	r2, r1
    ceda:	1e51      	subs	r1, r2, #1
    cedc:	418a      	sbcs	r2, r1
    cede:	2100      	movs	r1, #0
    cee0:	4317      	orrs	r7, r2
    cee2:	e6af      	b.n	cc44 <__aeabi_dsub+0xa4>
    cee4:	000007ff 	.word	0x000007ff
    cee8:	ff7fffff 	.word	0xff7fffff
    ceec:	800fffff 	.word	0x800fffff
    cef0:	2e00      	cmp	r6, #0
    cef2:	d03e      	beq.n	cf72 <__aeabi_dsub+0x3d2>
    cef4:	4eb3      	ldr	r6, [pc, #716]	; (d1c4 <__aeabi_dsub+0x624>)
    cef6:	45b4      	cmp	ip, r6
    cef8:	d045      	beq.n	cf86 <__aeabi_dsub+0x3e6>
    cefa:	2680      	movs	r6, #128	; 0x80
    cefc:	0436      	lsls	r6, r6, #16
    cefe:	426d      	negs	r5, r5
    cf00:	4334      	orrs	r4, r6
    cf02:	2d38      	cmp	r5, #56	; 0x38
    cf04:	dd00      	ble.n	cf08 <__aeabi_dsub+0x368>
    cf06:	e0a8      	b.n	d05a <__aeabi_dsub+0x4ba>
    cf08:	2d1f      	cmp	r5, #31
    cf0a:	dd00      	ble.n	cf0e <__aeabi_dsub+0x36e>
    cf0c:	e11f      	b.n	d14e <__aeabi_dsub+0x5ae>
    cf0e:	2620      	movs	r6, #32
    cf10:	0027      	movs	r7, r4
    cf12:	4650      	mov	r0, sl
    cf14:	1b76      	subs	r6, r6, r5
    cf16:	40b7      	lsls	r7, r6
    cf18:	40e8      	lsrs	r0, r5
    cf1a:	4307      	orrs	r7, r0
    cf1c:	4650      	mov	r0, sl
    cf1e:	40b0      	lsls	r0, r6
    cf20:	1e46      	subs	r6, r0, #1
    cf22:	41b0      	sbcs	r0, r6
    cf24:	40ec      	lsrs	r4, r5
    cf26:	4338      	orrs	r0, r7
    cf28:	1a17      	subs	r7, r2, r0
    cf2a:	42ba      	cmp	r2, r7
    cf2c:	4192      	sbcs	r2, r2
    cf2e:	1b0c      	subs	r4, r1, r4
    cf30:	4252      	negs	r2, r2
    cf32:	1aa4      	subs	r4, r4, r2
    cf34:	4666      	mov	r6, ip
    cf36:	4698      	mov	r8, r3
    cf38:	e68b      	b.n	cc52 <__aeabi_dsub+0xb2>
    cf3a:	4664      	mov	r4, ip
    cf3c:	4667      	mov	r7, ip
    cf3e:	432c      	orrs	r4, r5
    cf40:	d000      	beq.n	cf44 <__aeabi_dsub+0x3a4>
    cf42:	e68b      	b.n	cc5c <__aeabi_dsub+0xbc>
    cf44:	2500      	movs	r5, #0
    cf46:	2600      	movs	r6, #0
    cf48:	2700      	movs	r7, #0
    cf4a:	e6ea      	b.n	cd22 <__aeabi_dsub+0x182>
    cf4c:	001e      	movs	r6, r3
    cf4e:	e6ad      	b.n	ccac <__aeabi_dsub+0x10c>
    cf50:	2b1f      	cmp	r3, #31
    cf52:	dc60      	bgt.n	d016 <__aeabi_dsub+0x476>
    cf54:	2720      	movs	r7, #32
    cf56:	1af8      	subs	r0, r7, r3
    cf58:	000f      	movs	r7, r1
    cf5a:	4684      	mov	ip, r0
    cf5c:	4087      	lsls	r7, r0
    cf5e:	0010      	movs	r0, r2
    cf60:	40d8      	lsrs	r0, r3
    cf62:	4307      	orrs	r7, r0
    cf64:	4660      	mov	r0, ip
    cf66:	4082      	lsls	r2, r0
    cf68:	1e50      	subs	r0, r2, #1
    cf6a:	4182      	sbcs	r2, r0
    cf6c:	40d9      	lsrs	r1, r3
    cf6e:	4317      	orrs	r7, r2
    cf70:	e6f5      	b.n	cd5e <__aeabi_dsub+0x1be>
    cf72:	0026      	movs	r6, r4
    cf74:	4650      	mov	r0, sl
    cf76:	4306      	orrs	r6, r0
    cf78:	d005      	beq.n	cf86 <__aeabi_dsub+0x3e6>
    cf7a:	43ed      	mvns	r5, r5
    cf7c:	2d00      	cmp	r5, #0
    cf7e:	d0d3      	beq.n	cf28 <__aeabi_dsub+0x388>
    cf80:	4e90      	ldr	r6, [pc, #576]	; (d1c4 <__aeabi_dsub+0x624>)
    cf82:	45b4      	cmp	ip, r6
    cf84:	d1bd      	bne.n	cf02 <__aeabi_dsub+0x362>
    cf86:	000c      	movs	r4, r1
    cf88:	0017      	movs	r7, r2
    cf8a:	4666      	mov	r6, ip
    cf8c:	4698      	mov	r8, r3
    cf8e:	e68d      	b.n	ccac <__aeabi_dsub+0x10c>
    cf90:	488c      	ldr	r0, [pc, #560]	; (d1c4 <__aeabi_dsub+0x624>)
    cf92:	4283      	cmp	r3, r0
    cf94:	d00b      	beq.n	cfae <__aeabi_dsub+0x40e>
    cf96:	4663      	mov	r3, ip
    cf98:	e6d9      	b.n	cd4e <__aeabi_dsub+0x1ae>
    cf9a:	2d00      	cmp	r5, #0
    cf9c:	d000      	beq.n	cfa0 <__aeabi_dsub+0x400>
    cf9e:	e096      	b.n	d0ce <__aeabi_dsub+0x52e>
    cfa0:	0008      	movs	r0, r1
    cfa2:	4310      	orrs	r0, r2
    cfa4:	d100      	bne.n	cfa8 <__aeabi_dsub+0x408>
    cfa6:	e0e2      	b.n	d16e <__aeabi_dsub+0x5ce>
    cfa8:	000c      	movs	r4, r1
    cfaa:	0017      	movs	r7, r2
    cfac:	4698      	mov	r8, r3
    cfae:	4e85      	ldr	r6, [pc, #532]	; (d1c4 <__aeabi_dsub+0x624>)
    cfb0:	e67c      	b.n	ccac <__aeabi_dsub+0x10c>
    cfb2:	2500      	movs	r5, #0
    cfb4:	e780      	b.n	ceb8 <__aeabi_dsub+0x318>
    cfb6:	2100      	movs	r1, #0
    cfb8:	e78e      	b.n	ced8 <__aeabi_dsub+0x338>
    cfba:	0023      	movs	r3, r4
    cfbc:	4650      	mov	r0, sl
    cfbe:	4303      	orrs	r3, r0
    cfc0:	2e00      	cmp	r6, #0
    cfc2:	d000      	beq.n	cfc6 <__aeabi_dsub+0x426>
    cfc4:	e0a8      	b.n	d118 <__aeabi_dsub+0x578>
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d100      	bne.n	cfcc <__aeabi_dsub+0x42c>
    cfca:	e0de      	b.n	d18a <__aeabi_dsub+0x5ea>
    cfcc:	000b      	movs	r3, r1
    cfce:	4313      	orrs	r3, r2
    cfd0:	d100      	bne.n	cfd4 <__aeabi_dsub+0x434>
    cfd2:	e66b      	b.n	ccac <__aeabi_dsub+0x10c>
    cfd4:	4452      	add	r2, sl
    cfd6:	4552      	cmp	r2, sl
    cfd8:	4180      	sbcs	r0, r0
    cfda:	1864      	adds	r4, r4, r1
    cfdc:	4240      	negs	r0, r0
    cfde:	1824      	adds	r4, r4, r0
    cfe0:	0017      	movs	r7, r2
    cfe2:	0223      	lsls	r3, r4, #8
    cfe4:	d400      	bmi.n	cfe8 <__aeabi_dsub+0x448>
    cfe6:	e6fd      	b.n	cde4 <__aeabi_dsub+0x244>
    cfe8:	4b77      	ldr	r3, [pc, #476]	; (d1c8 <__aeabi_dsub+0x628>)
    cfea:	4666      	mov	r6, ip
    cfec:	401c      	ands	r4, r3
    cfee:	e65d      	b.n	ccac <__aeabi_dsub+0x10c>
    cff0:	0025      	movs	r5, r4
    cff2:	4650      	mov	r0, sl
    cff4:	4305      	orrs	r5, r0
    cff6:	2e00      	cmp	r6, #0
    cff8:	d1cf      	bne.n	cf9a <__aeabi_dsub+0x3fa>
    cffa:	2d00      	cmp	r5, #0
    cffc:	d14f      	bne.n	d09e <__aeabi_dsub+0x4fe>
    cffe:	000c      	movs	r4, r1
    d000:	4314      	orrs	r4, r2
    d002:	d100      	bne.n	d006 <__aeabi_dsub+0x466>
    d004:	e0a0      	b.n	d148 <__aeabi_dsub+0x5a8>
    d006:	000c      	movs	r4, r1
    d008:	0017      	movs	r7, r2
    d00a:	4698      	mov	r8, r3
    d00c:	e64e      	b.n	ccac <__aeabi_dsub+0x10c>
    d00e:	4666      	mov	r6, ip
    d010:	2400      	movs	r4, #0
    d012:	2700      	movs	r7, #0
    d014:	e685      	b.n	cd22 <__aeabi_dsub+0x182>
    d016:	001f      	movs	r7, r3
    d018:	0008      	movs	r0, r1
    d01a:	3f20      	subs	r7, #32
    d01c:	40f8      	lsrs	r0, r7
    d01e:	0007      	movs	r7, r0
    d020:	2b20      	cmp	r3, #32
    d022:	d100      	bne.n	d026 <__aeabi_dsub+0x486>
    d024:	e08e      	b.n	d144 <__aeabi_dsub+0x5a4>
    d026:	2040      	movs	r0, #64	; 0x40
    d028:	1ac3      	subs	r3, r0, r3
    d02a:	4099      	lsls	r1, r3
    d02c:	430a      	orrs	r2, r1
    d02e:	1e51      	subs	r1, r2, #1
    d030:	418a      	sbcs	r2, r1
    d032:	2100      	movs	r1, #0
    d034:	4317      	orrs	r7, r2
    d036:	e692      	b.n	cd5e <__aeabi_dsub+0x1be>
    d038:	2e00      	cmp	r6, #0
    d03a:	d114      	bne.n	d066 <__aeabi_dsub+0x4c6>
    d03c:	0026      	movs	r6, r4
    d03e:	4650      	mov	r0, sl
    d040:	4306      	orrs	r6, r0
    d042:	d062      	beq.n	d10a <__aeabi_dsub+0x56a>
    d044:	43db      	mvns	r3, r3
    d046:	2b00      	cmp	r3, #0
    d048:	d15c      	bne.n	d104 <__aeabi_dsub+0x564>
    d04a:	1887      	adds	r7, r0, r2
    d04c:	4297      	cmp	r7, r2
    d04e:	4192      	sbcs	r2, r2
    d050:	1864      	adds	r4, r4, r1
    d052:	4252      	negs	r2, r2
    d054:	18a4      	adds	r4, r4, r2
    d056:	4666      	mov	r6, ip
    d058:	e687      	b.n	cd6a <__aeabi_dsub+0x1ca>
    d05a:	4650      	mov	r0, sl
    d05c:	4320      	orrs	r0, r4
    d05e:	1e44      	subs	r4, r0, #1
    d060:	41a0      	sbcs	r0, r4
    d062:	2400      	movs	r4, #0
    d064:	e760      	b.n	cf28 <__aeabi_dsub+0x388>
    d066:	4e57      	ldr	r6, [pc, #348]	; (d1c4 <__aeabi_dsub+0x624>)
    d068:	45b4      	cmp	ip, r6
    d06a:	d04e      	beq.n	d10a <__aeabi_dsub+0x56a>
    d06c:	2680      	movs	r6, #128	; 0x80
    d06e:	0436      	lsls	r6, r6, #16
    d070:	425b      	negs	r3, r3
    d072:	4334      	orrs	r4, r6
    d074:	2b38      	cmp	r3, #56	; 0x38
    d076:	dd00      	ble.n	d07a <__aeabi_dsub+0x4da>
    d078:	e07f      	b.n	d17a <__aeabi_dsub+0x5da>
    d07a:	2b1f      	cmp	r3, #31
    d07c:	dd00      	ble.n	d080 <__aeabi_dsub+0x4e0>
    d07e:	e08b      	b.n	d198 <__aeabi_dsub+0x5f8>
    d080:	2620      	movs	r6, #32
    d082:	0027      	movs	r7, r4
    d084:	4650      	mov	r0, sl
    d086:	1af6      	subs	r6, r6, r3
    d088:	40b7      	lsls	r7, r6
    d08a:	40d8      	lsrs	r0, r3
    d08c:	4307      	orrs	r7, r0
    d08e:	4650      	mov	r0, sl
    d090:	40b0      	lsls	r0, r6
    d092:	1e46      	subs	r6, r0, #1
    d094:	41b0      	sbcs	r0, r6
    d096:	4307      	orrs	r7, r0
    d098:	40dc      	lsrs	r4, r3
    d09a:	18bf      	adds	r7, r7, r2
    d09c:	e7d6      	b.n	d04c <__aeabi_dsub+0x4ac>
    d09e:	000d      	movs	r5, r1
    d0a0:	4315      	orrs	r5, r2
    d0a2:	d100      	bne.n	d0a6 <__aeabi_dsub+0x506>
    d0a4:	e602      	b.n	ccac <__aeabi_dsub+0x10c>
    d0a6:	4650      	mov	r0, sl
    d0a8:	1a80      	subs	r0, r0, r2
    d0aa:	4582      	cmp	sl, r0
    d0ac:	41bf      	sbcs	r7, r7
    d0ae:	1a65      	subs	r5, r4, r1
    d0b0:	427f      	negs	r7, r7
    d0b2:	1bed      	subs	r5, r5, r7
    d0b4:	4684      	mov	ip, r0
    d0b6:	0228      	lsls	r0, r5, #8
    d0b8:	d400      	bmi.n	d0bc <__aeabi_dsub+0x51c>
    d0ba:	e68d      	b.n	cdd8 <__aeabi_dsub+0x238>
    d0bc:	4650      	mov	r0, sl
    d0be:	1a17      	subs	r7, r2, r0
    d0c0:	42ba      	cmp	r2, r7
    d0c2:	4192      	sbcs	r2, r2
    d0c4:	1b0c      	subs	r4, r1, r4
    d0c6:	4252      	negs	r2, r2
    d0c8:	1aa4      	subs	r4, r4, r2
    d0ca:	4698      	mov	r8, r3
    d0cc:	e5ee      	b.n	ccac <__aeabi_dsub+0x10c>
    d0ce:	000d      	movs	r5, r1
    d0d0:	4315      	orrs	r5, r2
    d0d2:	d100      	bne.n	d0d6 <__aeabi_dsub+0x536>
    d0d4:	e76b      	b.n	cfae <__aeabi_dsub+0x40e>
    d0d6:	4650      	mov	r0, sl
    d0d8:	0767      	lsls	r7, r4, #29
    d0da:	08c0      	lsrs	r0, r0, #3
    d0dc:	4307      	orrs	r7, r0
    d0de:	2080      	movs	r0, #128	; 0x80
    d0e0:	08e4      	lsrs	r4, r4, #3
    d0e2:	0300      	lsls	r0, r0, #12
    d0e4:	4204      	tst	r4, r0
    d0e6:	d007      	beq.n	d0f8 <__aeabi_dsub+0x558>
    d0e8:	08cd      	lsrs	r5, r1, #3
    d0ea:	4205      	tst	r5, r0
    d0ec:	d104      	bne.n	d0f8 <__aeabi_dsub+0x558>
    d0ee:	002c      	movs	r4, r5
    d0f0:	4698      	mov	r8, r3
    d0f2:	08d7      	lsrs	r7, r2, #3
    d0f4:	0749      	lsls	r1, r1, #29
    d0f6:	430f      	orrs	r7, r1
    d0f8:	0f7b      	lsrs	r3, r7, #29
    d0fa:	00e4      	lsls	r4, r4, #3
    d0fc:	431c      	orrs	r4, r3
    d0fe:	00ff      	lsls	r7, r7, #3
    d100:	4e30      	ldr	r6, [pc, #192]	; (d1c4 <__aeabi_dsub+0x624>)
    d102:	e5d3      	b.n	ccac <__aeabi_dsub+0x10c>
    d104:	4e2f      	ldr	r6, [pc, #188]	; (d1c4 <__aeabi_dsub+0x624>)
    d106:	45b4      	cmp	ip, r6
    d108:	d1b4      	bne.n	d074 <__aeabi_dsub+0x4d4>
    d10a:	000c      	movs	r4, r1
    d10c:	0017      	movs	r7, r2
    d10e:	4666      	mov	r6, ip
    d110:	e5cc      	b.n	ccac <__aeabi_dsub+0x10c>
    d112:	2700      	movs	r7, #0
    d114:	2400      	movs	r4, #0
    d116:	e5e8      	b.n	ccea <__aeabi_dsub+0x14a>
    d118:	2b00      	cmp	r3, #0
    d11a:	d039      	beq.n	d190 <__aeabi_dsub+0x5f0>
    d11c:	000b      	movs	r3, r1
    d11e:	4313      	orrs	r3, r2
    d120:	d100      	bne.n	d124 <__aeabi_dsub+0x584>
    d122:	e744      	b.n	cfae <__aeabi_dsub+0x40e>
    d124:	08c0      	lsrs	r0, r0, #3
    d126:	0767      	lsls	r7, r4, #29
    d128:	4307      	orrs	r7, r0
    d12a:	2080      	movs	r0, #128	; 0x80
    d12c:	08e4      	lsrs	r4, r4, #3
    d12e:	0300      	lsls	r0, r0, #12
    d130:	4204      	tst	r4, r0
    d132:	d0e1      	beq.n	d0f8 <__aeabi_dsub+0x558>
    d134:	08cb      	lsrs	r3, r1, #3
    d136:	4203      	tst	r3, r0
    d138:	d1de      	bne.n	d0f8 <__aeabi_dsub+0x558>
    d13a:	08d7      	lsrs	r7, r2, #3
    d13c:	0749      	lsls	r1, r1, #29
    d13e:	430f      	orrs	r7, r1
    d140:	001c      	movs	r4, r3
    d142:	e7d9      	b.n	d0f8 <__aeabi_dsub+0x558>
    d144:	2100      	movs	r1, #0
    d146:	e771      	b.n	d02c <__aeabi_dsub+0x48c>
    d148:	2500      	movs	r5, #0
    d14a:	2700      	movs	r7, #0
    d14c:	e5e9      	b.n	cd22 <__aeabi_dsub+0x182>
    d14e:	002e      	movs	r6, r5
    d150:	0027      	movs	r7, r4
    d152:	3e20      	subs	r6, #32
    d154:	40f7      	lsrs	r7, r6
    d156:	2d20      	cmp	r5, #32
    d158:	d02f      	beq.n	d1ba <__aeabi_dsub+0x61a>
    d15a:	2640      	movs	r6, #64	; 0x40
    d15c:	1b75      	subs	r5, r6, r5
    d15e:	40ac      	lsls	r4, r5
    d160:	4650      	mov	r0, sl
    d162:	4320      	orrs	r0, r4
    d164:	1e44      	subs	r4, r0, #1
    d166:	41a0      	sbcs	r0, r4
    d168:	2400      	movs	r4, #0
    d16a:	4338      	orrs	r0, r7
    d16c:	e6dc      	b.n	cf28 <__aeabi_dsub+0x388>
    d16e:	2480      	movs	r4, #128	; 0x80
    d170:	2500      	movs	r5, #0
    d172:	0324      	lsls	r4, r4, #12
    d174:	4e13      	ldr	r6, [pc, #76]	; (d1c4 <__aeabi_dsub+0x624>)
    d176:	2700      	movs	r7, #0
    d178:	e5d3      	b.n	cd22 <__aeabi_dsub+0x182>
    d17a:	4650      	mov	r0, sl
    d17c:	4320      	orrs	r0, r4
    d17e:	0007      	movs	r7, r0
    d180:	1e78      	subs	r0, r7, #1
    d182:	4187      	sbcs	r7, r0
    d184:	2400      	movs	r4, #0
    d186:	18bf      	adds	r7, r7, r2
    d188:	e760      	b.n	d04c <__aeabi_dsub+0x4ac>
    d18a:	000c      	movs	r4, r1
    d18c:	0017      	movs	r7, r2
    d18e:	e58d      	b.n	ccac <__aeabi_dsub+0x10c>
    d190:	000c      	movs	r4, r1
    d192:	0017      	movs	r7, r2
    d194:	4e0b      	ldr	r6, [pc, #44]	; (d1c4 <__aeabi_dsub+0x624>)
    d196:	e589      	b.n	ccac <__aeabi_dsub+0x10c>
    d198:	001e      	movs	r6, r3
    d19a:	0027      	movs	r7, r4
    d19c:	3e20      	subs	r6, #32
    d19e:	40f7      	lsrs	r7, r6
    d1a0:	2b20      	cmp	r3, #32
    d1a2:	d00c      	beq.n	d1be <__aeabi_dsub+0x61e>
    d1a4:	2640      	movs	r6, #64	; 0x40
    d1a6:	1af3      	subs	r3, r6, r3
    d1a8:	409c      	lsls	r4, r3
    d1aa:	4650      	mov	r0, sl
    d1ac:	4320      	orrs	r0, r4
    d1ae:	1e44      	subs	r4, r0, #1
    d1b0:	41a0      	sbcs	r0, r4
    d1b2:	4307      	orrs	r7, r0
    d1b4:	2400      	movs	r4, #0
    d1b6:	18bf      	adds	r7, r7, r2
    d1b8:	e748      	b.n	d04c <__aeabi_dsub+0x4ac>
    d1ba:	2400      	movs	r4, #0
    d1bc:	e7d0      	b.n	d160 <__aeabi_dsub+0x5c0>
    d1be:	2400      	movs	r4, #0
    d1c0:	e7f3      	b.n	d1aa <__aeabi_dsub+0x60a>
    d1c2:	46c0      	nop			; (mov r8, r8)
    d1c4:	000007ff 	.word	0x000007ff
    d1c8:	ff7fffff 	.word	0xff7fffff

0000d1cc <__aeabi_d2iz>:
    d1cc:	b530      	push	{r4, r5, lr}
    d1ce:	4d13      	ldr	r5, [pc, #76]	; (d21c <__aeabi_d2iz+0x50>)
    d1d0:	030a      	lsls	r2, r1, #12
    d1d2:	004b      	lsls	r3, r1, #1
    d1d4:	0b12      	lsrs	r2, r2, #12
    d1d6:	0d5b      	lsrs	r3, r3, #21
    d1d8:	0fc9      	lsrs	r1, r1, #31
    d1da:	2400      	movs	r4, #0
    d1dc:	42ab      	cmp	r3, r5
    d1de:	dd10      	ble.n	d202 <__aeabi_d2iz+0x36>
    d1e0:	4c0f      	ldr	r4, [pc, #60]	; (d220 <__aeabi_d2iz+0x54>)
    d1e2:	42a3      	cmp	r3, r4
    d1e4:	dc0f      	bgt.n	d206 <__aeabi_d2iz+0x3a>
    d1e6:	2480      	movs	r4, #128	; 0x80
    d1e8:	4d0e      	ldr	r5, [pc, #56]	; (d224 <__aeabi_d2iz+0x58>)
    d1ea:	0364      	lsls	r4, r4, #13
    d1ec:	4322      	orrs	r2, r4
    d1ee:	1aed      	subs	r5, r5, r3
    d1f0:	2d1f      	cmp	r5, #31
    d1f2:	dd0b      	ble.n	d20c <__aeabi_d2iz+0x40>
    d1f4:	480c      	ldr	r0, [pc, #48]	; (d228 <__aeabi_d2iz+0x5c>)
    d1f6:	1ac3      	subs	r3, r0, r3
    d1f8:	40da      	lsrs	r2, r3
    d1fa:	4254      	negs	r4, r2
    d1fc:	2900      	cmp	r1, #0
    d1fe:	d100      	bne.n	d202 <__aeabi_d2iz+0x36>
    d200:	0014      	movs	r4, r2
    d202:	0020      	movs	r0, r4
    d204:	bd30      	pop	{r4, r5, pc}
    d206:	4b09      	ldr	r3, [pc, #36]	; (d22c <__aeabi_d2iz+0x60>)
    d208:	18cc      	adds	r4, r1, r3
    d20a:	e7fa      	b.n	d202 <__aeabi_d2iz+0x36>
    d20c:	4c08      	ldr	r4, [pc, #32]	; (d230 <__aeabi_d2iz+0x64>)
    d20e:	40e8      	lsrs	r0, r5
    d210:	46a4      	mov	ip, r4
    d212:	4463      	add	r3, ip
    d214:	409a      	lsls	r2, r3
    d216:	4302      	orrs	r2, r0
    d218:	e7ef      	b.n	d1fa <__aeabi_d2iz+0x2e>
    d21a:	46c0      	nop			; (mov r8, r8)
    d21c:	000003fe 	.word	0x000003fe
    d220:	0000041d 	.word	0x0000041d
    d224:	00000433 	.word	0x00000433
    d228:	00000413 	.word	0x00000413
    d22c:	7fffffff 	.word	0x7fffffff
    d230:	fffffbed 	.word	0xfffffbed

0000d234 <__aeabi_ui2d>:
    d234:	b510      	push	{r4, lr}
    d236:	1e04      	subs	r4, r0, #0
    d238:	d028      	beq.n	d28c <__aeabi_ui2d+0x58>
    d23a:	f7fe fb85 	bl	b948 <__clzsi2>
    d23e:	4b15      	ldr	r3, [pc, #84]	; (d294 <__aeabi_ui2d+0x60>)
    d240:	4a15      	ldr	r2, [pc, #84]	; (d298 <__aeabi_ui2d+0x64>)
    d242:	1a1b      	subs	r3, r3, r0
    d244:	1ad2      	subs	r2, r2, r3
    d246:	2a1f      	cmp	r2, #31
    d248:	dd15      	ble.n	d276 <__aeabi_ui2d+0x42>
    d24a:	4a14      	ldr	r2, [pc, #80]	; (d29c <__aeabi_ui2d+0x68>)
    d24c:	1ad2      	subs	r2, r2, r3
    d24e:	4094      	lsls	r4, r2
    d250:	2200      	movs	r2, #0
    d252:	0324      	lsls	r4, r4, #12
    d254:	055b      	lsls	r3, r3, #21
    d256:	0b24      	lsrs	r4, r4, #12
    d258:	0d5b      	lsrs	r3, r3, #21
    d25a:	2100      	movs	r1, #0
    d25c:	0010      	movs	r0, r2
    d25e:	0324      	lsls	r4, r4, #12
    d260:	0d0a      	lsrs	r2, r1, #20
    d262:	0b24      	lsrs	r4, r4, #12
    d264:	0512      	lsls	r2, r2, #20
    d266:	4322      	orrs	r2, r4
    d268:	4c0d      	ldr	r4, [pc, #52]	; (d2a0 <__aeabi_ui2d+0x6c>)
    d26a:	051b      	lsls	r3, r3, #20
    d26c:	4022      	ands	r2, r4
    d26e:	4313      	orrs	r3, r2
    d270:	005b      	lsls	r3, r3, #1
    d272:	0859      	lsrs	r1, r3, #1
    d274:	bd10      	pop	{r4, pc}
    d276:	0021      	movs	r1, r4
    d278:	4091      	lsls	r1, r2
    d27a:	000a      	movs	r2, r1
    d27c:	210b      	movs	r1, #11
    d27e:	1a08      	subs	r0, r1, r0
    d280:	40c4      	lsrs	r4, r0
    d282:	055b      	lsls	r3, r3, #21
    d284:	0324      	lsls	r4, r4, #12
    d286:	0b24      	lsrs	r4, r4, #12
    d288:	0d5b      	lsrs	r3, r3, #21
    d28a:	e7e6      	b.n	d25a <__aeabi_ui2d+0x26>
    d28c:	2300      	movs	r3, #0
    d28e:	2400      	movs	r4, #0
    d290:	2200      	movs	r2, #0
    d292:	e7e2      	b.n	d25a <__aeabi_ui2d+0x26>
    d294:	0000041e 	.word	0x0000041e
    d298:	00000433 	.word	0x00000433
    d29c:	00000413 	.word	0x00000413
    d2a0:	800fffff 	.word	0x800fffff

0000d2a4 <atoi>:
    d2a4:	b510      	push	{r4, lr}
    d2a6:	220a      	movs	r2, #10
    d2a8:	2100      	movs	r1, #0
    d2aa:	f000 fbc5 	bl	da38 <strtol>
    d2ae:	bd10      	pop	{r4, pc}

0000d2b0 <__libc_init_array>:
    d2b0:	b570      	push	{r4, r5, r6, lr}
    d2b2:	2600      	movs	r6, #0
    d2b4:	4d0c      	ldr	r5, [pc, #48]	; (d2e8 <__libc_init_array+0x38>)
    d2b6:	4c0d      	ldr	r4, [pc, #52]	; (d2ec <__libc_init_array+0x3c>)
    d2b8:	1b64      	subs	r4, r4, r5
    d2ba:	10a4      	asrs	r4, r4, #2
    d2bc:	42a6      	cmp	r6, r4
    d2be:	d109      	bne.n	d2d4 <__libc_init_array+0x24>
    d2c0:	2600      	movs	r6, #0
    d2c2:	f003 fadb 	bl	1087c <_init>
    d2c6:	4d0a      	ldr	r5, [pc, #40]	; (d2f0 <__libc_init_array+0x40>)
    d2c8:	4c0a      	ldr	r4, [pc, #40]	; (d2f4 <__libc_init_array+0x44>)
    d2ca:	1b64      	subs	r4, r4, r5
    d2cc:	10a4      	asrs	r4, r4, #2
    d2ce:	42a6      	cmp	r6, r4
    d2d0:	d105      	bne.n	d2de <__libc_init_array+0x2e>
    d2d2:	bd70      	pop	{r4, r5, r6, pc}
    d2d4:	00b3      	lsls	r3, r6, #2
    d2d6:	58eb      	ldr	r3, [r5, r3]
    d2d8:	4798      	blx	r3
    d2da:	3601      	adds	r6, #1
    d2dc:	e7ee      	b.n	d2bc <__libc_init_array+0xc>
    d2de:	00b3      	lsls	r3, r6, #2
    d2e0:	58eb      	ldr	r3, [r5, r3]
    d2e2:	4798      	blx	r3
    d2e4:	3601      	adds	r6, #1
    d2e6:	e7f2      	b.n	d2ce <__libc_init_array+0x1e>
    d2e8:	00010888 	.word	0x00010888
    d2ec:	00010888 	.word	0x00010888
    d2f0:	00010888 	.word	0x00010888
    d2f4:	0001088c 	.word	0x0001088c

0000d2f8 <malloc>:
    d2f8:	b510      	push	{r4, lr}
    d2fa:	4b03      	ldr	r3, [pc, #12]	; (d308 <malloc+0x10>)
    d2fc:	0001      	movs	r1, r0
    d2fe:	6818      	ldr	r0, [r3, #0]
    d300:	f000 f88a 	bl	d418 <_malloc_r>
    d304:	bd10      	pop	{r4, pc}
    d306:	46c0      	nop			; (mov r8, r8)
    d308:	20000190 	.word	0x20000190

0000d30c <free>:
    d30c:	b510      	push	{r4, lr}
    d30e:	4b03      	ldr	r3, [pc, #12]	; (d31c <free+0x10>)
    d310:	0001      	movs	r1, r0
    d312:	6818      	ldr	r0, [r3, #0]
    d314:	f000 f836 	bl	d384 <_free_r>
    d318:	bd10      	pop	{r4, pc}
    d31a:	46c0      	nop			; (mov r8, r8)
    d31c:	20000190 	.word	0x20000190

0000d320 <memcmp>:
    d320:	b530      	push	{r4, r5, lr}
    d322:	2400      	movs	r4, #0
    d324:	42a2      	cmp	r2, r4
    d326:	d101      	bne.n	d32c <memcmp+0xc>
    d328:	2000      	movs	r0, #0
    d32a:	e005      	b.n	d338 <memcmp+0x18>
    d32c:	5d03      	ldrb	r3, [r0, r4]
    d32e:	1c65      	adds	r5, r4, #1
    d330:	5d0c      	ldrb	r4, [r1, r4]
    d332:	42a3      	cmp	r3, r4
    d334:	d001      	beq.n	d33a <memcmp+0x1a>
    d336:	1b18      	subs	r0, r3, r4
    d338:	bd30      	pop	{r4, r5, pc}
    d33a:	002c      	movs	r4, r5
    d33c:	e7f2      	b.n	d324 <memcmp+0x4>

0000d33e <memcpy>:
    d33e:	2300      	movs	r3, #0
    d340:	b510      	push	{r4, lr}
    d342:	429a      	cmp	r2, r3
    d344:	d100      	bne.n	d348 <memcpy+0xa>
    d346:	bd10      	pop	{r4, pc}
    d348:	5ccc      	ldrb	r4, [r1, r3]
    d34a:	54c4      	strb	r4, [r0, r3]
    d34c:	3301      	adds	r3, #1
    d34e:	e7f8      	b.n	d342 <memcpy+0x4>

0000d350 <memmove>:
    d350:	b510      	push	{r4, lr}
    d352:	4288      	cmp	r0, r1
    d354:	d902      	bls.n	d35c <memmove+0xc>
    d356:	188b      	adds	r3, r1, r2
    d358:	4298      	cmp	r0, r3
    d35a:	d308      	bcc.n	d36e <memmove+0x1e>
    d35c:	2300      	movs	r3, #0
    d35e:	429a      	cmp	r2, r3
    d360:	d007      	beq.n	d372 <memmove+0x22>
    d362:	5ccc      	ldrb	r4, [r1, r3]
    d364:	54c4      	strb	r4, [r0, r3]
    d366:	3301      	adds	r3, #1
    d368:	e7f9      	b.n	d35e <memmove+0xe>
    d36a:	5c8b      	ldrb	r3, [r1, r2]
    d36c:	5483      	strb	r3, [r0, r2]
    d36e:	3a01      	subs	r2, #1
    d370:	d2fb      	bcs.n	d36a <memmove+0x1a>
    d372:	bd10      	pop	{r4, pc}

0000d374 <memset>:
    d374:	0003      	movs	r3, r0
    d376:	1882      	adds	r2, r0, r2
    d378:	4293      	cmp	r3, r2
    d37a:	d100      	bne.n	d37e <memset+0xa>
    d37c:	4770      	bx	lr
    d37e:	7019      	strb	r1, [r3, #0]
    d380:	3301      	adds	r3, #1
    d382:	e7f9      	b.n	d378 <memset+0x4>

0000d384 <_free_r>:
    d384:	b570      	push	{r4, r5, r6, lr}
    d386:	0005      	movs	r5, r0
    d388:	2900      	cmp	r1, #0
    d38a:	d010      	beq.n	d3ae <_free_r+0x2a>
    d38c:	1f0c      	subs	r4, r1, #4
    d38e:	6823      	ldr	r3, [r4, #0]
    d390:	2b00      	cmp	r3, #0
    d392:	da00      	bge.n	d396 <_free_r+0x12>
    d394:	18e4      	adds	r4, r4, r3
    d396:	0028      	movs	r0, r5
    d398:	f000 fe3c 	bl	e014 <__malloc_lock>
    d39c:	4a1d      	ldr	r2, [pc, #116]	; (d414 <_free_r+0x90>)
    d39e:	6813      	ldr	r3, [r2, #0]
    d3a0:	2b00      	cmp	r3, #0
    d3a2:	d105      	bne.n	d3b0 <_free_r+0x2c>
    d3a4:	6063      	str	r3, [r4, #4]
    d3a6:	6014      	str	r4, [r2, #0]
    d3a8:	0028      	movs	r0, r5
    d3aa:	f000 fe34 	bl	e016 <__malloc_unlock>
    d3ae:	bd70      	pop	{r4, r5, r6, pc}
    d3b0:	42a3      	cmp	r3, r4
    d3b2:	d909      	bls.n	d3c8 <_free_r+0x44>
    d3b4:	6821      	ldr	r1, [r4, #0]
    d3b6:	1860      	adds	r0, r4, r1
    d3b8:	4283      	cmp	r3, r0
    d3ba:	d1f3      	bne.n	d3a4 <_free_r+0x20>
    d3bc:	6818      	ldr	r0, [r3, #0]
    d3be:	685b      	ldr	r3, [r3, #4]
    d3c0:	1841      	adds	r1, r0, r1
    d3c2:	6021      	str	r1, [r4, #0]
    d3c4:	e7ee      	b.n	d3a4 <_free_r+0x20>
    d3c6:	0013      	movs	r3, r2
    d3c8:	685a      	ldr	r2, [r3, #4]
    d3ca:	2a00      	cmp	r2, #0
    d3cc:	d001      	beq.n	d3d2 <_free_r+0x4e>
    d3ce:	42a2      	cmp	r2, r4
    d3d0:	d9f9      	bls.n	d3c6 <_free_r+0x42>
    d3d2:	6819      	ldr	r1, [r3, #0]
    d3d4:	1858      	adds	r0, r3, r1
    d3d6:	42a0      	cmp	r0, r4
    d3d8:	d10b      	bne.n	d3f2 <_free_r+0x6e>
    d3da:	6820      	ldr	r0, [r4, #0]
    d3dc:	1809      	adds	r1, r1, r0
    d3de:	1858      	adds	r0, r3, r1
    d3e0:	6019      	str	r1, [r3, #0]
    d3e2:	4282      	cmp	r2, r0
    d3e4:	d1e0      	bne.n	d3a8 <_free_r+0x24>
    d3e6:	6810      	ldr	r0, [r2, #0]
    d3e8:	6852      	ldr	r2, [r2, #4]
    d3ea:	1841      	adds	r1, r0, r1
    d3ec:	6019      	str	r1, [r3, #0]
    d3ee:	605a      	str	r2, [r3, #4]
    d3f0:	e7da      	b.n	d3a8 <_free_r+0x24>
    d3f2:	42a0      	cmp	r0, r4
    d3f4:	d902      	bls.n	d3fc <_free_r+0x78>
    d3f6:	230c      	movs	r3, #12
    d3f8:	602b      	str	r3, [r5, #0]
    d3fa:	e7d5      	b.n	d3a8 <_free_r+0x24>
    d3fc:	6821      	ldr	r1, [r4, #0]
    d3fe:	1860      	adds	r0, r4, r1
    d400:	4282      	cmp	r2, r0
    d402:	d103      	bne.n	d40c <_free_r+0x88>
    d404:	6810      	ldr	r0, [r2, #0]
    d406:	6852      	ldr	r2, [r2, #4]
    d408:	1841      	adds	r1, r0, r1
    d40a:	6021      	str	r1, [r4, #0]
    d40c:	6062      	str	r2, [r4, #4]
    d40e:	605c      	str	r4, [r3, #4]
    d410:	e7ca      	b.n	d3a8 <_free_r+0x24>
    d412:	46c0      	nop			; (mov r8, r8)
    d414:	200013e4 	.word	0x200013e4

0000d418 <_malloc_r>:
    d418:	2303      	movs	r3, #3
    d41a:	b570      	push	{r4, r5, r6, lr}
    d41c:	1ccd      	adds	r5, r1, #3
    d41e:	439d      	bics	r5, r3
    d420:	3508      	adds	r5, #8
    d422:	0006      	movs	r6, r0
    d424:	2d0c      	cmp	r5, #12
    d426:	d21e      	bcs.n	d466 <_malloc_r+0x4e>
    d428:	250c      	movs	r5, #12
    d42a:	42a9      	cmp	r1, r5
    d42c:	d81d      	bhi.n	d46a <_malloc_r+0x52>
    d42e:	0030      	movs	r0, r6
    d430:	f000 fdf0 	bl	e014 <__malloc_lock>
    d434:	4a25      	ldr	r2, [pc, #148]	; (d4cc <_malloc_r+0xb4>)
    d436:	6814      	ldr	r4, [r2, #0]
    d438:	0021      	movs	r1, r4
    d43a:	2900      	cmp	r1, #0
    d43c:	d119      	bne.n	d472 <_malloc_r+0x5a>
    d43e:	4c24      	ldr	r4, [pc, #144]	; (d4d0 <_malloc_r+0xb8>)
    d440:	6823      	ldr	r3, [r4, #0]
    d442:	2b00      	cmp	r3, #0
    d444:	d103      	bne.n	d44e <_malloc_r+0x36>
    d446:	0030      	movs	r0, r6
    d448:	f000 f8dc 	bl	d604 <_sbrk_r>
    d44c:	6020      	str	r0, [r4, #0]
    d44e:	0029      	movs	r1, r5
    d450:	0030      	movs	r0, r6
    d452:	f000 f8d7 	bl	d604 <_sbrk_r>
    d456:	1c43      	adds	r3, r0, #1
    d458:	d12c      	bne.n	d4b4 <_malloc_r+0x9c>
    d45a:	230c      	movs	r3, #12
    d45c:	0030      	movs	r0, r6
    d45e:	6033      	str	r3, [r6, #0]
    d460:	f000 fdd9 	bl	e016 <__malloc_unlock>
    d464:	e003      	b.n	d46e <_malloc_r+0x56>
    d466:	2d00      	cmp	r5, #0
    d468:	dadf      	bge.n	d42a <_malloc_r+0x12>
    d46a:	230c      	movs	r3, #12
    d46c:	6033      	str	r3, [r6, #0]
    d46e:	2000      	movs	r0, #0
    d470:	bd70      	pop	{r4, r5, r6, pc}
    d472:	680b      	ldr	r3, [r1, #0]
    d474:	1b5b      	subs	r3, r3, r5
    d476:	d41a      	bmi.n	d4ae <_malloc_r+0x96>
    d478:	2b0b      	cmp	r3, #11
    d47a:	d903      	bls.n	d484 <_malloc_r+0x6c>
    d47c:	600b      	str	r3, [r1, #0]
    d47e:	18cc      	adds	r4, r1, r3
    d480:	6025      	str	r5, [r4, #0]
    d482:	e003      	b.n	d48c <_malloc_r+0x74>
    d484:	428c      	cmp	r4, r1
    d486:	d10e      	bne.n	d4a6 <_malloc_r+0x8e>
    d488:	6863      	ldr	r3, [r4, #4]
    d48a:	6013      	str	r3, [r2, #0]
    d48c:	0030      	movs	r0, r6
    d48e:	f000 fdc2 	bl	e016 <__malloc_unlock>
    d492:	0020      	movs	r0, r4
    d494:	2207      	movs	r2, #7
    d496:	300b      	adds	r0, #11
    d498:	1d23      	adds	r3, r4, #4
    d49a:	4390      	bics	r0, r2
    d49c:	1ac3      	subs	r3, r0, r3
    d49e:	d0e7      	beq.n	d470 <_malloc_r+0x58>
    d4a0:	425a      	negs	r2, r3
    d4a2:	50e2      	str	r2, [r4, r3]
    d4a4:	e7e4      	b.n	d470 <_malloc_r+0x58>
    d4a6:	684b      	ldr	r3, [r1, #4]
    d4a8:	6063      	str	r3, [r4, #4]
    d4aa:	000c      	movs	r4, r1
    d4ac:	e7ee      	b.n	d48c <_malloc_r+0x74>
    d4ae:	000c      	movs	r4, r1
    d4b0:	6849      	ldr	r1, [r1, #4]
    d4b2:	e7c2      	b.n	d43a <_malloc_r+0x22>
    d4b4:	2303      	movs	r3, #3
    d4b6:	1cc4      	adds	r4, r0, #3
    d4b8:	439c      	bics	r4, r3
    d4ba:	42a0      	cmp	r0, r4
    d4bc:	d0e0      	beq.n	d480 <_malloc_r+0x68>
    d4be:	1a21      	subs	r1, r4, r0
    d4c0:	0030      	movs	r0, r6
    d4c2:	f000 f89f 	bl	d604 <_sbrk_r>
    d4c6:	1c43      	adds	r3, r0, #1
    d4c8:	d1da      	bne.n	d480 <_malloc_r+0x68>
    d4ca:	e7c6      	b.n	d45a <_malloc_r+0x42>
    d4cc:	200013e4 	.word	0x200013e4
    d4d0:	200013e8 	.word	0x200013e8

0000d4d4 <iprintf>:
    d4d4:	b40f      	push	{r0, r1, r2, r3}
    d4d6:	4b0b      	ldr	r3, [pc, #44]	; (d504 <iprintf+0x30>)
    d4d8:	b513      	push	{r0, r1, r4, lr}
    d4da:	681c      	ldr	r4, [r3, #0]
    d4dc:	2c00      	cmp	r4, #0
    d4de:	d005      	beq.n	d4ec <iprintf+0x18>
    d4e0:	69a3      	ldr	r3, [r4, #24]
    d4e2:	2b00      	cmp	r3, #0
    d4e4:	d102      	bne.n	d4ec <iprintf+0x18>
    d4e6:	0020      	movs	r0, r4
    d4e8:	f000 fc7e 	bl	dde8 <__sinit>
    d4ec:	ab05      	add	r3, sp, #20
    d4ee:	9a04      	ldr	r2, [sp, #16]
    d4f0:	68a1      	ldr	r1, [r4, #8]
    d4f2:	0020      	movs	r0, r4
    d4f4:	9301      	str	r3, [sp, #4]
    d4f6:	f000 ff1d 	bl	e334 <_vfiprintf_r>
    d4fa:	bc16      	pop	{r1, r2, r4}
    d4fc:	bc08      	pop	{r3}
    d4fe:	b004      	add	sp, #16
    d500:	4718      	bx	r3
    d502:	46c0      	nop			; (mov r8, r8)
    d504:	20000190 	.word	0x20000190

0000d508 <putchar>:
    d508:	4b08      	ldr	r3, [pc, #32]	; (d52c <putchar+0x24>)
    d50a:	b570      	push	{r4, r5, r6, lr}
    d50c:	681c      	ldr	r4, [r3, #0]
    d50e:	0005      	movs	r5, r0
    d510:	2c00      	cmp	r4, #0
    d512:	d005      	beq.n	d520 <putchar+0x18>
    d514:	69a3      	ldr	r3, [r4, #24]
    d516:	2b00      	cmp	r3, #0
    d518:	d102      	bne.n	d520 <putchar+0x18>
    d51a:	0020      	movs	r0, r4
    d51c:	f000 fc64 	bl	dde8 <__sinit>
    d520:	0029      	movs	r1, r5
    d522:	68a2      	ldr	r2, [r4, #8]
    d524:	0020      	movs	r0, r4
    d526:	f001 f9a9 	bl	e87c <_putc_r>
    d52a:	bd70      	pop	{r4, r5, r6, pc}
    d52c:	20000190 	.word	0x20000190

0000d530 <_puts_r>:
    d530:	b570      	push	{r4, r5, r6, lr}
    d532:	0005      	movs	r5, r0
    d534:	000e      	movs	r6, r1
    d536:	2800      	cmp	r0, #0
    d538:	d004      	beq.n	d544 <_puts_r+0x14>
    d53a:	6983      	ldr	r3, [r0, #24]
    d53c:	2b00      	cmp	r3, #0
    d53e:	d101      	bne.n	d544 <_puts_r+0x14>
    d540:	f000 fc52 	bl	dde8 <__sinit>
    d544:	69ab      	ldr	r3, [r5, #24]
    d546:	68ac      	ldr	r4, [r5, #8]
    d548:	2b00      	cmp	r3, #0
    d54a:	d102      	bne.n	d552 <_puts_r+0x22>
    d54c:	0028      	movs	r0, r5
    d54e:	f000 fc4b 	bl	dde8 <__sinit>
    d552:	4b24      	ldr	r3, [pc, #144]	; (d5e4 <_puts_r+0xb4>)
    d554:	429c      	cmp	r4, r3
    d556:	d10f      	bne.n	d578 <_puts_r+0x48>
    d558:	686c      	ldr	r4, [r5, #4]
    d55a:	89a3      	ldrh	r3, [r4, #12]
    d55c:	071b      	lsls	r3, r3, #28
    d55e:	d502      	bpl.n	d566 <_puts_r+0x36>
    d560:	6923      	ldr	r3, [r4, #16]
    d562:	2b00      	cmp	r3, #0
    d564:	d120      	bne.n	d5a8 <_puts_r+0x78>
    d566:	0021      	movs	r1, r4
    d568:	0028      	movs	r0, r5
    d56a:	f000 facf 	bl	db0c <__swsetup_r>
    d56e:	2800      	cmp	r0, #0
    d570:	d01a      	beq.n	d5a8 <_puts_r+0x78>
    d572:	2001      	movs	r0, #1
    d574:	4240      	negs	r0, r0
    d576:	bd70      	pop	{r4, r5, r6, pc}
    d578:	4b1b      	ldr	r3, [pc, #108]	; (d5e8 <_puts_r+0xb8>)
    d57a:	429c      	cmp	r4, r3
    d57c:	d101      	bne.n	d582 <_puts_r+0x52>
    d57e:	68ac      	ldr	r4, [r5, #8]
    d580:	e7eb      	b.n	d55a <_puts_r+0x2a>
    d582:	4b1a      	ldr	r3, [pc, #104]	; (d5ec <_puts_r+0xbc>)
    d584:	429c      	cmp	r4, r3
    d586:	d1e8      	bne.n	d55a <_puts_r+0x2a>
    d588:	68ec      	ldr	r4, [r5, #12]
    d58a:	e7e6      	b.n	d55a <_puts_r+0x2a>
    d58c:	3b01      	subs	r3, #1
    d58e:	3601      	adds	r6, #1
    d590:	60a3      	str	r3, [r4, #8]
    d592:	2b00      	cmp	r3, #0
    d594:	da04      	bge.n	d5a0 <_puts_r+0x70>
    d596:	69a2      	ldr	r2, [r4, #24]
    d598:	4293      	cmp	r3, r2
    d59a:	db16      	blt.n	d5ca <_puts_r+0x9a>
    d59c:	290a      	cmp	r1, #10
    d59e:	d014      	beq.n	d5ca <_puts_r+0x9a>
    d5a0:	6823      	ldr	r3, [r4, #0]
    d5a2:	1c5a      	adds	r2, r3, #1
    d5a4:	6022      	str	r2, [r4, #0]
    d5a6:	7019      	strb	r1, [r3, #0]
    d5a8:	7831      	ldrb	r1, [r6, #0]
    d5aa:	68a3      	ldr	r3, [r4, #8]
    d5ac:	2900      	cmp	r1, #0
    d5ae:	d1ed      	bne.n	d58c <_puts_r+0x5c>
    d5b0:	3b01      	subs	r3, #1
    d5b2:	60a3      	str	r3, [r4, #8]
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	da0f      	bge.n	d5d8 <_puts_r+0xa8>
    d5b8:	0022      	movs	r2, r4
    d5ba:	310a      	adds	r1, #10
    d5bc:	0028      	movs	r0, r5
    d5be:	f000 fa4f 	bl	da60 <__swbuf_r>
    d5c2:	1c43      	adds	r3, r0, #1
    d5c4:	d0d5      	beq.n	d572 <_puts_r+0x42>
    d5c6:	200a      	movs	r0, #10
    d5c8:	e7d5      	b.n	d576 <_puts_r+0x46>
    d5ca:	0022      	movs	r2, r4
    d5cc:	0028      	movs	r0, r5
    d5ce:	f000 fa47 	bl	da60 <__swbuf_r>
    d5d2:	1c43      	adds	r3, r0, #1
    d5d4:	d1e8      	bne.n	d5a8 <_puts_r+0x78>
    d5d6:	e7cc      	b.n	d572 <_puts_r+0x42>
    d5d8:	200a      	movs	r0, #10
    d5da:	6823      	ldr	r3, [r4, #0]
    d5dc:	1c5a      	adds	r2, r3, #1
    d5de:	6022      	str	r2, [r4, #0]
    d5e0:	7018      	strb	r0, [r3, #0]
    d5e2:	e7c8      	b.n	d576 <_puts_r+0x46>
    d5e4:	000106fc 	.word	0x000106fc
    d5e8:	0001071c 	.word	0x0001071c
    d5ec:	000106dc 	.word	0x000106dc

0000d5f0 <puts>:
    d5f0:	b510      	push	{r4, lr}
    d5f2:	4b03      	ldr	r3, [pc, #12]	; (d600 <puts+0x10>)
    d5f4:	0001      	movs	r1, r0
    d5f6:	6818      	ldr	r0, [r3, #0]
    d5f8:	f7ff ff9a 	bl	d530 <_puts_r>
    d5fc:	bd10      	pop	{r4, pc}
    d5fe:	46c0      	nop			; (mov r8, r8)
    d600:	20000190 	.word	0x20000190

0000d604 <_sbrk_r>:
    d604:	2300      	movs	r3, #0
    d606:	b570      	push	{r4, r5, r6, lr}
    d608:	4c06      	ldr	r4, [pc, #24]	; (d624 <_sbrk_r+0x20>)
    d60a:	0005      	movs	r5, r0
    d60c:	0008      	movs	r0, r1
    d60e:	6023      	str	r3, [r4, #0]
    d610:	f7fb fd38 	bl	9084 <_sbrk>
    d614:	1c43      	adds	r3, r0, #1
    d616:	d103      	bne.n	d620 <_sbrk_r+0x1c>
    d618:	6823      	ldr	r3, [r4, #0]
    d61a:	2b00      	cmp	r3, #0
    d61c:	d000      	beq.n	d620 <_sbrk_r+0x1c>
    d61e:	602b      	str	r3, [r5, #0]
    d620:	bd70      	pop	{r4, r5, r6, pc}
    d622:	46c0      	nop			; (mov r8, r8)
    d624:	20002164 	.word	0x20002164

0000d628 <setbuf>:
    d628:	424a      	negs	r2, r1
    d62a:	414a      	adcs	r2, r1
    d62c:	2380      	movs	r3, #128	; 0x80
    d62e:	b510      	push	{r4, lr}
    d630:	0052      	lsls	r2, r2, #1
    d632:	00db      	lsls	r3, r3, #3
    d634:	f000 f802 	bl	d63c <setvbuf>
    d638:	bd10      	pop	{r4, pc}
	...

0000d63c <setvbuf>:
    d63c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d63e:	001d      	movs	r5, r3
    d640:	4b4f      	ldr	r3, [pc, #316]	; (d780 <setvbuf+0x144>)
    d642:	b085      	sub	sp, #20
    d644:	681e      	ldr	r6, [r3, #0]
    d646:	0004      	movs	r4, r0
    d648:	000f      	movs	r7, r1
    d64a:	9200      	str	r2, [sp, #0]
    d64c:	2e00      	cmp	r6, #0
    d64e:	d005      	beq.n	d65c <setvbuf+0x20>
    d650:	69b3      	ldr	r3, [r6, #24]
    d652:	2b00      	cmp	r3, #0
    d654:	d102      	bne.n	d65c <setvbuf+0x20>
    d656:	0030      	movs	r0, r6
    d658:	f000 fbc6 	bl	dde8 <__sinit>
    d65c:	4b49      	ldr	r3, [pc, #292]	; (d784 <setvbuf+0x148>)
    d65e:	429c      	cmp	r4, r3
    d660:	d150      	bne.n	d704 <setvbuf+0xc8>
    d662:	6874      	ldr	r4, [r6, #4]
    d664:	9b00      	ldr	r3, [sp, #0]
    d666:	2b02      	cmp	r3, #2
    d668:	d005      	beq.n	d676 <setvbuf+0x3a>
    d66a:	2b01      	cmp	r3, #1
    d66c:	d900      	bls.n	d670 <setvbuf+0x34>
    d66e:	e084      	b.n	d77a <setvbuf+0x13e>
    d670:	2d00      	cmp	r5, #0
    d672:	da00      	bge.n	d676 <setvbuf+0x3a>
    d674:	e081      	b.n	d77a <setvbuf+0x13e>
    d676:	0021      	movs	r1, r4
    d678:	0030      	movs	r0, r6
    d67a:	f000 fb47 	bl	dd0c <_fflush_r>
    d67e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d680:	2900      	cmp	r1, #0
    d682:	d008      	beq.n	d696 <setvbuf+0x5a>
    d684:	0023      	movs	r3, r4
    d686:	3344      	adds	r3, #68	; 0x44
    d688:	4299      	cmp	r1, r3
    d68a:	d002      	beq.n	d692 <setvbuf+0x56>
    d68c:	0030      	movs	r0, r6
    d68e:	f7ff fe79 	bl	d384 <_free_r>
    d692:	2300      	movs	r3, #0
    d694:	6363      	str	r3, [r4, #52]	; 0x34
    d696:	2300      	movs	r3, #0
    d698:	61a3      	str	r3, [r4, #24]
    d69a:	6063      	str	r3, [r4, #4]
    d69c:	89a3      	ldrh	r3, [r4, #12]
    d69e:	061b      	lsls	r3, r3, #24
    d6a0:	d503      	bpl.n	d6aa <setvbuf+0x6e>
    d6a2:	6921      	ldr	r1, [r4, #16]
    d6a4:	0030      	movs	r0, r6
    d6a6:	f7ff fe6d 	bl	d384 <_free_r>
    d6aa:	89a3      	ldrh	r3, [r4, #12]
    d6ac:	4a36      	ldr	r2, [pc, #216]	; (d788 <setvbuf+0x14c>)
    d6ae:	4013      	ands	r3, r2
    d6b0:	81a3      	strh	r3, [r4, #12]
    d6b2:	9b00      	ldr	r3, [sp, #0]
    d6b4:	2b02      	cmp	r3, #2
    d6b6:	d05a      	beq.n	d76e <setvbuf+0x132>
    d6b8:	ab03      	add	r3, sp, #12
    d6ba:	aa02      	add	r2, sp, #8
    d6bc:	0021      	movs	r1, r4
    d6be:	0030      	movs	r0, r6
    d6c0:	f000 fc2a 	bl	df18 <__swhatbuf_r>
    d6c4:	89a3      	ldrh	r3, [r4, #12]
    d6c6:	4318      	orrs	r0, r3
    d6c8:	81a0      	strh	r0, [r4, #12]
    d6ca:	2d00      	cmp	r5, #0
    d6cc:	d124      	bne.n	d718 <setvbuf+0xdc>
    d6ce:	9d02      	ldr	r5, [sp, #8]
    d6d0:	0028      	movs	r0, r5
    d6d2:	f7ff fe11 	bl	d2f8 <malloc>
    d6d6:	9501      	str	r5, [sp, #4]
    d6d8:	1e07      	subs	r7, r0, #0
    d6da:	d142      	bne.n	d762 <setvbuf+0x126>
    d6dc:	9b02      	ldr	r3, [sp, #8]
    d6de:	9301      	str	r3, [sp, #4]
    d6e0:	42ab      	cmp	r3, r5
    d6e2:	d139      	bne.n	d758 <setvbuf+0x11c>
    d6e4:	2001      	movs	r0, #1
    d6e6:	4240      	negs	r0, r0
    d6e8:	2302      	movs	r3, #2
    d6ea:	89a2      	ldrh	r2, [r4, #12]
    d6ec:	4313      	orrs	r3, r2
    d6ee:	81a3      	strh	r3, [r4, #12]
    d6f0:	2300      	movs	r3, #0
    d6f2:	60a3      	str	r3, [r4, #8]
    d6f4:	0023      	movs	r3, r4
    d6f6:	3347      	adds	r3, #71	; 0x47
    d6f8:	6023      	str	r3, [r4, #0]
    d6fa:	6123      	str	r3, [r4, #16]
    d6fc:	2301      	movs	r3, #1
    d6fe:	6163      	str	r3, [r4, #20]
    d700:	b005      	add	sp, #20
    d702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d704:	4b21      	ldr	r3, [pc, #132]	; (d78c <setvbuf+0x150>)
    d706:	429c      	cmp	r4, r3
    d708:	d101      	bne.n	d70e <setvbuf+0xd2>
    d70a:	68b4      	ldr	r4, [r6, #8]
    d70c:	e7aa      	b.n	d664 <setvbuf+0x28>
    d70e:	4b20      	ldr	r3, [pc, #128]	; (d790 <setvbuf+0x154>)
    d710:	429c      	cmp	r4, r3
    d712:	d1a7      	bne.n	d664 <setvbuf+0x28>
    d714:	68f4      	ldr	r4, [r6, #12]
    d716:	e7a5      	b.n	d664 <setvbuf+0x28>
    d718:	2f00      	cmp	r7, #0
    d71a:	d0d9      	beq.n	d6d0 <setvbuf+0x94>
    d71c:	69b3      	ldr	r3, [r6, #24]
    d71e:	2b00      	cmp	r3, #0
    d720:	d102      	bne.n	d728 <setvbuf+0xec>
    d722:	0030      	movs	r0, r6
    d724:	f000 fb60 	bl	dde8 <__sinit>
    d728:	9b00      	ldr	r3, [sp, #0]
    d72a:	2b01      	cmp	r3, #1
    d72c:	d103      	bne.n	d736 <setvbuf+0xfa>
    d72e:	89a3      	ldrh	r3, [r4, #12]
    d730:	9a00      	ldr	r2, [sp, #0]
    d732:	431a      	orrs	r2, r3
    d734:	81a2      	strh	r2, [r4, #12]
    d736:	2008      	movs	r0, #8
    d738:	89a3      	ldrh	r3, [r4, #12]
    d73a:	6027      	str	r7, [r4, #0]
    d73c:	6127      	str	r7, [r4, #16]
    d73e:	6165      	str	r5, [r4, #20]
    d740:	4018      	ands	r0, r3
    d742:	d018      	beq.n	d776 <setvbuf+0x13a>
    d744:	2001      	movs	r0, #1
    d746:	4018      	ands	r0, r3
    d748:	2300      	movs	r3, #0
    d74a:	4298      	cmp	r0, r3
    d74c:	d011      	beq.n	d772 <setvbuf+0x136>
    d74e:	426d      	negs	r5, r5
    d750:	60a3      	str	r3, [r4, #8]
    d752:	61a5      	str	r5, [r4, #24]
    d754:	0018      	movs	r0, r3
    d756:	e7d3      	b.n	d700 <setvbuf+0xc4>
    d758:	9801      	ldr	r0, [sp, #4]
    d75a:	f7ff fdcd 	bl	d2f8 <malloc>
    d75e:	1e07      	subs	r7, r0, #0
    d760:	d0c0      	beq.n	d6e4 <setvbuf+0xa8>
    d762:	2380      	movs	r3, #128	; 0x80
    d764:	89a2      	ldrh	r2, [r4, #12]
    d766:	9d01      	ldr	r5, [sp, #4]
    d768:	4313      	orrs	r3, r2
    d76a:	81a3      	strh	r3, [r4, #12]
    d76c:	e7d6      	b.n	d71c <setvbuf+0xe0>
    d76e:	2000      	movs	r0, #0
    d770:	e7ba      	b.n	d6e8 <setvbuf+0xac>
    d772:	60a5      	str	r5, [r4, #8]
    d774:	e7c4      	b.n	d700 <setvbuf+0xc4>
    d776:	60a0      	str	r0, [r4, #8]
    d778:	e7c2      	b.n	d700 <setvbuf+0xc4>
    d77a:	2001      	movs	r0, #1
    d77c:	4240      	negs	r0, r0
    d77e:	e7bf      	b.n	d700 <setvbuf+0xc4>
    d780:	20000190 	.word	0x20000190
    d784:	000106fc 	.word	0x000106fc
    d788:	fffff35c 	.word	0xfffff35c
    d78c:	0001071c 	.word	0x0001071c
    d790:	000106dc 	.word	0x000106dc

0000d794 <sniprintf>:
    d794:	b40c      	push	{r2, r3}
    d796:	b530      	push	{r4, r5, lr}
    d798:	4b16      	ldr	r3, [pc, #88]	; (d7f4 <sniprintf+0x60>)
    d79a:	b09d      	sub	sp, #116	; 0x74
    d79c:	1e0c      	subs	r4, r1, #0
    d79e:	681d      	ldr	r5, [r3, #0]
    d7a0:	da08      	bge.n	d7b4 <sniprintf+0x20>
    d7a2:	238b      	movs	r3, #139	; 0x8b
    d7a4:	2001      	movs	r0, #1
    d7a6:	602b      	str	r3, [r5, #0]
    d7a8:	4240      	negs	r0, r0
    d7aa:	b01d      	add	sp, #116	; 0x74
    d7ac:	bc30      	pop	{r4, r5}
    d7ae:	bc08      	pop	{r3}
    d7b0:	b002      	add	sp, #8
    d7b2:	4718      	bx	r3
    d7b4:	2382      	movs	r3, #130	; 0x82
    d7b6:	a902      	add	r1, sp, #8
    d7b8:	009b      	lsls	r3, r3, #2
    d7ba:	818b      	strh	r3, [r1, #12]
    d7bc:	2300      	movs	r3, #0
    d7be:	9002      	str	r0, [sp, #8]
    d7c0:	6108      	str	r0, [r1, #16]
    d7c2:	429c      	cmp	r4, r3
    d7c4:	d000      	beq.n	d7c8 <sniprintf+0x34>
    d7c6:	1e63      	subs	r3, r4, #1
    d7c8:	608b      	str	r3, [r1, #8]
    d7ca:	614b      	str	r3, [r1, #20]
    d7cc:	2301      	movs	r3, #1
    d7ce:	425b      	negs	r3, r3
    d7d0:	81cb      	strh	r3, [r1, #14]
    d7d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    d7d4:	ab21      	add	r3, sp, #132	; 0x84
    d7d6:	0028      	movs	r0, r5
    d7d8:	9301      	str	r3, [sp, #4]
    d7da:	f000 fc7f 	bl	e0dc <_svfiprintf_r>
    d7de:	1c43      	adds	r3, r0, #1
    d7e0:	da01      	bge.n	d7e6 <sniprintf+0x52>
    d7e2:	238b      	movs	r3, #139	; 0x8b
    d7e4:	602b      	str	r3, [r5, #0]
    d7e6:	2c00      	cmp	r4, #0
    d7e8:	d0df      	beq.n	d7aa <sniprintf+0x16>
    d7ea:	2300      	movs	r3, #0
    d7ec:	9a02      	ldr	r2, [sp, #8]
    d7ee:	7013      	strb	r3, [r2, #0]
    d7f0:	e7db      	b.n	d7aa <sniprintf+0x16>
    d7f2:	46c0      	nop			; (mov r8, r8)
    d7f4:	20000190 	.word	0x20000190

0000d7f8 <siprintf>:
    d7f8:	b40e      	push	{r1, r2, r3}
    d7fa:	b510      	push	{r4, lr}
    d7fc:	b09d      	sub	sp, #116	; 0x74
    d7fe:	a902      	add	r1, sp, #8
    d800:	9002      	str	r0, [sp, #8]
    d802:	6108      	str	r0, [r1, #16]
    d804:	480b      	ldr	r0, [pc, #44]	; (d834 <siprintf+0x3c>)
    d806:	2482      	movs	r4, #130	; 0x82
    d808:	6088      	str	r0, [r1, #8]
    d80a:	6148      	str	r0, [r1, #20]
    d80c:	2001      	movs	r0, #1
    d80e:	4240      	negs	r0, r0
    d810:	ab1f      	add	r3, sp, #124	; 0x7c
    d812:	81c8      	strh	r0, [r1, #14]
    d814:	4808      	ldr	r0, [pc, #32]	; (d838 <siprintf+0x40>)
    d816:	cb04      	ldmia	r3!, {r2}
    d818:	00a4      	lsls	r4, r4, #2
    d81a:	6800      	ldr	r0, [r0, #0]
    d81c:	9301      	str	r3, [sp, #4]
    d81e:	818c      	strh	r4, [r1, #12]
    d820:	f000 fc5c 	bl	e0dc <_svfiprintf_r>
    d824:	2300      	movs	r3, #0
    d826:	9a02      	ldr	r2, [sp, #8]
    d828:	7013      	strb	r3, [r2, #0]
    d82a:	b01d      	add	sp, #116	; 0x74
    d82c:	bc10      	pop	{r4}
    d82e:	bc08      	pop	{r3}
    d830:	b003      	add	sp, #12
    d832:	4718      	bx	r3
    d834:	7fffffff 	.word	0x7fffffff
    d838:	20000190 	.word	0x20000190

0000d83c <strcmp>:
    d83c:	7802      	ldrb	r2, [r0, #0]
    d83e:	780b      	ldrb	r3, [r1, #0]
    d840:	2a00      	cmp	r2, #0
    d842:	d003      	beq.n	d84c <strcmp+0x10>
    d844:	3001      	adds	r0, #1
    d846:	3101      	adds	r1, #1
    d848:	429a      	cmp	r2, r3
    d84a:	d0f7      	beq.n	d83c <strcmp>
    d84c:	1ad0      	subs	r0, r2, r3
    d84e:	4770      	bx	lr

0000d850 <strlen>:
    d850:	2300      	movs	r3, #0
    d852:	5cc2      	ldrb	r2, [r0, r3]
    d854:	3301      	adds	r3, #1
    d856:	2a00      	cmp	r2, #0
    d858:	d1fb      	bne.n	d852 <strlen+0x2>
    d85a:	1e58      	subs	r0, r3, #1
    d85c:	4770      	bx	lr

0000d85e <strncmp>:
    d85e:	2300      	movs	r3, #0
    d860:	b530      	push	{r4, r5, lr}
    d862:	429a      	cmp	r2, r3
    d864:	d00a      	beq.n	d87c <strncmp+0x1e>
    d866:	3a01      	subs	r2, #1
    d868:	5cc4      	ldrb	r4, [r0, r3]
    d86a:	5ccd      	ldrb	r5, [r1, r3]
    d86c:	42ac      	cmp	r4, r5
    d86e:	d104      	bne.n	d87a <strncmp+0x1c>
    d870:	429a      	cmp	r2, r3
    d872:	d002      	beq.n	d87a <strncmp+0x1c>
    d874:	3301      	adds	r3, #1
    d876:	2c00      	cmp	r4, #0
    d878:	d1f6      	bne.n	d868 <strncmp+0xa>
    d87a:	1b63      	subs	r3, r4, r5
    d87c:	0018      	movs	r0, r3
    d87e:	bd30      	pop	{r4, r5, pc}

0000d880 <strtok>:
    d880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d882:	4b12      	ldr	r3, [pc, #72]	; (d8cc <strtok+0x4c>)
    d884:	0006      	movs	r6, r0
    d886:	681d      	ldr	r5, [r3, #0]
    d888:	000f      	movs	r7, r1
    d88a:	6dac      	ldr	r4, [r5, #88]	; 0x58
    d88c:	2c00      	cmp	r4, #0
    d88e:	d116      	bne.n	d8be <strtok+0x3e>
    d890:	2050      	movs	r0, #80	; 0x50
    d892:	f7ff fd31 	bl	d2f8 <malloc>
    d896:	65a8      	str	r0, [r5, #88]	; 0x58
    d898:	6004      	str	r4, [r0, #0]
    d89a:	6044      	str	r4, [r0, #4]
    d89c:	6084      	str	r4, [r0, #8]
    d89e:	60c4      	str	r4, [r0, #12]
    d8a0:	6104      	str	r4, [r0, #16]
    d8a2:	6144      	str	r4, [r0, #20]
    d8a4:	6184      	str	r4, [r0, #24]
    d8a6:	6284      	str	r4, [r0, #40]	; 0x28
    d8a8:	62c4      	str	r4, [r0, #44]	; 0x2c
    d8aa:	6304      	str	r4, [r0, #48]	; 0x30
    d8ac:	6344      	str	r4, [r0, #52]	; 0x34
    d8ae:	6384      	str	r4, [r0, #56]	; 0x38
    d8b0:	63c4      	str	r4, [r0, #60]	; 0x3c
    d8b2:	6404      	str	r4, [r0, #64]	; 0x40
    d8b4:	6444      	str	r4, [r0, #68]	; 0x44
    d8b6:	6484      	str	r4, [r0, #72]	; 0x48
    d8b8:	64c4      	str	r4, [r0, #76]	; 0x4c
    d8ba:	7704      	strb	r4, [r0, #28]
    d8bc:	6244      	str	r4, [r0, #36]	; 0x24
    d8be:	6daa      	ldr	r2, [r5, #88]	; 0x58
    d8c0:	0039      	movs	r1, r7
    d8c2:	0030      	movs	r0, r6
    d8c4:	2301      	movs	r3, #1
    d8c6:	f000 f803 	bl	d8d0 <__strtok_r>
    d8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d8cc:	20000190 	.word	0x20000190

0000d8d0 <__strtok_r>:
    d8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8d2:	2800      	cmp	r0, #0
    d8d4:	d104      	bne.n	d8e0 <__strtok_r+0x10>
    d8d6:	6810      	ldr	r0, [r2, #0]
    d8d8:	2800      	cmp	r0, #0
    d8da:	d101      	bne.n	d8e0 <__strtok_r+0x10>
    d8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8de:	0020      	movs	r0, r4
    d8e0:	000e      	movs	r6, r1
    d8e2:	7805      	ldrb	r5, [r0, #0]
    d8e4:	1c44      	adds	r4, r0, #1
    d8e6:	7837      	ldrb	r7, [r6, #0]
    d8e8:	2f00      	cmp	r7, #0
    d8ea:	d104      	bne.n	d8f6 <__strtok_r+0x26>
    d8ec:	2d00      	cmp	r5, #0
    d8ee:	d110      	bne.n	d912 <__strtok_r+0x42>
    d8f0:	6015      	str	r5, [r2, #0]
    d8f2:	0028      	movs	r0, r5
    d8f4:	e7f2      	b.n	d8dc <__strtok_r+0xc>
    d8f6:	3601      	adds	r6, #1
    d8f8:	42bd      	cmp	r5, r7
    d8fa:	d1f4      	bne.n	d8e6 <__strtok_r+0x16>
    d8fc:	2b00      	cmp	r3, #0
    d8fe:	d1ee      	bne.n	d8de <__strtok_r+0xe>
    d900:	6014      	str	r4, [r2, #0]
    d902:	7003      	strb	r3, [r0, #0]
    d904:	e7ea      	b.n	d8dc <__strtok_r+0xc>
    d906:	0033      	movs	r3, r6
    d908:	e00e      	b.n	d928 <__strtok_r+0x58>
    d90a:	3501      	adds	r5, #1
    d90c:	001c      	movs	r4, r3
    d90e:	2f00      	cmp	r7, #0
    d910:	d102      	bne.n	d918 <__strtok_r+0x48>
    d912:	000d      	movs	r5, r1
    d914:	7826      	ldrb	r6, [r4, #0]
    d916:	1c63      	adds	r3, r4, #1
    d918:	782f      	ldrb	r7, [r5, #0]
    d91a:	42be      	cmp	r6, r7
    d91c:	d1f5      	bne.n	d90a <__strtok_r+0x3a>
    d91e:	2e00      	cmp	r6, #0
    d920:	d0f1      	beq.n	d906 <__strtok_r+0x36>
    d922:	2400      	movs	r4, #0
    d924:	1e59      	subs	r1, r3, #1
    d926:	700c      	strb	r4, [r1, #0]
    d928:	6013      	str	r3, [r2, #0]
    d92a:	e7d7      	b.n	d8dc <__strtok_r+0xc>

0000d92c <_strtol_l.isra.0>:
    d92c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d92e:	001f      	movs	r7, r3
    d930:	000e      	movs	r6, r1
    d932:	b087      	sub	sp, #28
    d934:	9005      	str	r0, [sp, #20]
    d936:	9103      	str	r1, [sp, #12]
    d938:	9202      	str	r2, [sp, #8]
    d93a:	980c      	ldr	r0, [sp, #48]	; 0x30
    d93c:	7834      	ldrb	r4, [r6, #0]
    d93e:	f000 fae8 	bl	df12 <__locale_ctype_ptr_l>
    d942:	2208      	movs	r2, #8
    d944:	1900      	adds	r0, r0, r4
    d946:	7843      	ldrb	r3, [r0, #1]
    d948:	1c75      	adds	r5, r6, #1
    d94a:	4013      	ands	r3, r2
    d94c:	d10c      	bne.n	d968 <_strtol_l.isra.0+0x3c>
    d94e:	2c2d      	cmp	r4, #45	; 0x2d
    d950:	d10c      	bne.n	d96c <_strtol_l.isra.0+0x40>
    d952:	3301      	adds	r3, #1
    d954:	782c      	ldrb	r4, [r5, #0]
    d956:	9301      	str	r3, [sp, #4]
    d958:	1cb5      	adds	r5, r6, #2
    d95a:	2f00      	cmp	r7, #0
    d95c:	d00c      	beq.n	d978 <_strtol_l.isra.0+0x4c>
    d95e:	2f10      	cmp	r7, #16
    d960:	d114      	bne.n	d98c <_strtol_l.isra.0+0x60>
    d962:	2c30      	cmp	r4, #48	; 0x30
    d964:	d00a      	beq.n	d97c <_strtol_l.isra.0+0x50>
    d966:	e011      	b.n	d98c <_strtol_l.isra.0+0x60>
    d968:	002e      	movs	r6, r5
    d96a:	e7e6      	b.n	d93a <_strtol_l.isra.0+0xe>
    d96c:	9301      	str	r3, [sp, #4]
    d96e:	2c2b      	cmp	r4, #43	; 0x2b
    d970:	d1f3      	bne.n	d95a <_strtol_l.isra.0+0x2e>
    d972:	782c      	ldrb	r4, [r5, #0]
    d974:	1cb5      	adds	r5, r6, #2
    d976:	e7f0      	b.n	d95a <_strtol_l.isra.0+0x2e>
    d978:	2c30      	cmp	r4, #48	; 0x30
    d97a:	d12f      	bne.n	d9dc <_strtol_l.isra.0+0xb0>
    d97c:	2220      	movs	r2, #32
    d97e:	782b      	ldrb	r3, [r5, #0]
    d980:	4393      	bics	r3, r2
    d982:	2b58      	cmp	r3, #88	; 0x58
    d984:	d151      	bne.n	da2a <_strtol_l.isra.0+0xfe>
    d986:	2710      	movs	r7, #16
    d988:	786c      	ldrb	r4, [r5, #1]
    d98a:	3502      	adds	r5, #2
    d98c:	9b01      	ldr	r3, [sp, #4]
    d98e:	4a29      	ldr	r2, [pc, #164]	; (da34 <_strtol_l.isra.0+0x108>)
    d990:	0039      	movs	r1, r7
    d992:	189e      	adds	r6, r3, r2
    d994:	0030      	movs	r0, r6
    d996:	f7fd fee7 	bl	b768 <__aeabi_uidivmod>
    d99a:	0030      	movs	r0, r6
    d99c:	9104      	str	r1, [sp, #16]
    d99e:	0039      	movs	r1, r7
    d9a0:	f7fd fe5c 	bl	b65c <__udivsi3>
    d9a4:	2101      	movs	r1, #1
    d9a6:	2300      	movs	r3, #0
    d9a8:	4249      	negs	r1, r1
    d9aa:	0002      	movs	r2, r0
    d9ac:	468c      	mov	ip, r1
    d9ae:	0018      	movs	r0, r3
    d9b0:	0021      	movs	r1, r4
    d9b2:	3930      	subs	r1, #48	; 0x30
    d9b4:	2909      	cmp	r1, #9
    d9b6:	d813      	bhi.n	d9e0 <_strtol_l.isra.0+0xb4>
    d9b8:	000c      	movs	r4, r1
    d9ba:	42a7      	cmp	r7, r4
    d9bc:	dd1c      	ble.n	d9f8 <_strtol_l.isra.0+0xcc>
    d9be:	1c59      	adds	r1, r3, #1
    d9c0:	d009      	beq.n	d9d6 <_strtol_l.isra.0+0xaa>
    d9c2:	4663      	mov	r3, ip
    d9c4:	4282      	cmp	r2, r0
    d9c6:	d306      	bcc.n	d9d6 <_strtol_l.isra.0+0xaa>
    d9c8:	d102      	bne.n	d9d0 <_strtol_l.isra.0+0xa4>
    d9ca:	9904      	ldr	r1, [sp, #16]
    d9cc:	42a1      	cmp	r1, r4
    d9ce:	db02      	blt.n	d9d6 <_strtol_l.isra.0+0xaa>
    d9d0:	2301      	movs	r3, #1
    d9d2:	4378      	muls	r0, r7
    d9d4:	1820      	adds	r0, r4, r0
    d9d6:	782c      	ldrb	r4, [r5, #0]
    d9d8:	3501      	adds	r5, #1
    d9da:	e7e9      	b.n	d9b0 <_strtol_l.isra.0+0x84>
    d9dc:	270a      	movs	r7, #10
    d9de:	e7d5      	b.n	d98c <_strtol_l.isra.0+0x60>
    d9e0:	0021      	movs	r1, r4
    d9e2:	3941      	subs	r1, #65	; 0x41
    d9e4:	2919      	cmp	r1, #25
    d9e6:	d801      	bhi.n	d9ec <_strtol_l.isra.0+0xc0>
    d9e8:	3c37      	subs	r4, #55	; 0x37
    d9ea:	e7e6      	b.n	d9ba <_strtol_l.isra.0+0x8e>
    d9ec:	0021      	movs	r1, r4
    d9ee:	3961      	subs	r1, #97	; 0x61
    d9f0:	2919      	cmp	r1, #25
    d9f2:	d801      	bhi.n	d9f8 <_strtol_l.isra.0+0xcc>
    d9f4:	3c57      	subs	r4, #87	; 0x57
    d9f6:	e7e0      	b.n	d9ba <_strtol_l.isra.0+0x8e>
    d9f8:	1c5a      	adds	r2, r3, #1
    d9fa:	d108      	bne.n	da0e <_strtol_l.isra.0+0xe2>
    d9fc:	9a05      	ldr	r2, [sp, #20]
    d9fe:	3323      	adds	r3, #35	; 0x23
    da00:	6013      	str	r3, [r2, #0]
    da02:	9b02      	ldr	r3, [sp, #8]
    da04:	0030      	movs	r0, r6
    da06:	2b00      	cmp	r3, #0
    da08:	d10b      	bne.n	da22 <_strtol_l.isra.0+0xf6>
    da0a:	b007      	add	sp, #28
    da0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da0e:	9a01      	ldr	r2, [sp, #4]
    da10:	2a00      	cmp	r2, #0
    da12:	d000      	beq.n	da16 <_strtol_l.isra.0+0xea>
    da14:	4240      	negs	r0, r0
    da16:	9a02      	ldr	r2, [sp, #8]
    da18:	2a00      	cmp	r2, #0
    da1a:	d0f6      	beq.n	da0a <_strtol_l.isra.0+0xde>
    da1c:	9a03      	ldr	r2, [sp, #12]
    da1e:	2b00      	cmp	r3, #0
    da20:	d000      	beq.n	da24 <_strtol_l.isra.0+0xf8>
    da22:	1e6a      	subs	r2, r5, #1
    da24:	9b02      	ldr	r3, [sp, #8]
    da26:	601a      	str	r2, [r3, #0]
    da28:	e7ef      	b.n	da0a <_strtol_l.isra.0+0xde>
    da2a:	2430      	movs	r4, #48	; 0x30
    da2c:	2f00      	cmp	r7, #0
    da2e:	d1ad      	bne.n	d98c <_strtol_l.isra.0+0x60>
    da30:	3708      	adds	r7, #8
    da32:	e7ab      	b.n	d98c <_strtol_l.isra.0+0x60>
    da34:	7fffffff 	.word	0x7fffffff

0000da38 <strtol>:
    da38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    da3a:	0013      	movs	r3, r2
    da3c:	4a06      	ldr	r2, [pc, #24]	; (da58 <strtol+0x20>)
    da3e:	0005      	movs	r5, r0
    da40:	6810      	ldr	r0, [r2, #0]
    da42:	6a04      	ldr	r4, [r0, #32]
    da44:	2c00      	cmp	r4, #0
    da46:	d100      	bne.n	da4a <strtol+0x12>
    da48:	4c04      	ldr	r4, [pc, #16]	; (da5c <strtol+0x24>)
    da4a:	000a      	movs	r2, r1
    da4c:	9400      	str	r4, [sp, #0]
    da4e:	0029      	movs	r1, r5
    da50:	f7ff ff6c 	bl	d92c <_strtol_l.isra.0>
    da54:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    da56:	46c0      	nop			; (mov r8, r8)
    da58:	20000190 	.word	0x20000190
    da5c:	200001f4 	.word	0x200001f4

0000da60 <__swbuf_r>:
    da60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da62:	0005      	movs	r5, r0
    da64:	000e      	movs	r6, r1
    da66:	0014      	movs	r4, r2
    da68:	2800      	cmp	r0, #0
    da6a:	d004      	beq.n	da76 <__swbuf_r+0x16>
    da6c:	6983      	ldr	r3, [r0, #24]
    da6e:	2b00      	cmp	r3, #0
    da70:	d101      	bne.n	da76 <__swbuf_r+0x16>
    da72:	f000 f9b9 	bl	dde8 <__sinit>
    da76:	4b22      	ldr	r3, [pc, #136]	; (db00 <__swbuf_r+0xa0>)
    da78:	429c      	cmp	r4, r3
    da7a:	d12d      	bne.n	dad8 <__swbuf_r+0x78>
    da7c:	686c      	ldr	r4, [r5, #4]
    da7e:	69a3      	ldr	r3, [r4, #24]
    da80:	60a3      	str	r3, [r4, #8]
    da82:	89a3      	ldrh	r3, [r4, #12]
    da84:	071b      	lsls	r3, r3, #28
    da86:	d531      	bpl.n	daec <__swbuf_r+0x8c>
    da88:	6923      	ldr	r3, [r4, #16]
    da8a:	2b00      	cmp	r3, #0
    da8c:	d02e      	beq.n	daec <__swbuf_r+0x8c>
    da8e:	6823      	ldr	r3, [r4, #0]
    da90:	6922      	ldr	r2, [r4, #16]
    da92:	b2f7      	uxtb	r7, r6
    da94:	1a98      	subs	r0, r3, r2
    da96:	6963      	ldr	r3, [r4, #20]
    da98:	b2f6      	uxtb	r6, r6
    da9a:	4298      	cmp	r0, r3
    da9c:	db05      	blt.n	daaa <__swbuf_r+0x4a>
    da9e:	0021      	movs	r1, r4
    daa0:	0028      	movs	r0, r5
    daa2:	f000 f933 	bl	dd0c <_fflush_r>
    daa6:	2800      	cmp	r0, #0
    daa8:	d126      	bne.n	daf8 <__swbuf_r+0x98>
    daaa:	68a3      	ldr	r3, [r4, #8]
    daac:	3001      	adds	r0, #1
    daae:	3b01      	subs	r3, #1
    dab0:	60a3      	str	r3, [r4, #8]
    dab2:	6823      	ldr	r3, [r4, #0]
    dab4:	1c5a      	adds	r2, r3, #1
    dab6:	6022      	str	r2, [r4, #0]
    dab8:	701f      	strb	r7, [r3, #0]
    daba:	6963      	ldr	r3, [r4, #20]
    dabc:	4298      	cmp	r0, r3
    dabe:	d004      	beq.n	daca <__swbuf_r+0x6a>
    dac0:	89a3      	ldrh	r3, [r4, #12]
    dac2:	07db      	lsls	r3, r3, #31
    dac4:	d51a      	bpl.n	dafc <__swbuf_r+0x9c>
    dac6:	2e0a      	cmp	r6, #10
    dac8:	d118      	bne.n	dafc <__swbuf_r+0x9c>
    daca:	0021      	movs	r1, r4
    dacc:	0028      	movs	r0, r5
    dace:	f000 f91d 	bl	dd0c <_fflush_r>
    dad2:	2800      	cmp	r0, #0
    dad4:	d012      	beq.n	dafc <__swbuf_r+0x9c>
    dad6:	e00f      	b.n	daf8 <__swbuf_r+0x98>
    dad8:	4b0a      	ldr	r3, [pc, #40]	; (db04 <__swbuf_r+0xa4>)
    dada:	429c      	cmp	r4, r3
    dadc:	d101      	bne.n	dae2 <__swbuf_r+0x82>
    dade:	68ac      	ldr	r4, [r5, #8]
    dae0:	e7cd      	b.n	da7e <__swbuf_r+0x1e>
    dae2:	4b09      	ldr	r3, [pc, #36]	; (db08 <__swbuf_r+0xa8>)
    dae4:	429c      	cmp	r4, r3
    dae6:	d1ca      	bne.n	da7e <__swbuf_r+0x1e>
    dae8:	68ec      	ldr	r4, [r5, #12]
    daea:	e7c8      	b.n	da7e <__swbuf_r+0x1e>
    daec:	0021      	movs	r1, r4
    daee:	0028      	movs	r0, r5
    daf0:	f000 f80c 	bl	db0c <__swsetup_r>
    daf4:	2800      	cmp	r0, #0
    daf6:	d0ca      	beq.n	da8e <__swbuf_r+0x2e>
    daf8:	2601      	movs	r6, #1
    dafa:	4276      	negs	r6, r6
    dafc:	0030      	movs	r0, r6
    dafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    db00:	000106fc 	.word	0x000106fc
    db04:	0001071c 	.word	0x0001071c
    db08:	000106dc 	.word	0x000106dc

0000db0c <__swsetup_r>:
    db0c:	4b36      	ldr	r3, [pc, #216]	; (dbe8 <__swsetup_r+0xdc>)
    db0e:	b570      	push	{r4, r5, r6, lr}
    db10:	681d      	ldr	r5, [r3, #0]
    db12:	0006      	movs	r6, r0
    db14:	000c      	movs	r4, r1
    db16:	2d00      	cmp	r5, #0
    db18:	d005      	beq.n	db26 <__swsetup_r+0x1a>
    db1a:	69ab      	ldr	r3, [r5, #24]
    db1c:	2b00      	cmp	r3, #0
    db1e:	d102      	bne.n	db26 <__swsetup_r+0x1a>
    db20:	0028      	movs	r0, r5
    db22:	f000 f961 	bl	dde8 <__sinit>
    db26:	4b31      	ldr	r3, [pc, #196]	; (dbec <__swsetup_r+0xe0>)
    db28:	429c      	cmp	r4, r3
    db2a:	d10f      	bne.n	db4c <__swsetup_r+0x40>
    db2c:	686c      	ldr	r4, [r5, #4]
    db2e:	230c      	movs	r3, #12
    db30:	5ee2      	ldrsh	r2, [r4, r3]
    db32:	b293      	uxth	r3, r2
    db34:	0719      	lsls	r1, r3, #28
    db36:	d42d      	bmi.n	db94 <__swsetup_r+0x88>
    db38:	06d9      	lsls	r1, r3, #27
    db3a:	d411      	bmi.n	db60 <__swsetup_r+0x54>
    db3c:	2309      	movs	r3, #9
    db3e:	2001      	movs	r0, #1
    db40:	6033      	str	r3, [r6, #0]
    db42:	3337      	adds	r3, #55	; 0x37
    db44:	4313      	orrs	r3, r2
    db46:	81a3      	strh	r3, [r4, #12]
    db48:	4240      	negs	r0, r0
    db4a:	bd70      	pop	{r4, r5, r6, pc}
    db4c:	4b28      	ldr	r3, [pc, #160]	; (dbf0 <__swsetup_r+0xe4>)
    db4e:	429c      	cmp	r4, r3
    db50:	d101      	bne.n	db56 <__swsetup_r+0x4a>
    db52:	68ac      	ldr	r4, [r5, #8]
    db54:	e7eb      	b.n	db2e <__swsetup_r+0x22>
    db56:	4b27      	ldr	r3, [pc, #156]	; (dbf4 <__swsetup_r+0xe8>)
    db58:	429c      	cmp	r4, r3
    db5a:	d1e8      	bne.n	db2e <__swsetup_r+0x22>
    db5c:	68ec      	ldr	r4, [r5, #12]
    db5e:	e7e6      	b.n	db2e <__swsetup_r+0x22>
    db60:	075b      	lsls	r3, r3, #29
    db62:	d513      	bpl.n	db8c <__swsetup_r+0x80>
    db64:	6b61      	ldr	r1, [r4, #52]	; 0x34
    db66:	2900      	cmp	r1, #0
    db68:	d008      	beq.n	db7c <__swsetup_r+0x70>
    db6a:	0023      	movs	r3, r4
    db6c:	3344      	adds	r3, #68	; 0x44
    db6e:	4299      	cmp	r1, r3
    db70:	d002      	beq.n	db78 <__swsetup_r+0x6c>
    db72:	0030      	movs	r0, r6
    db74:	f7ff fc06 	bl	d384 <_free_r>
    db78:	2300      	movs	r3, #0
    db7a:	6363      	str	r3, [r4, #52]	; 0x34
    db7c:	2224      	movs	r2, #36	; 0x24
    db7e:	89a3      	ldrh	r3, [r4, #12]
    db80:	4393      	bics	r3, r2
    db82:	81a3      	strh	r3, [r4, #12]
    db84:	2300      	movs	r3, #0
    db86:	6063      	str	r3, [r4, #4]
    db88:	6923      	ldr	r3, [r4, #16]
    db8a:	6023      	str	r3, [r4, #0]
    db8c:	2308      	movs	r3, #8
    db8e:	89a2      	ldrh	r2, [r4, #12]
    db90:	4313      	orrs	r3, r2
    db92:	81a3      	strh	r3, [r4, #12]
    db94:	6923      	ldr	r3, [r4, #16]
    db96:	2b00      	cmp	r3, #0
    db98:	d10b      	bne.n	dbb2 <__swsetup_r+0xa6>
    db9a:	21a0      	movs	r1, #160	; 0xa0
    db9c:	2280      	movs	r2, #128	; 0x80
    db9e:	89a3      	ldrh	r3, [r4, #12]
    dba0:	0089      	lsls	r1, r1, #2
    dba2:	0092      	lsls	r2, r2, #2
    dba4:	400b      	ands	r3, r1
    dba6:	4293      	cmp	r3, r2
    dba8:	d003      	beq.n	dbb2 <__swsetup_r+0xa6>
    dbaa:	0021      	movs	r1, r4
    dbac:	0030      	movs	r0, r6
    dbae:	f000 f9db 	bl	df68 <__smakebuf_r>
    dbb2:	2301      	movs	r3, #1
    dbb4:	89a2      	ldrh	r2, [r4, #12]
    dbb6:	4013      	ands	r3, r2
    dbb8:	d011      	beq.n	dbde <__swsetup_r+0xd2>
    dbba:	2300      	movs	r3, #0
    dbbc:	60a3      	str	r3, [r4, #8]
    dbbe:	6963      	ldr	r3, [r4, #20]
    dbc0:	425b      	negs	r3, r3
    dbc2:	61a3      	str	r3, [r4, #24]
    dbc4:	2000      	movs	r0, #0
    dbc6:	6923      	ldr	r3, [r4, #16]
    dbc8:	4283      	cmp	r3, r0
    dbca:	d1be      	bne.n	db4a <__swsetup_r+0x3e>
    dbcc:	230c      	movs	r3, #12
    dbce:	5ee2      	ldrsh	r2, [r4, r3]
    dbd0:	0613      	lsls	r3, r2, #24
    dbd2:	d5ba      	bpl.n	db4a <__swsetup_r+0x3e>
    dbd4:	2340      	movs	r3, #64	; 0x40
    dbd6:	4313      	orrs	r3, r2
    dbd8:	81a3      	strh	r3, [r4, #12]
    dbda:	3801      	subs	r0, #1
    dbdc:	e7b5      	b.n	db4a <__swsetup_r+0x3e>
    dbde:	0792      	lsls	r2, r2, #30
    dbe0:	d400      	bmi.n	dbe4 <__swsetup_r+0xd8>
    dbe2:	6963      	ldr	r3, [r4, #20]
    dbe4:	60a3      	str	r3, [r4, #8]
    dbe6:	e7ed      	b.n	dbc4 <__swsetup_r+0xb8>
    dbe8:	20000190 	.word	0x20000190
    dbec:	000106fc 	.word	0x000106fc
    dbf0:	0001071c 	.word	0x0001071c
    dbf4:	000106dc 	.word	0x000106dc

0000dbf8 <__sflush_r>:
    dbf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dbfa:	898a      	ldrh	r2, [r1, #12]
    dbfc:	0005      	movs	r5, r0
    dbfe:	000c      	movs	r4, r1
    dc00:	0713      	lsls	r3, r2, #28
    dc02:	d460      	bmi.n	dcc6 <__sflush_r+0xce>
    dc04:	684b      	ldr	r3, [r1, #4]
    dc06:	2b00      	cmp	r3, #0
    dc08:	dc04      	bgt.n	dc14 <__sflush_r+0x1c>
    dc0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    dc0c:	2b00      	cmp	r3, #0
    dc0e:	dc01      	bgt.n	dc14 <__sflush_r+0x1c>
    dc10:	2000      	movs	r0, #0
    dc12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    dc14:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    dc16:	2f00      	cmp	r7, #0
    dc18:	d0fa      	beq.n	dc10 <__sflush_r+0x18>
    dc1a:	2300      	movs	r3, #0
    dc1c:	682e      	ldr	r6, [r5, #0]
    dc1e:	602b      	str	r3, [r5, #0]
    dc20:	2380      	movs	r3, #128	; 0x80
    dc22:	015b      	lsls	r3, r3, #5
    dc24:	401a      	ands	r2, r3
    dc26:	d034      	beq.n	dc92 <__sflush_r+0x9a>
    dc28:	6d60      	ldr	r0, [r4, #84]	; 0x54
    dc2a:	89a3      	ldrh	r3, [r4, #12]
    dc2c:	075b      	lsls	r3, r3, #29
    dc2e:	d506      	bpl.n	dc3e <__sflush_r+0x46>
    dc30:	6863      	ldr	r3, [r4, #4]
    dc32:	1ac0      	subs	r0, r0, r3
    dc34:	6b63      	ldr	r3, [r4, #52]	; 0x34
    dc36:	2b00      	cmp	r3, #0
    dc38:	d001      	beq.n	dc3e <__sflush_r+0x46>
    dc3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    dc3c:	1ac0      	subs	r0, r0, r3
    dc3e:	0002      	movs	r2, r0
    dc40:	6a21      	ldr	r1, [r4, #32]
    dc42:	2300      	movs	r3, #0
    dc44:	0028      	movs	r0, r5
    dc46:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    dc48:	47b8      	blx	r7
    dc4a:	89a1      	ldrh	r1, [r4, #12]
    dc4c:	1c43      	adds	r3, r0, #1
    dc4e:	d106      	bne.n	dc5e <__sflush_r+0x66>
    dc50:	682b      	ldr	r3, [r5, #0]
    dc52:	2b1d      	cmp	r3, #29
    dc54:	d831      	bhi.n	dcba <__sflush_r+0xc2>
    dc56:	4a2c      	ldr	r2, [pc, #176]	; (dd08 <__sflush_r+0x110>)
    dc58:	40da      	lsrs	r2, r3
    dc5a:	07d3      	lsls	r3, r2, #31
    dc5c:	d52d      	bpl.n	dcba <__sflush_r+0xc2>
    dc5e:	2300      	movs	r3, #0
    dc60:	6063      	str	r3, [r4, #4]
    dc62:	6923      	ldr	r3, [r4, #16]
    dc64:	6023      	str	r3, [r4, #0]
    dc66:	04cb      	lsls	r3, r1, #19
    dc68:	d505      	bpl.n	dc76 <__sflush_r+0x7e>
    dc6a:	1c43      	adds	r3, r0, #1
    dc6c:	d102      	bne.n	dc74 <__sflush_r+0x7c>
    dc6e:	682b      	ldr	r3, [r5, #0]
    dc70:	2b00      	cmp	r3, #0
    dc72:	d100      	bne.n	dc76 <__sflush_r+0x7e>
    dc74:	6560      	str	r0, [r4, #84]	; 0x54
    dc76:	6b61      	ldr	r1, [r4, #52]	; 0x34
    dc78:	602e      	str	r6, [r5, #0]
    dc7a:	2900      	cmp	r1, #0
    dc7c:	d0c8      	beq.n	dc10 <__sflush_r+0x18>
    dc7e:	0023      	movs	r3, r4
    dc80:	3344      	adds	r3, #68	; 0x44
    dc82:	4299      	cmp	r1, r3
    dc84:	d002      	beq.n	dc8c <__sflush_r+0x94>
    dc86:	0028      	movs	r0, r5
    dc88:	f7ff fb7c 	bl	d384 <_free_r>
    dc8c:	2000      	movs	r0, #0
    dc8e:	6360      	str	r0, [r4, #52]	; 0x34
    dc90:	e7bf      	b.n	dc12 <__sflush_r+0x1a>
    dc92:	2301      	movs	r3, #1
    dc94:	6a21      	ldr	r1, [r4, #32]
    dc96:	0028      	movs	r0, r5
    dc98:	47b8      	blx	r7
    dc9a:	1c43      	adds	r3, r0, #1
    dc9c:	d1c5      	bne.n	dc2a <__sflush_r+0x32>
    dc9e:	682b      	ldr	r3, [r5, #0]
    dca0:	2b00      	cmp	r3, #0
    dca2:	d0c2      	beq.n	dc2a <__sflush_r+0x32>
    dca4:	2b1d      	cmp	r3, #29
    dca6:	d001      	beq.n	dcac <__sflush_r+0xb4>
    dca8:	2b16      	cmp	r3, #22
    dcaa:	d101      	bne.n	dcb0 <__sflush_r+0xb8>
    dcac:	602e      	str	r6, [r5, #0]
    dcae:	e7af      	b.n	dc10 <__sflush_r+0x18>
    dcb0:	2340      	movs	r3, #64	; 0x40
    dcb2:	89a2      	ldrh	r2, [r4, #12]
    dcb4:	4313      	orrs	r3, r2
    dcb6:	81a3      	strh	r3, [r4, #12]
    dcb8:	e7ab      	b.n	dc12 <__sflush_r+0x1a>
    dcba:	2340      	movs	r3, #64	; 0x40
    dcbc:	430b      	orrs	r3, r1
    dcbe:	2001      	movs	r0, #1
    dcc0:	81a3      	strh	r3, [r4, #12]
    dcc2:	4240      	negs	r0, r0
    dcc4:	e7a5      	b.n	dc12 <__sflush_r+0x1a>
    dcc6:	690f      	ldr	r7, [r1, #16]
    dcc8:	2f00      	cmp	r7, #0
    dcca:	d0a1      	beq.n	dc10 <__sflush_r+0x18>
    dccc:	680b      	ldr	r3, [r1, #0]
    dcce:	600f      	str	r7, [r1, #0]
    dcd0:	1bdb      	subs	r3, r3, r7
    dcd2:	9301      	str	r3, [sp, #4]
    dcd4:	2300      	movs	r3, #0
    dcd6:	0792      	lsls	r2, r2, #30
    dcd8:	d100      	bne.n	dcdc <__sflush_r+0xe4>
    dcda:	694b      	ldr	r3, [r1, #20]
    dcdc:	60a3      	str	r3, [r4, #8]
    dcde:	9b01      	ldr	r3, [sp, #4]
    dce0:	2b00      	cmp	r3, #0
    dce2:	dc00      	bgt.n	dce6 <__sflush_r+0xee>
    dce4:	e794      	b.n	dc10 <__sflush_r+0x18>
    dce6:	9b01      	ldr	r3, [sp, #4]
    dce8:	003a      	movs	r2, r7
    dcea:	6a21      	ldr	r1, [r4, #32]
    dcec:	0028      	movs	r0, r5
    dcee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    dcf0:	47b0      	blx	r6
    dcf2:	2800      	cmp	r0, #0
    dcf4:	dc03      	bgt.n	dcfe <__sflush_r+0x106>
    dcf6:	2340      	movs	r3, #64	; 0x40
    dcf8:	89a2      	ldrh	r2, [r4, #12]
    dcfa:	4313      	orrs	r3, r2
    dcfc:	e7df      	b.n	dcbe <__sflush_r+0xc6>
    dcfe:	9b01      	ldr	r3, [sp, #4]
    dd00:	183f      	adds	r7, r7, r0
    dd02:	1a1b      	subs	r3, r3, r0
    dd04:	9301      	str	r3, [sp, #4]
    dd06:	e7ea      	b.n	dcde <__sflush_r+0xe6>
    dd08:	20400001 	.word	0x20400001

0000dd0c <_fflush_r>:
    dd0c:	690b      	ldr	r3, [r1, #16]
    dd0e:	b570      	push	{r4, r5, r6, lr}
    dd10:	0005      	movs	r5, r0
    dd12:	000c      	movs	r4, r1
    dd14:	2b00      	cmp	r3, #0
    dd16:	d101      	bne.n	dd1c <_fflush_r+0x10>
    dd18:	2000      	movs	r0, #0
    dd1a:	bd70      	pop	{r4, r5, r6, pc}
    dd1c:	2800      	cmp	r0, #0
    dd1e:	d004      	beq.n	dd2a <_fflush_r+0x1e>
    dd20:	6983      	ldr	r3, [r0, #24]
    dd22:	2b00      	cmp	r3, #0
    dd24:	d101      	bne.n	dd2a <_fflush_r+0x1e>
    dd26:	f000 f85f 	bl	dde8 <__sinit>
    dd2a:	4b0b      	ldr	r3, [pc, #44]	; (dd58 <_fflush_r+0x4c>)
    dd2c:	429c      	cmp	r4, r3
    dd2e:	d109      	bne.n	dd44 <_fflush_r+0x38>
    dd30:	686c      	ldr	r4, [r5, #4]
    dd32:	220c      	movs	r2, #12
    dd34:	5ea3      	ldrsh	r3, [r4, r2]
    dd36:	2b00      	cmp	r3, #0
    dd38:	d0ee      	beq.n	dd18 <_fflush_r+0xc>
    dd3a:	0021      	movs	r1, r4
    dd3c:	0028      	movs	r0, r5
    dd3e:	f7ff ff5b 	bl	dbf8 <__sflush_r>
    dd42:	e7ea      	b.n	dd1a <_fflush_r+0xe>
    dd44:	4b05      	ldr	r3, [pc, #20]	; (dd5c <_fflush_r+0x50>)
    dd46:	429c      	cmp	r4, r3
    dd48:	d101      	bne.n	dd4e <_fflush_r+0x42>
    dd4a:	68ac      	ldr	r4, [r5, #8]
    dd4c:	e7f1      	b.n	dd32 <_fflush_r+0x26>
    dd4e:	4b04      	ldr	r3, [pc, #16]	; (dd60 <_fflush_r+0x54>)
    dd50:	429c      	cmp	r4, r3
    dd52:	d1ee      	bne.n	dd32 <_fflush_r+0x26>
    dd54:	68ec      	ldr	r4, [r5, #12]
    dd56:	e7ec      	b.n	dd32 <_fflush_r+0x26>
    dd58:	000106fc 	.word	0x000106fc
    dd5c:	0001071c 	.word	0x0001071c
    dd60:	000106dc 	.word	0x000106dc

0000dd64 <_cleanup_r>:
    dd64:	b510      	push	{r4, lr}
    dd66:	4902      	ldr	r1, [pc, #8]	; (dd70 <_cleanup_r+0xc>)
    dd68:	f000 f8b2 	bl	ded0 <_fwalk_reent>
    dd6c:	bd10      	pop	{r4, pc}
    dd6e:	46c0      	nop			; (mov r8, r8)
    dd70:	0000dd0d 	.word	0x0000dd0d

0000dd74 <std.isra.0>:
    dd74:	2300      	movs	r3, #0
    dd76:	b510      	push	{r4, lr}
    dd78:	0004      	movs	r4, r0
    dd7a:	6003      	str	r3, [r0, #0]
    dd7c:	6043      	str	r3, [r0, #4]
    dd7e:	6083      	str	r3, [r0, #8]
    dd80:	8181      	strh	r1, [r0, #12]
    dd82:	6643      	str	r3, [r0, #100]	; 0x64
    dd84:	81c2      	strh	r2, [r0, #14]
    dd86:	6103      	str	r3, [r0, #16]
    dd88:	6143      	str	r3, [r0, #20]
    dd8a:	6183      	str	r3, [r0, #24]
    dd8c:	0019      	movs	r1, r3
    dd8e:	2208      	movs	r2, #8
    dd90:	305c      	adds	r0, #92	; 0x5c
    dd92:	f7ff faef 	bl	d374 <memset>
    dd96:	4b05      	ldr	r3, [pc, #20]	; (ddac <std.isra.0+0x38>)
    dd98:	6224      	str	r4, [r4, #32]
    dd9a:	6263      	str	r3, [r4, #36]	; 0x24
    dd9c:	4b04      	ldr	r3, [pc, #16]	; (ddb0 <std.isra.0+0x3c>)
    dd9e:	62a3      	str	r3, [r4, #40]	; 0x28
    dda0:	4b04      	ldr	r3, [pc, #16]	; (ddb4 <std.isra.0+0x40>)
    dda2:	62e3      	str	r3, [r4, #44]	; 0x2c
    dda4:	4b04      	ldr	r3, [pc, #16]	; (ddb8 <std.isra.0+0x44>)
    dda6:	6323      	str	r3, [r4, #48]	; 0x30
    dda8:	bd10      	pop	{r4, pc}
    ddaa:	46c0      	nop			; (mov r8, r8)
    ddac:	0000e8e9 	.word	0x0000e8e9
    ddb0:	0000e911 	.word	0x0000e911
    ddb4:	0000e949 	.word	0x0000e949
    ddb8:	0000e975 	.word	0x0000e975

0000ddbc <__sfmoreglue>:
    ddbc:	b570      	push	{r4, r5, r6, lr}
    ddbe:	2568      	movs	r5, #104	; 0x68
    ddc0:	1e4a      	subs	r2, r1, #1
    ddc2:	4355      	muls	r5, r2
    ddc4:	000e      	movs	r6, r1
    ddc6:	0029      	movs	r1, r5
    ddc8:	3174      	adds	r1, #116	; 0x74
    ddca:	f7ff fb25 	bl	d418 <_malloc_r>
    ddce:	1e04      	subs	r4, r0, #0
    ddd0:	d008      	beq.n	dde4 <__sfmoreglue+0x28>
    ddd2:	2100      	movs	r1, #0
    ddd4:	002a      	movs	r2, r5
    ddd6:	6001      	str	r1, [r0, #0]
    ddd8:	6046      	str	r6, [r0, #4]
    ddda:	300c      	adds	r0, #12
    dddc:	60a0      	str	r0, [r4, #8]
    ddde:	3268      	adds	r2, #104	; 0x68
    dde0:	f7ff fac8 	bl	d374 <memset>
    dde4:	0020      	movs	r0, r4
    dde6:	bd70      	pop	{r4, r5, r6, pc}

0000dde8 <__sinit>:
    dde8:	6983      	ldr	r3, [r0, #24]
    ddea:	b513      	push	{r0, r1, r4, lr}
    ddec:	0004      	movs	r4, r0
    ddee:	2b00      	cmp	r3, #0
    ddf0:	d128      	bne.n	de44 <__sinit+0x5c>
    ddf2:	6483      	str	r3, [r0, #72]	; 0x48
    ddf4:	64c3      	str	r3, [r0, #76]	; 0x4c
    ddf6:	6503      	str	r3, [r0, #80]	; 0x50
    ddf8:	4b13      	ldr	r3, [pc, #76]	; (de48 <__sinit+0x60>)
    ddfa:	4a14      	ldr	r2, [pc, #80]	; (de4c <__sinit+0x64>)
    ddfc:	681b      	ldr	r3, [r3, #0]
    ddfe:	6282      	str	r2, [r0, #40]	; 0x28
    de00:	9301      	str	r3, [sp, #4]
    de02:	4298      	cmp	r0, r3
    de04:	d101      	bne.n	de0a <__sinit+0x22>
    de06:	2301      	movs	r3, #1
    de08:	6183      	str	r3, [r0, #24]
    de0a:	0020      	movs	r0, r4
    de0c:	f000 f820 	bl	de50 <__sfp>
    de10:	6060      	str	r0, [r4, #4]
    de12:	0020      	movs	r0, r4
    de14:	f000 f81c 	bl	de50 <__sfp>
    de18:	60a0      	str	r0, [r4, #8]
    de1a:	0020      	movs	r0, r4
    de1c:	f000 f818 	bl	de50 <__sfp>
    de20:	2200      	movs	r2, #0
    de22:	60e0      	str	r0, [r4, #12]
    de24:	2104      	movs	r1, #4
    de26:	6860      	ldr	r0, [r4, #4]
    de28:	f7ff ffa4 	bl	dd74 <std.isra.0>
    de2c:	2201      	movs	r2, #1
    de2e:	2109      	movs	r1, #9
    de30:	68a0      	ldr	r0, [r4, #8]
    de32:	f7ff ff9f 	bl	dd74 <std.isra.0>
    de36:	2202      	movs	r2, #2
    de38:	2112      	movs	r1, #18
    de3a:	68e0      	ldr	r0, [r4, #12]
    de3c:	f7ff ff9a 	bl	dd74 <std.isra.0>
    de40:	2301      	movs	r3, #1
    de42:	61a3      	str	r3, [r4, #24]
    de44:	bd13      	pop	{r0, r1, r4, pc}
    de46:	46c0      	nop			; (mov r8, r8)
    de48:	000106d8 	.word	0x000106d8
    de4c:	0000dd65 	.word	0x0000dd65

0000de50 <__sfp>:
    de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de52:	4b1e      	ldr	r3, [pc, #120]	; (decc <__sfp+0x7c>)
    de54:	0007      	movs	r7, r0
    de56:	681e      	ldr	r6, [r3, #0]
    de58:	69b3      	ldr	r3, [r6, #24]
    de5a:	2b00      	cmp	r3, #0
    de5c:	d102      	bne.n	de64 <__sfp+0x14>
    de5e:	0030      	movs	r0, r6
    de60:	f7ff ffc2 	bl	dde8 <__sinit>
    de64:	3648      	adds	r6, #72	; 0x48
    de66:	68b4      	ldr	r4, [r6, #8]
    de68:	6873      	ldr	r3, [r6, #4]
    de6a:	3b01      	subs	r3, #1
    de6c:	d504      	bpl.n	de78 <__sfp+0x28>
    de6e:	6833      	ldr	r3, [r6, #0]
    de70:	2b00      	cmp	r3, #0
    de72:	d007      	beq.n	de84 <__sfp+0x34>
    de74:	6836      	ldr	r6, [r6, #0]
    de76:	e7f6      	b.n	de66 <__sfp+0x16>
    de78:	220c      	movs	r2, #12
    de7a:	5ea5      	ldrsh	r5, [r4, r2]
    de7c:	2d00      	cmp	r5, #0
    de7e:	d00d      	beq.n	de9c <__sfp+0x4c>
    de80:	3468      	adds	r4, #104	; 0x68
    de82:	e7f2      	b.n	de6a <__sfp+0x1a>
    de84:	2104      	movs	r1, #4
    de86:	0038      	movs	r0, r7
    de88:	f7ff ff98 	bl	ddbc <__sfmoreglue>
    de8c:	6030      	str	r0, [r6, #0]
    de8e:	2800      	cmp	r0, #0
    de90:	d1f0      	bne.n	de74 <__sfp+0x24>
    de92:	230c      	movs	r3, #12
    de94:	0004      	movs	r4, r0
    de96:	603b      	str	r3, [r7, #0]
    de98:	0020      	movs	r0, r4
    de9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de9c:	2301      	movs	r3, #1
    de9e:	0020      	movs	r0, r4
    dea0:	425b      	negs	r3, r3
    dea2:	81e3      	strh	r3, [r4, #14]
    dea4:	3302      	adds	r3, #2
    dea6:	81a3      	strh	r3, [r4, #12]
    dea8:	6665      	str	r5, [r4, #100]	; 0x64
    deaa:	6025      	str	r5, [r4, #0]
    deac:	60a5      	str	r5, [r4, #8]
    deae:	6065      	str	r5, [r4, #4]
    deb0:	6125      	str	r5, [r4, #16]
    deb2:	6165      	str	r5, [r4, #20]
    deb4:	61a5      	str	r5, [r4, #24]
    deb6:	2208      	movs	r2, #8
    deb8:	0029      	movs	r1, r5
    deba:	305c      	adds	r0, #92	; 0x5c
    debc:	f7ff fa5a 	bl	d374 <memset>
    dec0:	6365      	str	r5, [r4, #52]	; 0x34
    dec2:	63a5      	str	r5, [r4, #56]	; 0x38
    dec4:	64a5      	str	r5, [r4, #72]	; 0x48
    dec6:	64e5      	str	r5, [r4, #76]	; 0x4c
    dec8:	e7e6      	b.n	de98 <__sfp+0x48>
    deca:	46c0      	nop			; (mov r8, r8)
    decc:	000106d8 	.word	0x000106d8

0000ded0 <_fwalk_reent>:
    ded0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ded2:	0004      	movs	r4, r0
    ded4:	0007      	movs	r7, r0
    ded6:	2600      	movs	r6, #0
    ded8:	9101      	str	r1, [sp, #4]
    deda:	3448      	adds	r4, #72	; 0x48
    dedc:	2c00      	cmp	r4, #0
    dede:	d101      	bne.n	dee4 <_fwalk_reent+0x14>
    dee0:	0030      	movs	r0, r6
    dee2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    dee4:	6863      	ldr	r3, [r4, #4]
    dee6:	68a5      	ldr	r5, [r4, #8]
    dee8:	9300      	str	r3, [sp, #0]
    deea:	9b00      	ldr	r3, [sp, #0]
    deec:	3b01      	subs	r3, #1
    deee:	9300      	str	r3, [sp, #0]
    def0:	d501      	bpl.n	def6 <_fwalk_reent+0x26>
    def2:	6824      	ldr	r4, [r4, #0]
    def4:	e7f2      	b.n	dedc <_fwalk_reent+0xc>
    def6:	89ab      	ldrh	r3, [r5, #12]
    def8:	2b01      	cmp	r3, #1
    defa:	d908      	bls.n	df0e <_fwalk_reent+0x3e>
    defc:	220e      	movs	r2, #14
    defe:	5eab      	ldrsh	r3, [r5, r2]
    df00:	3301      	adds	r3, #1
    df02:	d004      	beq.n	df0e <_fwalk_reent+0x3e>
    df04:	0029      	movs	r1, r5
    df06:	0038      	movs	r0, r7
    df08:	9b01      	ldr	r3, [sp, #4]
    df0a:	4798      	blx	r3
    df0c:	4306      	orrs	r6, r0
    df0e:	3568      	adds	r5, #104	; 0x68
    df10:	e7eb      	b.n	deea <_fwalk_reent+0x1a>

0000df12 <__locale_ctype_ptr_l>:
    df12:	30ec      	adds	r0, #236	; 0xec
    df14:	6800      	ldr	r0, [r0, #0]
    df16:	4770      	bx	lr

0000df18 <__swhatbuf_r>:
    df18:	b570      	push	{r4, r5, r6, lr}
    df1a:	000e      	movs	r6, r1
    df1c:	001d      	movs	r5, r3
    df1e:	230e      	movs	r3, #14
    df20:	5ec9      	ldrsh	r1, [r1, r3]
    df22:	b090      	sub	sp, #64	; 0x40
    df24:	0014      	movs	r4, r2
    df26:	2900      	cmp	r1, #0
    df28:	da07      	bge.n	df3a <__swhatbuf_r+0x22>
    df2a:	2300      	movs	r3, #0
    df2c:	602b      	str	r3, [r5, #0]
    df2e:	89b3      	ldrh	r3, [r6, #12]
    df30:	061b      	lsls	r3, r3, #24
    df32:	d411      	bmi.n	df58 <__swhatbuf_r+0x40>
    df34:	2380      	movs	r3, #128	; 0x80
    df36:	00db      	lsls	r3, r3, #3
    df38:	e00f      	b.n	df5a <__swhatbuf_r+0x42>
    df3a:	aa01      	add	r2, sp, #4
    df3c:	f000 fd52 	bl	e9e4 <_fstat_r>
    df40:	2800      	cmp	r0, #0
    df42:	dbf2      	blt.n	df2a <__swhatbuf_r+0x12>
    df44:	22f0      	movs	r2, #240	; 0xf0
    df46:	9b02      	ldr	r3, [sp, #8]
    df48:	0212      	lsls	r2, r2, #8
    df4a:	4013      	ands	r3, r2
    df4c:	4a05      	ldr	r2, [pc, #20]	; (df64 <__swhatbuf_r+0x4c>)
    df4e:	189b      	adds	r3, r3, r2
    df50:	425a      	negs	r2, r3
    df52:	4153      	adcs	r3, r2
    df54:	602b      	str	r3, [r5, #0]
    df56:	e7ed      	b.n	df34 <__swhatbuf_r+0x1c>
    df58:	2340      	movs	r3, #64	; 0x40
    df5a:	2000      	movs	r0, #0
    df5c:	6023      	str	r3, [r4, #0]
    df5e:	b010      	add	sp, #64	; 0x40
    df60:	bd70      	pop	{r4, r5, r6, pc}
    df62:	46c0      	nop			; (mov r8, r8)
    df64:	ffffe000 	.word	0xffffe000

0000df68 <__smakebuf_r>:
    df68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    df6a:	2602      	movs	r6, #2
    df6c:	898b      	ldrh	r3, [r1, #12]
    df6e:	0005      	movs	r5, r0
    df70:	000c      	movs	r4, r1
    df72:	4233      	tst	r3, r6
    df74:	d006      	beq.n	df84 <__smakebuf_r+0x1c>
    df76:	0023      	movs	r3, r4
    df78:	3347      	adds	r3, #71	; 0x47
    df7a:	6023      	str	r3, [r4, #0]
    df7c:	6123      	str	r3, [r4, #16]
    df7e:	2301      	movs	r3, #1
    df80:	6163      	str	r3, [r4, #20]
    df82:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    df84:	ab01      	add	r3, sp, #4
    df86:	466a      	mov	r2, sp
    df88:	f7ff ffc6 	bl	df18 <__swhatbuf_r>
    df8c:	9900      	ldr	r1, [sp, #0]
    df8e:	0007      	movs	r7, r0
    df90:	0028      	movs	r0, r5
    df92:	f7ff fa41 	bl	d418 <_malloc_r>
    df96:	2800      	cmp	r0, #0
    df98:	d108      	bne.n	dfac <__smakebuf_r+0x44>
    df9a:	220c      	movs	r2, #12
    df9c:	5ea3      	ldrsh	r3, [r4, r2]
    df9e:	059a      	lsls	r2, r3, #22
    dfa0:	d4ef      	bmi.n	df82 <__smakebuf_r+0x1a>
    dfa2:	2203      	movs	r2, #3
    dfa4:	4393      	bics	r3, r2
    dfa6:	431e      	orrs	r6, r3
    dfa8:	81a6      	strh	r6, [r4, #12]
    dfaa:	e7e4      	b.n	df76 <__smakebuf_r+0xe>
    dfac:	4b0f      	ldr	r3, [pc, #60]	; (dfec <__smakebuf_r+0x84>)
    dfae:	62ab      	str	r3, [r5, #40]	; 0x28
    dfb0:	2380      	movs	r3, #128	; 0x80
    dfb2:	89a2      	ldrh	r2, [r4, #12]
    dfb4:	6020      	str	r0, [r4, #0]
    dfb6:	4313      	orrs	r3, r2
    dfb8:	81a3      	strh	r3, [r4, #12]
    dfba:	9b00      	ldr	r3, [sp, #0]
    dfbc:	6120      	str	r0, [r4, #16]
    dfbe:	6163      	str	r3, [r4, #20]
    dfc0:	9b01      	ldr	r3, [sp, #4]
    dfc2:	2b00      	cmp	r3, #0
    dfc4:	d00d      	beq.n	dfe2 <__smakebuf_r+0x7a>
    dfc6:	230e      	movs	r3, #14
    dfc8:	5ee1      	ldrsh	r1, [r4, r3]
    dfca:	0028      	movs	r0, r5
    dfcc:	f000 fd1c 	bl	ea08 <_isatty_r>
    dfd0:	2800      	cmp	r0, #0
    dfd2:	d006      	beq.n	dfe2 <__smakebuf_r+0x7a>
    dfd4:	2203      	movs	r2, #3
    dfd6:	89a3      	ldrh	r3, [r4, #12]
    dfd8:	4393      	bics	r3, r2
    dfda:	001a      	movs	r2, r3
    dfdc:	2301      	movs	r3, #1
    dfde:	4313      	orrs	r3, r2
    dfe0:	81a3      	strh	r3, [r4, #12]
    dfe2:	89a0      	ldrh	r0, [r4, #12]
    dfe4:	4338      	orrs	r0, r7
    dfe6:	81a0      	strh	r0, [r4, #12]
    dfe8:	e7cb      	b.n	df82 <__smakebuf_r+0x1a>
    dfea:	46c0      	nop			; (mov r8, r8)
    dfec:	0000dd65 	.word	0x0000dd65

0000dff0 <__ascii_mbtowc>:
    dff0:	b082      	sub	sp, #8
    dff2:	2900      	cmp	r1, #0
    dff4:	d100      	bne.n	dff8 <__ascii_mbtowc+0x8>
    dff6:	a901      	add	r1, sp, #4
    dff8:	1e10      	subs	r0, r2, #0
    dffa:	d006      	beq.n	e00a <__ascii_mbtowc+0x1a>
    dffc:	2b00      	cmp	r3, #0
    dffe:	d006      	beq.n	e00e <__ascii_mbtowc+0x1e>
    e000:	7813      	ldrb	r3, [r2, #0]
    e002:	600b      	str	r3, [r1, #0]
    e004:	7810      	ldrb	r0, [r2, #0]
    e006:	1e43      	subs	r3, r0, #1
    e008:	4198      	sbcs	r0, r3
    e00a:	b002      	add	sp, #8
    e00c:	4770      	bx	lr
    e00e:	2002      	movs	r0, #2
    e010:	4240      	negs	r0, r0
    e012:	e7fa      	b.n	e00a <__ascii_mbtowc+0x1a>

0000e014 <__malloc_lock>:
    e014:	4770      	bx	lr

0000e016 <__malloc_unlock>:
    e016:	4770      	bx	lr

0000e018 <__ssputs_r>:
    e018:	b5f0      	push	{r4, r5, r6, r7, lr}
    e01a:	688e      	ldr	r6, [r1, #8]
    e01c:	b085      	sub	sp, #20
    e01e:	0007      	movs	r7, r0
    e020:	000c      	movs	r4, r1
    e022:	9203      	str	r2, [sp, #12]
    e024:	9301      	str	r3, [sp, #4]
    e026:	429e      	cmp	r6, r3
    e028:	d839      	bhi.n	e09e <__ssputs_r+0x86>
    e02a:	2390      	movs	r3, #144	; 0x90
    e02c:	898a      	ldrh	r2, [r1, #12]
    e02e:	00db      	lsls	r3, r3, #3
    e030:	421a      	tst	r2, r3
    e032:	d034      	beq.n	e09e <__ssputs_r+0x86>
    e034:	2503      	movs	r5, #3
    e036:	6909      	ldr	r1, [r1, #16]
    e038:	6823      	ldr	r3, [r4, #0]
    e03a:	1a5b      	subs	r3, r3, r1
    e03c:	9302      	str	r3, [sp, #8]
    e03e:	6963      	ldr	r3, [r4, #20]
    e040:	9802      	ldr	r0, [sp, #8]
    e042:	435d      	muls	r5, r3
    e044:	0feb      	lsrs	r3, r5, #31
    e046:	195d      	adds	r5, r3, r5
    e048:	9b01      	ldr	r3, [sp, #4]
    e04a:	106d      	asrs	r5, r5, #1
    e04c:	3301      	adds	r3, #1
    e04e:	181b      	adds	r3, r3, r0
    e050:	42ab      	cmp	r3, r5
    e052:	d900      	bls.n	e056 <__ssputs_r+0x3e>
    e054:	001d      	movs	r5, r3
    e056:	0553      	lsls	r3, r2, #21
    e058:	d532      	bpl.n	e0c0 <__ssputs_r+0xa8>
    e05a:	0029      	movs	r1, r5
    e05c:	0038      	movs	r0, r7
    e05e:	f7ff f9db 	bl	d418 <_malloc_r>
    e062:	1e06      	subs	r6, r0, #0
    e064:	d109      	bne.n	e07a <__ssputs_r+0x62>
    e066:	230c      	movs	r3, #12
    e068:	603b      	str	r3, [r7, #0]
    e06a:	2340      	movs	r3, #64	; 0x40
    e06c:	2001      	movs	r0, #1
    e06e:	89a2      	ldrh	r2, [r4, #12]
    e070:	4240      	negs	r0, r0
    e072:	4313      	orrs	r3, r2
    e074:	81a3      	strh	r3, [r4, #12]
    e076:	b005      	add	sp, #20
    e078:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e07a:	9a02      	ldr	r2, [sp, #8]
    e07c:	6921      	ldr	r1, [r4, #16]
    e07e:	f7ff f95e 	bl	d33e <memcpy>
    e082:	89a3      	ldrh	r3, [r4, #12]
    e084:	4a14      	ldr	r2, [pc, #80]	; (e0d8 <__ssputs_r+0xc0>)
    e086:	401a      	ands	r2, r3
    e088:	2380      	movs	r3, #128	; 0x80
    e08a:	4313      	orrs	r3, r2
    e08c:	81a3      	strh	r3, [r4, #12]
    e08e:	9b02      	ldr	r3, [sp, #8]
    e090:	6126      	str	r6, [r4, #16]
    e092:	18f6      	adds	r6, r6, r3
    e094:	6026      	str	r6, [r4, #0]
    e096:	6165      	str	r5, [r4, #20]
    e098:	9e01      	ldr	r6, [sp, #4]
    e09a:	1aed      	subs	r5, r5, r3
    e09c:	60a5      	str	r5, [r4, #8]
    e09e:	9b01      	ldr	r3, [sp, #4]
    e0a0:	42b3      	cmp	r3, r6
    e0a2:	d200      	bcs.n	e0a6 <__ssputs_r+0x8e>
    e0a4:	001e      	movs	r6, r3
    e0a6:	0032      	movs	r2, r6
    e0a8:	9903      	ldr	r1, [sp, #12]
    e0aa:	6820      	ldr	r0, [r4, #0]
    e0ac:	f7ff f950 	bl	d350 <memmove>
    e0b0:	68a3      	ldr	r3, [r4, #8]
    e0b2:	2000      	movs	r0, #0
    e0b4:	1b9b      	subs	r3, r3, r6
    e0b6:	60a3      	str	r3, [r4, #8]
    e0b8:	6823      	ldr	r3, [r4, #0]
    e0ba:	199e      	adds	r6, r3, r6
    e0bc:	6026      	str	r6, [r4, #0]
    e0be:	e7da      	b.n	e076 <__ssputs_r+0x5e>
    e0c0:	002a      	movs	r2, r5
    e0c2:	0038      	movs	r0, r7
    e0c4:	f000 fcd1 	bl	ea6a <_realloc_r>
    e0c8:	1e06      	subs	r6, r0, #0
    e0ca:	d1e0      	bne.n	e08e <__ssputs_r+0x76>
    e0cc:	6921      	ldr	r1, [r4, #16]
    e0ce:	0038      	movs	r0, r7
    e0d0:	f7ff f958 	bl	d384 <_free_r>
    e0d4:	e7c7      	b.n	e066 <__ssputs_r+0x4e>
    e0d6:	46c0      	nop			; (mov r8, r8)
    e0d8:	fffffb7f 	.word	0xfffffb7f

0000e0dc <_svfiprintf_r>:
    e0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0de:	b09f      	sub	sp, #124	; 0x7c
    e0e0:	9002      	str	r0, [sp, #8]
    e0e2:	9305      	str	r3, [sp, #20]
    e0e4:	898b      	ldrh	r3, [r1, #12]
    e0e6:	000f      	movs	r7, r1
    e0e8:	0016      	movs	r6, r2
    e0ea:	061b      	lsls	r3, r3, #24
    e0ec:	d511      	bpl.n	e112 <_svfiprintf_r+0x36>
    e0ee:	690b      	ldr	r3, [r1, #16]
    e0f0:	2b00      	cmp	r3, #0
    e0f2:	d10e      	bne.n	e112 <_svfiprintf_r+0x36>
    e0f4:	2140      	movs	r1, #64	; 0x40
    e0f6:	f7ff f98f 	bl	d418 <_malloc_r>
    e0fa:	6038      	str	r0, [r7, #0]
    e0fc:	6138      	str	r0, [r7, #16]
    e0fe:	2800      	cmp	r0, #0
    e100:	d105      	bne.n	e10e <_svfiprintf_r+0x32>
    e102:	230c      	movs	r3, #12
    e104:	9a02      	ldr	r2, [sp, #8]
    e106:	3801      	subs	r0, #1
    e108:	6013      	str	r3, [r2, #0]
    e10a:	b01f      	add	sp, #124	; 0x7c
    e10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e10e:	2340      	movs	r3, #64	; 0x40
    e110:	617b      	str	r3, [r7, #20]
    e112:	2300      	movs	r3, #0
    e114:	ad06      	add	r5, sp, #24
    e116:	616b      	str	r3, [r5, #20]
    e118:	3320      	adds	r3, #32
    e11a:	766b      	strb	r3, [r5, #25]
    e11c:	3310      	adds	r3, #16
    e11e:	76ab      	strb	r3, [r5, #26]
    e120:	0034      	movs	r4, r6
    e122:	7823      	ldrb	r3, [r4, #0]
    e124:	2b00      	cmp	r3, #0
    e126:	d147      	bne.n	e1b8 <_svfiprintf_r+0xdc>
    e128:	1ba3      	subs	r3, r4, r6
    e12a:	9304      	str	r3, [sp, #16]
    e12c:	d00d      	beq.n	e14a <_svfiprintf_r+0x6e>
    e12e:	1ba3      	subs	r3, r4, r6
    e130:	0032      	movs	r2, r6
    e132:	0039      	movs	r1, r7
    e134:	9802      	ldr	r0, [sp, #8]
    e136:	f7ff ff6f 	bl	e018 <__ssputs_r>
    e13a:	1c43      	adds	r3, r0, #1
    e13c:	d100      	bne.n	e140 <_svfiprintf_r+0x64>
    e13e:	e0b5      	b.n	e2ac <_svfiprintf_r+0x1d0>
    e140:	696a      	ldr	r2, [r5, #20]
    e142:	9b04      	ldr	r3, [sp, #16]
    e144:	4694      	mov	ip, r2
    e146:	4463      	add	r3, ip
    e148:	616b      	str	r3, [r5, #20]
    e14a:	7823      	ldrb	r3, [r4, #0]
    e14c:	2b00      	cmp	r3, #0
    e14e:	d100      	bne.n	e152 <_svfiprintf_r+0x76>
    e150:	e0ac      	b.n	e2ac <_svfiprintf_r+0x1d0>
    e152:	2201      	movs	r2, #1
    e154:	2300      	movs	r3, #0
    e156:	4252      	negs	r2, r2
    e158:	606a      	str	r2, [r5, #4]
    e15a:	a902      	add	r1, sp, #8
    e15c:	3254      	adds	r2, #84	; 0x54
    e15e:	1852      	adds	r2, r2, r1
    e160:	3401      	adds	r4, #1
    e162:	602b      	str	r3, [r5, #0]
    e164:	60eb      	str	r3, [r5, #12]
    e166:	60ab      	str	r3, [r5, #8]
    e168:	7013      	strb	r3, [r2, #0]
    e16a:	65ab      	str	r3, [r5, #88]	; 0x58
    e16c:	4e58      	ldr	r6, [pc, #352]	; (e2d0 <_svfiprintf_r+0x1f4>)
    e16e:	2205      	movs	r2, #5
    e170:	7821      	ldrb	r1, [r4, #0]
    e172:	0030      	movs	r0, r6
    e174:	f000 fc6e 	bl	ea54 <memchr>
    e178:	1c62      	adds	r2, r4, #1
    e17a:	2800      	cmp	r0, #0
    e17c:	d120      	bne.n	e1c0 <_svfiprintf_r+0xe4>
    e17e:	6829      	ldr	r1, [r5, #0]
    e180:	06cb      	lsls	r3, r1, #27
    e182:	d504      	bpl.n	e18e <_svfiprintf_r+0xb2>
    e184:	2353      	movs	r3, #83	; 0x53
    e186:	ae02      	add	r6, sp, #8
    e188:	3020      	adds	r0, #32
    e18a:	199b      	adds	r3, r3, r6
    e18c:	7018      	strb	r0, [r3, #0]
    e18e:	070b      	lsls	r3, r1, #28
    e190:	d504      	bpl.n	e19c <_svfiprintf_r+0xc0>
    e192:	2353      	movs	r3, #83	; 0x53
    e194:	202b      	movs	r0, #43	; 0x2b
    e196:	ae02      	add	r6, sp, #8
    e198:	199b      	adds	r3, r3, r6
    e19a:	7018      	strb	r0, [r3, #0]
    e19c:	7823      	ldrb	r3, [r4, #0]
    e19e:	2b2a      	cmp	r3, #42	; 0x2a
    e1a0:	d016      	beq.n	e1d0 <_svfiprintf_r+0xf4>
    e1a2:	2000      	movs	r0, #0
    e1a4:	210a      	movs	r1, #10
    e1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e1a8:	7822      	ldrb	r2, [r4, #0]
    e1aa:	3a30      	subs	r2, #48	; 0x30
    e1ac:	2a09      	cmp	r2, #9
    e1ae:	d955      	bls.n	e25c <_svfiprintf_r+0x180>
    e1b0:	2800      	cmp	r0, #0
    e1b2:	d015      	beq.n	e1e0 <_svfiprintf_r+0x104>
    e1b4:	9309      	str	r3, [sp, #36]	; 0x24
    e1b6:	e013      	b.n	e1e0 <_svfiprintf_r+0x104>
    e1b8:	2b25      	cmp	r3, #37	; 0x25
    e1ba:	d0b5      	beq.n	e128 <_svfiprintf_r+0x4c>
    e1bc:	3401      	adds	r4, #1
    e1be:	e7b0      	b.n	e122 <_svfiprintf_r+0x46>
    e1c0:	2301      	movs	r3, #1
    e1c2:	1b80      	subs	r0, r0, r6
    e1c4:	4083      	lsls	r3, r0
    e1c6:	6829      	ldr	r1, [r5, #0]
    e1c8:	0014      	movs	r4, r2
    e1ca:	430b      	orrs	r3, r1
    e1cc:	602b      	str	r3, [r5, #0]
    e1ce:	e7cd      	b.n	e16c <_svfiprintf_r+0x90>
    e1d0:	9b05      	ldr	r3, [sp, #20]
    e1d2:	1d18      	adds	r0, r3, #4
    e1d4:	681b      	ldr	r3, [r3, #0]
    e1d6:	9005      	str	r0, [sp, #20]
    e1d8:	2b00      	cmp	r3, #0
    e1da:	db39      	blt.n	e250 <_svfiprintf_r+0x174>
    e1dc:	9309      	str	r3, [sp, #36]	; 0x24
    e1de:	0014      	movs	r4, r2
    e1e0:	7823      	ldrb	r3, [r4, #0]
    e1e2:	2b2e      	cmp	r3, #46	; 0x2e
    e1e4:	d10b      	bne.n	e1fe <_svfiprintf_r+0x122>
    e1e6:	7863      	ldrb	r3, [r4, #1]
    e1e8:	1c62      	adds	r2, r4, #1
    e1ea:	2b2a      	cmp	r3, #42	; 0x2a
    e1ec:	d13e      	bne.n	e26c <_svfiprintf_r+0x190>
    e1ee:	9b05      	ldr	r3, [sp, #20]
    e1f0:	3402      	adds	r4, #2
    e1f2:	1d1a      	adds	r2, r3, #4
    e1f4:	681b      	ldr	r3, [r3, #0]
    e1f6:	9205      	str	r2, [sp, #20]
    e1f8:	2b00      	cmp	r3, #0
    e1fa:	db34      	blt.n	e266 <_svfiprintf_r+0x18a>
    e1fc:	9307      	str	r3, [sp, #28]
    e1fe:	4e35      	ldr	r6, [pc, #212]	; (e2d4 <_svfiprintf_r+0x1f8>)
    e200:	7821      	ldrb	r1, [r4, #0]
    e202:	2203      	movs	r2, #3
    e204:	0030      	movs	r0, r6
    e206:	f000 fc25 	bl	ea54 <memchr>
    e20a:	2800      	cmp	r0, #0
    e20c:	d006      	beq.n	e21c <_svfiprintf_r+0x140>
    e20e:	2340      	movs	r3, #64	; 0x40
    e210:	1b80      	subs	r0, r0, r6
    e212:	4083      	lsls	r3, r0
    e214:	682a      	ldr	r2, [r5, #0]
    e216:	3401      	adds	r4, #1
    e218:	4313      	orrs	r3, r2
    e21a:	602b      	str	r3, [r5, #0]
    e21c:	7821      	ldrb	r1, [r4, #0]
    e21e:	2206      	movs	r2, #6
    e220:	482d      	ldr	r0, [pc, #180]	; (e2d8 <_svfiprintf_r+0x1fc>)
    e222:	1c66      	adds	r6, r4, #1
    e224:	7629      	strb	r1, [r5, #24]
    e226:	f000 fc15 	bl	ea54 <memchr>
    e22a:	2800      	cmp	r0, #0
    e22c:	d046      	beq.n	e2bc <_svfiprintf_r+0x1e0>
    e22e:	4b2b      	ldr	r3, [pc, #172]	; (e2dc <_svfiprintf_r+0x200>)
    e230:	2b00      	cmp	r3, #0
    e232:	d12f      	bne.n	e294 <_svfiprintf_r+0x1b8>
    e234:	6829      	ldr	r1, [r5, #0]
    e236:	9b05      	ldr	r3, [sp, #20]
    e238:	2207      	movs	r2, #7
    e23a:	05c9      	lsls	r1, r1, #23
    e23c:	d528      	bpl.n	e290 <_svfiprintf_r+0x1b4>
    e23e:	189b      	adds	r3, r3, r2
    e240:	4393      	bics	r3, r2
    e242:	3308      	adds	r3, #8
    e244:	9305      	str	r3, [sp, #20]
    e246:	696b      	ldr	r3, [r5, #20]
    e248:	9a03      	ldr	r2, [sp, #12]
    e24a:	189b      	adds	r3, r3, r2
    e24c:	616b      	str	r3, [r5, #20]
    e24e:	e767      	b.n	e120 <_svfiprintf_r+0x44>
    e250:	425b      	negs	r3, r3
    e252:	60eb      	str	r3, [r5, #12]
    e254:	2302      	movs	r3, #2
    e256:	430b      	orrs	r3, r1
    e258:	602b      	str	r3, [r5, #0]
    e25a:	e7c0      	b.n	e1de <_svfiprintf_r+0x102>
    e25c:	434b      	muls	r3, r1
    e25e:	3401      	adds	r4, #1
    e260:	189b      	adds	r3, r3, r2
    e262:	2001      	movs	r0, #1
    e264:	e7a0      	b.n	e1a8 <_svfiprintf_r+0xcc>
    e266:	2301      	movs	r3, #1
    e268:	425b      	negs	r3, r3
    e26a:	e7c7      	b.n	e1fc <_svfiprintf_r+0x120>
    e26c:	2300      	movs	r3, #0
    e26e:	0014      	movs	r4, r2
    e270:	200a      	movs	r0, #10
    e272:	001a      	movs	r2, r3
    e274:	606b      	str	r3, [r5, #4]
    e276:	7821      	ldrb	r1, [r4, #0]
    e278:	3930      	subs	r1, #48	; 0x30
    e27a:	2909      	cmp	r1, #9
    e27c:	d903      	bls.n	e286 <_svfiprintf_r+0x1aa>
    e27e:	2b00      	cmp	r3, #0
    e280:	d0bd      	beq.n	e1fe <_svfiprintf_r+0x122>
    e282:	9207      	str	r2, [sp, #28]
    e284:	e7bb      	b.n	e1fe <_svfiprintf_r+0x122>
    e286:	4342      	muls	r2, r0
    e288:	3401      	adds	r4, #1
    e28a:	1852      	adds	r2, r2, r1
    e28c:	2301      	movs	r3, #1
    e28e:	e7f2      	b.n	e276 <_svfiprintf_r+0x19a>
    e290:	3307      	adds	r3, #7
    e292:	e7d5      	b.n	e240 <_svfiprintf_r+0x164>
    e294:	ab05      	add	r3, sp, #20
    e296:	9300      	str	r3, [sp, #0]
    e298:	003a      	movs	r2, r7
    e29a:	4b11      	ldr	r3, [pc, #68]	; (e2e0 <_svfiprintf_r+0x204>)
    e29c:	0029      	movs	r1, r5
    e29e:	9802      	ldr	r0, [sp, #8]
    e2a0:	e000      	b.n	e2a4 <_svfiprintf_r+0x1c8>
    e2a2:	bf00      	nop
    e2a4:	9003      	str	r0, [sp, #12]
    e2a6:	9b03      	ldr	r3, [sp, #12]
    e2a8:	3301      	adds	r3, #1
    e2aa:	d1cc      	bne.n	e246 <_svfiprintf_r+0x16a>
    e2ac:	89bb      	ldrh	r3, [r7, #12]
    e2ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e2b0:	065b      	lsls	r3, r3, #25
    e2b2:	d400      	bmi.n	e2b6 <_svfiprintf_r+0x1da>
    e2b4:	e729      	b.n	e10a <_svfiprintf_r+0x2e>
    e2b6:	2001      	movs	r0, #1
    e2b8:	4240      	negs	r0, r0
    e2ba:	e726      	b.n	e10a <_svfiprintf_r+0x2e>
    e2bc:	ab05      	add	r3, sp, #20
    e2be:	9300      	str	r3, [sp, #0]
    e2c0:	003a      	movs	r2, r7
    e2c2:	4b07      	ldr	r3, [pc, #28]	; (e2e0 <_svfiprintf_r+0x204>)
    e2c4:	0029      	movs	r1, r5
    e2c6:	9802      	ldr	r0, [sp, #8]
    e2c8:	f000 f9be 	bl	e648 <_printf_i>
    e2cc:	e7ea      	b.n	e2a4 <_svfiprintf_r+0x1c8>
    e2ce:	46c0      	nop			; (mov r8, r8)
    e2d0:	00010746 	.word	0x00010746
    e2d4:	0001074c 	.word	0x0001074c
    e2d8:	00010750 	.word	0x00010750
    e2dc:	00000000 	.word	0x00000000
    e2e0:	0000e019 	.word	0x0000e019

0000e2e4 <__sfputc_r>:
    e2e4:	6893      	ldr	r3, [r2, #8]
    e2e6:	b510      	push	{r4, lr}
    e2e8:	3b01      	subs	r3, #1
    e2ea:	6093      	str	r3, [r2, #8]
    e2ec:	2b00      	cmp	r3, #0
    e2ee:	da05      	bge.n	e2fc <__sfputc_r+0x18>
    e2f0:	6994      	ldr	r4, [r2, #24]
    e2f2:	42a3      	cmp	r3, r4
    e2f4:	db08      	blt.n	e308 <__sfputc_r+0x24>
    e2f6:	b2cb      	uxtb	r3, r1
    e2f8:	2b0a      	cmp	r3, #10
    e2fa:	d005      	beq.n	e308 <__sfputc_r+0x24>
    e2fc:	6813      	ldr	r3, [r2, #0]
    e2fe:	1c58      	adds	r0, r3, #1
    e300:	6010      	str	r0, [r2, #0]
    e302:	7019      	strb	r1, [r3, #0]
    e304:	b2c8      	uxtb	r0, r1
    e306:	bd10      	pop	{r4, pc}
    e308:	f7ff fbaa 	bl	da60 <__swbuf_r>
    e30c:	e7fb      	b.n	e306 <__sfputc_r+0x22>

0000e30e <__sfputs_r>:
    e30e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e310:	0006      	movs	r6, r0
    e312:	000f      	movs	r7, r1
    e314:	0014      	movs	r4, r2
    e316:	18d5      	adds	r5, r2, r3
    e318:	42ac      	cmp	r4, r5
    e31a:	d101      	bne.n	e320 <__sfputs_r+0x12>
    e31c:	2000      	movs	r0, #0
    e31e:	e007      	b.n	e330 <__sfputs_r+0x22>
    e320:	7821      	ldrb	r1, [r4, #0]
    e322:	003a      	movs	r2, r7
    e324:	0030      	movs	r0, r6
    e326:	f7ff ffdd 	bl	e2e4 <__sfputc_r>
    e32a:	3401      	adds	r4, #1
    e32c:	1c43      	adds	r3, r0, #1
    e32e:	d1f3      	bne.n	e318 <__sfputs_r+0xa>
    e330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000e334 <_vfiprintf_r>:
    e334:	b5f0      	push	{r4, r5, r6, r7, lr}
    e336:	b09f      	sub	sp, #124	; 0x7c
    e338:	0006      	movs	r6, r0
    e33a:	000f      	movs	r7, r1
    e33c:	0014      	movs	r4, r2
    e33e:	9305      	str	r3, [sp, #20]
    e340:	2800      	cmp	r0, #0
    e342:	d004      	beq.n	e34e <_vfiprintf_r+0x1a>
    e344:	6983      	ldr	r3, [r0, #24]
    e346:	2b00      	cmp	r3, #0
    e348:	d101      	bne.n	e34e <_vfiprintf_r+0x1a>
    e34a:	f7ff fd4d 	bl	dde8 <__sinit>
    e34e:	4b7f      	ldr	r3, [pc, #508]	; (e54c <_vfiprintf_r+0x218>)
    e350:	429f      	cmp	r7, r3
    e352:	d15c      	bne.n	e40e <_vfiprintf_r+0xda>
    e354:	6877      	ldr	r7, [r6, #4]
    e356:	89bb      	ldrh	r3, [r7, #12]
    e358:	071b      	lsls	r3, r3, #28
    e35a:	d562      	bpl.n	e422 <_vfiprintf_r+0xee>
    e35c:	693b      	ldr	r3, [r7, #16]
    e35e:	2b00      	cmp	r3, #0
    e360:	d05f      	beq.n	e422 <_vfiprintf_r+0xee>
    e362:	2300      	movs	r3, #0
    e364:	ad06      	add	r5, sp, #24
    e366:	616b      	str	r3, [r5, #20]
    e368:	3320      	adds	r3, #32
    e36a:	766b      	strb	r3, [r5, #25]
    e36c:	3310      	adds	r3, #16
    e36e:	76ab      	strb	r3, [r5, #26]
    e370:	9402      	str	r4, [sp, #8]
    e372:	9c02      	ldr	r4, [sp, #8]
    e374:	7823      	ldrb	r3, [r4, #0]
    e376:	2b00      	cmp	r3, #0
    e378:	d15d      	bne.n	e436 <_vfiprintf_r+0x102>
    e37a:	9b02      	ldr	r3, [sp, #8]
    e37c:	1ae3      	subs	r3, r4, r3
    e37e:	9304      	str	r3, [sp, #16]
    e380:	d00d      	beq.n	e39e <_vfiprintf_r+0x6a>
    e382:	9b04      	ldr	r3, [sp, #16]
    e384:	9a02      	ldr	r2, [sp, #8]
    e386:	0039      	movs	r1, r7
    e388:	0030      	movs	r0, r6
    e38a:	f7ff ffc0 	bl	e30e <__sfputs_r>
    e38e:	1c43      	adds	r3, r0, #1
    e390:	d100      	bne.n	e394 <_vfiprintf_r+0x60>
    e392:	e0cc      	b.n	e52e <_vfiprintf_r+0x1fa>
    e394:	696a      	ldr	r2, [r5, #20]
    e396:	9b04      	ldr	r3, [sp, #16]
    e398:	4694      	mov	ip, r2
    e39a:	4463      	add	r3, ip
    e39c:	616b      	str	r3, [r5, #20]
    e39e:	7823      	ldrb	r3, [r4, #0]
    e3a0:	2b00      	cmp	r3, #0
    e3a2:	d100      	bne.n	e3a6 <_vfiprintf_r+0x72>
    e3a4:	e0c3      	b.n	e52e <_vfiprintf_r+0x1fa>
    e3a6:	2201      	movs	r2, #1
    e3a8:	2300      	movs	r3, #0
    e3aa:	4252      	negs	r2, r2
    e3ac:	606a      	str	r2, [r5, #4]
    e3ae:	a902      	add	r1, sp, #8
    e3b0:	3254      	adds	r2, #84	; 0x54
    e3b2:	1852      	adds	r2, r2, r1
    e3b4:	3401      	adds	r4, #1
    e3b6:	602b      	str	r3, [r5, #0]
    e3b8:	60eb      	str	r3, [r5, #12]
    e3ba:	60ab      	str	r3, [r5, #8]
    e3bc:	7013      	strb	r3, [r2, #0]
    e3be:	65ab      	str	r3, [r5, #88]	; 0x58
    e3c0:	7821      	ldrb	r1, [r4, #0]
    e3c2:	2205      	movs	r2, #5
    e3c4:	4862      	ldr	r0, [pc, #392]	; (e550 <_vfiprintf_r+0x21c>)
    e3c6:	f000 fb45 	bl	ea54 <memchr>
    e3ca:	1c63      	adds	r3, r4, #1
    e3cc:	469c      	mov	ip, r3
    e3ce:	2800      	cmp	r0, #0
    e3d0:	d135      	bne.n	e43e <_vfiprintf_r+0x10a>
    e3d2:	6829      	ldr	r1, [r5, #0]
    e3d4:	06cb      	lsls	r3, r1, #27
    e3d6:	d504      	bpl.n	e3e2 <_vfiprintf_r+0xae>
    e3d8:	2353      	movs	r3, #83	; 0x53
    e3da:	aa02      	add	r2, sp, #8
    e3dc:	3020      	adds	r0, #32
    e3de:	189b      	adds	r3, r3, r2
    e3e0:	7018      	strb	r0, [r3, #0]
    e3e2:	070b      	lsls	r3, r1, #28
    e3e4:	d504      	bpl.n	e3f0 <_vfiprintf_r+0xbc>
    e3e6:	2353      	movs	r3, #83	; 0x53
    e3e8:	202b      	movs	r0, #43	; 0x2b
    e3ea:	aa02      	add	r2, sp, #8
    e3ec:	189b      	adds	r3, r3, r2
    e3ee:	7018      	strb	r0, [r3, #0]
    e3f0:	7823      	ldrb	r3, [r4, #0]
    e3f2:	2b2a      	cmp	r3, #42	; 0x2a
    e3f4:	d02c      	beq.n	e450 <_vfiprintf_r+0x11c>
    e3f6:	2000      	movs	r0, #0
    e3f8:	210a      	movs	r1, #10
    e3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e3fc:	7822      	ldrb	r2, [r4, #0]
    e3fe:	3a30      	subs	r2, #48	; 0x30
    e400:	2a09      	cmp	r2, #9
    e402:	d800      	bhi.n	e406 <_vfiprintf_r+0xd2>
    e404:	e06b      	b.n	e4de <_vfiprintf_r+0x1aa>
    e406:	2800      	cmp	r0, #0
    e408:	d02a      	beq.n	e460 <_vfiprintf_r+0x12c>
    e40a:	9309      	str	r3, [sp, #36]	; 0x24
    e40c:	e028      	b.n	e460 <_vfiprintf_r+0x12c>
    e40e:	4b51      	ldr	r3, [pc, #324]	; (e554 <_vfiprintf_r+0x220>)
    e410:	429f      	cmp	r7, r3
    e412:	d101      	bne.n	e418 <_vfiprintf_r+0xe4>
    e414:	68b7      	ldr	r7, [r6, #8]
    e416:	e79e      	b.n	e356 <_vfiprintf_r+0x22>
    e418:	4b4f      	ldr	r3, [pc, #316]	; (e558 <_vfiprintf_r+0x224>)
    e41a:	429f      	cmp	r7, r3
    e41c:	d19b      	bne.n	e356 <_vfiprintf_r+0x22>
    e41e:	68f7      	ldr	r7, [r6, #12]
    e420:	e799      	b.n	e356 <_vfiprintf_r+0x22>
    e422:	0039      	movs	r1, r7
    e424:	0030      	movs	r0, r6
    e426:	f7ff fb71 	bl	db0c <__swsetup_r>
    e42a:	2800      	cmp	r0, #0
    e42c:	d099      	beq.n	e362 <_vfiprintf_r+0x2e>
    e42e:	2001      	movs	r0, #1
    e430:	4240      	negs	r0, r0
    e432:	b01f      	add	sp, #124	; 0x7c
    e434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e436:	2b25      	cmp	r3, #37	; 0x25
    e438:	d09f      	beq.n	e37a <_vfiprintf_r+0x46>
    e43a:	3401      	adds	r4, #1
    e43c:	e79a      	b.n	e374 <_vfiprintf_r+0x40>
    e43e:	4b44      	ldr	r3, [pc, #272]	; (e550 <_vfiprintf_r+0x21c>)
    e440:	6829      	ldr	r1, [r5, #0]
    e442:	1ac0      	subs	r0, r0, r3
    e444:	2301      	movs	r3, #1
    e446:	4083      	lsls	r3, r0
    e448:	430b      	orrs	r3, r1
    e44a:	602b      	str	r3, [r5, #0]
    e44c:	4664      	mov	r4, ip
    e44e:	e7b7      	b.n	e3c0 <_vfiprintf_r+0x8c>
    e450:	9b05      	ldr	r3, [sp, #20]
    e452:	1d18      	adds	r0, r3, #4
    e454:	681b      	ldr	r3, [r3, #0]
    e456:	9005      	str	r0, [sp, #20]
    e458:	2b00      	cmp	r3, #0
    e45a:	db3a      	blt.n	e4d2 <_vfiprintf_r+0x19e>
    e45c:	9309      	str	r3, [sp, #36]	; 0x24
    e45e:	4664      	mov	r4, ip
    e460:	7823      	ldrb	r3, [r4, #0]
    e462:	2b2e      	cmp	r3, #46	; 0x2e
    e464:	d10b      	bne.n	e47e <_vfiprintf_r+0x14a>
    e466:	7863      	ldrb	r3, [r4, #1]
    e468:	1c62      	adds	r2, r4, #1
    e46a:	2b2a      	cmp	r3, #42	; 0x2a
    e46c:	d13f      	bne.n	e4ee <_vfiprintf_r+0x1ba>
    e46e:	9b05      	ldr	r3, [sp, #20]
    e470:	3402      	adds	r4, #2
    e472:	1d1a      	adds	r2, r3, #4
    e474:	681b      	ldr	r3, [r3, #0]
    e476:	9205      	str	r2, [sp, #20]
    e478:	2b00      	cmp	r3, #0
    e47a:	db35      	blt.n	e4e8 <_vfiprintf_r+0x1b4>
    e47c:	9307      	str	r3, [sp, #28]
    e47e:	7821      	ldrb	r1, [r4, #0]
    e480:	2203      	movs	r2, #3
    e482:	4836      	ldr	r0, [pc, #216]	; (e55c <_vfiprintf_r+0x228>)
    e484:	f000 fae6 	bl	ea54 <memchr>
    e488:	2800      	cmp	r0, #0
    e48a:	d007      	beq.n	e49c <_vfiprintf_r+0x168>
    e48c:	4b33      	ldr	r3, [pc, #204]	; (e55c <_vfiprintf_r+0x228>)
    e48e:	682a      	ldr	r2, [r5, #0]
    e490:	1ac0      	subs	r0, r0, r3
    e492:	2340      	movs	r3, #64	; 0x40
    e494:	4083      	lsls	r3, r0
    e496:	4313      	orrs	r3, r2
    e498:	602b      	str	r3, [r5, #0]
    e49a:	3401      	adds	r4, #1
    e49c:	7821      	ldrb	r1, [r4, #0]
    e49e:	1c63      	adds	r3, r4, #1
    e4a0:	2206      	movs	r2, #6
    e4a2:	482f      	ldr	r0, [pc, #188]	; (e560 <_vfiprintf_r+0x22c>)
    e4a4:	9302      	str	r3, [sp, #8]
    e4a6:	7629      	strb	r1, [r5, #24]
    e4a8:	f000 fad4 	bl	ea54 <memchr>
    e4ac:	2800      	cmp	r0, #0
    e4ae:	d044      	beq.n	e53a <_vfiprintf_r+0x206>
    e4b0:	4b2c      	ldr	r3, [pc, #176]	; (e564 <_vfiprintf_r+0x230>)
    e4b2:	2b00      	cmp	r3, #0
    e4b4:	d12f      	bne.n	e516 <_vfiprintf_r+0x1e2>
    e4b6:	6829      	ldr	r1, [r5, #0]
    e4b8:	9b05      	ldr	r3, [sp, #20]
    e4ba:	2207      	movs	r2, #7
    e4bc:	05c9      	lsls	r1, r1, #23
    e4be:	d528      	bpl.n	e512 <_vfiprintf_r+0x1de>
    e4c0:	189b      	adds	r3, r3, r2
    e4c2:	4393      	bics	r3, r2
    e4c4:	3308      	adds	r3, #8
    e4c6:	9305      	str	r3, [sp, #20]
    e4c8:	696b      	ldr	r3, [r5, #20]
    e4ca:	9a03      	ldr	r2, [sp, #12]
    e4cc:	189b      	adds	r3, r3, r2
    e4ce:	616b      	str	r3, [r5, #20]
    e4d0:	e74f      	b.n	e372 <_vfiprintf_r+0x3e>
    e4d2:	425b      	negs	r3, r3
    e4d4:	60eb      	str	r3, [r5, #12]
    e4d6:	2302      	movs	r3, #2
    e4d8:	430b      	orrs	r3, r1
    e4da:	602b      	str	r3, [r5, #0]
    e4dc:	e7bf      	b.n	e45e <_vfiprintf_r+0x12a>
    e4de:	434b      	muls	r3, r1
    e4e0:	3401      	adds	r4, #1
    e4e2:	189b      	adds	r3, r3, r2
    e4e4:	2001      	movs	r0, #1
    e4e6:	e789      	b.n	e3fc <_vfiprintf_r+0xc8>
    e4e8:	2301      	movs	r3, #1
    e4ea:	425b      	negs	r3, r3
    e4ec:	e7c6      	b.n	e47c <_vfiprintf_r+0x148>
    e4ee:	2300      	movs	r3, #0
    e4f0:	0014      	movs	r4, r2
    e4f2:	200a      	movs	r0, #10
    e4f4:	001a      	movs	r2, r3
    e4f6:	606b      	str	r3, [r5, #4]
    e4f8:	7821      	ldrb	r1, [r4, #0]
    e4fa:	3930      	subs	r1, #48	; 0x30
    e4fc:	2909      	cmp	r1, #9
    e4fe:	d903      	bls.n	e508 <_vfiprintf_r+0x1d4>
    e500:	2b00      	cmp	r3, #0
    e502:	d0bc      	beq.n	e47e <_vfiprintf_r+0x14a>
    e504:	9207      	str	r2, [sp, #28]
    e506:	e7ba      	b.n	e47e <_vfiprintf_r+0x14a>
    e508:	4342      	muls	r2, r0
    e50a:	3401      	adds	r4, #1
    e50c:	1852      	adds	r2, r2, r1
    e50e:	2301      	movs	r3, #1
    e510:	e7f2      	b.n	e4f8 <_vfiprintf_r+0x1c4>
    e512:	3307      	adds	r3, #7
    e514:	e7d5      	b.n	e4c2 <_vfiprintf_r+0x18e>
    e516:	ab05      	add	r3, sp, #20
    e518:	9300      	str	r3, [sp, #0]
    e51a:	003a      	movs	r2, r7
    e51c:	4b12      	ldr	r3, [pc, #72]	; (e568 <_vfiprintf_r+0x234>)
    e51e:	0029      	movs	r1, r5
    e520:	0030      	movs	r0, r6
    e522:	e000      	b.n	e526 <_vfiprintf_r+0x1f2>
    e524:	bf00      	nop
    e526:	9003      	str	r0, [sp, #12]
    e528:	9b03      	ldr	r3, [sp, #12]
    e52a:	3301      	adds	r3, #1
    e52c:	d1cc      	bne.n	e4c8 <_vfiprintf_r+0x194>
    e52e:	89bb      	ldrh	r3, [r7, #12]
    e530:	065b      	lsls	r3, r3, #25
    e532:	d500      	bpl.n	e536 <_vfiprintf_r+0x202>
    e534:	e77b      	b.n	e42e <_vfiprintf_r+0xfa>
    e536:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e538:	e77b      	b.n	e432 <_vfiprintf_r+0xfe>
    e53a:	ab05      	add	r3, sp, #20
    e53c:	9300      	str	r3, [sp, #0]
    e53e:	003a      	movs	r2, r7
    e540:	4b09      	ldr	r3, [pc, #36]	; (e568 <_vfiprintf_r+0x234>)
    e542:	0029      	movs	r1, r5
    e544:	0030      	movs	r0, r6
    e546:	f000 f87f 	bl	e648 <_printf_i>
    e54a:	e7ec      	b.n	e526 <_vfiprintf_r+0x1f2>
    e54c:	000106fc 	.word	0x000106fc
    e550:	00010746 	.word	0x00010746
    e554:	0001071c 	.word	0x0001071c
    e558:	000106dc 	.word	0x000106dc
    e55c:	0001074c 	.word	0x0001074c
    e560:	00010750 	.word	0x00010750
    e564:	00000000 	.word	0x00000000
    e568:	0000e30f 	.word	0x0000e30f

0000e56c <_printf_common>:
    e56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e56e:	0015      	movs	r5, r2
    e570:	9301      	str	r3, [sp, #4]
    e572:	688a      	ldr	r2, [r1, #8]
    e574:	690b      	ldr	r3, [r1, #16]
    e576:	9000      	str	r0, [sp, #0]
    e578:	000c      	movs	r4, r1
    e57a:	4293      	cmp	r3, r2
    e57c:	da00      	bge.n	e580 <_printf_common+0x14>
    e57e:	0013      	movs	r3, r2
    e580:	0022      	movs	r2, r4
    e582:	602b      	str	r3, [r5, #0]
    e584:	3243      	adds	r2, #67	; 0x43
    e586:	7812      	ldrb	r2, [r2, #0]
    e588:	2a00      	cmp	r2, #0
    e58a:	d001      	beq.n	e590 <_printf_common+0x24>
    e58c:	3301      	adds	r3, #1
    e58e:	602b      	str	r3, [r5, #0]
    e590:	6823      	ldr	r3, [r4, #0]
    e592:	069b      	lsls	r3, r3, #26
    e594:	d502      	bpl.n	e59c <_printf_common+0x30>
    e596:	682b      	ldr	r3, [r5, #0]
    e598:	3302      	adds	r3, #2
    e59a:	602b      	str	r3, [r5, #0]
    e59c:	2706      	movs	r7, #6
    e59e:	6823      	ldr	r3, [r4, #0]
    e5a0:	401f      	ands	r7, r3
    e5a2:	d027      	beq.n	e5f4 <_printf_common+0x88>
    e5a4:	0023      	movs	r3, r4
    e5a6:	3343      	adds	r3, #67	; 0x43
    e5a8:	781b      	ldrb	r3, [r3, #0]
    e5aa:	1e5a      	subs	r2, r3, #1
    e5ac:	4193      	sbcs	r3, r2
    e5ae:	6822      	ldr	r2, [r4, #0]
    e5b0:	0692      	lsls	r2, r2, #26
    e5b2:	d430      	bmi.n	e616 <_printf_common+0xaa>
    e5b4:	0022      	movs	r2, r4
    e5b6:	9901      	ldr	r1, [sp, #4]
    e5b8:	3243      	adds	r2, #67	; 0x43
    e5ba:	9800      	ldr	r0, [sp, #0]
    e5bc:	9e08      	ldr	r6, [sp, #32]
    e5be:	47b0      	blx	r6
    e5c0:	1c43      	adds	r3, r0, #1
    e5c2:	d025      	beq.n	e610 <_printf_common+0xa4>
    e5c4:	2306      	movs	r3, #6
    e5c6:	6820      	ldr	r0, [r4, #0]
    e5c8:	682a      	ldr	r2, [r5, #0]
    e5ca:	68e1      	ldr	r1, [r4, #12]
    e5cc:	4003      	ands	r3, r0
    e5ce:	2500      	movs	r5, #0
    e5d0:	2b04      	cmp	r3, #4
    e5d2:	d103      	bne.n	e5dc <_printf_common+0x70>
    e5d4:	1a8d      	subs	r5, r1, r2
    e5d6:	43eb      	mvns	r3, r5
    e5d8:	17db      	asrs	r3, r3, #31
    e5da:	401d      	ands	r5, r3
    e5dc:	68a3      	ldr	r3, [r4, #8]
    e5de:	6922      	ldr	r2, [r4, #16]
    e5e0:	4293      	cmp	r3, r2
    e5e2:	dd01      	ble.n	e5e8 <_printf_common+0x7c>
    e5e4:	1a9b      	subs	r3, r3, r2
    e5e6:	18ed      	adds	r5, r5, r3
    e5e8:	2700      	movs	r7, #0
    e5ea:	42bd      	cmp	r5, r7
    e5ec:	d120      	bne.n	e630 <_printf_common+0xc4>
    e5ee:	2000      	movs	r0, #0
    e5f0:	e010      	b.n	e614 <_printf_common+0xa8>
    e5f2:	3701      	adds	r7, #1
    e5f4:	68e3      	ldr	r3, [r4, #12]
    e5f6:	682a      	ldr	r2, [r5, #0]
    e5f8:	1a9b      	subs	r3, r3, r2
    e5fa:	429f      	cmp	r7, r3
    e5fc:	dad2      	bge.n	e5a4 <_printf_common+0x38>
    e5fe:	0022      	movs	r2, r4
    e600:	2301      	movs	r3, #1
    e602:	3219      	adds	r2, #25
    e604:	9901      	ldr	r1, [sp, #4]
    e606:	9800      	ldr	r0, [sp, #0]
    e608:	9e08      	ldr	r6, [sp, #32]
    e60a:	47b0      	blx	r6
    e60c:	1c43      	adds	r3, r0, #1
    e60e:	d1f0      	bne.n	e5f2 <_printf_common+0x86>
    e610:	2001      	movs	r0, #1
    e612:	4240      	negs	r0, r0
    e614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e616:	2030      	movs	r0, #48	; 0x30
    e618:	18e1      	adds	r1, r4, r3
    e61a:	3143      	adds	r1, #67	; 0x43
    e61c:	7008      	strb	r0, [r1, #0]
    e61e:	0021      	movs	r1, r4
    e620:	1c5a      	adds	r2, r3, #1
    e622:	3145      	adds	r1, #69	; 0x45
    e624:	7809      	ldrb	r1, [r1, #0]
    e626:	18a2      	adds	r2, r4, r2
    e628:	3243      	adds	r2, #67	; 0x43
    e62a:	3302      	adds	r3, #2
    e62c:	7011      	strb	r1, [r2, #0]
    e62e:	e7c1      	b.n	e5b4 <_printf_common+0x48>
    e630:	0022      	movs	r2, r4
    e632:	2301      	movs	r3, #1
    e634:	321a      	adds	r2, #26
    e636:	9901      	ldr	r1, [sp, #4]
    e638:	9800      	ldr	r0, [sp, #0]
    e63a:	9e08      	ldr	r6, [sp, #32]
    e63c:	47b0      	blx	r6
    e63e:	1c43      	adds	r3, r0, #1
    e640:	d0e6      	beq.n	e610 <_printf_common+0xa4>
    e642:	3701      	adds	r7, #1
    e644:	e7d1      	b.n	e5ea <_printf_common+0x7e>
	...

0000e648 <_printf_i>:
    e648:	b5f0      	push	{r4, r5, r6, r7, lr}
    e64a:	b08b      	sub	sp, #44	; 0x2c
    e64c:	9206      	str	r2, [sp, #24]
    e64e:	000a      	movs	r2, r1
    e650:	3243      	adds	r2, #67	; 0x43
    e652:	9307      	str	r3, [sp, #28]
    e654:	9005      	str	r0, [sp, #20]
    e656:	9204      	str	r2, [sp, #16]
    e658:	7e0a      	ldrb	r2, [r1, #24]
    e65a:	000c      	movs	r4, r1
    e65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e65e:	2a6e      	cmp	r2, #110	; 0x6e
    e660:	d100      	bne.n	e664 <_printf_i+0x1c>
    e662:	e08f      	b.n	e784 <_printf_i+0x13c>
    e664:	d817      	bhi.n	e696 <_printf_i+0x4e>
    e666:	2a63      	cmp	r2, #99	; 0x63
    e668:	d02c      	beq.n	e6c4 <_printf_i+0x7c>
    e66a:	d808      	bhi.n	e67e <_printf_i+0x36>
    e66c:	2a00      	cmp	r2, #0
    e66e:	d100      	bne.n	e672 <_printf_i+0x2a>
    e670:	e099      	b.n	e7a6 <_printf_i+0x15e>
    e672:	2a58      	cmp	r2, #88	; 0x58
    e674:	d054      	beq.n	e720 <_printf_i+0xd8>
    e676:	0026      	movs	r6, r4
    e678:	3642      	adds	r6, #66	; 0x42
    e67a:	7032      	strb	r2, [r6, #0]
    e67c:	e029      	b.n	e6d2 <_printf_i+0x8a>
    e67e:	2a64      	cmp	r2, #100	; 0x64
    e680:	d001      	beq.n	e686 <_printf_i+0x3e>
    e682:	2a69      	cmp	r2, #105	; 0x69
    e684:	d1f7      	bne.n	e676 <_printf_i+0x2e>
    e686:	6821      	ldr	r1, [r4, #0]
    e688:	681a      	ldr	r2, [r3, #0]
    e68a:	0608      	lsls	r0, r1, #24
    e68c:	d523      	bpl.n	e6d6 <_printf_i+0x8e>
    e68e:	1d11      	adds	r1, r2, #4
    e690:	6019      	str	r1, [r3, #0]
    e692:	6815      	ldr	r5, [r2, #0]
    e694:	e025      	b.n	e6e2 <_printf_i+0x9a>
    e696:	2a73      	cmp	r2, #115	; 0x73
    e698:	d100      	bne.n	e69c <_printf_i+0x54>
    e69a:	e088      	b.n	e7ae <_printf_i+0x166>
    e69c:	d808      	bhi.n	e6b0 <_printf_i+0x68>
    e69e:	2a6f      	cmp	r2, #111	; 0x6f
    e6a0:	d029      	beq.n	e6f6 <_printf_i+0xae>
    e6a2:	2a70      	cmp	r2, #112	; 0x70
    e6a4:	d1e7      	bne.n	e676 <_printf_i+0x2e>
    e6a6:	2220      	movs	r2, #32
    e6a8:	6809      	ldr	r1, [r1, #0]
    e6aa:	430a      	orrs	r2, r1
    e6ac:	6022      	str	r2, [r4, #0]
    e6ae:	e003      	b.n	e6b8 <_printf_i+0x70>
    e6b0:	2a75      	cmp	r2, #117	; 0x75
    e6b2:	d020      	beq.n	e6f6 <_printf_i+0xae>
    e6b4:	2a78      	cmp	r2, #120	; 0x78
    e6b6:	d1de      	bne.n	e676 <_printf_i+0x2e>
    e6b8:	0022      	movs	r2, r4
    e6ba:	2178      	movs	r1, #120	; 0x78
    e6bc:	3245      	adds	r2, #69	; 0x45
    e6be:	7011      	strb	r1, [r2, #0]
    e6c0:	4a6c      	ldr	r2, [pc, #432]	; (e874 <_printf_i+0x22c>)
    e6c2:	e030      	b.n	e726 <_printf_i+0xde>
    e6c4:	000e      	movs	r6, r1
    e6c6:	681a      	ldr	r2, [r3, #0]
    e6c8:	3642      	adds	r6, #66	; 0x42
    e6ca:	1d11      	adds	r1, r2, #4
    e6cc:	6019      	str	r1, [r3, #0]
    e6ce:	6813      	ldr	r3, [r2, #0]
    e6d0:	7033      	strb	r3, [r6, #0]
    e6d2:	2301      	movs	r3, #1
    e6d4:	e079      	b.n	e7ca <_printf_i+0x182>
    e6d6:	0649      	lsls	r1, r1, #25
    e6d8:	d5d9      	bpl.n	e68e <_printf_i+0x46>
    e6da:	1d11      	adds	r1, r2, #4
    e6dc:	6019      	str	r1, [r3, #0]
    e6de:	2300      	movs	r3, #0
    e6e0:	5ed5      	ldrsh	r5, [r2, r3]
    e6e2:	2d00      	cmp	r5, #0
    e6e4:	da03      	bge.n	e6ee <_printf_i+0xa6>
    e6e6:	232d      	movs	r3, #45	; 0x2d
    e6e8:	9a04      	ldr	r2, [sp, #16]
    e6ea:	426d      	negs	r5, r5
    e6ec:	7013      	strb	r3, [r2, #0]
    e6ee:	4b62      	ldr	r3, [pc, #392]	; (e878 <_printf_i+0x230>)
    e6f0:	270a      	movs	r7, #10
    e6f2:	9303      	str	r3, [sp, #12]
    e6f4:	e02f      	b.n	e756 <_printf_i+0x10e>
    e6f6:	6820      	ldr	r0, [r4, #0]
    e6f8:	6819      	ldr	r1, [r3, #0]
    e6fa:	0605      	lsls	r5, r0, #24
    e6fc:	d503      	bpl.n	e706 <_printf_i+0xbe>
    e6fe:	1d08      	adds	r0, r1, #4
    e700:	6018      	str	r0, [r3, #0]
    e702:	680d      	ldr	r5, [r1, #0]
    e704:	e005      	b.n	e712 <_printf_i+0xca>
    e706:	0640      	lsls	r0, r0, #25
    e708:	d5f9      	bpl.n	e6fe <_printf_i+0xb6>
    e70a:	680d      	ldr	r5, [r1, #0]
    e70c:	1d08      	adds	r0, r1, #4
    e70e:	6018      	str	r0, [r3, #0]
    e710:	b2ad      	uxth	r5, r5
    e712:	4b59      	ldr	r3, [pc, #356]	; (e878 <_printf_i+0x230>)
    e714:	2708      	movs	r7, #8
    e716:	9303      	str	r3, [sp, #12]
    e718:	2a6f      	cmp	r2, #111	; 0x6f
    e71a:	d018      	beq.n	e74e <_printf_i+0x106>
    e71c:	270a      	movs	r7, #10
    e71e:	e016      	b.n	e74e <_printf_i+0x106>
    e720:	3145      	adds	r1, #69	; 0x45
    e722:	700a      	strb	r2, [r1, #0]
    e724:	4a54      	ldr	r2, [pc, #336]	; (e878 <_printf_i+0x230>)
    e726:	9203      	str	r2, [sp, #12]
    e728:	681a      	ldr	r2, [r3, #0]
    e72a:	6821      	ldr	r1, [r4, #0]
    e72c:	1d10      	adds	r0, r2, #4
    e72e:	6018      	str	r0, [r3, #0]
    e730:	6815      	ldr	r5, [r2, #0]
    e732:	0608      	lsls	r0, r1, #24
    e734:	d522      	bpl.n	e77c <_printf_i+0x134>
    e736:	07cb      	lsls	r3, r1, #31
    e738:	d502      	bpl.n	e740 <_printf_i+0xf8>
    e73a:	2320      	movs	r3, #32
    e73c:	4319      	orrs	r1, r3
    e73e:	6021      	str	r1, [r4, #0]
    e740:	2710      	movs	r7, #16
    e742:	2d00      	cmp	r5, #0
    e744:	d103      	bne.n	e74e <_printf_i+0x106>
    e746:	2320      	movs	r3, #32
    e748:	6822      	ldr	r2, [r4, #0]
    e74a:	439a      	bics	r2, r3
    e74c:	6022      	str	r2, [r4, #0]
    e74e:	0023      	movs	r3, r4
    e750:	2200      	movs	r2, #0
    e752:	3343      	adds	r3, #67	; 0x43
    e754:	701a      	strb	r2, [r3, #0]
    e756:	6863      	ldr	r3, [r4, #4]
    e758:	60a3      	str	r3, [r4, #8]
    e75a:	2b00      	cmp	r3, #0
    e75c:	db5c      	blt.n	e818 <_printf_i+0x1d0>
    e75e:	2204      	movs	r2, #4
    e760:	6821      	ldr	r1, [r4, #0]
    e762:	4391      	bics	r1, r2
    e764:	6021      	str	r1, [r4, #0]
    e766:	2d00      	cmp	r5, #0
    e768:	d158      	bne.n	e81c <_printf_i+0x1d4>
    e76a:	9e04      	ldr	r6, [sp, #16]
    e76c:	2b00      	cmp	r3, #0
    e76e:	d064      	beq.n	e83a <_printf_i+0x1f2>
    e770:	0026      	movs	r6, r4
    e772:	9b03      	ldr	r3, [sp, #12]
    e774:	3642      	adds	r6, #66	; 0x42
    e776:	781b      	ldrb	r3, [r3, #0]
    e778:	7033      	strb	r3, [r6, #0]
    e77a:	e05e      	b.n	e83a <_printf_i+0x1f2>
    e77c:	0648      	lsls	r0, r1, #25
    e77e:	d5da      	bpl.n	e736 <_printf_i+0xee>
    e780:	b2ad      	uxth	r5, r5
    e782:	e7d8      	b.n	e736 <_printf_i+0xee>
    e784:	6809      	ldr	r1, [r1, #0]
    e786:	681a      	ldr	r2, [r3, #0]
    e788:	0608      	lsls	r0, r1, #24
    e78a:	d505      	bpl.n	e798 <_printf_i+0x150>
    e78c:	1d11      	adds	r1, r2, #4
    e78e:	6019      	str	r1, [r3, #0]
    e790:	6813      	ldr	r3, [r2, #0]
    e792:	6962      	ldr	r2, [r4, #20]
    e794:	601a      	str	r2, [r3, #0]
    e796:	e006      	b.n	e7a6 <_printf_i+0x15e>
    e798:	0649      	lsls	r1, r1, #25
    e79a:	d5f7      	bpl.n	e78c <_printf_i+0x144>
    e79c:	1d11      	adds	r1, r2, #4
    e79e:	6019      	str	r1, [r3, #0]
    e7a0:	6813      	ldr	r3, [r2, #0]
    e7a2:	8aa2      	ldrh	r2, [r4, #20]
    e7a4:	801a      	strh	r2, [r3, #0]
    e7a6:	2300      	movs	r3, #0
    e7a8:	9e04      	ldr	r6, [sp, #16]
    e7aa:	6123      	str	r3, [r4, #16]
    e7ac:	e054      	b.n	e858 <_printf_i+0x210>
    e7ae:	681a      	ldr	r2, [r3, #0]
    e7b0:	1d11      	adds	r1, r2, #4
    e7b2:	6019      	str	r1, [r3, #0]
    e7b4:	6816      	ldr	r6, [r2, #0]
    e7b6:	2100      	movs	r1, #0
    e7b8:	6862      	ldr	r2, [r4, #4]
    e7ba:	0030      	movs	r0, r6
    e7bc:	f000 f94a 	bl	ea54 <memchr>
    e7c0:	2800      	cmp	r0, #0
    e7c2:	d001      	beq.n	e7c8 <_printf_i+0x180>
    e7c4:	1b80      	subs	r0, r0, r6
    e7c6:	6060      	str	r0, [r4, #4]
    e7c8:	6863      	ldr	r3, [r4, #4]
    e7ca:	6123      	str	r3, [r4, #16]
    e7cc:	2300      	movs	r3, #0
    e7ce:	9a04      	ldr	r2, [sp, #16]
    e7d0:	7013      	strb	r3, [r2, #0]
    e7d2:	e041      	b.n	e858 <_printf_i+0x210>
    e7d4:	6923      	ldr	r3, [r4, #16]
    e7d6:	0032      	movs	r2, r6
    e7d8:	9906      	ldr	r1, [sp, #24]
    e7da:	9805      	ldr	r0, [sp, #20]
    e7dc:	9d07      	ldr	r5, [sp, #28]
    e7de:	47a8      	blx	r5
    e7e0:	1c43      	adds	r3, r0, #1
    e7e2:	d043      	beq.n	e86c <_printf_i+0x224>
    e7e4:	6823      	ldr	r3, [r4, #0]
    e7e6:	2500      	movs	r5, #0
    e7e8:	079b      	lsls	r3, r3, #30
    e7ea:	d40f      	bmi.n	e80c <_printf_i+0x1c4>
    e7ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e7ee:	68e0      	ldr	r0, [r4, #12]
    e7f0:	4298      	cmp	r0, r3
    e7f2:	da3d      	bge.n	e870 <_printf_i+0x228>
    e7f4:	0018      	movs	r0, r3
    e7f6:	e03b      	b.n	e870 <_printf_i+0x228>
    e7f8:	0022      	movs	r2, r4
    e7fa:	2301      	movs	r3, #1
    e7fc:	3219      	adds	r2, #25
    e7fe:	9906      	ldr	r1, [sp, #24]
    e800:	9805      	ldr	r0, [sp, #20]
    e802:	9e07      	ldr	r6, [sp, #28]
    e804:	47b0      	blx	r6
    e806:	1c43      	adds	r3, r0, #1
    e808:	d030      	beq.n	e86c <_printf_i+0x224>
    e80a:	3501      	adds	r5, #1
    e80c:	68e3      	ldr	r3, [r4, #12]
    e80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e810:	1a9b      	subs	r3, r3, r2
    e812:	429d      	cmp	r5, r3
    e814:	dbf0      	blt.n	e7f8 <_printf_i+0x1b0>
    e816:	e7e9      	b.n	e7ec <_printf_i+0x1a4>
    e818:	2d00      	cmp	r5, #0
    e81a:	d0a9      	beq.n	e770 <_printf_i+0x128>
    e81c:	9e04      	ldr	r6, [sp, #16]
    e81e:	0028      	movs	r0, r5
    e820:	0039      	movs	r1, r7
    e822:	f7fc ffa1 	bl	b768 <__aeabi_uidivmod>
    e826:	9b03      	ldr	r3, [sp, #12]
    e828:	3e01      	subs	r6, #1
    e82a:	5c5b      	ldrb	r3, [r3, r1]
    e82c:	0028      	movs	r0, r5
    e82e:	7033      	strb	r3, [r6, #0]
    e830:	0039      	movs	r1, r7
    e832:	f7fc ff13 	bl	b65c <__udivsi3>
    e836:	1e05      	subs	r5, r0, #0
    e838:	d1f1      	bne.n	e81e <_printf_i+0x1d6>
    e83a:	2f08      	cmp	r7, #8
    e83c:	d109      	bne.n	e852 <_printf_i+0x20a>
    e83e:	6823      	ldr	r3, [r4, #0]
    e840:	07db      	lsls	r3, r3, #31
    e842:	d506      	bpl.n	e852 <_printf_i+0x20a>
    e844:	6863      	ldr	r3, [r4, #4]
    e846:	6922      	ldr	r2, [r4, #16]
    e848:	4293      	cmp	r3, r2
    e84a:	dc02      	bgt.n	e852 <_printf_i+0x20a>
    e84c:	2330      	movs	r3, #48	; 0x30
    e84e:	3e01      	subs	r6, #1
    e850:	7033      	strb	r3, [r6, #0]
    e852:	9b04      	ldr	r3, [sp, #16]
    e854:	1b9b      	subs	r3, r3, r6
    e856:	6123      	str	r3, [r4, #16]
    e858:	9b07      	ldr	r3, [sp, #28]
    e85a:	aa09      	add	r2, sp, #36	; 0x24
    e85c:	9300      	str	r3, [sp, #0]
    e85e:	0021      	movs	r1, r4
    e860:	9b06      	ldr	r3, [sp, #24]
    e862:	9805      	ldr	r0, [sp, #20]
    e864:	f7ff fe82 	bl	e56c <_printf_common>
    e868:	1c43      	adds	r3, r0, #1
    e86a:	d1b3      	bne.n	e7d4 <_printf_i+0x18c>
    e86c:	2001      	movs	r0, #1
    e86e:	4240      	negs	r0, r0
    e870:	b00b      	add	sp, #44	; 0x2c
    e872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e874:	00010768 	.word	0x00010768
    e878:	00010757 	.word	0x00010757

0000e87c <_putc_r>:
    e87c:	b570      	push	{r4, r5, r6, lr}
    e87e:	0006      	movs	r6, r0
    e880:	000d      	movs	r5, r1
    e882:	0014      	movs	r4, r2
    e884:	2800      	cmp	r0, #0
    e886:	d004      	beq.n	e892 <_putc_r+0x16>
    e888:	6983      	ldr	r3, [r0, #24]
    e88a:	2b00      	cmp	r3, #0
    e88c:	d101      	bne.n	e892 <_putc_r+0x16>
    e88e:	f7ff faab 	bl	dde8 <__sinit>
    e892:	4b12      	ldr	r3, [pc, #72]	; (e8dc <_putc_r+0x60>)
    e894:	429c      	cmp	r4, r3
    e896:	d111      	bne.n	e8bc <_putc_r+0x40>
    e898:	6874      	ldr	r4, [r6, #4]
    e89a:	68a3      	ldr	r3, [r4, #8]
    e89c:	3b01      	subs	r3, #1
    e89e:	60a3      	str	r3, [r4, #8]
    e8a0:	2b00      	cmp	r3, #0
    e8a2:	da05      	bge.n	e8b0 <_putc_r+0x34>
    e8a4:	69a2      	ldr	r2, [r4, #24]
    e8a6:	4293      	cmp	r3, r2
    e8a8:	db12      	blt.n	e8d0 <_putc_r+0x54>
    e8aa:	b2eb      	uxtb	r3, r5
    e8ac:	2b0a      	cmp	r3, #10
    e8ae:	d00f      	beq.n	e8d0 <_putc_r+0x54>
    e8b0:	6823      	ldr	r3, [r4, #0]
    e8b2:	b2e8      	uxtb	r0, r5
    e8b4:	1c5a      	adds	r2, r3, #1
    e8b6:	6022      	str	r2, [r4, #0]
    e8b8:	701d      	strb	r5, [r3, #0]
    e8ba:	bd70      	pop	{r4, r5, r6, pc}
    e8bc:	4b08      	ldr	r3, [pc, #32]	; (e8e0 <_putc_r+0x64>)
    e8be:	429c      	cmp	r4, r3
    e8c0:	d101      	bne.n	e8c6 <_putc_r+0x4a>
    e8c2:	68b4      	ldr	r4, [r6, #8]
    e8c4:	e7e9      	b.n	e89a <_putc_r+0x1e>
    e8c6:	4b07      	ldr	r3, [pc, #28]	; (e8e4 <_putc_r+0x68>)
    e8c8:	429c      	cmp	r4, r3
    e8ca:	d1e6      	bne.n	e89a <_putc_r+0x1e>
    e8cc:	68f4      	ldr	r4, [r6, #12]
    e8ce:	e7e4      	b.n	e89a <_putc_r+0x1e>
    e8d0:	0022      	movs	r2, r4
    e8d2:	0029      	movs	r1, r5
    e8d4:	0030      	movs	r0, r6
    e8d6:	f7ff f8c3 	bl	da60 <__swbuf_r>
    e8da:	e7ee      	b.n	e8ba <_putc_r+0x3e>
    e8dc:	000106fc 	.word	0x000106fc
    e8e0:	0001071c 	.word	0x0001071c
    e8e4:	000106dc 	.word	0x000106dc

0000e8e8 <__sread>:
    e8e8:	b570      	push	{r4, r5, r6, lr}
    e8ea:	000c      	movs	r4, r1
    e8ec:	250e      	movs	r5, #14
    e8ee:	5f49      	ldrsh	r1, [r1, r5]
    e8f0:	f000 f8e2 	bl	eab8 <_read_r>
    e8f4:	2800      	cmp	r0, #0
    e8f6:	db03      	blt.n	e900 <__sread+0x18>
    e8f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e8fa:	181b      	adds	r3, r3, r0
    e8fc:	6563      	str	r3, [r4, #84]	; 0x54
    e8fe:	bd70      	pop	{r4, r5, r6, pc}
    e900:	89a3      	ldrh	r3, [r4, #12]
    e902:	4a02      	ldr	r2, [pc, #8]	; (e90c <__sread+0x24>)
    e904:	4013      	ands	r3, r2
    e906:	81a3      	strh	r3, [r4, #12]
    e908:	e7f9      	b.n	e8fe <__sread+0x16>
    e90a:	46c0      	nop			; (mov r8, r8)
    e90c:	ffffefff 	.word	0xffffefff

0000e910 <__swrite>:
    e910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e912:	001f      	movs	r7, r3
    e914:	898b      	ldrh	r3, [r1, #12]
    e916:	0005      	movs	r5, r0
    e918:	000c      	movs	r4, r1
    e91a:	0016      	movs	r6, r2
    e91c:	05db      	lsls	r3, r3, #23
    e91e:	d505      	bpl.n	e92c <__swrite+0x1c>
    e920:	230e      	movs	r3, #14
    e922:	5ec9      	ldrsh	r1, [r1, r3]
    e924:	2200      	movs	r2, #0
    e926:	2302      	movs	r3, #2
    e928:	f000 f880 	bl	ea2c <_lseek_r>
    e92c:	89a3      	ldrh	r3, [r4, #12]
    e92e:	4a05      	ldr	r2, [pc, #20]	; (e944 <__swrite+0x34>)
    e930:	0028      	movs	r0, r5
    e932:	4013      	ands	r3, r2
    e934:	81a3      	strh	r3, [r4, #12]
    e936:	0032      	movs	r2, r6
    e938:	230e      	movs	r3, #14
    e93a:	5ee1      	ldrsh	r1, [r4, r3]
    e93c:	003b      	movs	r3, r7
    e93e:	f000 f82b 	bl	e998 <_write_r>
    e942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e944:	ffffefff 	.word	0xffffefff

0000e948 <__sseek>:
    e948:	b570      	push	{r4, r5, r6, lr}
    e94a:	000c      	movs	r4, r1
    e94c:	250e      	movs	r5, #14
    e94e:	5f49      	ldrsh	r1, [r1, r5]
    e950:	f000 f86c 	bl	ea2c <_lseek_r>
    e954:	89a3      	ldrh	r3, [r4, #12]
    e956:	1c42      	adds	r2, r0, #1
    e958:	d103      	bne.n	e962 <__sseek+0x1a>
    e95a:	4a05      	ldr	r2, [pc, #20]	; (e970 <__sseek+0x28>)
    e95c:	4013      	ands	r3, r2
    e95e:	81a3      	strh	r3, [r4, #12]
    e960:	bd70      	pop	{r4, r5, r6, pc}
    e962:	2280      	movs	r2, #128	; 0x80
    e964:	0152      	lsls	r2, r2, #5
    e966:	4313      	orrs	r3, r2
    e968:	81a3      	strh	r3, [r4, #12]
    e96a:	6560      	str	r0, [r4, #84]	; 0x54
    e96c:	e7f8      	b.n	e960 <__sseek+0x18>
    e96e:	46c0      	nop			; (mov r8, r8)
    e970:	ffffefff 	.word	0xffffefff

0000e974 <__sclose>:
    e974:	b510      	push	{r4, lr}
    e976:	230e      	movs	r3, #14
    e978:	5ec9      	ldrsh	r1, [r1, r3]
    e97a:	f000 f821 	bl	e9c0 <_close_r>
    e97e:	bd10      	pop	{r4, pc}

0000e980 <__ascii_wctomb>:
    e980:	1e0b      	subs	r3, r1, #0
    e982:	d004      	beq.n	e98e <__ascii_wctomb+0xe>
    e984:	2aff      	cmp	r2, #255	; 0xff
    e986:	d904      	bls.n	e992 <__ascii_wctomb+0x12>
    e988:	238a      	movs	r3, #138	; 0x8a
    e98a:	6003      	str	r3, [r0, #0]
    e98c:	3b8b      	subs	r3, #139	; 0x8b
    e98e:	0018      	movs	r0, r3
    e990:	4770      	bx	lr
    e992:	700a      	strb	r2, [r1, #0]
    e994:	2301      	movs	r3, #1
    e996:	e7fa      	b.n	e98e <__ascii_wctomb+0xe>

0000e998 <_write_r>:
    e998:	b570      	push	{r4, r5, r6, lr}
    e99a:	0005      	movs	r5, r0
    e99c:	0008      	movs	r0, r1
    e99e:	0011      	movs	r1, r2
    e9a0:	2200      	movs	r2, #0
    e9a2:	4c06      	ldr	r4, [pc, #24]	; (e9bc <_write_r+0x24>)
    e9a4:	6022      	str	r2, [r4, #0]
    e9a6:	001a      	movs	r2, r3
    e9a8:	f7fa fb44 	bl	9034 <_write>
    e9ac:	1c43      	adds	r3, r0, #1
    e9ae:	d103      	bne.n	e9b8 <_write_r+0x20>
    e9b0:	6823      	ldr	r3, [r4, #0]
    e9b2:	2b00      	cmp	r3, #0
    e9b4:	d000      	beq.n	e9b8 <_write_r+0x20>
    e9b6:	602b      	str	r3, [r5, #0]
    e9b8:	bd70      	pop	{r4, r5, r6, pc}
    e9ba:	46c0      	nop			; (mov r8, r8)
    e9bc:	20002164 	.word	0x20002164

0000e9c0 <_close_r>:
    e9c0:	2300      	movs	r3, #0
    e9c2:	b570      	push	{r4, r5, r6, lr}
    e9c4:	4c06      	ldr	r4, [pc, #24]	; (e9e0 <_close_r+0x20>)
    e9c6:	0005      	movs	r5, r0
    e9c8:	0008      	movs	r0, r1
    e9ca:	6023      	str	r3, [r4, #0]
    e9cc:	f7fa fb6c 	bl	90a8 <_close>
    e9d0:	1c43      	adds	r3, r0, #1
    e9d2:	d103      	bne.n	e9dc <_close_r+0x1c>
    e9d4:	6823      	ldr	r3, [r4, #0]
    e9d6:	2b00      	cmp	r3, #0
    e9d8:	d000      	beq.n	e9dc <_close_r+0x1c>
    e9da:	602b      	str	r3, [r5, #0]
    e9dc:	bd70      	pop	{r4, r5, r6, pc}
    e9de:	46c0      	nop			; (mov r8, r8)
    e9e0:	20002164 	.word	0x20002164

0000e9e4 <_fstat_r>:
    e9e4:	2300      	movs	r3, #0
    e9e6:	b570      	push	{r4, r5, r6, lr}
    e9e8:	4c06      	ldr	r4, [pc, #24]	; (ea04 <_fstat_r+0x20>)
    e9ea:	0005      	movs	r5, r0
    e9ec:	0008      	movs	r0, r1
    e9ee:	0011      	movs	r1, r2
    e9f0:	6023      	str	r3, [r4, #0]
    e9f2:	f7fa fb5c 	bl	90ae <_fstat>
    e9f6:	1c43      	adds	r3, r0, #1
    e9f8:	d103      	bne.n	ea02 <_fstat_r+0x1e>
    e9fa:	6823      	ldr	r3, [r4, #0]
    e9fc:	2b00      	cmp	r3, #0
    e9fe:	d000      	beq.n	ea02 <_fstat_r+0x1e>
    ea00:	602b      	str	r3, [r5, #0]
    ea02:	bd70      	pop	{r4, r5, r6, pc}
    ea04:	20002164 	.word	0x20002164

0000ea08 <_isatty_r>:
    ea08:	2300      	movs	r3, #0
    ea0a:	b570      	push	{r4, r5, r6, lr}
    ea0c:	4c06      	ldr	r4, [pc, #24]	; (ea28 <_isatty_r+0x20>)
    ea0e:	0005      	movs	r5, r0
    ea10:	0008      	movs	r0, r1
    ea12:	6023      	str	r3, [r4, #0]
    ea14:	f7fa fb50 	bl	90b8 <_isatty>
    ea18:	1c43      	adds	r3, r0, #1
    ea1a:	d103      	bne.n	ea24 <_isatty_r+0x1c>
    ea1c:	6823      	ldr	r3, [r4, #0]
    ea1e:	2b00      	cmp	r3, #0
    ea20:	d000      	beq.n	ea24 <_isatty_r+0x1c>
    ea22:	602b      	str	r3, [r5, #0]
    ea24:	bd70      	pop	{r4, r5, r6, pc}
    ea26:	46c0      	nop			; (mov r8, r8)
    ea28:	20002164 	.word	0x20002164

0000ea2c <_lseek_r>:
    ea2c:	b570      	push	{r4, r5, r6, lr}
    ea2e:	0005      	movs	r5, r0
    ea30:	0008      	movs	r0, r1
    ea32:	0011      	movs	r1, r2
    ea34:	2200      	movs	r2, #0
    ea36:	4c06      	ldr	r4, [pc, #24]	; (ea50 <_lseek_r+0x24>)
    ea38:	6022      	str	r2, [r4, #0]
    ea3a:	001a      	movs	r2, r3
    ea3c:	f7fa fb3e 	bl	90bc <_lseek>
    ea40:	1c43      	adds	r3, r0, #1
    ea42:	d103      	bne.n	ea4c <_lseek_r+0x20>
    ea44:	6823      	ldr	r3, [r4, #0]
    ea46:	2b00      	cmp	r3, #0
    ea48:	d000      	beq.n	ea4c <_lseek_r+0x20>
    ea4a:	602b      	str	r3, [r5, #0]
    ea4c:	bd70      	pop	{r4, r5, r6, pc}
    ea4e:	46c0      	nop			; (mov r8, r8)
    ea50:	20002164 	.word	0x20002164

0000ea54 <memchr>:
    ea54:	b2c9      	uxtb	r1, r1
    ea56:	1882      	adds	r2, r0, r2
    ea58:	4290      	cmp	r0, r2
    ea5a:	d101      	bne.n	ea60 <memchr+0xc>
    ea5c:	2000      	movs	r0, #0
    ea5e:	4770      	bx	lr
    ea60:	7803      	ldrb	r3, [r0, #0]
    ea62:	428b      	cmp	r3, r1
    ea64:	d0fb      	beq.n	ea5e <memchr+0xa>
    ea66:	3001      	adds	r0, #1
    ea68:	e7f6      	b.n	ea58 <memchr+0x4>

0000ea6a <_realloc_r>:
    ea6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea6c:	0007      	movs	r7, r0
    ea6e:	000d      	movs	r5, r1
    ea70:	0016      	movs	r6, r2
    ea72:	2900      	cmp	r1, #0
    ea74:	d105      	bne.n	ea82 <_realloc_r+0x18>
    ea76:	0011      	movs	r1, r2
    ea78:	f7fe fcce 	bl	d418 <_malloc_r>
    ea7c:	0004      	movs	r4, r0
    ea7e:	0020      	movs	r0, r4
    ea80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea82:	2a00      	cmp	r2, #0
    ea84:	d103      	bne.n	ea8e <_realloc_r+0x24>
    ea86:	f7fe fc7d 	bl	d384 <_free_r>
    ea8a:	0034      	movs	r4, r6
    ea8c:	e7f7      	b.n	ea7e <_realloc_r+0x14>
    ea8e:	f000 f827 	bl	eae0 <_malloc_usable_size_r>
    ea92:	002c      	movs	r4, r5
    ea94:	4286      	cmp	r6, r0
    ea96:	d9f2      	bls.n	ea7e <_realloc_r+0x14>
    ea98:	0031      	movs	r1, r6
    ea9a:	0038      	movs	r0, r7
    ea9c:	f7fe fcbc 	bl	d418 <_malloc_r>
    eaa0:	1e04      	subs	r4, r0, #0
    eaa2:	d0ec      	beq.n	ea7e <_realloc_r+0x14>
    eaa4:	0029      	movs	r1, r5
    eaa6:	0032      	movs	r2, r6
    eaa8:	f7fe fc49 	bl	d33e <memcpy>
    eaac:	0029      	movs	r1, r5
    eaae:	0038      	movs	r0, r7
    eab0:	f7fe fc68 	bl	d384 <_free_r>
    eab4:	e7e3      	b.n	ea7e <_realloc_r+0x14>
	...

0000eab8 <_read_r>:
    eab8:	b570      	push	{r4, r5, r6, lr}
    eaba:	0005      	movs	r5, r0
    eabc:	0008      	movs	r0, r1
    eabe:	0011      	movs	r1, r2
    eac0:	2200      	movs	r2, #0
    eac2:	4c06      	ldr	r4, [pc, #24]	; (eadc <_read_r+0x24>)
    eac4:	6022      	str	r2, [r4, #0]
    eac6:	001a      	movs	r2, r3
    eac8:	f7fa fa92 	bl	8ff0 <_read>
    eacc:	1c43      	adds	r3, r0, #1
    eace:	d103      	bne.n	ead8 <_read_r+0x20>
    ead0:	6823      	ldr	r3, [r4, #0]
    ead2:	2b00      	cmp	r3, #0
    ead4:	d000      	beq.n	ead8 <_read_r+0x20>
    ead6:	602b      	str	r3, [r5, #0]
    ead8:	bd70      	pop	{r4, r5, r6, pc}
    eada:	46c0      	nop			; (mov r8, r8)
    eadc:	20002164 	.word	0x20002164

0000eae0 <_malloc_usable_size_r>:
    eae0:	1f0b      	subs	r3, r1, #4
    eae2:	681b      	ldr	r3, [r3, #0]
    eae4:	1f18      	subs	r0, r3, #4
    eae6:	2b00      	cmp	r3, #0
    eae8:	da01      	bge.n	eaee <_malloc_usable_size_r+0xe>
    eaea:	580b      	ldr	r3, [r1, r0]
    eaec:	18c0      	adds	r0, r0, r3
    eaee:	4770      	bx	lr
    eaf0:	000001ca 	.word	0x000001ca
    eaf4:	0000019e 	.word	0x0000019e
    eaf8:	000001a2 	.word	0x000001a2
    eafc:	000001aa 	.word	0x000001aa
    eb00:	000001ae 	.word	0x000001ae
    eb04:	000001b2 	.word	0x000001b2
    eb08:	000001b6 	.word	0x000001b6
    eb0c:	000001ba 	.word	0x000001ba
    eb10:	000001be 	.word	0x000001be
    eb14:	000001c2 	.word	0x000001c2
    eb18:	000001a6 	.word	0x000001a6
    eb1c:	0000026c 	.word	0x0000026c
    eb20:	00000244 	.word	0x00000244
    eb24:	0000024a 	.word	0x0000024a
    eb28:	00000250 	.word	0x00000250
    eb2c:	00000250 	.word	0x00000250
    eb30:	00000256 	.word	0x00000256
    eb34:	00000256 	.word	0x00000256
    eb38:	00000256 	.word	0x00000256
    eb3c:	0000025c 	.word	0x0000025c
    eb40:	00000262 	.word	0x00000262
    eb44:	0000024a 	.word	0x0000024a
    eb48:	00000100 	.word	0x00000100
    eb4c:	0000036e 	.word	0x0000036e
    eb50:	00000346 	.word	0x00000346
    eb54:	0000034c 	.word	0x0000034c
    eb58:	00000352 	.word	0x00000352
    eb5c:	00000352 	.word	0x00000352
    eb60:	00000358 	.word	0x00000358
    eb64:	00000358 	.word	0x00000358
    eb68:	00000358 	.word	0x00000358
    eb6c:	0000035e 	.word	0x0000035e
    eb70:	00000364 	.word	0x00000364
    eb74:	0000034c 	.word	0x0000034c
    eb78:	0000079a 	.word	0x0000079a
    eb7c:	00000776 	.word	0x00000776
    eb80:	0000077c 	.word	0x0000077c
    eb84:	00000782 	.word	0x00000782
    eb88:	00000782 	.word	0x00000782
    eb8c:	00000788 	.word	0x00000788
    eb90:	00000788 	.word	0x00000788
    eb94:	00000788 	.word	0x00000788
    eb98:	0000078e 	.word	0x0000078e
    eb9c:	00000794 	.word	0x00000794
    eba0:	0000077c 	.word	0x0000077c
    eba4:	00000aa2 	.word	0x00000aa2
    eba8:	00000a7e 	.word	0x00000a7e
    ebac:	00000a84 	.word	0x00000a84
    ebb0:	00000a8a 	.word	0x00000a8a
    ebb4:	00000a8a 	.word	0x00000a8a
    ebb8:	00000a90 	.word	0x00000a90
    ebbc:	00000a90 	.word	0x00000a90
    ebc0:	00000a90 	.word	0x00000a90
    ebc4:	00000a96 	.word	0x00000a96
    ebc8:	00000a9c 	.word	0x00000a9c
    ebcc:	00000a84 	.word	0x00000a84
    ebd0:	754e203a 	.word	0x754e203a
    ebd4:	69206c6c 	.word	0x69206c6c
    ebd8:	7475706e 	.word	0x7475706e
    ebdc:	72617020 	.word	0x72617020
    ebe0:	74656d61 	.word	0x74656d61
    ebe4:	2d207265 	.word	0x2d207265
    ebe8:	7453202d 	.word	0x7453202d
    ebec:	73757461 	.word	0x73757461
    ebf0:	3025203a 	.word	0x3025203a
    ebf4:	0a0d5832 	.word	0x0a0d5832
    ebf8:	00000000 	.word	0x00000000
    ebfc:	6e49203a 	.word	0x6e49203a
    ec00:	696c6176 	.word	0x696c6176
    ec04:	61622064 	.word	0x61622064
    ec08:	34366573 	.word	0x34366573
    ec0c:	61686320 	.word	0x61686320
    ec10:	74636172 	.word	0x74636172
    ec14:	2d207265 	.word	0x2d207265
    ec18:	7453202d 	.word	0x7453202d
    ec1c:	73757461 	.word	0x73757461
    ec20:	3025203a 	.word	0x3025203a
    ec24:	0a0d5832 	.word	0x0a0d5832
    ec28:	00000000 	.word	0x00000000
    ec2c:	6e49203a 	.word	0x6e49203a
    ec30:	696c6176 	.word	0x696c6176
    ec34:	756e2064 	.word	0x756e2064
    ec38:	7265626d 	.word	0x7265626d
    ec3c:	20666f20 	.word	0x20666f20
    ec40:	65736162 	.word	0x65736162
    ec44:	63203436 	.word	0x63203436
    ec48:	73726168 	.word	0x73726168
    ec4c:	202d2d20 	.word	0x202d2d20
    ec50:	74617453 	.word	0x74617453
    ec54:	203a7375 	.word	0x203a7375
    ec58:	58323025 	.word	0x58323025
    ec5c:	00000a0d 	.word	0x00000a0d
    ec60:	656e203a 	.word	0x656e203a
    ec64:	6e696c77 	.word	0x6e696c77
    ec68:	75722065 	.word	0x75722065
    ec6c:	5b73656c 	.word	0x5b73656c
    ec70:	6d205d33 	.word	0x6d205d33
    ec74:	20747375 	.word	0x20747375
    ec78:	6d206562 	.word	0x6d206562
    ec7c:	69746c75 	.word	0x69746c75
    ec80:	20656c70 	.word	0x20656c70
    ec84:	3420666f 	.word	0x3420666f
    ec88:	202d2d20 	.word	0x202d2d20
    ec8c:	74617453 	.word	0x74617453
    ec90:	203a7375 	.word	0x203a7375
    ec94:	58323025 	.word	0x58323025
    ec98:	00000a0d 	.word	0x00000a0d
    ec9c:	654c203a 	.word	0x654c203a
    eca0:	6874676e 	.word	0x6874676e
    eca4:	20666f20 	.word	0x20666f20
    eca8:	6f636e65 	.word	0x6f636e65
    ecac:	20646564 	.word	0x20646564
    ecb0:	66667562 	.word	0x66667562
    ecb4:	74207265 	.word	0x74207265
    ecb8:	73206f6f 	.word	0x73206f6f
    ecbc:	6c6c616d 	.word	0x6c6c616d
    ecc0:	202d2d20 	.word	0x202d2d20
    ecc4:	74617453 	.word	0x74617453
    ecc8:	203a7375 	.word	0x203a7375
    eccc:	58323025 	.word	0x58323025
    ecd0:	00000a0d 	.word	0x00000a0d

0000ecd4 <k.4571>:
    ecd4:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
    ece4:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
    ecf4:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
    ed04:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
    ed14:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
    ed24:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
    ed34:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
    ed44:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
    ed54:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
    ed64:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
    ed74:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
    ed84:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
    ed94:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
    eda4:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
    edb4:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
    edc4:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
    edd4:	43331104 40c40704 00001f1c 00001fa0     ..3C...@........
    ede4:	00001fae 00001fbc 00001fca 00001fd8     ................
    edf4:	22732522 646c253a 00000000 22732522     "%s":%ld...."%s"
    ee04:	7325223a 00000022                       :"%s"...

0000ee0c <g_jwt_header>:
    ee0c:	6c61227b 223a2267 35325345 222c2236     {"alg":"ES256","
    ee1c:	22707974 574a223a 007d2254 42002c00     typ":"JWT"}..,.B
    ee2c:	42003000 42003400                       .0.B.4.B

0000ee34 <_usb_device_irq_bits>:
    ee34:	00080004 00800070 01000001 00000200     ....p...........

0000ee44 <__FUNCTION__.15652>:
    ee44:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    ee54:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    ee64:	00005d64 61766e69 2064696c 6c636f69     d]..invalid iocl
    ee74:	6d632074 00000064 00004594 00004564     t cmd....E..dE..
    ee84:	0000455c 00004574 0000456c 0000458c     \E..tE..lE...E..
    ee94:	0000457c 00004584                       |E...E..

0000ee9c <__FUNCTION__.13235>:
    ee9c:	5f666968 646e6573 00000000              hif_send....

0000eea8 <__FUNCTION__.13245>:
    eea8:	5f666968 00727369                       hif_isr.

0000eeb0 <__FUNCTION__.13255>:
    eeb0:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000eec0 <__FUNCTION__.13267>:
    eec0:	5f666968 65636572 00657669              hif_receive.

0000eecc <__FUNCTION__.13283>:
    eecc:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    eedc:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    eeec:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    eefc:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    ef0c:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    ef1c:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    ef2c:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    ef3c:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    ef4c:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
    ef5c:	6c616320 6361626c 7369206b 746f6e20      callback is not
    ef6c:	67657220 65747369 00646572 6b636f53      registered.Sock
    ef7c:	63207465 626c6c61 206b6361 6e207369     et callback is n
    ef8c:	7220746f 73696765 65726574 00000064     ot registered...
    ef9c:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
    efac:	20746f6e 69676572 72657473 00006465     not registered..
    efbc:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
    efcc:	6e207369 7220746f 73696765 65726574     is not registere
    efdc:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
    efec:	69206b63 6f6e2073 65722074 74736967     ck is not regist
    effc:	64657265 00000000 204c5353 6c6c6163     ered....SSL call
    f00c:	6b636162 20736920 20746f6e 69676572     back is not regi
    f01c:	72657473 00006465 66696828 6e692029     stered..(hif) in
    f02c:	696c6176 72672064 2070756f 00004449     valid group ID..
    f03c:	66696828 6f682029 61207473 64207070     (hif) host app d
    f04c:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
    f05c:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
    f06c:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    f07c:	66696828 61462029 2065736c 65746e69     (hif) False inte
    f08c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    f09c:	61462029 64656c69 206f7420 64616552     ) Failed to Read
    f0ac:	746e6920 75727265 72207470 00006765      interrupt reg..
    f0bc:	46494828 61462029 64656c69 206f7420     (HIF) Failed to 
    f0cc:	646e6168 6920656c 7265746e 74707572     handle interrupt
    f0dc:	2c642520 6f626120 6e697472 75642067      %d, aborting du
    f0ec:	6f742065 6f6f7420 6e616d20 65722079     e to too many re
    f0fc:	65697274 00000a73 46494828 61462029     tries...(HIF) Fa
    f10c:	64656c69 206f7420 646e6168 6920656c     iled to handle i
    f11c:	7265746e 74707572 20642520 20797274     nterrupt %d try 
    f12c:	69616761 2e2e2e6e 75252820 00000a29     again... (%u)...
    f13c:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    f14c:	696c6176 72612064 656d7567 0000746e     valid argument..
    f15c:	20505041 75716552 65747365 69532064     APP Requested Si
    f16c:	6920657a 616c2073 72656772 61687420     ze is larger tha
    f17c:	6874206e 65722065 76696563 62206465     n the received b
    f18c:	65666675 69732072 3c20657a 3c3e7525     uffer size <%u><
    f19c:	3e756c25 0000000a 20505041 75716552     %lu>....APP Requ
    f1ac:	65747365 64412064 73657264 65622073     ested Address be
    f1bc:	646e6f79 65687420 63657220 65766965     yond the receive
    f1cc:	75622064 72656666 64646120 73736572     d buffer address
    f1dc:	646e6120 6e656c20 00687467 20705247      and length.GRp 
    f1ec:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    f1fc:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    f20c:	002e2e2e 46494828 69614629 2064656c     ....(HIF)Failed 
    f21c:	77206f74 75656b61 68742070 68632065     to wakeup the ch
    f22c:	00007069 20464948 7373656d 20656761     ip..HIF message 
    f23c:	676e656c 28206874 20296425 65637865     length (%d) exce
    f24c:	20736465 2078616d 676e656c 28206874     eds max length (
    f25c:	0a296425 00000000                       %d).....

0000f264 <__FUNCTION__.13512>:
    f264:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000f270 <__FUNCTION__.13521>:
    f270:	5f6d326d 696c6176 65746164 5f70615f     m2m_validate_ap_
    f280:	61726170 6574656d 00007372              parameters..

0000f28c <__FUNCTION__.13544>:
    f28c:	5f6d326d 69666977 696e695f 74735f74     m2m_wifi_init_st
    f29c:	00747261                                art.

0000f2a0 <__FUNCTION__.13846>:
    f2a0:	5f6d326d 69666977 6174735f 705f7472     m2m_wifi_start_p
    f2b0:	69766f72 6e6f6973 646f6d5f 78655f65     rovision_mode_ex
    f2c0:	00000074 41564e49 2044494c 4e494f50     t...INVALID POIN
    f2d0:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
    f2e0:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
    f2f0:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
    f300:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
    f310:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
    f320:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
    f330:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
    f340:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
    f350:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
    f360:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
    f370:	49544143 4d204e4f 0045444f 666e6f43     CATION MODE.Conf
    f380:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
    f390:	75252e75 2075252e 000a2022 20514552     u.%u.%u " ..REQ 
    f3a0:	20746f4e 69666564 2064656e 000a6425     Not defined %d..
    f3b0:	6d726946 65726177 72657620 3a202020     Firmware ver   :
    f3c0:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
    f3d0:	0a752520 00000000 6d726946 65726177      %u.....Firmware
    f3e0:	69754220 2520646c 69542073 2520656d      Build %s Time %
    f3f0:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
    f400:	69726420 20726576 20726576 7525203a      driver ver : %u
    f410:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
    f420:	203a7265 252e7525 75252e75 00000a20     er: %u.%u.%u ...
    f430:	343a3730 35323a30 00000000 20626546     07:40:25....Feb 
    f440:	32203231 00393130 76697244 62207265     12 2019.Driver b
    f450:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
    f460:	6d73694d 68637461 72694620 7261776d     Mismatch Firmwar
    f470:	65562065 6f697372 0000006e 41564e49     e Version...INVA
    f480:	2044494c 414d4f44 4e204e49 00454d41     LID DOMAIN NAME.

0000f490 <__FUNCTION__.13074>:
    f490:	70696863 6b61775f 00000065              chip_wake...

0000f49c <__FUNCTION__.13123>:
    f49c:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    f4ac:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    f4bc:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    f4cc:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    f4dc:	74206465 6177206f 7520656b 68742070     ed to wake up th
    f4ec:	68632065 00007069 76697244 65567265     e chip..DriverVe
    f4fc:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

0000f50c <__FUNCTION__.13125>:
    f50c:	645f6d6e 695f7672 5f74696e 646c6f68     nm_drv_init_hold
    f51c:	00000000                                ....

0000f520 <__FUNCTION__.13134>:
    f520:	645f6d6e 695f7672 5f74696e 72617473     nm_drv_init_star
    f530:	00000074                                t...

0000f534 <__FUNCTION__.13143>:
    f534:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    f544:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    f554:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    f564:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    f574:	73616c66 69642068 6c626173 61662065     flash disable fa
    f584:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    f594:	6c696166 696e6920 75622074 00000073     fail init bus...
    f5a4:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    f5b4:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    f5c4:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
    f5d4:	74206465 6e65206f 656c6261 746e6920     ed to enable int
    f5e4:	75727265 2e737470 0000002e 00005e28     errupts.....(^..
    f5f4:	00005e28 00005e58 00005dda 00005dfe     (^..X^...]...]..
    f604:	00005e0c 00005e3e 00005e3e 00005e86     .^..>^..>^...^..
    f614:	00005dbe 00005ec0 00005ec0 00005ec0     .]...^...^...^..
    f624:	00005ec0 00005e1a cac4c9c3              .^...^......

0000f630 <__FUNCTION__.12270>:
    f630:	5f697073 00646d63                       spi_cmd.

0000f638 <__FUNCTION__.12277>:
    f638:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0000f648 <__FUNCTION__.12286>:
    f648:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000f654 <__FUNCTION__.12302>:
    f654:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000f664 <__FUNCTION__.12317>:
    f664:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000f674 <__FUNCTION__.12329>:
    f674:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000f684 <__FUNCTION__.12340>:
    f684:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000f694 <__FUNCTION__.12352>:
    f694:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000f6a4 <__FUNCTION__.12365>:
    f6a4:	735f6d6e 725f6970 00646165              nm_spi_read.

0000f6b0 <__FUNCTION__.12386>:
    f6b0:	735f6d6e 695f6970 0074696e              nm_spi_init.

0000f6bc <crc7_syndrome_table>:
    f6bc:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    f6cc:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    f6dc:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    f6ec:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    f6fc:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    f70c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    f71c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    f72c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    f73c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    f74c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    f75c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    f76c:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    f77c:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    f78c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    f79c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    f7ac:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    f7bc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    f7cc:	6e692064 6e726574 72206c61 20646165     d internal read 
    f7dc:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    f7ec:	6e6f2043 6572202c 69797274 7720676e     C on, retrying w
    f7fc:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    f80c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    f81c:	6e692064 6e726574 72206c61 20646165     d internal read 
    f82c:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    f83c:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    f84c:	6e726574 77206c61 65746972 6f727020     ternal write pro
    f85c:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    f86c:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    f87c:	20646d63 64616572 69686320 64692070     cmd read chip id
    f88c:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    f89c:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    f8ac:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    f8bc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    f8cc:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    f8dc:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    f8ec:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    f8fc:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    f90c:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    f91c:	00000000 65736552 6e612074 65722064     ....Reset and re
    f92c:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    f93c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    f94c:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    f95c:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    f96c:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    f97c:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    f98c:	69727720 62206574 6b636f6c 30252820      write block (%0
    f99c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    f9ac:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    f9bc:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    f9cc:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    f9dc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    f9ec:	61642064 62206174 6b636f6c 69727720     d data block wri
    f9fc:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    fa0c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    fa1c:	656c6961 61642064 62206174 6b636f6c     ailed data block
    fa2c:	63726320 69727720 202c6574 20737562      crc write, bus 
    fa3c:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    fa4c:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    fa5c:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    fa6c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    fa7c:	72206174 6f707365 2065736e 64616572     ta response read
    fa8c:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    fa9c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    faac:	206b636f 61746164 69727720 2e2e6574     ock data write..
    fabc:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    facc:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    fadc:	73756220 72726520 2e2e726f 0000002e      bus error......
    faec:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    fafc:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    fb0c:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    fb1c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    fb2c:	656c6961 61642064 72206174 6f707365     ailed data respo
    fb3c:	2065736e 64616572 7562202c 72652073     nse read, bus er
    fb4c:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    fb5c:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    fb6c:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    fb7c:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    fb8c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    fb9c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    fbac:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    fbbc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    fbcc:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    fbdc:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    fbec:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    fbfc:	72202c64 20646165 20676572 38302528     d, read reg (%08
    fc0c:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    fc1c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    fc2c:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    fc3c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    fc4c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    fc5c:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    fc6c:	6e612074 65722064 20797274 25206425     t and retry %d %
    fc7c:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    fc8c:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    fc9c:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    fcac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    fcbc:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    fccc:	74697277 65722065 25282067 29783830     write reg (%08x)
    fcdc:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    fcec:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    fcfc:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
    fd0c:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
    fd1c:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    fd2c:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
    fd3c:	4449206e 25203d20 000a0d64 42000800     n ID = %d......B
    fd4c:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    fd5c:	42001c00 000086fe 000086fa 000086fa     ...B............
    fd6c:	00008760 00008760 00008712 00008704     `...`...........
    fd7c:	00008718 0000874e 00008920 00008900     ....N... .......
    fd8c:	00008900 0000898c 00008912 0000892e     ................
    fd9c:	00008904 0000893c 0000897c              ....<...|...

0000fda8 <_tcc_intflag>:
    fda8:	00000001 00000002 00000004 00000008     ................
    fdb8:	00001000 00002000 00004000 00008000     ..... ...@......
    fdc8:	00010000 00020000 00040000 00080000     ................
    fdd8:	4354514d 00000000 00000004 00000000     MQTC............
	...
    fdf0:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
    fe30:	4354514d 00000000 00000004 00000000     MQTC............
	...
    fe48:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
    fe88:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
    fe98:	0000aac8 0000aad6 0000ab0c 0000aac8     ................
    fea8:	0000ab44 0000ab86 0000abc2 0000abb0     D...............
    feb8:	6b636f73 635f7465 63203a62 656e6e6f     socket_cb: conne
    fec8:	73207463 65636375 0d217373 00000000     ct success!.....
    fed8:	6b636f73 635f7465 63203a62 656e6e6f     socket_cb: conne
    fee8:	65207463 726f7272 00000d21 6b636f73     ct error!...sock
    fef8:	635f7465 73203a62 20646e65 63637573     et_cb: send succ
    ff08:	21737365 0000000d 6b636f73 635f7465     ess!....socket_c
    ff18:	72203a62 20766365 63637573 21737365     b: recv success!
    ff28:	0000000d 6b636f73 635f7465 72203a62     ....socket_cb: r
    ff38:	20766365 6f727265 000d2172 6e69616d     ecv error!..main
    ff48:	6166203a 64656c69 206f7420 61657263     : failed to crea
    ff58:	54206574 63205043 6e65696c 6f732074     te TCP client so
    ff68:	74656b63 72652034 21726f72 0000000d     cket4 error!....
    ff78:	6e6e6f63 65746365 6f742064 65687420     connected to the
    ff88:	74786520 616e7265 4354206c 65732050      external TCP se
    ff98:	72657672 00000d20 00746169 00707865     rver ...iat.exp.
    ffa8:	72746c61 612d6e6f 6e697774 30353163     altron-atwinc150
    ffb8:	00000030 00647561                       0...aud.

0000ffc0 <gacHttpProvDomainName>:
    ffc0:	6f727261 6e6f4377 2e676966 006d6f63     arrowConfig.com.
    ffd0:	20656854 75706e69 656d2074 67617373     The input messag
    ffe0:	73692065 0d732520 0000000a 696c7053     e is %s.....Spli
    fff0:	6e697474 74732067 676e6972 746e6920     tting string int
   10000:	6e69206f 69766964 6c617564 656c6520     o individual ele
   10010:	746e656d 00000d73 00000020 756c6156     ments... ...Valu
   10020:	64252065 206e6920 20656874 61727261     e %d in the arra
   10030:	73692079 0d732520 0000000a 656e6f44     y is %s.....Done
   10040:	6c705320 69747469 000d676e 20656854      Splitting..The 
   10050:	6d6d6f63 20646e61 25207369 000a0d73     command is %s...
   10060:	00504354 20656854 69727473 2073676e     TCP.The strings 
   10070:	20657261 61757165 0000006c 20656854     are equal...The 
   10080:	61205049 65726464 25207373 000a0d73     IP address %s...
   10090:	444e4553 00000000 746e6553 20732520     SEND....Sent %s 
   100a0:	74206f74 73206568 65767265 000a0d72     to the server...
   100b0:	0000002d 00504347 676f6f47 4320656c     -...GCP.Google C
   100c0:	64756f6c 6d6f4320 646e616d 00000000     loud Command....
   100d0:	4e4e4f43 00544345 676f6f47 4320656c     CONNECT.Google C
   100e0:	64756f6c 6e6f4320 7463656e 61784520     loud Connect Exa
   100f0:	656c706d 2d2d0a0d 74695720 54482068     mple..-- With HT
   10100:	70205054 69766f72 6e6f6973 20676e69     TP provisioning 
   10110:	0a0d2d2d 43202d2d 69706d6f 3a64656c     --..-- Compiled:
   10120:	62654620 20333120 39313032 3a373020      Feb 13 2019 07:
   10130:	333a3131 2d2d2036 0000000d 5454514d     11:36 --....MQTT
   10140:	696e6920 6c616974 74617a69 206e6f69      initialization 
   10150:	6c696166 202e6465 6f727245 6f632072     failed. Error co
   10160:	69206564 25282073 0a0d2964 00000000     de is (%d)......
   10170:	5454514d 67657220 65747369 61632072     MQTT register ca
   10180:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
   10190:	726f7272 646f6320 73692065 64252820     rror code is (%d
   101a0:	000a0d29 43455441 38303143 6f432041     )...ATECC108A Co
   101b0:	6769666e 64657275 0000000d 70696843     nfigured....Chip
   101c0:	20736920 65726e75 6e6f7073 65766973      is unresponsive
   101d0:	0000000d 6e69616d 326d203a 69775f6d     ....main: m2m_wi
   101e0:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
   101f0:	2821726f 0d296425 0000000a 656d6974     or!(%d).....time
   10200:	6f6f672e 2e656c67 006d6f63 6e69616d     .google.com.main
   10210:	4e53203a 25205054 6f632073 6769666e     : SNTP %s config
   10220:	74617275 206e6f69 6c696146 0d657275     uration Failure.
   10230:	0000000a 44495353 20736920 696c6176     ....SSID is vali
   10240:	77202c64 206c6c69 746e6f63 65756e69     d, will continue
   10250:	206f7420 6e6e6f63 0d746365 00000000      to connect.....
   10260:	44495353 65722020 69206461 73252073     SSID  read is %s
   10270:	00000a0d 73736150 64726f77 61657220     ....Password rea
   10280:	73692064 7325203a 00000a0d 44495353     d is: %s....SSID
   10290:	20736920 20746f6e 696c6176 77202c64      is not valid, w
   102a0:	20696669 766f7270 6f697369 676e696e     ifi provisioning
   102b0:	6c697720 7473206c 00747261 6f727261      will start.arro
   102c0:	6e6f4377 2e676966 006d6f63 766f7250     wConfig.com.Prov
   102d0:	6f697369 6f4d206e 73206564 74726174     ision Mode start
   102e0:	0d2e6465 6e6f430a 7463656e 206f7420     ed...Connect to 
   102f0:	5d73255b 61697620 5b504120 205d7325     [%s] via AP[%s] 
   10300:	20646e61 6c6c6966 20707520 20656874     and fill up the 
   10310:	65676170 000a0d2e 6e69616d 6166203a     page....main: fa
   10320:	64656c69 206f7420 61657263 54206574     iled to create T
   10330:	73205043 65767265 6f732072 74656b63     CP server socket
   10340:	72726520 0d21726f 00000000 3e525245      error!.....ERR>
   10350:	7953203e 63697473 6f63206b 6769666e     > Systick config
   10360:	74617275 206e6f69 6f727265 000a0d72     uration error...
   10370:	6f430a0d 63656e6e 676e6974 206f7420     ..Connecting to 
   10380:	6b6f7242 2e2e7265 0000002e 7474716d     Broker......mqtt
   10390:	6f6f672e 61656c67 2e736970 006d6f63     .googleapis.com.
   103a0:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
   103b0:	76726573 25287265 20212973 72746572     server(%s)! retr
   103c0:	74692079 74756120 74616d6f 6c616369     y it automatical
   103d0:	0d2e796c 0000000a 70657250 74617261     ly......Preparat
   103e0:	206e6f69 7420666f 63206568 20746168     ion of the chat 
   103f0:	20736168 6e656562 6d6f6320 74656c70     has been complet
   10400:	0d2e6465 00000000 5454514d 6f726220     ed......MQTT bro
   10410:	2072656b 6c636564 20656e69 72756f79     ker decline your
   10420:	63636120 21737365 72726520 6320726f      access! error c
   10430:	2065646f 0a0d6425 00000000 5454514d     ode %d......MQTT
   10440:	73696420 6e6e6f63 65746365 00000d64      disconnected...
   10450:	6d69747b 61747365 203a706d 007d7525     {timestamp: %u}.
   10460:	7665642f 73656369 6d61732f 2d353277     /devices/samw25-
   10470:	2f746f69 74617473 00000065 7373654d     iot/state...Mess
   10480:	20656761 25202d2d 202d2d73 20736168     age -- %s-- has 
   10490:	6e656562 62757020 6873696c 0a0d6465     been published..
   104a0:	00000000 7373656d 20656761 74206f74     ....message to t
   104b0:	73206568 65767265 73692072 7325203a     he server is: %s
   104c0:	00000a0d 6b636f73 635f7465 62203a62     ....socket_cb: b
   104d0:	20646e69 63637573 21737365 0000000d     ind success!....
   104e0:	6b636f73 635f7465 62203a62 20646e69     socket_cb: bind 
   104f0:	6f727265 000d2172 6b636f73 635f7465     error!..socket_c
   10500:	6c203a62 65747369 7573206e 73656363     b: listen succes
   10510:	000d2173 6b636f73 635f7465 6c203a62     s!..socket_cb: l
   10520:	65747369 7265206e 21726f72 0000000d     isten error!....
   10530:	6b636f73 635f7465 61203a62 70656363     socket_cb: accep
   10540:	75732074 73656363 000d2173 6b636f73     t success!..sock
   10550:	635f7465 61203a62 70656363 72652074     et_cb: accept er
   10560:	21726f72 0000000d 6b636f73 635f7465     ror!....socket_c
   10570:	63203a62 656e6e6f 73207463 65636375     b: connect succe
   10580:	0d2e7373 00000000 462d6957 6f632069     ss......Wi-Fi co
   10590:	63656e6e 0d646574 00000000 462d6957     nnected.....Wi-F
   105a0:	69642069 6e6f6373 7463656e 000d6465     i disconnected..
   105b0:	462d6957 50492069 20736920 252e7525     Wi-Fi IP is %u.%
   105c0:	75252e75 0d75252e 0000000a 69666977     u.%u.%u.....wifi
   105d0:	3a62635f 4d324d20 4649575f 45525f49     _cb: M2M_WIFI_RE
   105e0:	505f5053 49564f52 4e4f4953 464e495f     SP_PROVISION_INF
   105f0:	000d2e4f 44495353 0d732520 0000000a     O...SSID %s.....
   10600:	44495353 61657220 72662064 66206d6f     SSID read from f
   10610:	6873616c 2520203a 000a0d73 73736150     lash:  %s...Pass
   10620:	64726f77 61657220 72662064 66206d6f     word read from f
   10630:	6873616c 2520203a 000a0d73 69666977     lash:  %s...wifi
   10640:	3a62635f 6f725020 69736976 66206e6f     _cb: Provision f
   10650:	656c6961 000d2e64 0000c230 0000c212     ailed...0.......
   10660:	0000c1cc 0000c0ea 0000c1cc 0000c204     ................
   10670:	0000c1cc 0000c0ea 0000c212 0000c212     ................
   10680:	0000c204 0000c0ea 0000c0e2 0000c0e2     ................
   10690:	0000c0e2 0000c448 0000c890 0000c750     ....H.......P...
   106a0:	0000c750 0000c74c 0000c868 0000c868     P...L...h...h...
   106b0:	0000c85a 0000c74c 0000c868 0000c85a     Z...L...h...Z...
   106c0:	0000c868 0000c74c 0000c870 0000c870     h...L...p...p...
   106d0:	0000c870 0000ca74                       p...t...

000106d8 <_global_impure_ptr>:
   106d8:	20000194                                ... 

000106dc <__sf_fake_stderr>:
	...

000106fc <__sf_fake_stdin>:
	...

0001071c <__sf_fake_stdout>:
	...
   1073c:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   1074c:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   1075c:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   1076c:	37363534 62613938 66656463 20200000              456789abcdef.

00010779 <_ctype_>:
   10779:	20202000 20202020 28282020 20282828     .         ((((( 
   10789:	20202020 20202020 20202020 20202020                     
   10799:	10108820 10101010 10101010 10101010      ...............
   107a9:	04040410 04040404 10040404 10101010     ................
   107b9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   107c9:	01010101 01010101 01010101 10101010     ................
   107d9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   107e9:	02020202 02020202 02020202 10101010     ................
   107f9:	00000020 00000000 00000000 00000000      ...............
	...

0001087c <_init>:
   1087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1087e:	46c0      	nop			; (mov r8, r8)
   10880:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10882:	bc08      	pop	{r3}
   10884:	469e      	mov	lr, r3
   10886:	4770      	bx	lr

00010888 <__init_array_start>:
   10888:	000000dd 	.word	0x000000dd

0001088c <_fini>:
   1088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1088e:	46c0      	nop			; (mov r8, r8)
   10890:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10892:	bc08      	pop	{r3}
   10894:	469e      	mov	lr, r3
   10896:	4770      	bx	lr

00010898 <__fini_array_start>:
   10898:	000000b5 	.word	0x000000b5
